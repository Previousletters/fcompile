// generated by codegen c++ test ops head at 2024-04-22 20:29:12
// global storage define
// mod init
void step1 (HANDLE& device) {
// accel.hbm.layer_norm accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 40960);
  CSB_Write(device, 195, 128681984);
  CSB_Write(device, 196, 64);
  CSB_Write(device, 197, 64);
  CSB_Write(device, 198, 129730560);
  CSB_Write(device, 199, 64);
  CSB_Write(device, 200, 64);
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, 1);
  CSB_Write(device, 204, 1);
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step2 (HANDLE& device) {
// accel.hbm.mvm_bn accel operator node, storage data in cache0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 1);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 1);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, 1);
  CSB_Write(device, 10, 129730560);
  CSB_Write(device, 11, 0);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 5737664);
  CSB_Write(device, 14, 8);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 57344);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 64);
  CSB_Write(device, 30, 64);
  CSB_Write(device, 31, 8192);
  CSB_Write(device, 32, 8192);
  CSB_Write(device, 33, 799);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step3 (HANDLE& device) {
// accel.hbm.pos_emb accel operator node, storage data in cache1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 1216);
  CSB_Write(device, 195, 5737664);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 6917312);
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, 34);
  CSB_Write(device, 204, 8192);
  CSB_Write(device, 205, 0);
  CSB_Write(device, 206, 0);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step4 (HANDLE& device) {
// accel.hbm.mvm_afterTRP accel operator node, storage data in cache2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 7964672);
  CSB_Write(device, 195, 6917312);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 8031424);
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, 20);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, 1);
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 11688);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 2);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterTRP run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step5 (HANDLE& device) {
// accel.hbm.softmax accel operator node, storage data in cache3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 0);
  CSB_Write(device, 195, 8030208);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 9078784);
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 1);
  CSB_Write(device, 202, 32);
  CSB_Write(device, 203, 20);
  CSB_Write(device, 204, 2);
  CSB_Write(device, 205, 1);
  CSB_Write(device, 206, 0);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 8);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.softmax run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step6 (HANDLE& device) {
// accel.hbm.mvm_afterF2W accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 6850560);
  CSB_Write(device, 195, 9080000);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 129730560);
  CSB_Write(device, 199, 5120);
  CSB_Write(device, 200, 1280);
  CSB_Write(device, 201, 1);
  CSB_Write(device, 202, 20);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, 1);
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 4);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 1);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterF2W run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step7 (HANDLE& device) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 1);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 1);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, 1);
  CSB_Write(device, 10, 129730560);
  CSB_Write(device, 11, 304128);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 133236736);
  CSB_Write(device, 14, 7);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 75776);
  CSB_Write(device, 27, 128681984);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 64);
  CSB_Write(device, 30, 64);
  CSB_Write(device, 31, 64);
  CSB_Write(device, 32, 64);
  CSB_Write(device, 33, 1823);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step8 (HANDLE& device) {
// accel.hbm.layer_norm accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 92160);
  CSB_Write(device, 195, 133236736);
  CSB_Write(device, 196, 64);
  CSB_Write(device, 197, 64);
  CSB_Write(device, 198, 128681984);
  CSB_Write(device, 199, 64);
  CSB_Write(device, 200, 64);
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, 1);
  CSB_Write(device, 204, 1);
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step9 (HANDLE& device) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 1);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 1);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, 1);
  CSB_Write(device, 10, 128681984);
  CSB_Write(device, 11, 1478400);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 129730560);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 163328);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 64);
  CSB_Write(device, 30, 64);
  CSB_Write(device, 31, 64);
  CSB_Write(device, 32, 64);
  CSB_Write(device, 33, 799);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step10 (HANDLE& device) {
// accel.hbm.activate accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 32768);
  CSB_Write(device, 195, 129730560);
  CSB_Write(device, 196, 64);
  CSB_Write(device, 197, 64);
  CSB_Write(device, 198, 136742912);
  CSB_Write(device, 199, 64);
  CSB_Write(device, 200, 64);
  CSB_Write(device, 201, 428);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, 1);
  CSB_Write(device, 204, 1);
  CSB_Write(device, 205, 428);
  CSB_Write(device, 206, 13696);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 16);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.activate run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step11 (HANDLE& device) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 1);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 1);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, 1);
  CSB_Write(device, 10, 128681984);
  CSB_Write(device, 11, 574464);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 129730560);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 2);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 108544);
  CSB_Write(device, 27, 136742912);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 64);
  CSB_Write(device, 30, 64);
  CSB_Write(device, 31, 64);
  CSB_Write(device, 32, 64);
  CSB_Write(device, 33, 1823);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step12 (HANDLE& device) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 13696);
  CSB_Write(device, 3, 1);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 1);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 128);
  CSB_Write(device, 8, 128);
  CSB_Write(device, 9, 1);
  CSB_Write(device, 10, 129730560);
  CSB_Write(device, 11, 2382336);
  CSB_Write(device, 12, 56576);
  CSB_Write(device, 13, 128681984);
  CSB_Write(device, 14, 31);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 218112);
  CSB_Write(device, 27, 133236736);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 64);
  CSB_Write(device, 30, 64);
  CSB_Write(device, 31, 64);
  CSB_Write(device, 32, 64);
  CSB_Write(device, 33, 1823);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step13 (HANDLE& device) {
// accel.hbm.layer_norm accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 234496);
  CSB_Write(device, 195, 128681984);
  CSB_Write(device, 196, 64);
  CSB_Write(device, 197, 64);
  CSB_Write(device, 198, 133236736);
  CSB_Write(device, 199, 64);
  CSB_Write(device, 200, 64);
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, 1);
  CSB_Write(device, 204, 1);
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step14 (HANDLE& device) {
// accel.hbm.mvm_bn accel operator node, storage data in cache4 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 1);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 1);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, 1);
  CSB_Write(device, 10, 133236736);
  CSB_Write(device, 11, 3287552);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 10128576);
  CSB_Write(device, 14, 8);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 250880);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 64);
  CSB_Write(device, 30, 64);
  CSB_Write(device, 31, 8192);
  CSB_Write(device, 32, 8192);
  CSB_Write(device, 33, 799);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step15 (HANDLE& device) {
// accel.hbm.pos_emb accel operator node, storage data in cache5 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 1216);
  CSB_Write(device, 195, 10128576);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 11308224);
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, 34);
  CSB_Write(device, 204, 8192);
  CSB_Write(device, 205, 0);
  CSB_Write(device, 206, 0);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step16 (HANDLE& device) {
// accel.hbm.mvm_afterTRP accel operator node, storage data in cache6 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 12355584);
  CSB_Write(device, 195, 11308224);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 12422336);
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, 20);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, 1);
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 11688);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 2);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterTRP run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step17 (HANDLE& device) {
// accel.hbm.softmax accel operator node, storage data in cache7 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 0);
  CSB_Write(device, 195, 12421120);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 13469696);
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 1);
  CSB_Write(device, 202, 32);
  CSB_Write(device, 203, 20);
  CSB_Write(device, 204, 2);
  CSB_Write(device, 205, 1);
  CSB_Write(device, 206, 0);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 8);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.softmax run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step18 (HANDLE& device) {
// accel.hbm.mvm_afterF2W accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 11241472);
  CSB_Write(device, 195, 13470912);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 133236736);
  CSB_Write(device, 199, 5120);
  CSB_Write(device, 200, 1280);
  CSB_Write(device, 201, 1);
  CSB_Write(device, 202, 20);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, 1);
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 4);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 1);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterF2W run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step19 (HANDLE& device) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 1);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 1);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, 1);
  CSB_Write(device, 10, 133236736);
  CSB_Write(device, 11, 3591680);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 129730560);
  CSB_Write(device, 14, 7);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 269312);
  CSB_Write(device, 27, 128681984);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 64);
  CSB_Write(device, 30, 64);
  CSB_Write(device, 31, 64);
  CSB_Write(device, 32, 64);
  CSB_Write(device, 33, 1823);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step20 (HANDLE& device) {
// accel.hbm.layer_norm accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 285696);
  CSB_Write(device, 195, 129730560);
  CSB_Write(device, 196, 64);
  CSB_Write(device, 197, 64);
  CSB_Write(device, 198, 128681984);
  CSB_Write(device, 199, 64);
  CSB_Write(device, 200, 64);
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, 1);
  CSB_Write(device, 204, 1);
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step21 (HANDLE& device) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 1);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 1);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, 1);
  CSB_Write(device, 10, 128681984);
  CSB_Write(device, 11, 4765952);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 136742912);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 356864);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 64);
  CSB_Write(device, 30, 64);
  CSB_Write(device, 31, 64);
  CSB_Write(device, 32, 64);
  CSB_Write(device, 33, 799);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step22 (HANDLE& device) {
// accel.hbm.activate accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 32768);
  CSB_Write(device, 195, 136742912);
  CSB_Write(device, 196, 64);
  CSB_Write(device, 197, 64);
  CSB_Write(device, 198, 133236736);
  CSB_Write(device, 199, 64);
  CSB_Write(device, 200, 64);
  CSB_Write(device, 201, 428);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, 1);
  CSB_Write(device, 204, 1);
  CSB_Write(device, 205, 428);
  CSB_Write(device, 206, 13696);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 16);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.activate run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step23 (HANDLE& device) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 1);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 1);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, 1);
  CSB_Write(device, 10, 128681984);
  CSB_Write(device, 11, 3862016);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 136742912);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 2);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 302080);
  CSB_Write(device, 27, 133236736);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 64);
  CSB_Write(device, 30, 64);
  CSB_Write(device, 31, 64);
  CSB_Write(device, 32, 64);
  CSB_Write(device, 33, 1823);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step24 (HANDLE& device) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 13696);
  CSB_Write(device, 3, 1);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 1);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 128);
  CSB_Write(device, 8, 128);
  CSB_Write(device, 9, 1);
  CSB_Write(device, 10, 136742912);
  CSB_Write(device, 11, 5669888);
  CSB_Write(device, 12, 56576);
  CSB_Write(device, 13, 128681984);
  CSB_Write(device, 14, 31);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 411648);
  CSB_Write(device, 27, 129730560);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 64);
  CSB_Write(device, 30, 64);
  CSB_Write(device, 31, 64);
  CSB_Write(device, 32, 64);
  CSB_Write(device, 33, 1823);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step25 (HANDLE& device) {
// accel.hbm.layer_norm accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 428032);
  CSB_Write(device, 195, 128681984);
  CSB_Write(device, 196, 64);
  CSB_Write(device, 197, 64);
  CSB_Write(device, 198, 129730560);
  CSB_Write(device, 199, 64);
  CSB_Write(device, 200, 64);
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, 1);
  CSB_Write(device, 204, 1);
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step26 (HANDLE& device) {
// accel.hbm.mvm_bn accel operator node, storage data in cache8 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 1);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 1);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, 1);
  CSB_Write(device, 10, 129730560);
  CSB_Write(device, 11, 6575104);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 14519488);
  CSB_Write(device, 14, 8);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 444416);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 64);
  CSB_Write(device, 30, 64);
  CSB_Write(device, 31, 8192);
  CSB_Write(device, 32, 8192);
  CSB_Write(device, 33, 799);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step27 (HANDLE& device) {
// accel.hbm.pos_emb accel operator node, storage data in cache9 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 1216);
  CSB_Write(device, 195, 14519488);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 15699136);
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, 34);
  CSB_Write(device, 204, 8192);
  CSB_Write(device, 205, 0);
  CSB_Write(device, 206, 0);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step28 (HANDLE& device) {
// accel.hbm.mvm_afterTRP accel operator node, storage data in cache10 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 16746496);
  CSB_Write(device, 195, 15699136);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 16813248);
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, 20);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, 1);
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 11688);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 2);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterTRP run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step29 (HANDLE& device) {
// accel.hbm.softmax accel operator node, storage data in cache11 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 0);
  CSB_Write(device, 195, 16812032);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 17860608);
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 1);
  CSB_Write(device, 202, 32);
  CSB_Write(device, 203, 20);
  CSB_Write(device, 204, 2);
  CSB_Write(device, 205, 1);
  CSB_Write(device, 206, 0);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 8);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.softmax run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step30 (HANDLE& device) {
// accel.hbm.mvm_afterF2W accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 15632384);
  CSB_Write(device, 195, 17861824);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 129730560);
  CSB_Write(device, 199, 5120);
  CSB_Write(device, 200, 1280);
  CSB_Write(device, 201, 1);
  CSB_Write(device, 202, 20);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, 1);
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 4);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 1);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterF2W run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step31 (HANDLE& device) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 1);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 1);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, 1);
  CSB_Write(device, 10, 129730560);
  CSB_Write(device, 11, 6879232);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 136742912);
  CSB_Write(device, 14, 7);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 462848);
  CSB_Write(device, 27, 128681984);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 64);
  CSB_Write(device, 30, 64);
  CSB_Write(device, 31, 64);
  CSB_Write(device, 32, 64);
  CSB_Write(device, 33, 1823);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step32 (HANDLE& device) {
// accel.hbm.layer_norm accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 479232);
  CSB_Write(device, 195, 136742912);
  CSB_Write(device, 196, 64);
  CSB_Write(device, 197, 64);
  CSB_Write(device, 198, 128681984);
  CSB_Write(device, 199, 64);
  CSB_Write(device, 200, 64);
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, 1);
  CSB_Write(device, 204, 1);
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step33 (HANDLE& device) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 1);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 1);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, 1);
  CSB_Write(device, 10, 128681984);
  CSB_Write(device, 11, 8053504);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 129730560);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 550400);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 64);
  CSB_Write(device, 30, 64);
  CSB_Write(device, 31, 64);
  CSB_Write(device, 32, 64);
  CSB_Write(device, 33, 799);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step34 (HANDLE& device) {
// accel.hbm.activate accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 32768);
  CSB_Write(device, 195, 129730560);
  CSB_Write(device, 196, 64);
  CSB_Write(device, 197, 64);
  CSB_Write(device, 198, 133236736);
  CSB_Write(device, 199, 64);
  CSB_Write(device, 200, 64);
  CSB_Write(device, 201, 428);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, 1);
  CSB_Write(device, 204, 1);
  CSB_Write(device, 205, 428);
  CSB_Write(device, 206, 13696);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 16);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.activate run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step35 (HANDLE& device) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 1);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 1);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, 1);
  CSB_Write(device, 10, 128681984);
  CSB_Write(device, 11, 7149568);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 129730560);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 2);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 495616);
  CSB_Write(device, 27, 133236736);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 64);
  CSB_Write(device, 30, 64);
  CSB_Write(device, 31, 64);
  CSB_Write(device, 32, 64);
  CSB_Write(device, 33, 1823);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step36 (HANDLE& device) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 13696);
  CSB_Write(device, 3, 1);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 1);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 128);
  CSB_Write(device, 8, 128);
  CSB_Write(device, 9, 1);
  CSB_Write(device, 10, 129730560);
  CSB_Write(device, 11, 8957440);
  CSB_Write(device, 12, 56576);
  CSB_Write(device, 13, 128681984);
  CSB_Write(device, 14, 31);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 605184);
  CSB_Write(device, 27, 136742912);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 64);
  CSB_Write(device, 30, 64);
  CSB_Write(device, 31, 64);
  CSB_Write(device, 32, 64);
  CSB_Write(device, 33, 1823);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step37 (HANDLE& device) {
// accel.hbm.layer_norm accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 621568);
  CSB_Write(device, 195, 128681984);
  CSB_Write(device, 196, 64);
  CSB_Write(device, 197, 64);
  CSB_Write(device, 198, 136742912);
  CSB_Write(device, 199, 64);
  CSB_Write(device, 200, 64);
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, 1);
  CSB_Write(device, 204, 1);
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step38 (HANDLE& device) {
// accel.hbm.mvm_bn accel operator node, storage data in cache12 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 1);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 1);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, 1);
  CSB_Write(device, 10, 136742912);
  CSB_Write(device, 11, 9862656);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 18910400);
  CSB_Write(device, 14, 8);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 637952);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 64);
  CSB_Write(device, 30, 64);
  CSB_Write(device, 31, 8192);
  CSB_Write(device, 32, 8192);
  CSB_Write(device, 33, 799);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step39 (HANDLE& device) {
// accel.hbm.pos_emb accel operator node, storage data in cache13 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 1216);
  CSB_Write(device, 195, 18910400);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 20090048);
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, 34);
  CSB_Write(device, 204, 8192);
  CSB_Write(device, 205, 0);
  CSB_Write(device, 206, 0);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step40 (HANDLE& device) {
// accel.hbm.mvm_afterTRP accel operator node, storage data in cache14 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 21137408);
  CSB_Write(device, 195, 20090048);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 21204160);
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, 20);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, 1);
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 11688);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 2);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterTRP run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step41 (HANDLE& device) {
// accel.hbm.softmax accel operator node, storage data in cache15 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 0);
  CSB_Write(device, 195, 21202944);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 22251520);
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 1);
  CSB_Write(device, 202, 32);
  CSB_Write(device, 203, 20);
  CSB_Write(device, 204, 2);
  CSB_Write(device, 205, 1);
  CSB_Write(device, 206, 0);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 8);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.softmax run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step42 (HANDLE& device) {
// accel.hbm.mvm_afterF2W accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 20023296);
  CSB_Write(device, 195, 22252736);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 136742912);
  CSB_Write(device, 199, 5120);
  CSB_Write(device, 200, 1280);
  CSB_Write(device, 201, 1);
  CSB_Write(device, 202, 20);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, 1);
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 4);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 1);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterF2W run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step43 (HANDLE& device) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 1);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 1);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, 1);
  CSB_Write(device, 10, 136742912);
  CSB_Write(device, 11, 10166784);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 129730560);
  CSB_Write(device, 14, 7);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 656384);
  CSB_Write(device, 27, 128681984);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 64);
  CSB_Write(device, 30, 64);
  CSB_Write(device, 31, 64);
  CSB_Write(device, 32, 64);
  CSB_Write(device, 33, 1823);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step44 (HANDLE& device) {
// accel.hbm.layer_norm accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 672768);
  CSB_Write(device, 195, 129730560);
  CSB_Write(device, 196, 64);
  CSB_Write(device, 197, 64);
  CSB_Write(device, 198, 128681984);
  CSB_Write(device, 199, 64);
  CSB_Write(device, 200, 64);
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, 1);
  CSB_Write(device, 204, 1);
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step45 (HANDLE& device) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 1);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 1);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, 1);
  CSB_Write(device, 10, 128681984);
  CSB_Write(device, 11, 11341056);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 136742912);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 743936);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 64);
  CSB_Write(device, 30, 64);
  CSB_Write(device, 31, 64);
  CSB_Write(device, 32, 64);
  CSB_Write(device, 33, 799);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step46 (HANDLE& device) {
// accel.hbm.activate accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 32768);
  CSB_Write(device, 195, 136742912);
  CSB_Write(device, 196, 64);
  CSB_Write(device, 197, 64);
  CSB_Write(device, 198, 133236736);
  CSB_Write(device, 199, 64);
  CSB_Write(device, 200, 64);
  CSB_Write(device, 201, 428);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, 1);
  CSB_Write(device, 204, 1);
  CSB_Write(device, 205, 428);
  CSB_Write(device, 206, 13696);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 16);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.activate run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step47 (HANDLE& device) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 1);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 1);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, 1);
  CSB_Write(device, 10, 128681984);
  CSB_Write(device, 11, 10437120);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 136742912);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 2);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 689152);
  CSB_Write(device, 27, 133236736);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 64);
  CSB_Write(device, 30, 64);
  CSB_Write(device, 31, 64);
  CSB_Write(device, 32, 64);
  CSB_Write(device, 33, 1823);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step48 (HANDLE& device) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 13696);
  CSB_Write(device, 3, 1);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 1);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 128);
  CSB_Write(device, 8, 128);
  CSB_Write(device, 9, 1);
  CSB_Write(device, 10, 136742912);
  CSB_Write(device, 11, 12244992);
  CSB_Write(device, 12, 56576);
  CSB_Write(device, 13, 128681984);
  CSB_Write(device, 14, 31);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 798720);
  CSB_Write(device, 27, 129730560);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 64);
  CSB_Write(device, 30, 64);
  CSB_Write(device, 31, 64);
  CSB_Write(device, 32, 64);
  CSB_Write(device, 33, 1823);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step49 (HANDLE& device) {
// accel.hbm.layer_norm accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 815104);
  CSB_Write(device, 195, 128681984);
  CSB_Write(device, 196, 64);
  CSB_Write(device, 197, 64);
  CSB_Write(device, 198, 129730560);
  CSB_Write(device, 199, 64);
  CSB_Write(device, 200, 64);
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, 1);
  CSB_Write(device, 204, 1);
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step50 (HANDLE& device) {
// accel.hbm.mvm_bn accel operator node, storage data in cache16 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 1);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 1);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, 1);
  CSB_Write(device, 10, 129730560);
  CSB_Write(device, 11, 13150208);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 23301312);
  CSB_Write(device, 14, 8);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 831488);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 64);
  CSB_Write(device, 30, 64);
  CSB_Write(device, 31, 8192);
  CSB_Write(device, 32, 8192);
  CSB_Write(device, 33, 799);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step51 (HANDLE& device) {
// accel.hbm.pos_emb accel operator node, storage data in cache17 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 1216);
  CSB_Write(device, 195, 23301312);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 24480960);
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, 34);
  CSB_Write(device, 204, 8192);
  CSB_Write(device, 205, 0);
  CSB_Write(device, 206, 0);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step52 (HANDLE& device) {
// accel.hbm.mvm_afterTRP accel operator node, storage data in cache18 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 25528320);
  CSB_Write(device, 195, 24480960);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 25595072);
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, 20);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, 1);
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 11688);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 2);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterTRP run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step53 (HANDLE& device) {
// accel.hbm.softmax accel operator node, storage data in cache19 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 0);
  CSB_Write(device, 195, 25593856);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 26642432);
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 1);
  CSB_Write(device, 202, 32);
  CSB_Write(device, 203, 20);
  CSB_Write(device, 204, 2);
  CSB_Write(device, 205, 1);
  CSB_Write(device, 206, 0);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 8);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.softmax run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step54 (HANDLE& device) {
// accel.hbm.mvm_afterF2W accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 24414208);
  CSB_Write(device, 195, 26643648);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 129730560);
  CSB_Write(device, 199, 5120);
  CSB_Write(device, 200, 1280);
  CSB_Write(device, 201, 1);
  CSB_Write(device, 202, 20);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, 1);
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 4);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 1);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterF2W run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step55 (HANDLE& device) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 1);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 1);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, 1);
  CSB_Write(device, 10, 129730560);
  CSB_Write(device, 11, 13454336);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 136742912);
  CSB_Write(device, 14, 7);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 849920);
  CSB_Write(device, 27, 128681984);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 64);
  CSB_Write(device, 30, 64);
  CSB_Write(device, 31, 64);
  CSB_Write(device, 32, 64);
  CSB_Write(device, 33, 1823);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step56 (HANDLE& device) {
// accel.hbm.layer_norm accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 866304);
  CSB_Write(device, 195, 136742912);
  CSB_Write(device, 196, 64);
  CSB_Write(device, 197, 64);
  CSB_Write(device, 198, 128681984);
  CSB_Write(device, 199, 64);
  CSB_Write(device, 200, 64);
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, 1);
  CSB_Write(device, 204, 1);
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step57 (HANDLE& device) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 1);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 1);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, 1);
  CSB_Write(device, 10, 128681984);
  CSB_Write(device, 11, 14628608);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 129730560);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 937472);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 64);
  CSB_Write(device, 30, 64);
  CSB_Write(device, 31, 64);
  CSB_Write(device, 32, 64);
  CSB_Write(device, 33, 799);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step58 (HANDLE& device) {
// accel.hbm.activate accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 32768);
  CSB_Write(device, 195, 129730560);
  CSB_Write(device, 196, 64);
  CSB_Write(device, 197, 64);
  CSB_Write(device, 198, 133236736);
  CSB_Write(device, 199, 64);
  CSB_Write(device, 200, 64);
  CSB_Write(device, 201, 428);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, 1);
  CSB_Write(device, 204, 1);
  CSB_Write(device, 205, 428);
  CSB_Write(device, 206, 13696);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 16);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.activate run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step59 (HANDLE& device) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 1);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 1);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, 1);
  CSB_Write(device, 10, 128681984);
  CSB_Write(device, 11, 13724672);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 129730560);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 2);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 882688);
  CSB_Write(device, 27, 133236736);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 64);
  CSB_Write(device, 30, 64);
  CSB_Write(device, 31, 64);
  CSB_Write(device, 32, 64);
  CSB_Write(device, 33, 1823);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step60 (HANDLE& device) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 13696);
  CSB_Write(device, 3, 1);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 1);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 128);
  CSB_Write(device, 8, 128);
  CSB_Write(device, 9, 1);
  CSB_Write(device, 10, 129730560);
  CSB_Write(device, 11, 15532544);
  CSB_Write(device, 12, 56576);
  CSB_Write(device, 13, 128681984);
  CSB_Write(device, 14, 31);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 992256);
  CSB_Write(device, 27, 136742912);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 64);
  CSB_Write(device, 30, 64);
  CSB_Write(device, 31, 64);
  CSB_Write(device, 32, 64);
  CSB_Write(device, 33, 1823);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step61 (HANDLE& device) {
// accel.hbm.layer_norm accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 1008640);
  CSB_Write(device, 195, 128681984);
  CSB_Write(device, 196, 64);
  CSB_Write(device, 197, 64);
  CSB_Write(device, 198, 136742912);
  CSB_Write(device, 199, 64);
  CSB_Write(device, 200, 64);
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, 1);
  CSB_Write(device, 204, 1);
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step62 (HANDLE& device) {
// accel.hbm.mvm_bn accel operator node, storage data in cache20 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 1);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 1);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, 1);
  CSB_Write(device, 10, 136742912);
  CSB_Write(device, 11, 16437760);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 27692224);
  CSB_Write(device, 14, 8);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 1025024);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 64);
  CSB_Write(device, 30, 64);
  CSB_Write(device, 31, 8192);
  CSB_Write(device, 32, 8192);
  CSB_Write(device, 33, 799);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step63 (HANDLE& device) {
// accel.hbm.pos_emb accel operator node, storage data in cache21 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 1216);
  CSB_Write(device, 195, 27692224);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 28871872);
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, 34);
  CSB_Write(device, 204, 8192);
  CSB_Write(device, 205, 0);
  CSB_Write(device, 206, 0);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step64 (HANDLE& device) {
// accel.hbm.mvm_afterTRP accel operator node, storage data in cache22 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 29919232);
  CSB_Write(device, 195, 28871872);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 29985984);
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, 20);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, 1);
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 11688);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 2);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterTRP run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step65 (HANDLE& device) {
// accel.hbm.softmax accel operator node, storage data in cache23 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 0);
  CSB_Write(device, 195, 29984768);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 31033344);
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 1);
  CSB_Write(device, 202, 32);
  CSB_Write(device, 203, 20);
  CSB_Write(device, 204, 2);
  CSB_Write(device, 205, 1);
  CSB_Write(device, 206, 0);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 8);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.softmax run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step66 (HANDLE& device) {
// accel.hbm.mvm_afterF2W accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 28805120);
  CSB_Write(device, 195, 31034560);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 136742912);
  CSB_Write(device, 199, 5120);
  CSB_Write(device, 200, 1280);
  CSB_Write(device, 201, 1);
  CSB_Write(device, 202, 20);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, 1);
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 4);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 1);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterF2W run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step67 (HANDLE& device) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 1);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 1);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, 1);
  CSB_Write(device, 10, 136742912);
  CSB_Write(device, 11, 16741888);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 129730560);
  CSB_Write(device, 14, 7);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 1043456);
  CSB_Write(device, 27, 128681984);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 64);
  CSB_Write(device, 30, 64);
  CSB_Write(device, 31, 64);
  CSB_Write(device, 32, 64);
  CSB_Write(device, 33, 1823);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step68 (HANDLE& device) {
// accel.hbm.layer_norm accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 1059840);
  CSB_Write(device, 195, 129730560);
  CSB_Write(device, 196, 64);
  CSB_Write(device, 197, 64);
  CSB_Write(device, 198, 128681984);
  CSB_Write(device, 199, 64);
  CSB_Write(device, 200, 64);
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, 1);
  CSB_Write(device, 204, 1);
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step69 (HANDLE& device) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 1);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 1);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, 1);
  CSB_Write(device, 10, 128681984);
  CSB_Write(device, 11, 17916160);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 136742912);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 1131008);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 64);
  CSB_Write(device, 30, 64);
  CSB_Write(device, 31, 64);
  CSB_Write(device, 32, 64);
  CSB_Write(device, 33, 799);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step70 (HANDLE& device) {
// accel.hbm.activate accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 32768);
  CSB_Write(device, 195, 136742912);
  CSB_Write(device, 196, 64);
  CSB_Write(device, 197, 64);
  CSB_Write(device, 198, 133236736);
  CSB_Write(device, 199, 64);
  CSB_Write(device, 200, 64);
  CSB_Write(device, 201, 428);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, 1);
  CSB_Write(device, 204, 1);
  CSB_Write(device, 205, 428);
  CSB_Write(device, 206, 13696);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 16);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.activate run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step71 (HANDLE& device) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 1);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 1);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, 1);
  CSB_Write(device, 10, 128681984);
  CSB_Write(device, 11, 17012224);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 136742912);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 2);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 1076224);
  CSB_Write(device, 27, 133236736);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 64);
  CSB_Write(device, 30, 64);
  CSB_Write(device, 31, 64);
  CSB_Write(device, 32, 64);
  CSB_Write(device, 33, 1823);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step72 (HANDLE& device) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 13696);
  CSB_Write(device, 3, 1);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 1);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 128);
  CSB_Write(device, 8, 128);
  CSB_Write(device, 9, 1);
  CSB_Write(device, 10, 136742912);
  CSB_Write(device, 11, 18820096);
  CSB_Write(device, 12, 56576);
  CSB_Write(device, 13, 128681984);
  CSB_Write(device, 14, 31);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 1185792);
  CSB_Write(device, 27, 129730560);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 64);
  CSB_Write(device, 30, 64);
  CSB_Write(device, 31, 64);
  CSB_Write(device, 32, 64);
  CSB_Write(device, 33, 1823);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step73 (HANDLE& device) {
// accel.hbm.layer_norm accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 1202176);
  CSB_Write(device, 195, 128681984);
  CSB_Write(device, 196, 64);
  CSB_Write(device, 197, 64);
  CSB_Write(device, 198, 129730560);
  CSB_Write(device, 199, 64);
  CSB_Write(device, 200, 64);
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, 1);
  CSB_Write(device, 204, 1);
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step74 (HANDLE& device) {
// accel.hbm.mvm_bn accel operator node, storage data in cache24 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 1);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 1);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, 1);
  CSB_Write(device, 10, 129730560);
  CSB_Write(device, 11, 19725312);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 32083136);
  CSB_Write(device, 14, 8);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 1218560);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 64);
  CSB_Write(device, 30, 64);
  CSB_Write(device, 31, 8192);
  CSB_Write(device, 32, 8192);
  CSB_Write(device, 33, 799);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step75 (HANDLE& device) {
// accel.hbm.pos_emb accel operator node, storage data in cache25 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 1216);
  CSB_Write(device, 195, 32083136);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 33262784);
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, 34);
  CSB_Write(device, 204, 8192);
  CSB_Write(device, 205, 0);
  CSB_Write(device, 206, 0);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step76 (HANDLE& device) {
// accel.hbm.mvm_afterTRP accel operator node, storage data in cache26 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 34310144);
  CSB_Write(device, 195, 33262784);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 34376896);
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, 20);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, 1);
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 11688);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 2);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterTRP run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step77 (HANDLE& device) {
// accel.hbm.softmax accel operator node, storage data in cache27 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 0);
  CSB_Write(device, 195, 34375680);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 35424256);
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 1);
  CSB_Write(device, 202, 32);
  CSB_Write(device, 203, 20);
  CSB_Write(device, 204, 2);
  CSB_Write(device, 205, 1);
  CSB_Write(device, 206, 0);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 8);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.softmax run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step78 (HANDLE& device) {
// accel.hbm.mvm_afterF2W accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 33196032);
  CSB_Write(device, 195, 35425472);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 129730560);
  CSB_Write(device, 199, 5120);
  CSB_Write(device, 200, 1280);
  CSB_Write(device, 201, 1);
  CSB_Write(device, 202, 20);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, 1);
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 4);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 1);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterF2W run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step79 (HANDLE& device) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 1);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 1);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, 1);
  CSB_Write(device, 10, 129730560);
  CSB_Write(device, 11, 20029440);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 136742912);
  CSB_Write(device, 14, 7);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 1236992);
  CSB_Write(device, 27, 128681984);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 64);
  CSB_Write(device, 30, 64);
  CSB_Write(device, 31, 64);
  CSB_Write(device, 32, 64);
  CSB_Write(device, 33, 1823);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step80 (HANDLE& device) {
// accel.hbm.layer_norm accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 1253376);
  CSB_Write(device, 195, 136742912);
  CSB_Write(device, 196, 64);
  CSB_Write(device, 197, 64);
  CSB_Write(device, 198, 128681984);
  CSB_Write(device, 199, 64);
  CSB_Write(device, 200, 64);
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, 1);
  CSB_Write(device, 204, 1);
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step81 (HANDLE& device) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 1);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 1);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, 1);
  CSB_Write(device, 10, 128681984);
  CSB_Write(device, 11, 21203712);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 129730560);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 1324544);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 64);
  CSB_Write(device, 30, 64);
  CSB_Write(device, 31, 64);
  CSB_Write(device, 32, 64);
  CSB_Write(device, 33, 799);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step82 (HANDLE& device) {
// accel.hbm.activate accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 32768);
  CSB_Write(device, 195, 129730560);
  CSB_Write(device, 196, 64);
  CSB_Write(device, 197, 64);
  CSB_Write(device, 198, 133236736);
  CSB_Write(device, 199, 64);
  CSB_Write(device, 200, 64);
  CSB_Write(device, 201, 428);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, 1);
  CSB_Write(device, 204, 1);
  CSB_Write(device, 205, 428);
  CSB_Write(device, 206, 13696);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 16);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.activate run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step83 (HANDLE& device) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 1);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 1);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, 1);
  CSB_Write(device, 10, 128681984);
  CSB_Write(device, 11, 20299776);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 129730560);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 2);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 1269760);
  CSB_Write(device, 27, 133236736);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 64);
  CSB_Write(device, 30, 64);
  CSB_Write(device, 31, 64);
  CSB_Write(device, 32, 64);
  CSB_Write(device, 33, 1823);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step84 (HANDLE& device) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 13696);
  CSB_Write(device, 3, 1);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 1);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 128);
  CSB_Write(device, 8, 128);
  CSB_Write(device, 9, 1);
  CSB_Write(device, 10, 129730560);
  CSB_Write(device, 11, 22107648);
  CSB_Write(device, 12, 56576);
  CSB_Write(device, 13, 128681984);
  CSB_Write(device, 14, 31);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 1379328);
  CSB_Write(device, 27, 136742912);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 64);
  CSB_Write(device, 30, 64);
  CSB_Write(device, 31, 64);
  CSB_Write(device, 32, 64);
  CSB_Write(device, 33, 1823);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step85 (HANDLE& device) {
// accel.hbm.layer_norm accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 1395712);
  CSB_Write(device, 195, 128681984);
  CSB_Write(device, 196, 64);
  CSB_Write(device, 197, 64);
  CSB_Write(device, 198, 136742912);
  CSB_Write(device, 199, 64);
  CSB_Write(device, 200, 64);
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, 1);
  CSB_Write(device, 204, 1);
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step86 (HANDLE& device) {
// accel.hbm.mvm_bn accel operator node, storage data in cache28 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 1);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 1);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, 1);
  CSB_Write(device, 10, 136742912);
  CSB_Write(device, 11, 23012864);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 36474048);
  CSB_Write(device, 14, 8);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 1412096);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 64);
  CSB_Write(device, 30, 64);
  CSB_Write(device, 31, 8192);
  CSB_Write(device, 32, 8192);
  CSB_Write(device, 33, 799);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step87 (HANDLE& device) {
// accel.hbm.pos_emb accel operator node, storage data in cache29 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 1216);
  CSB_Write(device, 195, 36474048);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 37653696);
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, 34);
  CSB_Write(device, 204, 8192);
  CSB_Write(device, 205, 0);
  CSB_Write(device, 206, 0);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step88 (HANDLE& device) {
// accel.hbm.mvm_afterTRP accel operator node, storage data in cache30 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 38701056);
  CSB_Write(device, 195, 37653696);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 38767808);
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, 20);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, 1);
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 11688);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 2);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterTRP run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step89 (HANDLE& device) {
// accel.hbm.softmax accel operator node, storage data in cache31 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 0);
  CSB_Write(device, 195, 38766592);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 39815168);
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 1);
  CSB_Write(device, 202, 32);
  CSB_Write(device, 203, 20);
  CSB_Write(device, 204, 2);
  CSB_Write(device, 205, 1);
  CSB_Write(device, 206, 0);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 8);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.softmax run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step90 (HANDLE& device) {
// accel.hbm.mvm_afterF2W accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 37586944);
  CSB_Write(device, 195, 39816384);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 136742912);
  CSB_Write(device, 199, 5120);
  CSB_Write(device, 200, 1280);
  CSB_Write(device, 201, 1);
  CSB_Write(device, 202, 20);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, 1);
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 4);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 1);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterF2W run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step91 (HANDLE& device) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 1);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 1);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, 1);
  CSB_Write(device, 10, 136742912);
  CSB_Write(device, 11, 23316992);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 129730560);
  CSB_Write(device, 14, 7);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 1430528);
  CSB_Write(device, 27, 128681984);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 64);
  CSB_Write(device, 30, 64);
  CSB_Write(device, 31, 64);
  CSB_Write(device, 32, 64);
  CSB_Write(device, 33, 1823);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step92 (HANDLE& device) {
// accel.hbm.layer_norm accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 1446912);
  CSB_Write(device, 195, 129730560);
  CSB_Write(device, 196, 64);
  CSB_Write(device, 197, 64);
  CSB_Write(device, 198, 128681984);
  CSB_Write(device, 199, 64);
  CSB_Write(device, 200, 64);
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, 1);
  CSB_Write(device, 204, 1);
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step93 (HANDLE& device) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 1);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 1);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, 1);
  CSB_Write(device, 10, 128681984);
  CSB_Write(device, 11, 24491264);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 136742912);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 1518080);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 64);
  CSB_Write(device, 30, 64);
  CSB_Write(device, 31, 64);
  CSB_Write(device, 32, 64);
  CSB_Write(device, 33, 799);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step94 (HANDLE& device) {
// accel.hbm.activate accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 32768);
  CSB_Write(device, 195, 136742912);
  CSB_Write(device, 196, 64);
  CSB_Write(device, 197, 64);
  CSB_Write(device, 198, 133236736);
  CSB_Write(device, 199, 64);
  CSB_Write(device, 200, 64);
  CSB_Write(device, 201, 428);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, 1);
  CSB_Write(device, 204, 1);
  CSB_Write(device, 205, 428);
  CSB_Write(device, 206, 13696);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 16);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.activate run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step95 (HANDLE& device) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 1);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 1);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, 1);
  CSB_Write(device, 10, 128681984);
  CSB_Write(device, 11, 23587328);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 136742912);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 2);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 1463296);
  CSB_Write(device, 27, 133236736);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 64);
  CSB_Write(device, 30, 64);
  CSB_Write(device, 31, 64);
  CSB_Write(device, 32, 64);
  CSB_Write(device, 33, 1823);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step96 (HANDLE& device) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 13696);
  CSB_Write(device, 3, 1);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 1);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 128);
  CSB_Write(device, 8, 128);
  CSB_Write(device, 9, 1);
  CSB_Write(device, 10, 136742912);
  CSB_Write(device, 11, 25395200);
  CSB_Write(device, 12, 56576);
  CSB_Write(device, 13, 128681984);
  CSB_Write(device, 14, 31);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 1572864);
  CSB_Write(device, 27, 129730560);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 64);
  CSB_Write(device, 30, 64);
  CSB_Write(device, 31, 64);
  CSB_Write(device, 32, 64);
  CSB_Write(device, 33, 1823);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step97 (HANDLE& device) {
// accel.hbm.layer_norm accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 1589248);
  CSB_Write(device, 195, 128681984);
  CSB_Write(device, 196, 64);
  CSB_Write(device, 197, 64);
  CSB_Write(device, 198, 129730560);
  CSB_Write(device, 199, 64);
  CSB_Write(device, 200, 64);
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, 1);
  CSB_Write(device, 204, 1);
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step98 (HANDLE& device) {
// accel.hbm.mvm_bn accel operator node, storage data in cache32 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 1);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 1);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, 1);
  CSB_Write(device, 10, 129730560);
  CSB_Write(device, 11, 26300416);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 40864960);
  CSB_Write(device, 14, 8);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 1605632);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 64);
  CSB_Write(device, 30, 64);
  CSB_Write(device, 31, 8192);
  CSB_Write(device, 32, 8192);
  CSB_Write(device, 33, 799);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step99 (HANDLE& device) {
// accel.hbm.pos_emb accel operator node, storage data in cache33 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 1216);
  CSB_Write(device, 195, 40864960);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 42044608);
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, 34);
  CSB_Write(device, 204, 8192);
  CSB_Write(device, 205, 0);
  CSB_Write(device, 206, 0);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step100 (HANDLE& device) {
// accel.hbm.mvm_afterTRP accel operator node, storage data in cache34 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 43091968);
  CSB_Write(device, 195, 42044608);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 43158720);
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, 20);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, 1);
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 11688);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 2);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterTRP run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step101 (HANDLE& device) {
// accel.hbm.softmax accel operator node, storage data in cache35 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 0);
  CSB_Write(device, 195, 43157504);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 44206080);
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 1);
  CSB_Write(device, 202, 32);
  CSB_Write(device, 203, 20);
  CSB_Write(device, 204, 2);
  CSB_Write(device, 205, 1);
  CSB_Write(device, 206, 0);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 8);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.softmax run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step102 (HANDLE& device) {
// accel.hbm.mvm_afterF2W accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 41977856);
  CSB_Write(device, 195, 44207296);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 129730560);
  CSB_Write(device, 199, 5120);
  CSB_Write(device, 200, 1280);
  CSB_Write(device, 201, 1);
  CSB_Write(device, 202, 20);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, 1);
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 4);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 1);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterF2W run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step103 (HANDLE& device) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 1);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 1);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, 1);
  CSB_Write(device, 10, 129730560);
  CSB_Write(device, 11, 26604544);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 136742912);
  CSB_Write(device, 14, 7);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 1624064);
  CSB_Write(device, 27, 128681984);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 64);
  CSB_Write(device, 30, 64);
  CSB_Write(device, 31, 64);
  CSB_Write(device, 32, 64);
  CSB_Write(device, 33, 1823);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step104 (HANDLE& device) {
// accel.hbm.layer_norm accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 1640448);
  CSB_Write(device, 195, 136742912);
  CSB_Write(device, 196, 64);
  CSB_Write(device, 197, 64);
  CSB_Write(device, 198, 128681984);
  CSB_Write(device, 199, 64);
  CSB_Write(device, 200, 64);
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, 1);
  CSB_Write(device, 204, 1);
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step105 (HANDLE& device) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 1);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 1);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, 1);
  CSB_Write(device, 10, 128681984);
  CSB_Write(device, 11, 27778816);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 129730560);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 1711616);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 64);
  CSB_Write(device, 30, 64);
  CSB_Write(device, 31, 64);
  CSB_Write(device, 32, 64);
  CSB_Write(device, 33, 799);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step106 (HANDLE& device) {
// accel.hbm.activate accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 32768);
  CSB_Write(device, 195, 129730560);
  CSB_Write(device, 196, 64);
  CSB_Write(device, 197, 64);
  CSB_Write(device, 198, 133236736);
  CSB_Write(device, 199, 64);
  CSB_Write(device, 200, 64);
  CSB_Write(device, 201, 428);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, 1);
  CSB_Write(device, 204, 1);
  CSB_Write(device, 205, 428);
  CSB_Write(device, 206, 13696);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 16);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.activate run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step107 (HANDLE& device) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 1);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 1);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, 1);
  CSB_Write(device, 10, 128681984);
  CSB_Write(device, 11, 26874880);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 129730560);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 2);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 1656832);
  CSB_Write(device, 27, 133236736);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 64);
  CSB_Write(device, 30, 64);
  CSB_Write(device, 31, 64);
  CSB_Write(device, 32, 64);
  CSB_Write(device, 33, 1823);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step108 (HANDLE& device) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 13696);
  CSB_Write(device, 3, 1);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 1);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 128);
  CSB_Write(device, 8, 128);
  CSB_Write(device, 9, 1);
  CSB_Write(device, 10, 129730560);
  CSB_Write(device, 11, 28682752);
  CSB_Write(device, 12, 56576);
  CSB_Write(device, 13, 128681984);
  CSB_Write(device, 14, 31);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 1766400);
  CSB_Write(device, 27, 136742912);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 64);
  CSB_Write(device, 30, 64);
  CSB_Write(device, 31, 64);
  CSB_Write(device, 32, 64);
  CSB_Write(device, 33, 1823);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step109 (HANDLE& device) {
// accel.hbm.layer_norm accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 1782784);
  CSB_Write(device, 195, 128681984);
  CSB_Write(device, 196, 64);
  CSB_Write(device, 197, 64);
  CSB_Write(device, 198, 136742912);
  CSB_Write(device, 199, 64);
  CSB_Write(device, 200, 64);
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, 1);
  CSB_Write(device, 204, 1);
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step110 (HANDLE& device) {
// accel.hbm.mvm_bn accel operator node, storage data in cache36 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 1);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 1);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, 1);
  CSB_Write(device, 10, 136742912);
  CSB_Write(device, 11, 29587968);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 45255872);
  CSB_Write(device, 14, 8);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 1799168);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 64);
  CSB_Write(device, 30, 64);
  CSB_Write(device, 31, 8192);
  CSB_Write(device, 32, 8192);
  CSB_Write(device, 33, 799);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step111 (HANDLE& device) {
// accel.hbm.pos_emb accel operator node, storage data in cache37 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 1216);
  CSB_Write(device, 195, 45255872);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 46435520);
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, 34);
  CSB_Write(device, 204, 8192);
  CSB_Write(device, 205, 0);
  CSB_Write(device, 206, 0);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step112 (HANDLE& device) {
// accel.hbm.mvm_afterTRP accel operator node, storage data in cache38 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 47482880);
  CSB_Write(device, 195, 46435520);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 47549632);
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, 20);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, 1);
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 11688);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 2);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterTRP run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step113 (HANDLE& device) {
// accel.hbm.softmax accel operator node, storage data in cache39 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 0);
  CSB_Write(device, 195, 47548416);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 48596992);
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 1);
  CSB_Write(device, 202, 32);
  CSB_Write(device, 203, 20);
  CSB_Write(device, 204, 2);
  CSB_Write(device, 205, 1);
  CSB_Write(device, 206, 0);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 8);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.softmax run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step114 (HANDLE& device) {
// accel.hbm.mvm_afterF2W accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 46368768);
  CSB_Write(device, 195, 48598208);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 136742912);
  CSB_Write(device, 199, 5120);
  CSB_Write(device, 200, 1280);
  CSB_Write(device, 201, 1);
  CSB_Write(device, 202, 20);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, 1);
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 4);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 1);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterF2W run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step115 (HANDLE& device) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 1);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 1);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, 1);
  CSB_Write(device, 10, 136742912);
  CSB_Write(device, 11, 29892096);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 129730560);
  CSB_Write(device, 14, 7);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 1817600);
  CSB_Write(device, 27, 128681984);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 64);
  CSB_Write(device, 30, 64);
  CSB_Write(device, 31, 64);
  CSB_Write(device, 32, 64);
  CSB_Write(device, 33, 1823);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step116 (HANDLE& device) {
// accel.hbm.layer_norm accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 1833984);
  CSB_Write(device, 195, 129730560);
  CSB_Write(device, 196, 64);
  CSB_Write(device, 197, 64);
  CSB_Write(device, 198, 128681984);
  CSB_Write(device, 199, 64);
  CSB_Write(device, 200, 64);
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, 1);
  CSB_Write(device, 204, 1);
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step117 (HANDLE& device) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 1);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 1);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, 1);
  CSB_Write(device, 10, 128681984);
  CSB_Write(device, 11, 31066368);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 136742912);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 1905152);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 64);
  CSB_Write(device, 30, 64);
  CSB_Write(device, 31, 64);
  CSB_Write(device, 32, 64);
  CSB_Write(device, 33, 799);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step118 (HANDLE& device) {
// accel.hbm.activate accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 32768);
  CSB_Write(device, 195, 136742912);
  CSB_Write(device, 196, 64);
  CSB_Write(device, 197, 64);
  CSB_Write(device, 198, 133236736);
  CSB_Write(device, 199, 64);
  CSB_Write(device, 200, 64);
  CSB_Write(device, 201, 428);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, 1);
  CSB_Write(device, 204, 1);
  CSB_Write(device, 205, 428);
  CSB_Write(device, 206, 13696);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 16);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.activate run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step119 (HANDLE& device) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 1);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 1);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, 1);
  CSB_Write(device, 10, 128681984);
  CSB_Write(device, 11, 30162432);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 136742912);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 2);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 1850368);
  CSB_Write(device, 27, 133236736);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 64);
  CSB_Write(device, 30, 64);
  CSB_Write(device, 31, 64);
  CSB_Write(device, 32, 64);
  CSB_Write(device, 33, 1823);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step120 (HANDLE& device) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 13696);
  CSB_Write(device, 3, 1);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 1);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 128);
  CSB_Write(device, 8, 128);
  CSB_Write(device, 9, 1);
  CSB_Write(device, 10, 136742912);
  CSB_Write(device, 11, 31970304);
  CSB_Write(device, 12, 56576);
  CSB_Write(device, 13, 128681984);
  CSB_Write(device, 14, 31);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 1959936);
  CSB_Write(device, 27, 129730560);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 64);
  CSB_Write(device, 30, 64);
  CSB_Write(device, 31, 64);
  CSB_Write(device, 32, 64);
  CSB_Write(device, 33, 1823);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step121 (HANDLE& device) {
// accel.hbm.layer_norm accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 1976320);
  CSB_Write(device, 195, 128681984);
  CSB_Write(device, 196, 64);
  CSB_Write(device, 197, 64);
  CSB_Write(device, 198, 129730560);
  CSB_Write(device, 199, 64);
  CSB_Write(device, 200, 64);
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, 1);
  CSB_Write(device, 204, 1);
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step122 (HANDLE& device) {
// accel.hbm.mvm_bn accel operator node, storage data in cache40 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 1);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 1);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, 1);
  CSB_Write(device, 10, 129730560);
  CSB_Write(device, 11, 32875520);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 49646784);
  CSB_Write(device, 14, 8);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 1992704);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 64);
  CSB_Write(device, 30, 64);
  CSB_Write(device, 31, 8192);
  CSB_Write(device, 32, 8192);
  CSB_Write(device, 33, 799);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step123 (HANDLE& device) {
// accel.hbm.pos_emb accel operator node, storage data in cache41 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 1216);
  CSB_Write(device, 195, 49646784);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 50826432);
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, 34);
  CSB_Write(device, 204, 8192);
  CSB_Write(device, 205, 0);
  CSB_Write(device, 206, 0);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step124 (HANDLE& device) {
// accel.hbm.mvm_afterTRP accel operator node, storage data in cache42 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 51873792);
  CSB_Write(device, 195, 50826432);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 51940544);
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, 20);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, 1);
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 11688);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 2);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterTRP run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step125 (HANDLE& device) {
// accel.hbm.softmax accel operator node, storage data in cache43 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 0);
  CSB_Write(device, 195, 51939328);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 52987904);
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 1);
  CSB_Write(device, 202, 32);
  CSB_Write(device, 203, 20);
  CSB_Write(device, 204, 2);
  CSB_Write(device, 205, 1);
  CSB_Write(device, 206, 0);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 8);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.softmax run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step126 (HANDLE& device) {
// accel.hbm.mvm_afterF2W accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 50759680);
  CSB_Write(device, 195, 52989120);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 129730560);
  CSB_Write(device, 199, 5120);
  CSB_Write(device, 200, 1280);
  CSB_Write(device, 201, 1);
  CSB_Write(device, 202, 20);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, 1);
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 4);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 1);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterF2W run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step127 (HANDLE& device) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 1);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 1);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, 1);
  CSB_Write(device, 10, 129730560);
  CSB_Write(device, 11, 33179648);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 136742912);
  CSB_Write(device, 14, 7);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 2011136);
  CSB_Write(device, 27, 128681984);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 64);
  CSB_Write(device, 30, 64);
  CSB_Write(device, 31, 64);
  CSB_Write(device, 32, 64);
  CSB_Write(device, 33, 1823);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step128 (HANDLE& device) {
// accel.hbm.layer_norm accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 2027520);
  CSB_Write(device, 195, 136742912);
  CSB_Write(device, 196, 64);
  CSB_Write(device, 197, 64);
  CSB_Write(device, 198, 128681984);
  CSB_Write(device, 199, 64);
  CSB_Write(device, 200, 64);
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, 1);
  CSB_Write(device, 204, 1);
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step129 (HANDLE& device) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 1);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 1);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, 1);
  CSB_Write(device, 10, 128681984);
  CSB_Write(device, 11, 34353920);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 129730560);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 2098688);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 64);
  CSB_Write(device, 30, 64);
  CSB_Write(device, 31, 64);
  CSB_Write(device, 32, 64);
  CSB_Write(device, 33, 799);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step130 (HANDLE& device) {
// accel.hbm.activate accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 32768);
  CSB_Write(device, 195, 129730560);
  CSB_Write(device, 196, 64);
  CSB_Write(device, 197, 64);
  CSB_Write(device, 198, 133236736);
  CSB_Write(device, 199, 64);
  CSB_Write(device, 200, 64);
  CSB_Write(device, 201, 428);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, 1);
  CSB_Write(device, 204, 1);
  CSB_Write(device, 205, 428);
  CSB_Write(device, 206, 13696);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 16);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.activate run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step131 (HANDLE& device) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 1);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 1);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, 1);
  CSB_Write(device, 10, 128681984);
  CSB_Write(device, 11, 33449984);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 129730560);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 2);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 2043904);
  CSB_Write(device, 27, 133236736);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 64);
  CSB_Write(device, 30, 64);
  CSB_Write(device, 31, 64);
  CSB_Write(device, 32, 64);
  CSB_Write(device, 33, 1823);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step132 (HANDLE& device) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 13696);
  CSB_Write(device, 3, 1);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 1);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 128);
  CSB_Write(device, 8, 128);
  CSB_Write(device, 9, 1);
  CSB_Write(device, 10, 129730560);
  CSB_Write(device, 11, 35257856);
  CSB_Write(device, 12, 56576);
  CSB_Write(device, 13, 128681984);
  CSB_Write(device, 14, 31);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 2153472);
  CSB_Write(device, 27, 136742912);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 64);
  CSB_Write(device, 30, 64);
  CSB_Write(device, 31, 64);
  CSB_Write(device, 32, 64);
  CSB_Write(device, 33, 1823);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step133 (HANDLE& device) {
// accel.hbm.layer_norm accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 2169856);
  CSB_Write(device, 195, 128681984);
  CSB_Write(device, 196, 64);
  CSB_Write(device, 197, 64);
  CSB_Write(device, 198, 136742912);
  CSB_Write(device, 199, 64);
  CSB_Write(device, 200, 64);
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, 1);
  CSB_Write(device, 204, 1);
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step134 (HANDLE& device) {
// accel.hbm.mvm_bn accel operator node, storage data in cache44 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 1);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 1);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, 1);
  CSB_Write(device, 10, 136742912);
  CSB_Write(device, 11, 36163072);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 54037696);
  CSB_Write(device, 14, 8);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 2186240);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 64);
  CSB_Write(device, 30, 64);
  CSB_Write(device, 31, 8192);
  CSB_Write(device, 32, 8192);
  CSB_Write(device, 33, 799);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step135 (HANDLE& device) {
// accel.hbm.pos_emb accel operator node, storage data in cache45 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 1216);
  CSB_Write(device, 195, 54037696);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 55217344);
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, 34);
  CSB_Write(device, 204, 8192);
  CSB_Write(device, 205, 0);
  CSB_Write(device, 206, 0);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step136 (HANDLE& device) {
// accel.hbm.mvm_afterTRP accel operator node, storage data in cache46 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 56264704);
  CSB_Write(device, 195, 55217344);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 56331456);
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, 20);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, 1);
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 11688);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 2);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterTRP run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step137 (HANDLE& device) {
// accel.hbm.softmax accel operator node, storage data in cache47 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 0);
  CSB_Write(device, 195, 56330240);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 57378816);
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 1);
  CSB_Write(device, 202, 32);
  CSB_Write(device, 203, 20);
  CSB_Write(device, 204, 2);
  CSB_Write(device, 205, 1);
  CSB_Write(device, 206, 0);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 8);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.softmax run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step138 (HANDLE& device) {
// accel.hbm.mvm_afterF2W accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 55150592);
  CSB_Write(device, 195, 57380032);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 136742912);
  CSB_Write(device, 199, 5120);
  CSB_Write(device, 200, 1280);
  CSB_Write(device, 201, 1);
  CSB_Write(device, 202, 20);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, 1);
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 4);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 1);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterF2W run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step139 (HANDLE& device) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 1);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 1);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, 1);
  CSB_Write(device, 10, 136742912);
  CSB_Write(device, 11, 36467200);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 129730560);
  CSB_Write(device, 14, 7);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 2204672);
  CSB_Write(device, 27, 128681984);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 64);
  CSB_Write(device, 30, 64);
  CSB_Write(device, 31, 64);
  CSB_Write(device, 32, 64);
  CSB_Write(device, 33, 1823);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step140 (HANDLE& device) {
// accel.hbm.layer_norm accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 2221056);
  CSB_Write(device, 195, 129730560);
  CSB_Write(device, 196, 64);
  CSB_Write(device, 197, 64);
  CSB_Write(device, 198, 128681984);
  CSB_Write(device, 199, 64);
  CSB_Write(device, 200, 64);
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, 1);
  CSB_Write(device, 204, 1);
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step141 (HANDLE& device) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 1);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 1);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, 1);
  CSB_Write(device, 10, 128681984);
  CSB_Write(device, 11, 37641472);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 136742912);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 2292224);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 64);
  CSB_Write(device, 30, 64);
  CSB_Write(device, 31, 64);
  CSB_Write(device, 32, 64);
  CSB_Write(device, 33, 799);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step142 (HANDLE& device) {
// accel.hbm.activate accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 32768);
  CSB_Write(device, 195, 136742912);
  CSB_Write(device, 196, 64);
  CSB_Write(device, 197, 64);
  CSB_Write(device, 198, 133236736);
  CSB_Write(device, 199, 64);
  CSB_Write(device, 200, 64);
  CSB_Write(device, 201, 428);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, 1);
  CSB_Write(device, 204, 1);
  CSB_Write(device, 205, 428);
  CSB_Write(device, 206, 13696);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 16);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.activate run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step143 (HANDLE& device) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 1);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 1);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, 1);
  CSB_Write(device, 10, 128681984);
  CSB_Write(device, 11, 36737536);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 136742912);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 2);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 2237440);
  CSB_Write(device, 27, 133236736);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 64);
  CSB_Write(device, 30, 64);
  CSB_Write(device, 31, 64);
  CSB_Write(device, 32, 64);
  CSB_Write(device, 33, 1823);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step144 (HANDLE& device) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 13696);
  CSB_Write(device, 3, 1);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 1);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 128);
  CSB_Write(device, 8, 128);
  CSB_Write(device, 9, 1);
  CSB_Write(device, 10, 136742912);
  CSB_Write(device, 11, 38545408);
  CSB_Write(device, 12, 56576);
  CSB_Write(device, 13, 128681984);
  CSB_Write(device, 14, 31);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 2347008);
  CSB_Write(device, 27, 129730560);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 64);
  CSB_Write(device, 30, 64);
  CSB_Write(device, 31, 64);
  CSB_Write(device, 32, 64);
  CSB_Write(device, 33, 1823);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step145 (HANDLE& device) {
// accel.hbm.layer_norm accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 2363392);
  CSB_Write(device, 195, 128681984);
  CSB_Write(device, 196, 64);
  CSB_Write(device, 197, 64);
  CSB_Write(device, 198, 129730560);
  CSB_Write(device, 199, 64);
  CSB_Write(device, 200, 64);
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, 1);
  CSB_Write(device, 204, 1);
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step146 (HANDLE& device) {
// accel.hbm.mvm_bn accel operator node, storage data in cache48 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 1);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 1);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, 1);
  CSB_Write(device, 10, 129730560);
  CSB_Write(device, 11, 39450624);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 58428608);
  CSB_Write(device, 14, 8);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 2379776);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 64);
  CSB_Write(device, 30, 64);
  CSB_Write(device, 31, 8192);
  CSB_Write(device, 32, 8192);
  CSB_Write(device, 33, 799);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step147 (HANDLE& device) {
// accel.hbm.pos_emb accel operator node, storage data in cache49 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 1216);
  CSB_Write(device, 195, 58428608);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 59608256);
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, 34);
  CSB_Write(device, 204, 8192);
  CSB_Write(device, 205, 0);
  CSB_Write(device, 206, 0);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step148 (HANDLE& device) {
// accel.hbm.mvm_afterTRP accel operator node, storage data in cache50 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 60655616);
  CSB_Write(device, 195, 59608256);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 60722368);
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, 20);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, 1);
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 11688);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 2);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterTRP run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step149 (HANDLE& device) {
// accel.hbm.softmax accel operator node, storage data in cache51 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 0);
  CSB_Write(device, 195, 60721152);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 61769728);
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 1);
  CSB_Write(device, 202, 32);
  CSB_Write(device, 203, 20);
  CSB_Write(device, 204, 2);
  CSB_Write(device, 205, 1);
  CSB_Write(device, 206, 0);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 8);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.softmax run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step150 (HANDLE& device) {
// accel.hbm.mvm_afterF2W accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 59541504);
  CSB_Write(device, 195, 61770944);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 129730560);
  CSB_Write(device, 199, 5120);
  CSB_Write(device, 200, 1280);
  CSB_Write(device, 201, 1);
  CSB_Write(device, 202, 20);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, 1);
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 4);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 1);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterF2W run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step151 (HANDLE& device) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 1);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 1);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, 1);
  CSB_Write(device, 10, 129730560);
  CSB_Write(device, 11, 39754752);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 136742912);
  CSB_Write(device, 14, 7);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 2398208);
  CSB_Write(device, 27, 128681984);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 64);
  CSB_Write(device, 30, 64);
  CSB_Write(device, 31, 64);
  CSB_Write(device, 32, 64);
  CSB_Write(device, 33, 1823);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step152 (HANDLE& device) {
// accel.hbm.layer_norm accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 2414592);
  CSB_Write(device, 195, 136742912);
  CSB_Write(device, 196, 64);
  CSB_Write(device, 197, 64);
  CSB_Write(device, 198, 128681984);
  CSB_Write(device, 199, 64);
  CSB_Write(device, 200, 64);
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, 1);
  CSB_Write(device, 204, 1);
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step153 (HANDLE& device) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 1);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 1);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, 1);
  CSB_Write(device, 10, 128681984);
  CSB_Write(device, 11, 40929024);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 129730560);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 2485760);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 64);
  CSB_Write(device, 30, 64);
  CSB_Write(device, 31, 64);
  CSB_Write(device, 32, 64);
  CSB_Write(device, 33, 799);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step154 (HANDLE& device) {
// accel.hbm.activate accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 32768);
  CSB_Write(device, 195, 129730560);
  CSB_Write(device, 196, 64);
  CSB_Write(device, 197, 64);
  CSB_Write(device, 198, 133236736);
  CSB_Write(device, 199, 64);
  CSB_Write(device, 200, 64);
  CSB_Write(device, 201, 428);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, 1);
  CSB_Write(device, 204, 1);
  CSB_Write(device, 205, 428);
  CSB_Write(device, 206, 13696);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 16);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.activate run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step155 (HANDLE& device) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 1);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 1);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, 1);
  CSB_Write(device, 10, 128681984);
  CSB_Write(device, 11, 40025088);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 129730560);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 2);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 2430976);
  CSB_Write(device, 27, 133236736);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 64);
  CSB_Write(device, 30, 64);
  CSB_Write(device, 31, 64);
  CSB_Write(device, 32, 64);
  CSB_Write(device, 33, 1823);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step156 (HANDLE& device) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 13696);
  CSB_Write(device, 3, 1);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 1);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 128);
  CSB_Write(device, 8, 128);
  CSB_Write(device, 9, 1);
  CSB_Write(device, 10, 129730560);
  CSB_Write(device, 11, 41832960);
  CSB_Write(device, 12, 56576);
  CSB_Write(device, 13, 128681984);
  CSB_Write(device, 14, 31);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 2540544);
  CSB_Write(device, 27, 136742912);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 64);
  CSB_Write(device, 30, 64);
  CSB_Write(device, 31, 64);
  CSB_Write(device, 32, 64);
  CSB_Write(device, 33, 1823);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step157 (HANDLE& device) {
// accel.hbm.layer_norm accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 2556928);
  CSB_Write(device, 195, 128681984);
  CSB_Write(device, 196, 64);
  CSB_Write(device, 197, 64);
  CSB_Write(device, 198, 136742912);
  CSB_Write(device, 199, 64);
  CSB_Write(device, 200, 64);
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, 1);
  CSB_Write(device, 204, 1);
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step158 (HANDLE& device) {
// accel.hbm.mvm_bn accel operator node, storage data in cache52 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 1);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 1);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, 1);
  CSB_Write(device, 10, 136742912);
  CSB_Write(device, 11, 42738176);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 62819520);
  CSB_Write(device, 14, 8);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 2573312);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 64);
  CSB_Write(device, 30, 64);
  CSB_Write(device, 31, 8192);
  CSB_Write(device, 32, 8192);
  CSB_Write(device, 33, 799);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step159 (HANDLE& device) {
// accel.hbm.pos_emb accel operator node, storage data in cache53 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 1216);
  CSB_Write(device, 195, 62819520);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 63999168);
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, 34);
  CSB_Write(device, 204, 8192);
  CSB_Write(device, 205, 0);
  CSB_Write(device, 206, 0);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step160 (HANDLE& device) {
// accel.hbm.mvm_afterTRP accel operator node, storage data in cache54 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 65046528);
  CSB_Write(device, 195, 63999168);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 65113280);
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, 20);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, 1);
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 11688);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 2);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterTRP run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step161 (HANDLE& device) {
// accel.hbm.softmax accel operator node, storage data in cache55 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 0);
  CSB_Write(device, 195, 65112064);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 66160640);
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 1);
  CSB_Write(device, 202, 32);
  CSB_Write(device, 203, 20);
  CSB_Write(device, 204, 2);
  CSB_Write(device, 205, 1);
  CSB_Write(device, 206, 0);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 8);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.softmax run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step162 (HANDLE& device) {
// accel.hbm.mvm_afterF2W accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 63932416);
  CSB_Write(device, 195, 66161856);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 136742912);
  CSB_Write(device, 199, 5120);
  CSB_Write(device, 200, 1280);
  CSB_Write(device, 201, 1);
  CSB_Write(device, 202, 20);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, 1);
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 4);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 1);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterF2W run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step163 (HANDLE& device) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 1);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 1);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, 1);
  CSB_Write(device, 10, 136742912);
  CSB_Write(device, 11, 43042304);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 129730560);
  CSB_Write(device, 14, 7);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 2591744);
  CSB_Write(device, 27, 128681984);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 64);
  CSB_Write(device, 30, 64);
  CSB_Write(device, 31, 64);
  CSB_Write(device, 32, 64);
  CSB_Write(device, 33, 1823);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step164 (HANDLE& device) {
// accel.hbm.layer_norm accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 2608128);
  CSB_Write(device, 195, 129730560);
  CSB_Write(device, 196, 64);
  CSB_Write(device, 197, 64);
  CSB_Write(device, 198, 128681984);
  CSB_Write(device, 199, 64);
  CSB_Write(device, 200, 64);
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, 1);
  CSB_Write(device, 204, 1);
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step165 (HANDLE& device) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 1);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 1);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, 1);
  CSB_Write(device, 10, 128681984);
  CSB_Write(device, 11, 44216576);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 136742912);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 2679296);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 64);
  CSB_Write(device, 30, 64);
  CSB_Write(device, 31, 64);
  CSB_Write(device, 32, 64);
  CSB_Write(device, 33, 799);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step166 (HANDLE& device) {
// accel.hbm.activate accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 32768);
  CSB_Write(device, 195, 136742912);
  CSB_Write(device, 196, 64);
  CSB_Write(device, 197, 64);
  CSB_Write(device, 198, 133236736);
  CSB_Write(device, 199, 64);
  CSB_Write(device, 200, 64);
  CSB_Write(device, 201, 428);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, 1);
  CSB_Write(device, 204, 1);
  CSB_Write(device, 205, 428);
  CSB_Write(device, 206, 13696);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 16);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.activate run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step167 (HANDLE& device) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 1);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 1);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, 1);
  CSB_Write(device, 10, 128681984);
  CSB_Write(device, 11, 43312640);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 136742912);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 2);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 2624512);
  CSB_Write(device, 27, 133236736);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 64);
  CSB_Write(device, 30, 64);
  CSB_Write(device, 31, 64);
  CSB_Write(device, 32, 64);
  CSB_Write(device, 33, 1823);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step168 (HANDLE& device) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 13696);
  CSB_Write(device, 3, 1);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 1);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 128);
  CSB_Write(device, 8, 128);
  CSB_Write(device, 9, 1);
  CSB_Write(device, 10, 136742912);
  CSB_Write(device, 11, 45120512);
  CSB_Write(device, 12, 56576);
  CSB_Write(device, 13, 128681984);
  CSB_Write(device, 14, 31);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 2734080);
  CSB_Write(device, 27, 129730560);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 64);
  CSB_Write(device, 30, 64);
  CSB_Write(device, 31, 64);
  CSB_Write(device, 32, 64);
  CSB_Write(device, 33, 1823);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step169 (HANDLE& device) {
// accel.hbm.layer_norm accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 2750464);
  CSB_Write(device, 195, 128681984);
  CSB_Write(device, 196, 64);
  CSB_Write(device, 197, 64);
  CSB_Write(device, 198, 129730560);
  CSB_Write(device, 199, 64);
  CSB_Write(device, 200, 64);
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, 1);
  CSB_Write(device, 204, 1);
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step170 (HANDLE& device) {
// accel.hbm.mvm_bn accel operator node, storage data in cache56 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 1);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 1);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, 1);
  CSB_Write(device, 10, 129730560);
  CSB_Write(device, 11, 46025728);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 67210432);
  CSB_Write(device, 14, 8);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 2766848);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 64);
  CSB_Write(device, 30, 64);
  CSB_Write(device, 31, 8192);
  CSB_Write(device, 32, 8192);
  CSB_Write(device, 33, 799);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step171 (HANDLE& device) {
// accel.hbm.pos_emb accel operator node, storage data in cache57 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 1216);
  CSB_Write(device, 195, 67210432);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 68390080);
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, 34);
  CSB_Write(device, 204, 8192);
  CSB_Write(device, 205, 0);
  CSB_Write(device, 206, 0);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step172 (HANDLE& device) {
// accel.hbm.mvm_afterTRP accel operator node, storage data in cache58 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 69437440);
  CSB_Write(device, 195, 68390080);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 69504192);
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, 20);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, 1);
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 11688);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 2);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterTRP run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step173 (HANDLE& device) {
// accel.hbm.softmax accel operator node, storage data in cache59 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 0);
  CSB_Write(device, 195, 69502976);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 70551552);
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 1);
  CSB_Write(device, 202, 32);
  CSB_Write(device, 203, 20);
  CSB_Write(device, 204, 2);
  CSB_Write(device, 205, 1);
  CSB_Write(device, 206, 0);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 8);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.softmax run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step174 (HANDLE& device) {
// accel.hbm.mvm_afterF2W accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 68323328);
  CSB_Write(device, 195, 70552768);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 129730560);
  CSB_Write(device, 199, 5120);
  CSB_Write(device, 200, 1280);
  CSB_Write(device, 201, 1);
  CSB_Write(device, 202, 20);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, 1);
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 4);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 1);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterF2W run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step175 (HANDLE& device) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 1);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 1);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, 1);
  CSB_Write(device, 10, 129730560);
  CSB_Write(device, 11, 46329856);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 136742912);
  CSB_Write(device, 14, 7);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 2785280);
  CSB_Write(device, 27, 128681984);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 64);
  CSB_Write(device, 30, 64);
  CSB_Write(device, 31, 64);
  CSB_Write(device, 32, 64);
  CSB_Write(device, 33, 1823);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step176 (HANDLE& device) {
// accel.hbm.layer_norm accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 2801664);
  CSB_Write(device, 195, 136742912);
  CSB_Write(device, 196, 64);
  CSB_Write(device, 197, 64);
  CSB_Write(device, 198, 128681984);
  CSB_Write(device, 199, 64);
  CSB_Write(device, 200, 64);
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, 1);
  CSB_Write(device, 204, 1);
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step177 (HANDLE& device) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 1);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 1);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, 1);
  CSB_Write(device, 10, 128681984);
  CSB_Write(device, 11, 47504128);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 129730560);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 2872832);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 64);
  CSB_Write(device, 30, 64);
  CSB_Write(device, 31, 64);
  CSB_Write(device, 32, 64);
  CSB_Write(device, 33, 799);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step178 (HANDLE& device) {
// accel.hbm.activate accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 32768);
  CSB_Write(device, 195, 129730560);
  CSB_Write(device, 196, 64);
  CSB_Write(device, 197, 64);
  CSB_Write(device, 198, 133236736);
  CSB_Write(device, 199, 64);
  CSB_Write(device, 200, 64);
  CSB_Write(device, 201, 428);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, 1);
  CSB_Write(device, 204, 1);
  CSB_Write(device, 205, 428);
  CSB_Write(device, 206, 13696);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 16);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.activate run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step179 (HANDLE& device) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 1);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 1);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, 1);
  CSB_Write(device, 10, 128681984);
  CSB_Write(device, 11, 46600192);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 129730560);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 2);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 2818048);
  CSB_Write(device, 27, 133236736);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 64);
  CSB_Write(device, 30, 64);
  CSB_Write(device, 31, 64);
  CSB_Write(device, 32, 64);
  CSB_Write(device, 33, 1823);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step180 (HANDLE& device) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 13696);
  CSB_Write(device, 3, 1);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 1);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 128);
  CSB_Write(device, 8, 128);
  CSB_Write(device, 9, 1);
  CSB_Write(device, 10, 129730560);
  CSB_Write(device, 11, 48408064);
  CSB_Write(device, 12, 56576);
  CSB_Write(device, 13, 128681984);
  CSB_Write(device, 14, 31);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 2927616);
  CSB_Write(device, 27, 136742912);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 64);
  CSB_Write(device, 30, 64);
  CSB_Write(device, 31, 64);
  CSB_Write(device, 32, 64);
  CSB_Write(device, 33, 1823);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step181 (HANDLE& device) {
// accel.hbm.layer_norm accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 2944000);
  CSB_Write(device, 195, 128681984);
  CSB_Write(device, 196, 64);
  CSB_Write(device, 197, 64);
  CSB_Write(device, 198, 136742912);
  CSB_Write(device, 199, 64);
  CSB_Write(device, 200, 64);
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, 1);
  CSB_Write(device, 204, 1);
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step182 (HANDLE& device) {
// accel.hbm.mvm_bn accel operator node, storage data in cache60 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 1);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 1);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, 1);
  CSB_Write(device, 10, 136742912);
  CSB_Write(device, 11, 49313280);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 71601344);
  CSB_Write(device, 14, 8);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 2960384);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 64);
  CSB_Write(device, 30, 64);
  CSB_Write(device, 31, 8192);
  CSB_Write(device, 32, 8192);
  CSB_Write(device, 33, 799);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step183 (HANDLE& device) {
// accel.hbm.pos_emb accel operator node, storage data in cache61 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 1216);
  CSB_Write(device, 195, 71601344);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 72780992);
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, 34);
  CSB_Write(device, 204, 8192);
  CSB_Write(device, 205, 0);
  CSB_Write(device, 206, 0);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step184 (HANDLE& device) {
// accel.hbm.mvm_afterTRP accel operator node, storage data in cache62 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 73828352);
  CSB_Write(device, 195, 72780992);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 73895104);
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, 20);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, 1);
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 11688);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 2);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterTRP run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step185 (HANDLE& device) {
// accel.hbm.softmax accel operator node, storage data in cache63 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 0);
  CSB_Write(device, 195, 73893888);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 74942464);
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 1);
  CSB_Write(device, 202, 32);
  CSB_Write(device, 203, 20);
  CSB_Write(device, 204, 2);
  CSB_Write(device, 205, 1);
  CSB_Write(device, 206, 0);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 8);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.softmax run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step186 (HANDLE& device) {
// accel.hbm.mvm_afterF2W accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 72714240);
  CSB_Write(device, 195, 74943680);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 136742912);
  CSB_Write(device, 199, 5120);
  CSB_Write(device, 200, 1280);
  CSB_Write(device, 201, 1);
  CSB_Write(device, 202, 20);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, 1);
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 4);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 1);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterF2W run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step187 (HANDLE& device) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 1);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 1);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, 1);
  CSB_Write(device, 10, 136742912);
  CSB_Write(device, 11, 49617408);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 129730560);
  CSB_Write(device, 14, 7);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 2978816);
  CSB_Write(device, 27, 128681984);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 64);
  CSB_Write(device, 30, 64);
  CSB_Write(device, 31, 64);
  CSB_Write(device, 32, 64);
  CSB_Write(device, 33, 1823);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step188 (HANDLE& device) {
// accel.hbm.layer_norm accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 2995200);
  CSB_Write(device, 195, 129730560);
  CSB_Write(device, 196, 64);
  CSB_Write(device, 197, 64);
  CSB_Write(device, 198, 128681984);
  CSB_Write(device, 199, 64);
  CSB_Write(device, 200, 64);
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, 1);
  CSB_Write(device, 204, 1);
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step189 (HANDLE& device) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 1);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 1);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, 1);
  CSB_Write(device, 10, 128681984);
  CSB_Write(device, 11, 50791680);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 136742912);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 3066368);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 64);
  CSB_Write(device, 30, 64);
  CSB_Write(device, 31, 64);
  CSB_Write(device, 32, 64);
  CSB_Write(device, 33, 799);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step190 (HANDLE& device) {
// accel.hbm.activate accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 32768);
  CSB_Write(device, 195, 136742912);
  CSB_Write(device, 196, 64);
  CSB_Write(device, 197, 64);
  CSB_Write(device, 198, 133236736);
  CSB_Write(device, 199, 64);
  CSB_Write(device, 200, 64);
  CSB_Write(device, 201, 428);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, 1);
  CSB_Write(device, 204, 1);
  CSB_Write(device, 205, 428);
  CSB_Write(device, 206, 13696);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 16);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.activate run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step191 (HANDLE& device) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 1);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 1);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, 1);
  CSB_Write(device, 10, 128681984);
  CSB_Write(device, 11, 49887744);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 136742912);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 2);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 3011584);
  CSB_Write(device, 27, 133236736);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 64);
  CSB_Write(device, 30, 64);
  CSB_Write(device, 31, 64);
  CSB_Write(device, 32, 64);
  CSB_Write(device, 33, 1823);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step192 (HANDLE& device) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 13696);
  CSB_Write(device, 3, 1);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 1);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 128);
  CSB_Write(device, 8, 128);
  CSB_Write(device, 9, 1);
  CSB_Write(device, 10, 136742912);
  CSB_Write(device, 11, 51695616);
  CSB_Write(device, 12, 56576);
  CSB_Write(device, 13, 128681984);
  CSB_Write(device, 14, 31);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 3121152);
  CSB_Write(device, 27, 129730560);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 64);
  CSB_Write(device, 30, 64);
  CSB_Write(device, 31, 64);
  CSB_Write(device, 32, 64);
  CSB_Write(device, 33, 1823);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step193 (HANDLE& device) {
// accel.hbm.layer_norm accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 3137536);
  CSB_Write(device, 195, 128681984);
  CSB_Write(device, 196, 64);
  CSB_Write(device, 197, 64);
  CSB_Write(device, 198, 129730560);
  CSB_Write(device, 199, 64);
  CSB_Write(device, 200, 64);
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, 1);
  CSB_Write(device, 204, 1);
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step194 (HANDLE& device) {
// accel.hbm.mvm_bn accel operator node, storage data in cache64 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 1);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 1);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, 1);
  CSB_Write(device, 10, 129730560);
  CSB_Write(device, 11, 52600832);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 75992256);
  CSB_Write(device, 14, 8);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 3153920);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 64);
  CSB_Write(device, 30, 64);
  CSB_Write(device, 31, 8192);
  CSB_Write(device, 32, 8192);
  CSB_Write(device, 33, 799);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step195 (HANDLE& device) {
// accel.hbm.pos_emb accel operator node, storage data in cache65 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 1216);
  CSB_Write(device, 195, 75992256);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 77171904);
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, 34);
  CSB_Write(device, 204, 8192);
  CSB_Write(device, 205, 0);
  CSB_Write(device, 206, 0);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step196 (HANDLE& device) {
// accel.hbm.mvm_afterTRP accel operator node, storage data in cache66 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 78219264);
  CSB_Write(device, 195, 77171904);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 78286016);
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, 20);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, 1);
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 11688);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 2);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterTRP run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step197 (HANDLE& device) {
// accel.hbm.softmax accel operator node, storage data in cache67 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 0);
  CSB_Write(device, 195, 78284800);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 79333376);
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 1);
  CSB_Write(device, 202, 32);
  CSB_Write(device, 203, 20);
  CSB_Write(device, 204, 2);
  CSB_Write(device, 205, 1);
  CSB_Write(device, 206, 0);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 8);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.softmax run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step198 (HANDLE& device) {
// accel.hbm.mvm_afterF2W accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 77105152);
  CSB_Write(device, 195, 79334592);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 129730560);
  CSB_Write(device, 199, 5120);
  CSB_Write(device, 200, 1280);
  CSB_Write(device, 201, 1);
  CSB_Write(device, 202, 20);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, 1);
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 4);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 1);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterF2W run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step199 (HANDLE& device) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 1);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 1);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, 1);
  CSB_Write(device, 10, 129730560);
  CSB_Write(device, 11, 52904960);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 136742912);
  CSB_Write(device, 14, 7);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 3172352);
  CSB_Write(device, 27, 128681984);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 64);
  CSB_Write(device, 30, 64);
  CSB_Write(device, 31, 64);
  CSB_Write(device, 32, 64);
  CSB_Write(device, 33, 1823);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step200 (HANDLE& device) {
// accel.hbm.layer_norm accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 3188736);
  CSB_Write(device, 195, 136742912);
  CSB_Write(device, 196, 64);
  CSB_Write(device, 197, 64);
  CSB_Write(device, 198, 128681984);
  CSB_Write(device, 199, 64);
  CSB_Write(device, 200, 64);
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, 1);
  CSB_Write(device, 204, 1);
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step201 (HANDLE& device) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 1);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 1);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, 1);
  CSB_Write(device, 10, 128681984);
  CSB_Write(device, 11, 54079232);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 129730560);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 3259904);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 64);
  CSB_Write(device, 30, 64);
  CSB_Write(device, 31, 64);
  CSB_Write(device, 32, 64);
  CSB_Write(device, 33, 799);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step202 (HANDLE& device) {
// accel.hbm.activate accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 32768);
  CSB_Write(device, 195, 129730560);
  CSB_Write(device, 196, 64);
  CSB_Write(device, 197, 64);
  CSB_Write(device, 198, 133236736);
  CSB_Write(device, 199, 64);
  CSB_Write(device, 200, 64);
  CSB_Write(device, 201, 428);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, 1);
  CSB_Write(device, 204, 1);
  CSB_Write(device, 205, 428);
  CSB_Write(device, 206, 13696);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 16);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.activate run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step203 (HANDLE& device) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 1);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 1);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, 1);
  CSB_Write(device, 10, 128681984);
  CSB_Write(device, 11, 53175296);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 129730560);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 2);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 3205120);
  CSB_Write(device, 27, 133236736);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 64);
  CSB_Write(device, 30, 64);
  CSB_Write(device, 31, 64);
  CSB_Write(device, 32, 64);
  CSB_Write(device, 33, 1823);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step204 (HANDLE& device) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 13696);
  CSB_Write(device, 3, 1);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 1);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 128);
  CSB_Write(device, 8, 128);
  CSB_Write(device, 9, 1);
  CSB_Write(device, 10, 129730560);
  CSB_Write(device, 11, 54983168);
  CSB_Write(device, 12, 56576);
  CSB_Write(device, 13, 128681984);
  CSB_Write(device, 14, 31);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 3314688);
  CSB_Write(device, 27, 136742912);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 64);
  CSB_Write(device, 30, 64);
  CSB_Write(device, 31, 64);
  CSB_Write(device, 32, 64);
  CSB_Write(device, 33, 1823);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step205 (HANDLE& device) {
// accel.hbm.layer_norm accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 3331072);
  CSB_Write(device, 195, 128681984);
  CSB_Write(device, 196, 64);
  CSB_Write(device, 197, 64);
  CSB_Write(device, 198, 136742912);
  CSB_Write(device, 199, 64);
  CSB_Write(device, 200, 64);
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, 1);
  CSB_Write(device, 204, 1);
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step206 (HANDLE& device) {
// accel.hbm.mvm_bn accel operator node, storage data in cache68 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 1);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 1);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, 1);
  CSB_Write(device, 10, 136742912);
  CSB_Write(device, 11, 55888384);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 80383168);
  CSB_Write(device, 14, 8);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 3347456);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 64);
  CSB_Write(device, 30, 64);
  CSB_Write(device, 31, 8192);
  CSB_Write(device, 32, 8192);
  CSB_Write(device, 33, 799);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step207 (HANDLE& device) {
// accel.hbm.pos_emb accel operator node, storage data in cache69 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 1216);
  CSB_Write(device, 195, 80383168);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 81562816);
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, 34);
  CSB_Write(device, 204, 8192);
  CSB_Write(device, 205, 0);
  CSB_Write(device, 206, 0);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step208 (HANDLE& device) {
// accel.hbm.mvm_afterTRP accel operator node, storage data in cache70 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 82610176);
  CSB_Write(device, 195, 81562816);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 82676928);
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, 20);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, 1);
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 11688);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 2);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterTRP run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step209 (HANDLE& device) {
// accel.hbm.softmax accel operator node, storage data in cache71 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 0);
  CSB_Write(device, 195, 82675712);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 83724288);
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 1);
  CSB_Write(device, 202, 32);
  CSB_Write(device, 203, 20);
  CSB_Write(device, 204, 2);
  CSB_Write(device, 205, 1);
  CSB_Write(device, 206, 0);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 8);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.softmax run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step210 (HANDLE& device) {
// accel.hbm.mvm_afterF2W accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 81496064);
  CSB_Write(device, 195, 83725504);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 136742912);
  CSB_Write(device, 199, 5120);
  CSB_Write(device, 200, 1280);
  CSB_Write(device, 201, 1);
  CSB_Write(device, 202, 20);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, 1);
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 4);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 1);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterF2W run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step211 (HANDLE& device) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 1);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 1);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, 1);
  CSB_Write(device, 10, 136742912);
  CSB_Write(device, 11, 56192512);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 129730560);
  CSB_Write(device, 14, 7);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 3365888);
  CSB_Write(device, 27, 128681984);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 64);
  CSB_Write(device, 30, 64);
  CSB_Write(device, 31, 64);
  CSB_Write(device, 32, 64);
  CSB_Write(device, 33, 1823);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step212 (HANDLE& device) {
// accel.hbm.layer_norm accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 3382272);
  CSB_Write(device, 195, 129730560);
  CSB_Write(device, 196, 64);
  CSB_Write(device, 197, 64);
  CSB_Write(device, 198, 128681984);
  CSB_Write(device, 199, 64);
  CSB_Write(device, 200, 64);
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, 1);
  CSB_Write(device, 204, 1);
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step213 (HANDLE& device) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 1);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 1);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, 1);
  CSB_Write(device, 10, 128681984);
  CSB_Write(device, 11, 57366784);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 136742912);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 3453440);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 64);
  CSB_Write(device, 30, 64);
  CSB_Write(device, 31, 64);
  CSB_Write(device, 32, 64);
  CSB_Write(device, 33, 799);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step214 (HANDLE& device) {
// accel.hbm.activate accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 32768);
  CSB_Write(device, 195, 136742912);
  CSB_Write(device, 196, 64);
  CSB_Write(device, 197, 64);
  CSB_Write(device, 198, 133236736);
  CSB_Write(device, 199, 64);
  CSB_Write(device, 200, 64);
  CSB_Write(device, 201, 428);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, 1);
  CSB_Write(device, 204, 1);
  CSB_Write(device, 205, 428);
  CSB_Write(device, 206, 13696);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 16);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.activate run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step215 (HANDLE& device) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 1);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 1);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, 1);
  CSB_Write(device, 10, 128681984);
  CSB_Write(device, 11, 56462848);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 136742912);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 2);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 3398656);
  CSB_Write(device, 27, 133236736);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 64);
  CSB_Write(device, 30, 64);
  CSB_Write(device, 31, 64);
  CSB_Write(device, 32, 64);
  CSB_Write(device, 33, 1823);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step216 (HANDLE& device) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 13696);
  CSB_Write(device, 3, 1);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 1);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 128);
  CSB_Write(device, 8, 128);
  CSB_Write(device, 9, 1);
  CSB_Write(device, 10, 136742912);
  CSB_Write(device, 11, 58270720);
  CSB_Write(device, 12, 56576);
  CSB_Write(device, 13, 128681984);
  CSB_Write(device, 14, 31);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 3508224);
  CSB_Write(device, 27, 129730560);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 64);
  CSB_Write(device, 30, 64);
  CSB_Write(device, 31, 64);
  CSB_Write(device, 32, 64);
  CSB_Write(device, 33, 1823);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step217 (HANDLE& device) {
// accel.hbm.layer_norm accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 3524608);
  CSB_Write(device, 195, 128681984);
  CSB_Write(device, 196, 64);
  CSB_Write(device, 197, 64);
  CSB_Write(device, 198, 129730560);
  CSB_Write(device, 199, 64);
  CSB_Write(device, 200, 64);
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, 1);
  CSB_Write(device, 204, 1);
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step218 (HANDLE& device) {
// accel.hbm.mvm_bn accel operator node, storage data in cache72 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 1);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 1);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, 1);
  CSB_Write(device, 10, 129730560);
  CSB_Write(device, 11, 59175936);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 84774080);
  CSB_Write(device, 14, 8);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 3540992);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 64);
  CSB_Write(device, 30, 64);
  CSB_Write(device, 31, 8192);
  CSB_Write(device, 32, 8192);
  CSB_Write(device, 33, 799);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step219 (HANDLE& device) {
// accel.hbm.pos_emb accel operator node, storage data in cache73 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 1216);
  CSB_Write(device, 195, 84774080);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 85953728);
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, 34);
  CSB_Write(device, 204, 8192);
  CSB_Write(device, 205, 0);
  CSB_Write(device, 206, 0);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step220 (HANDLE& device) {
// accel.hbm.mvm_afterTRP accel operator node, storage data in cache74 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 87001088);
  CSB_Write(device, 195, 85953728);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 87067840);
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, 20);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, 1);
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 11688);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 2);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterTRP run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step221 (HANDLE& device) {
// accel.hbm.softmax accel operator node, storage data in cache75 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 0);
  CSB_Write(device, 195, 87066624);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 88115200);
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 1);
  CSB_Write(device, 202, 32);
  CSB_Write(device, 203, 20);
  CSB_Write(device, 204, 2);
  CSB_Write(device, 205, 1);
  CSB_Write(device, 206, 0);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 8);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.softmax run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step222 (HANDLE& device) {
// accel.hbm.mvm_afterF2W accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 85886976);
  CSB_Write(device, 195, 88116416);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 129730560);
  CSB_Write(device, 199, 5120);
  CSB_Write(device, 200, 1280);
  CSB_Write(device, 201, 1);
  CSB_Write(device, 202, 20);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, 1);
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 4);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 1);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterF2W run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step223 (HANDLE& device) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 1);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 1);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, 1);
  CSB_Write(device, 10, 129730560);
  CSB_Write(device, 11, 59480064);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 136742912);
  CSB_Write(device, 14, 7);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 3559424);
  CSB_Write(device, 27, 128681984);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 64);
  CSB_Write(device, 30, 64);
  CSB_Write(device, 31, 64);
  CSB_Write(device, 32, 64);
  CSB_Write(device, 33, 1823);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step224 (HANDLE& device) {
// accel.hbm.layer_norm accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 3575808);
  CSB_Write(device, 195, 136742912);
  CSB_Write(device, 196, 64);
  CSB_Write(device, 197, 64);
  CSB_Write(device, 198, 128681984);
  CSB_Write(device, 199, 64);
  CSB_Write(device, 200, 64);
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, 1);
  CSB_Write(device, 204, 1);
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step225 (HANDLE& device) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 1);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 1);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, 1);
  CSB_Write(device, 10, 128681984);
  CSB_Write(device, 11, 60654336);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 129730560);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 3646976);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 64);
  CSB_Write(device, 30, 64);
  CSB_Write(device, 31, 64);
  CSB_Write(device, 32, 64);
  CSB_Write(device, 33, 799);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step226 (HANDLE& device) {
// accel.hbm.activate accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 32768);
  CSB_Write(device, 195, 129730560);
  CSB_Write(device, 196, 64);
  CSB_Write(device, 197, 64);
  CSB_Write(device, 198, 133236736);
  CSB_Write(device, 199, 64);
  CSB_Write(device, 200, 64);
  CSB_Write(device, 201, 428);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, 1);
  CSB_Write(device, 204, 1);
  CSB_Write(device, 205, 428);
  CSB_Write(device, 206, 13696);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 16);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.activate run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step227 (HANDLE& device) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 1);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 1);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, 1);
  CSB_Write(device, 10, 128681984);
  CSB_Write(device, 11, 59750400);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 129730560);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 2);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 3592192);
  CSB_Write(device, 27, 133236736);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 64);
  CSB_Write(device, 30, 64);
  CSB_Write(device, 31, 64);
  CSB_Write(device, 32, 64);
  CSB_Write(device, 33, 1823);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step228 (HANDLE& device) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 13696);
  CSB_Write(device, 3, 1);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 1);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 128);
  CSB_Write(device, 8, 128);
  CSB_Write(device, 9, 1);
  CSB_Write(device, 10, 129730560);
  CSB_Write(device, 11, 61558272);
  CSB_Write(device, 12, 56576);
  CSB_Write(device, 13, 128681984);
  CSB_Write(device, 14, 31);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 3701760);
  CSB_Write(device, 27, 136742912);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 64);
  CSB_Write(device, 30, 64);
  CSB_Write(device, 31, 64);
  CSB_Write(device, 32, 64);
  CSB_Write(device, 33, 1823);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step229 (HANDLE& device) {
// accel.hbm.layer_norm accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 3718144);
  CSB_Write(device, 195, 128681984);
  CSB_Write(device, 196, 64);
  CSB_Write(device, 197, 64);
  CSB_Write(device, 198, 136742912);
  CSB_Write(device, 199, 64);
  CSB_Write(device, 200, 64);
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, 1);
  CSB_Write(device, 204, 1);
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step230 (HANDLE& device) {
// accel.hbm.mvm_bn accel operator node, storage data in cache76 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 1);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 1);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, 1);
  CSB_Write(device, 10, 136742912);
  CSB_Write(device, 11, 62463488);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 89164992);
  CSB_Write(device, 14, 8);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 3734528);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 64);
  CSB_Write(device, 30, 64);
  CSB_Write(device, 31, 8192);
  CSB_Write(device, 32, 8192);
  CSB_Write(device, 33, 799);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step231 (HANDLE& device) {
// accel.hbm.pos_emb accel operator node, storage data in cache77 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 1216);
  CSB_Write(device, 195, 89164992);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 90344640);
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, 34);
  CSB_Write(device, 204, 8192);
  CSB_Write(device, 205, 0);
  CSB_Write(device, 206, 0);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step232 (HANDLE& device) {
// accel.hbm.mvm_afterTRP accel operator node, storage data in cache78 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 91392000);
  CSB_Write(device, 195, 90344640);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 91458752);
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, 20);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, 1);
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 11688);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 2);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterTRP run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step233 (HANDLE& device) {
// accel.hbm.softmax accel operator node, storage data in cache79 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 0);
  CSB_Write(device, 195, 91457536);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 92506112);
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 1);
  CSB_Write(device, 202, 32);
  CSB_Write(device, 203, 20);
  CSB_Write(device, 204, 2);
  CSB_Write(device, 205, 1);
  CSB_Write(device, 206, 0);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 8);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.softmax run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step234 (HANDLE& device) {
// accel.hbm.mvm_afterF2W accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 90277888);
  CSB_Write(device, 195, 92507328);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 136742912);
  CSB_Write(device, 199, 5120);
  CSB_Write(device, 200, 1280);
  CSB_Write(device, 201, 1);
  CSB_Write(device, 202, 20);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, 1);
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 4);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 1);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterF2W run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step235 (HANDLE& device) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 1);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 1);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, 1);
  CSB_Write(device, 10, 136742912);
  CSB_Write(device, 11, 62767616);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 129730560);
  CSB_Write(device, 14, 7);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 3752960);
  CSB_Write(device, 27, 128681984);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 64);
  CSB_Write(device, 30, 64);
  CSB_Write(device, 31, 64);
  CSB_Write(device, 32, 64);
  CSB_Write(device, 33, 1823);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step236 (HANDLE& device) {
// accel.hbm.layer_norm accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 3769344);
  CSB_Write(device, 195, 129730560);
  CSB_Write(device, 196, 64);
  CSB_Write(device, 197, 64);
  CSB_Write(device, 198, 128681984);
  CSB_Write(device, 199, 64);
  CSB_Write(device, 200, 64);
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, 1);
  CSB_Write(device, 204, 1);
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step237 (HANDLE& device) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 1);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 1);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, 1);
  CSB_Write(device, 10, 128681984);
  CSB_Write(device, 11, 63941888);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 136742912);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 3840512);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 64);
  CSB_Write(device, 30, 64);
  CSB_Write(device, 31, 64);
  CSB_Write(device, 32, 64);
  CSB_Write(device, 33, 799);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step238 (HANDLE& device) {
// accel.hbm.activate accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 32768);
  CSB_Write(device, 195, 136742912);
  CSB_Write(device, 196, 64);
  CSB_Write(device, 197, 64);
  CSB_Write(device, 198, 133236736);
  CSB_Write(device, 199, 64);
  CSB_Write(device, 200, 64);
  CSB_Write(device, 201, 428);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, 1);
  CSB_Write(device, 204, 1);
  CSB_Write(device, 205, 428);
  CSB_Write(device, 206, 13696);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 16);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.activate run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step239 (HANDLE& device) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 1);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 1);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, 1);
  CSB_Write(device, 10, 128681984);
  CSB_Write(device, 11, 63037952);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 136742912);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 2);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 3785728);
  CSB_Write(device, 27, 133236736);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 64);
  CSB_Write(device, 30, 64);
  CSB_Write(device, 31, 64);
  CSB_Write(device, 32, 64);
  CSB_Write(device, 33, 1823);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step240 (HANDLE& device) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 13696);
  CSB_Write(device, 3, 1);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 1);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 128);
  CSB_Write(device, 8, 128);
  CSB_Write(device, 9, 1);
  CSB_Write(device, 10, 136742912);
  CSB_Write(device, 11, 64845824);
  CSB_Write(device, 12, 56576);
  CSB_Write(device, 13, 128681984);
  CSB_Write(device, 14, 31);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 3895296);
  CSB_Write(device, 27, 129730560);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 64);
  CSB_Write(device, 30, 64);
  CSB_Write(device, 31, 64);
  CSB_Write(device, 32, 64);
  CSB_Write(device, 33, 1823);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step241 (HANDLE& device) {
// accel.hbm.layer_norm accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 3911680);
  CSB_Write(device, 195, 128681984);
  CSB_Write(device, 196, 64);
  CSB_Write(device, 197, 64);
  CSB_Write(device, 198, 129730560);
  CSB_Write(device, 199, 64);
  CSB_Write(device, 200, 64);
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, 1);
  CSB_Write(device, 204, 1);
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step242 (HANDLE& device) {
// accel.hbm.mvm_bn accel operator node, storage data in cache80 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 1);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 1);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, 1);
  CSB_Write(device, 10, 129730560);
  CSB_Write(device, 11, 65751040);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 93555904);
  CSB_Write(device, 14, 8);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 3928064);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 64);
  CSB_Write(device, 30, 64);
  CSB_Write(device, 31, 8192);
  CSB_Write(device, 32, 8192);
  CSB_Write(device, 33, 799);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step243 (HANDLE& device) {
// accel.hbm.pos_emb accel operator node, storage data in cache81 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 1216);
  CSB_Write(device, 195, 93555904);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 94735552);
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, 34);
  CSB_Write(device, 204, 8192);
  CSB_Write(device, 205, 0);
  CSB_Write(device, 206, 0);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step244 (HANDLE& device) {
// accel.hbm.mvm_afterTRP accel operator node, storage data in cache82 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 95782912);
  CSB_Write(device, 195, 94735552);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 95849664);
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, 20);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, 1);
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 11688);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 2);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterTRP run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step245 (HANDLE& device) {
// accel.hbm.softmax accel operator node, storage data in cache83 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 0);
  CSB_Write(device, 195, 95848448);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 96897024);
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 1);
  CSB_Write(device, 202, 32);
  CSB_Write(device, 203, 20);
  CSB_Write(device, 204, 2);
  CSB_Write(device, 205, 1);
  CSB_Write(device, 206, 0);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 8);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.softmax run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step246 (HANDLE& device) {
// accel.hbm.mvm_afterF2W accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 94668800);
  CSB_Write(device, 195, 96898240);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 129730560);
  CSB_Write(device, 199, 5120);
  CSB_Write(device, 200, 1280);
  CSB_Write(device, 201, 1);
  CSB_Write(device, 202, 20);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, 1);
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 4);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 1);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterF2W run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step247 (HANDLE& device) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 1);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 1);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, 1);
  CSB_Write(device, 10, 129730560);
  CSB_Write(device, 11, 66055168);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 136742912);
  CSB_Write(device, 14, 7);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 3946496);
  CSB_Write(device, 27, 128681984);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 64);
  CSB_Write(device, 30, 64);
  CSB_Write(device, 31, 64);
  CSB_Write(device, 32, 64);
  CSB_Write(device, 33, 1823);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step248 (HANDLE& device) {
// accel.hbm.layer_norm accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 3962880);
  CSB_Write(device, 195, 136742912);
  CSB_Write(device, 196, 64);
  CSB_Write(device, 197, 64);
  CSB_Write(device, 198, 128681984);
  CSB_Write(device, 199, 64);
  CSB_Write(device, 200, 64);
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, 1);
  CSB_Write(device, 204, 1);
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step249 (HANDLE& device) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 1);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 1);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, 1);
  CSB_Write(device, 10, 128681984);
  CSB_Write(device, 11, 67229440);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 129730560);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 4034048);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 64);
  CSB_Write(device, 30, 64);
  CSB_Write(device, 31, 64);
  CSB_Write(device, 32, 64);
  CSB_Write(device, 33, 799);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step250 (HANDLE& device) {
// accel.hbm.activate accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 32768);
  CSB_Write(device, 195, 129730560);
  CSB_Write(device, 196, 64);
  CSB_Write(device, 197, 64);
  CSB_Write(device, 198, 133236736);
  CSB_Write(device, 199, 64);
  CSB_Write(device, 200, 64);
  CSB_Write(device, 201, 428);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, 1);
  CSB_Write(device, 204, 1);
  CSB_Write(device, 205, 428);
  CSB_Write(device, 206, 13696);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 16);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.activate run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step251 (HANDLE& device) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 1);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 1);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, 1);
  CSB_Write(device, 10, 128681984);
  CSB_Write(device, 11, 66325504);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 129730560);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 2);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 3979264);
  CSB_Write(device, 27, 133236736);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 64);
  CSB_Write(device, 30, 64);
  CSB_Write(device, 31, 64);
  CSB_Write(device, 32, 64);
  CSB_Write(device, 33, 1823);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step252 (HANDLE& device) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 13696);
  CSB_Write(device, 3, 1);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 1);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 128);
  CSB_Write(device, 8, 128);
  CSB_Write(device, 9, 1);
  CSB_Write(device, 10, 129730560);
  CSB_Write(device, 11, 68133376);
  CSB_Write(device, 12, 56576);
  CSB_Write(device, 13, 128681984);
  CSB_Write(device, 14, 31);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 4088832);
  CSB_Write(device, 27, 136742912);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 64);
  CSB_Write(device, 30, 64);
  CSB_Write(device, 31, 64);
  CSB_Write(device, 32, 64);
  CSB_Write(device, 33, 1823);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step253 (HANDLE& device) {
// accel.hbm.layer_norm accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 4105216);
  CSB_Write(device, 195, 128681984);
  CSB_Write(device, 196, 64);
  CSB_Write(device, 197, 64);
  CSB_Write(device, 198, 136742912);
  CSB_Write(device, 199, 64);
  CSB_Write(device, 200, 64);
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, 1);
  CSB_Write(device, 204, 1);
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step254 (HANDLE& device) {
// accel.hbm.mvm_bn accel operator node, storage data in cache84 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 1);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 1);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, 1);
  CSB_Write(device, 10, 136742912);
  CSB_Write(device, 11, 69038592);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 97946816);
  CSB_Write(device, 14, 8);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 4121600);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 64);
  CSB_Write(device, 30, 64);
  CSB_Write(device, 31, 8192);
  CSB_Write(device, 32, 8192);
  CSB_Write(device, 33, 799);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step255 (HANDLE& device) {
// accel.hbm.pos_emb accel operator node, storage data in cache85 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 1216);
  CSB_Write(device, 195, 97946816);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 99126464);
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, 34);
  CSB_Write(device, 204, 8192);
  CSB_Write(device, 205, 0);
  CSB_Write(device, 206, 0);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step256 (HANDLE& device) {
// accel.hbm.mvm_afterTRP accel operator node, storage data in cache86 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 100173824);
  CSB_Write(device, 195, 99126464);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 100240576);
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, 20);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, 1);
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 11688);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 2);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterTRP run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step257 (HANDLE& device) {
// accel.hbm.softmax accel operator node, storage data in cache87 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 0);
  CSB_Write(device, 195, 100239360);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 101287936);
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 1);
  CSB_Write(device, 202, 32);
  CSB_Write(device, 203, 20);
  CSB_Write(device, 204, 2);
  CSB_Write(device, 205, 1);
  CSB_Write(device, 206, 0);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 8);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.softmax run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step258 (HANDLE& device) {
// accel.hbm.mvm_afterF2W accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 99059712);
  CSB_Write(device, 195, 101289152);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 136742912);
  CSB_Write(device, 199, 5120);
  CSB_Write(device, 200, 1280);
  CSB_Write(device, 201, 1);
  CSB_Write(device, 202, 20);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, 1);
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 4);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 1);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterF2W run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step259 (HANDLE& device) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 1);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 1);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, 1);
  CSB_Write(device, 10, 136742912);
  CSB_Write(device, 11, 69342720);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 129730560);
  CSB_Write(device, 14, 7);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 4140032);
  CSB_Write(device, 27, 128681984);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 64);
  CSB_Write(device, 30, 64);
  CSB_Write(device, 31, 64);
  CSB_Write(device, 32, 64);
  CSB_Write(device, 33, 1823);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step260 (HANDLE& device) {
// accel.hbm.layer_norm accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 4156416);
  CSB_Write(device, 195, 129730560);
  CSB_Write(device, 196, 64);
  CSB_Write(device, 197, 64);
  CSB_Write(device, 198, 128681984);
  CSB_Write(device, 199, 64);
  CSB_Write(device, 200, 64);
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, 1);
  CSB_Write(device, 204, 1);
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step261 (HANDLE& device) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 1);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 1);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, 1);
  CSB_Write(device, 10, 128681984);
  CSB_Write(device, 11, 70516992);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 136742912);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 4227584);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 64);
  CSB_Write(device, 30, 64);
  CSB_Write(device, 31, 64);
  CSB_Write(device, 32, 64);
  CSB_Write(device, 33, 799);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step262 (HANDLE& device) {
// accel.hbm.activate accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 32768);
  CSB_Write(device, 195, 136742912);
  CSB_Write(device, 196, 64);
  CSB_Write(device, 197, 64);
  CSB_Write(device, 198, 133236736);
  CSB_Write(device, 199, 64);
  CSB_Write(device, 200, 64);
  CSB_Write(device, 201, 428);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, 1);
  CSB_Write(device, 204, 1);
  CSB_Write(device, 205, 428);
  CSB_Write(device, 206, 13696);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 16);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.activate run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step263 (HANDLE& device) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 1);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 1);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, 1);
  CSB_Write(device, 10, 128681984);
  CSB_Write(device, 11, 69613056);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 136742912);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 2);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 4172800);
  CSB_Write(device, 27, 133236736);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 64);
  CSB_Write(device, 30, 64);
  CSB_Write(device, 31, 64);
  CSB_Write(device, 32, 64);
  CSB_Write(device, 33, 1823);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step264 (HANDLE& device) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 13696);
  CSB_Write(device, 3, 1);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 1);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 128);
  CSB_Write(device, 8, 128);
  CSB_Write(device, 9, 1);
  CSB_Write(device, 10, 136742912);
  CSB_Write(device, 11, 71420928);
  CSB_Write(device, 12, 56576);
  CSB_Write(device, 13, 128681984);
  CSB_Write(device, 14, 31);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 4282368);
  CSB_Write(device, 27, 129730560);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 64);
  CSB_Write(device, 30, 64);
  CSB_Write(device, 31, 64);
  CSB_Write(device, 32, 64);
  CSB_Write(device, 33, 1823);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step265 (HANDLE& device) {
// accel.hbm.layer_norm accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 4298752);
  CSB_Write(device, 195, 128681984);
  CSB_Write(device, 196, 64);
  CSB_Write(device, 197, 64);
  CSB_Write(device, 198, 129730560);
  CSB_Write(device, 199, 64);
  CSB_Write(device, 200, 64);
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, 1);
  CSB_Write(device, 204, 1);
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step266 (HANDLE& device) {
// accel.hbm.mvm_bn accel operator node, storage data in cache88 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 1);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 1);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, 1);
  CSB_Write(device, 10, 129730560);
  CSB_Write(device, 11, 72326144);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 102337728);
  CSB_Write(device, 14, 8);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 4315136);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 64);
  CSB_Write(device, 30, 64);
  CSB_Write(device, 31, 8192);
  CSB_Write(device, 32, 8192);
  CSB_Write(device, 33, 799);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step267 (HANDLE& device) {
// accel.hbm.pos_emb accel operator node, storage data in cache89 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 1216);
  CSB_Write(device, 195, 102337728);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 103517376);
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, 34);
  CSB_Write(device, 204, 8192);
  CSB_Write(device, 205, 0);
  CSB_Write(device, 206, 0);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step268 (HANDLE& device) {
// accel.hbm.mvm_afterTRP accel operator node, storage data in cache90 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 104564736);
  CSB_Write(device, 195, 103517376);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 104631488);
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, 20);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, 1);
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 11688);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 2);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterTRP run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step269 (HANDLE& device) {
// accel.hbm.softmax accel operator node, storage data in cache91 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 0);
  CSB_Write(device, 195, 104630272);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 105678848);
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 1);
  CSB_Write(device, 202, 32);
  CSB_Write(device, 203, 20);
  CSB_Write(device, 204, 2);
  CSB_Write(device, 205, 1);
  CSB_Write(device, 206, 0);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 8);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.softmax run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step270 (HANDLE& device) {
// accel.hbm.mvm_afterF2W accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 103450624);
  CSB_Write(device, 195, 105680064);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 129730560);
  CSB_Write(device, 199, 5120);
  CSB_Write(device, 200, 1280);
  CSB_Write(device, 201, 1);
  CSB_Write(device, 202, 20);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, 1);
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 4);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 1);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterF2W run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step271 (HANDLE& device) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 1);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 1);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, 1);
  CSB_Write(device, 10, 129730560);
  CSB_Write(device, 11, 72630272);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 136742912);
  CSB_Write(device, 14, 7);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 4333568);
  CSB_Write(device, 27, 128681984);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 64);
  CSB_Write(device, 30, 64);
  CSB_Write(device, 31, 64);
  CSB_Write(device, 32, 64);
  CSB_Write(device, 33, 1823);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step272 (HANDLE& device) {
// accel.hbm.layer_norm accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 4349952);
  CSB_Write(device, 195, 136742912);
  CSB_Write(device, 196, 64);
  CSB_Write(device, 197, 64);
  CSB_Write(device, 198, 128681984);
  CSB_Write(device, 199, 64);
  CSB_Write(device, 200, 64);
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, 1);
  CSB_Write(device, 204, 1);
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step273 (HANDLE& device) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 1);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 1);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, 1);
  CSB_Write(device, 10, 128681984);
  CSB_Write(device, 11, 73804544);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 129730560);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 4421120);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 64);
  CSB_Write(device, 30, 64);
  CSB_Write(device, 31, 64);
  CSB_Write(device, 32, 64);
  CSB_Write(device, 33, 799);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step274 (HANDLE& device) {
// accel.hbm.activate accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 32768);
  CSB_Write(device, 195, 129730560);
  CSB_Write(device, 196, 64);
  CSB_Write(device, 197, 64);
  CSB_Write(device, 198, 133236736);
  CSB_Write(device, 199, 64);
  CSB_Write(device, 200, 64);
  CSB_Write(device, 201, 428);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, 1);
  CSB_Write(device, 204, 1);
  CSB_Write(device, 205, 428);
  CSB_Write(device, 206, 13696);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 16);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.activate run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step275 (HANDLE& device) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 1);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 1);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, 1);
  CSB_Write(device, 10, 128681984);
  CSB_Write(device, 11, 72900608);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 129730560);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 2);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 4366336);
  CSB_Write(device, 27, 133236736);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 64);
  CSB_Write(device, 30, 64);
  CSB_Write(device, 31, 64);
  CSB_Write(device, 32, 64);
  CSB_Write(device, 33, 1823);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step276 (HANDLE& device) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 13696);
  CSB_Write(device, 3, 1);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 1);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 128);
  CSB_Write(device, 8, 128);
  CSB_Write(device, 9, 1);
  CSB_Write(device, 10, 129730560);
  CSB_Write(device, 11, 74708480);
  CSB_Write(device, 12, 56576);
  CSB_Write(device, 13, 128681984);
  CSB_Write(device, 14, 31);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 4475904);
  CSB_Write(device, 27, 136742912);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 64);
  CSB_Write(device, 30, 64);
  CSB_Write(device, 31, 64);
  CSB_Write(device, 32, 64);
  CSB_Write(device, 33, 1823);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step277 (HANDLE& device) {
// accel.hbm.layer_norm accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 4492288);
  CSB_Write(device, 195, 128681984);
  CSB_Write(device, 196, 64);
  CSB_Write(device, 197, 64);
  CSB_Write(device, 198, 136742912);
  CSB_Write(device, 199, 64);
  CSB_Write(device, 200, 64);
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, 1);
  CSB_Write(device, 204, 1);
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step278 (HANDLE& device) {
// accel.hbm.mvm_bn accel operator node, storage data in cache92 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 1);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 1);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, 1);
  CSB_Write(device, 10, 136742912);
  CSB_Write(device, 11, 75613696);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 106728640);
  CSB_Write(device, 14, 8);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 4508672);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 64);
  CSB_Write(device, 30, 64);
  CSB_Write(device, 31, 8192);
  CSB_Write(device, 32, 8192);
  CSB_Write(device, 33, 799);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step279 (HANDLE& device) {
// accel.hbm.pos_emb accel operator node, storage data in cache93 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 1216);
  CSB_Write(device, 195, 106728640);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 107908288);
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, 34);
  CSB_Write(device, 204, 8192);
  CSB_Write(device, 205, 0);
  CSB_Write(device, 206, 0);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step280 (HANDLE& device) {
// accel.hbm.mvm_afterTRP accel operator node, storage data in cache94 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 108955648);
  CSB_Write(device, 195, 107908288);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 109022400);
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, 20);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, 1);
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 11688);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 2);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterTRP run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step281 (HANDLE& device) {
// accel.hbm.softmax accel operator node, storage data in cache95 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 0);
  CSB_Write(device, 195, 109021184);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 110069760);
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 1);
  CSB_Write(device, 202, 32);
  CSB_Write(device, 203, 20);
  CSB_Write(device, 204, 2);
  CSB_Write(device, 205, 1);
  CSB_Write(device, 206, 0);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 8);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.softmax run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step282 (HANDLE& device) {
// accel.hbm.mvm_afterF2W accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 107841536);
  CSB_Write(device, 195, 110070976);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 136742912);
  CSB_Write(device, 199, 5120);
  CSB_Write(device, 200, 1280);
  CSB_Write(device, 201, 1);
  CSB_Write(device, 202, 20);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, 1);
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 4);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 1);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterF2W run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step283 (HANDLE& device) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 1);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 1);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, 1);
  CSB_Write(device, 10, 136742912);
  CSB_Write(device, 11, 75917824);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 129730560);
  CSB_Write(device, 14, 7);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 4527104);
  CSB_Write(device, 27, 128681984);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 64);
  CSB_Write(device, 30, 64);
  CSB_Write(device, 31, 64);
  CSB_Write(device, 32, 64);
  CSB_Write(device, 33, 1823);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step284 (HANDLE& device) {
// accel.hbm.layer_norm accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 4543488);
  CSB_Write(device, 195, 129730560);
  CSB_Write(device, 196, 64);
  CSB_Write(device, 197, 64);
  CSB_Write(device, 198, 128681984);
  CSB_Write(device, 199, 64);
  CSB_Write(device, 200, 64);
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, 1);
  CSB_Write(device, 204, 1);
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step285 (HANDLE& device) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 1);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 1);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, 1);
  CSB_Write(device, 10, 128681984);
  CSB_Write(device, 11, 77092096);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 136742912);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 4614656);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 64);
  CSB_Write(device, 30, 64);
  CSB_Write(device, 31, 64);
  CSB_Write(device, 32, 64);
  CSB_Write(device, 33, 799);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step286 (HANDLE& device) {
// accel.hbm.activate accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 32768);
  CSB_Write(device, 195, 136742912);
  CSB_Write(device, 196, 64);
  CSB_Write(device, 197, 64);
  CSB_Write(device, 198, 133236736);
  CSB_Write(device, 199, 64);
  CSB_Write(device, 200, 64);
  CSB_Write(device, 201, 428);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, 1);
  CSB_Write(device, 204, 1);
  CSB_Write(device, 205, 428);
  CSB_Write(device, 206, 13696);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 16);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.activate run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step287 (HANDLE& device) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 1);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 1);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, 1);
  CSB_Write(device, 10, 128681984);
  CSB_Write(device, 11, 76188160);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 136742912);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 2);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 4559872);
  CSB_Write(device, 27, 133236736);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 64);
  CSB_Write(device, 30, 64);
  CSB_Write(device, 31, 64);
  CSB_Write(device, 32, 64);
  CSB_Write(device, 33, 1823);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step288 (HANDLE& device) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 13696);
  CSB_Write(device, 3, 1);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 1);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 128);
  CSB_Write(device, 8, 128);
  CSB_Write(device, 9, 1);
  CSB_Write(device, 10, 136742912);
  CSB_Write(device, 11, 77996032);
  CSB_Write(device, 12, 56576);
  CSB_Write(device, 13, 128681984);
  CSB_Write(device, 14, 31);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 4669440);
  CSB_Write(device, 27, 129730560);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 64);
  CSB_Write(device, 30, 64);
  CSB_Write(device, 31, 64);
  CSB_Write(device, 32, 64);
  CSB_Write(device, 33, 1823);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step289 (HANDLE& device) {
// accel.hbm.layer_norm accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 4685824);
  CSB_Write(device, 195, 128681984);
  CSB_Write(device, 196, 64);
  CSB_Write(device, 197, 64);
  CSB_Write(device, 198, 129730560);
  CSB_Write(device, 199, 64);
  CSB_Write(device, 200, 64);
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, 1);
  CSB_Write(device, 204, 1);
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step290 (HANDLE& device) {
// accel.hbm.mvm_bn accel operator node, storage data in cache96 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 1);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 1);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, 1);
  CSB_Write(device, 10, 129730560);
  CSB_Write(device, 11, 78901248);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 111119552);
  CSB_Write(device, 14, 8);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 4702208);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 64);
  CSB_Write(device, 30, 64);
  CSB_Write(device, 31, 8192);
  CSB_Write(device, 32, 8192);
  CSB_Write(device, 33, 799);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step291 (HANDLE& device) {
// accel.hbm.pos_emb accel operator node, storage data in cache97 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 1216);
  CSB_Write(device, 195, 111119552);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 112299200);
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, 34);
  CSB_Write(device, 204, 8192);
  CSB_Write(device, 205, 0);
  CSB_Write(device, 206, 0);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step292 (HANDLE& device) {
// accel.hbm.mvm_afterTRP accel operator node, storage data in cache98 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 113346560);
  CSB_Write(device, 195, 112299200);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 113413312);
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, 20);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, 1);
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 11688);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 2);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterTRP run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step293 (HANDLE& device) {
// accel.hbm.softmax accel operator node, storage data in cache99 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 0);
  CSB_Write(device, 195, 113412096);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 114460672);
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 1);
  CSB_Write(device, 202, 32);
  CSB_Write(device, 203, 20);
  CSB_Write(device, 204, 2);
  CSB_Write(device, 205, 1);
  CSB_Write(device, 206, 0);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 8);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.softmax run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step294 (HANDLE& device) {
// accel.hbm.mvm_afterF2W accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 112232448);
  CSB_Write(device, 195, 114461888);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 129730560);
  CSB_Write(device, 199, 5120);
  CSB_Write(device, 200, 1280);
  CSB_Write(device, 201, 1);
  CSB_Write(device, 202, 20);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, 1);
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 4);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 1);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterF2W run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step295 (HANDLE& device) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 1);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 1);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, 1);
  CSB_Write(device, 10, 129730560);
  CSB_Write(device, 11, 79205376);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 136742912);
  CSB_Write(device, 14, 7);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 4720640);
  CSB_Write(device, 27, 128681984);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 64);
  CSB_Write(device, 30, 64);
  CSB_Write(device, 31, 64);
  CSB_Write(device, 32, 64);
  CSB_Write(device, 33, 1823);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step296 (HANDLE& device) {
// accel.hbm.layer_norm accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 4737024);
  CSB_Write(device, 195, 136742912);
  CSB_Write(device, 196, 64);
  CSB_Write(device, 197, 64);
  CSB_Write(device, 198, 128681984);
  CSB_Write(device, 199, 64);
  CSB_Write(device, 200, 64);
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, 1);
  CSB_Write(device, 204, 1);
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step297 (HANDLE& device) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 1);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 1);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, 1);
  CSB_Write(device, 10, 128681984);
  CSB_Write(device, 11, 80379648);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 129730560);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 4808192);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 64);
  CSB_Write(device, 30, 64);
  CSB_Write(device, 31, 64);
  CSB_Write(device, 32, 64);
  CSB_Write(device, 33, 799);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step298 (HANDLE& device) {
// accel.hbm.activate accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 32768);
  CSB_Write(device, 195, 129730560);
  CSB_Write(device, 196, 64);
  CSB_Write(device, 197, 64);
  CSB_Write(device, 198, 133236736);
  CSB_Write(device, 199, 64);
  CSB_Write(device, 200, 64);
  CSB_Write(device, 201, 428);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, 1);
  CSB_Write(device, 204, 1);
  CSB_Write(device, 205, 428);
  CSB_Write(device, 206, 13696);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 16);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.activate run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step299 (HANDLE& device) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 1);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 1);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, 1);
  CSB_Write(device, 10, 128681984);
  CSB_Write(device, 11, 79475712);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 129730560);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 2);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 4753408);
  CSB_Write(device, 27, 133236736);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 64);
  CSB_Write(device, 30, 64);
  CSB_Write(device, 31, 64);
  CSB_Write(device, 32, 64);
  CSB_Write(device, 33, 1823);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step300 (HANDLE& device) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 13696);
  CSB_Write(device, 3, 1);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 1);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 128);
  CSB_Write(device, 8, 128);
  CSB_Write(device, 9, 1);
  CSB_Write(device, 10, 129730560);
  CSB_Write(device, 11, 81283584);
  CSB_Write(device, 12, 56576);
  CSB_Write(device, 13, 128681984);
  CSB_Write(device, 14, 31);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 4862976);
  CSB_Write(device, 27, 136742912);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 64);
  CSB_Write(device, 30, 64);
  CSB_Write(device, 31, 64);
  CSB_Write(device, 32, 64);
  CSB_Write(device, 33, 1823);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step301 (HANDLE& device) {
// accel.hbm.layer_norm accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 4879360);
  CSB_Write(device, 195, 128681984);
  CSB_Write(device, 196, 64);
  CSB_Write(device, 197, 64);
  CSB_Write(device, 198, 136742912);
  CSB_Write(device, 199, 64);
  CSB_Write(device, 200, 64);
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, 1);
  CSB_Write(device, 204, 1);
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step302 (HANDLE& device) {
// accel.hbm.mvm_bn accel operator node, storage data in cache100 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 1);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 1);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, 1);
  CSB_Write(device, 10, 136742912);
  CSB_Write(device, 11, 82188800);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 115510464);
  CSB_Write(device, 14, 8);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 4895744);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 64);
  CSB_Write(device, 30, 64);
  CSB_Write(device, 31, 8192);
  CSB_Write(device, 32, 8192);
  CSB_Write(device, 33, 799);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step303 (HANDLE& device) {
// accel.hbm.pos_emb accel operator node, storage data in cache101 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 1216);
  CSB_Write(device, 195, 115510464);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 116690112);
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, 34);
  CSB_Write(device, 204, 8192);
  CSB_Write(device, 205, 0);
  CSB_Write(device, 206, 0);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step304 (HANDLE& device) {
// accel.hbm.mvm_afterTRP accel operator node, storage data in cache102 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 117737472);
  CSB_Write(device, 195, 116690112);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 117804224);
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, 20);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, 1);
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 11688);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 2);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterTRP run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step305 (HANDLE& device) {
// accel.hbm.softmax accel operator node, storage data in cache103 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 0);
  CSB_Write(device, 195, 117803008);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 118851584);
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 1);
  CSB_Write(device, 202, 32);
  CSB_Write(device, 203, 20);
  CSB_Write(device, 204, 2);
  CSB_Write(device, 205, 1);
  CSB_Write(device, 206, 0);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 8);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.softmax run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step306 (HANDLE& device) {
// accel.hbm.mvm_afterF2W accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 116623360);
  CSB_Write(device, 195, 118852800);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 136742912);
  CSB_Write(device, 199, 5120);
  CSB_Write(device, 200, 1280);
  CSB_Write(device, 201, 1);
  CSB_Write(device, 202, 20);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, 1);
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 4);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 1);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterF2W run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step307 (HANDLE& device) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 1);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 1);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, 1);
  CSB_Write(device, 10, 136742912);
  CSB_Write(device, 11, 82492928);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 129730560);
  CSB_Write(device, 14, 7);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 4914176);
  CSB_Write(device, 27, 128681984);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 64);
  CSB_Write(device, 30, 64);
  CSB_Write(device, 31, 64);
  CSB_Write(device, 32, 64);
  CSB_Write(device, 33, 1823);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step308 (HANDLE& device) {
// accel.hbm.layer_norm accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 4930560);
  CSB_Write(device, 195, 129730560);
  CSB_Write(device, 196, 64);
  CSB_Write(device, 197, 64);
  CSB_Write(device, 198, 128681984);
  CSB_Write(device, 199, 64);
  CSB_Write(device, 200, 64);
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, 1);
  CSB_Write(device, 204, 1);
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step309 (HANDLE& device) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 1);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 1);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, 1);
  CSB_Write(device, 10, 128681984);
  CSB_Write(device, 11, 83667200);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 136742912);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 5001728);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 64);
  CSB_Write(device, 30, 64);
  CSB_Write(device, 31, 64);
  CSB_Write(device, 32, 64);
  CSB_Write(device, 33, 799);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step310 (HANDLE& device) {
// accel.hbm.activate accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 32768);
  CSB_Write(device, 195, 136742912);
  CSB_Write(device, 196, 64);
  CSB_Write(device, 197, 64);
  CSB_Write(device, 198, 133236736);
  CSB_Write(device, 199, 64);
  CSB_Write(device, 200, 64);
  CSB_Write(device, 201, 428);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, 1);
  CSB_Write(device, 204, 1);
  CSB_Write(device, 205, 428);
  CSB_Write(device, 206, 13696);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 16);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.activate run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step311 (HANDLE& device) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 1);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 1);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, 1);
  CSB_Write(device, 10, 128681984);
  CSB_Write(device, 11, 82763264);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 136742912);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 2);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 4946944);
  CSB_Write(device, 27, 133236736);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 64);
  CSB_Write(device, 30, 64);
  CSB_Write(device, 31, 64);
  CSB_Write(device, 32, 64);
  CSB_Write(device, 33, 1823);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step312 (HANDLE& device) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 13696);
  CSB_Write(device, 3, 1);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 1);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 128);
  CSB_Write(device, 8, 128);
  CSB_Write(device, 9, 1);
  CSB_Write(device, 10, 136742912);
  CSB_Write(device, 11, 84571136);
  CSB_Write(device, 12, 56576);
  CSB_Write(device, 13, 128681984);
  CSB_Write(device, 14, 31);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 5056512);
  CSB_Write(device, 27, 129730560);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 64);
  CSB_Write(device, 30, 64);
  CSB_Write(device, 31, 64);
  CSB_Write(device, 32, 64);
  CSB_Write(device, 33, 1823);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step313 (HANDLE& device) {
// accel.hbm.layer_norm accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 5072896);
  CSB_Write(device, 195, 128681984);
  CSB_Write(device, 196, 64);
  CSB_Write(device, 197, 64);
  CSB_Write(device, 198, 129730560);
  CSB_Write(device, 199, 64);
  CSB_Write(device, 200, 64);
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, 1);
  CSB_Write(device, 204, 1);
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step314 (HANDLE& device) {
// accel.hbm.mvm_bn accel operator node, storage data in cache104 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 1);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 1);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, 1);
  CSB_Write(device, 10, 129730560);
  CSB_Write(device, 11, 85476352);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 119901376);
  CSB_Write(device, 14, 8);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 5089280);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 64);
  CSB_Write(device, 30, 64);
  CSB_Write(device, 31, 8192);
  CSB_Write(device, 32, 8192);
  CSB_Write(device, 33, 799);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step315 (HANDLE& device) {
// accel.hbm.pos_emb accel operator node, storage data in cache105 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 1216);
  CSB_Write(device, 195, 119901376);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 121081024);
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, 34);
  CSB_Write(device, 204, 8192);
  CSB_Write(device, 205, 0);
  CSB_Write(device, 206, 0);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step316 (HANDLE& device) {
// accel.hbm.mvm_afterTRP accel operator node, storage data in cache106 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 122128384);
  CSB_Write(device, 195, 121081024);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 122195136);
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, 20);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, 1);
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 11688);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 2);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterTRP run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step317 (HANDLE& device) {
// accel.hbm.softmax accel operator node, storage data in cache107 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 0);
  CSB_Write(device, 195, 122193920);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 123242496);
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 1);
  CSB_Write(device, 202, 32);
  CSB_Write(device, 203, 20);
  CSB_Write(device, 204, 2);
  CSB_Write(device, 205, 1);
  CSB_Write(device, 206, 0);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 8);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.softmax run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step318 (HANDLE& device) {
// accel.hbm.mvm_afterF2W accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 121014272);
  CSB_Write(device, 195, 123243712);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 129730560);
  CSB_Write(device, 199, 5120);
  CSB_Write(device, 200, 1280);
  CSB_Write(device, 201, 1);
  CSB_Write(device, 202, 20);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, 1);
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 4);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 1);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterF2W run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step319 (HANDLE& device) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 1);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 1);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, 1);
  CSB_Write(device, 10, 129730560);
  CSB_Write(device, 11, 85780480);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 136742912);
  CSB_Write(device, 14, 7);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 5107712);
  CSB_Write(device, 27, 128681984);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 64);
  CSB_Write(device, 30, 64);
  CSB_Write(device, 31, 64);
  CSB_Write(device, 32, 64);
  CSB_Write(device, 33, 1823);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step320 (HANDLE& device) {
// accel.hbm.layer_norm accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 5124096);
  CSB_Write(device, 195, 136742912);
  CSB_Write(device, 196, 64);
  CSB_Write(device, 197, 64);
  CSB_Write(device, 198, 128681984);
  CSB_Write(device, 199, 64);
  CSB_Write(device, 200, 64);
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, 1);
  CSB_Write(device, 204, 1);
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step321 (HANDLE& device) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 1);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 1);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, 1);
  CSB_Write(device, 10, 128681984);
  CSB_Write(device, 11, 86954752);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 129730560);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 5195264);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 64);
  CSB_Write(device, 30, 64);
  CSB_Write(device, 31, 64);
  CSB_Write(device, 32, 64);
  CSB_Write(device, 33, 799);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step322 (HANDLE& device) {
// accel.hbm.activate accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 32768);
  CSB_Write(device, 195, 129730560);
  CSB_Write(device, 196, 64);
  CSB_Write(device, 197, 64);
  CSB_Write(device, 198, 133236736);
  CSB_Write(device, 199, 64);
  CSB_Write(device, 200, 64);
  CSB_Write(device, 201, 428);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, 1);
  CSB_Write(device, 204, 1);
  CSB_Write(device, 205, 428);
  CSB_Write(device, 206, 13696);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 16);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.activate run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step323 (HANDLE& device) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 1);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 1);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, 1);
  CSB_Write(device, 10, 128681984);
  CSB_Write(device, 11, 86050816);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 129730560);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 2);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 5140480);
  CSB_Write(device, 27, 133236736);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 64);
  CSB_Write(device, 30, 64);
  CSB_Write(device, 31, 64);
  CSB_Write(device, 32, 64);
  CSB_Write(device, 33, 1823);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step324 (HANDLE& device) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 13696);
  CSB_Write(device, 3, 1);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 1);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 128);
  CSB_Write(device, 8, 128);
  CSB_Write(device, 9, 1);
  CSB_Write(device, 10, 129730560);
  CSB_Write(device, 11, 87858688);
  CSB_Write(device, 12, 56576);
  CSB_Write(device, 13, 128681984);
  CSB_Write(device, 14, 31);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 5250048);
  CSB_Write(device, 27, 136742912);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 64);
  CSB_Write(device, 30, 64);
  CSB_Write(device, 31, 64);
  CSB_Write(device, 32, 64);
  CSB_Write(device, 33, 1823);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step325 (HANDLE& device) {
// accel.hbm.layer_norm accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 5266432);
  CSB_Write(device, 195, 128681984);
  CSB_Write(device, 196, 64);
  CSB_Write(device, 197, 64);
  CSB_Write(device, 198, 136742912);
  CSB_Write(device, 199, 64);
  CSB_Write(device, 200, 64);
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, 1);
  CSB_Write(device, 204, 1);
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step326 (HANDLE& device) {
// accel.hbm.mvm_bn accel operator node, storage data in cache108 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 1);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 1);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, 1);
  CSB_Write(device, 10, 136742912);
  CSB_Write(device, 11, 88763904);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 124292288);
  CSB_Write(device, 14, 8);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 5282816);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 64);
  CSB_Write(device, 30, 64);
  CSB_Write(device, 31, 8192);
  CSB_Write(device, 32, 8192);
  CSB_Write(device, 33, 799);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step327 (HANDLE& device) {
// accel.hbm.pos_emb accel operator node, storage data in cache109 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 1216);
  CSB_Write(device, 195, 124292288);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 125471936);
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, 34);
  CSB_Write(device, 204, 8192);
  CSB_Write(device, 205, 0);
  CSB_Write(device, 206, 0);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step328 (HANDLE& device) {
// accel.hbm.mvm_afterTRP accel operator node, storage data in cache110 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 126519296);
  CSB_Write(device, 195, 125471936);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 126586048);
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, 20);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, 1);
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 11688);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 2);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterTRP run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step329 (HANDLE& device) {
// accel.hbm.softmax accel operator node, storage data in cache111 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 0);
  CSB_Write(device, 195, 126584832);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 127633408);
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 1);
  CSB_Write(device, 202, 32);
  CSB_Write(device, 203, 20);
  CSB_Write(device, 204, 2);
  CSB_Write(device, 205, 1);
  CSB_Write(device, 206, 0);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 8);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.softmax run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step330 (HANDLE& device) {
// accel.hbm.mvm_afterF2W accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 125405184);
  CSB_Write(device, 195, 127634624);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 136742912);
  CSB_Write(device, 199, 5120);
  CSB_Write(device, 200, 1280);
  CSB_Write(device, 201, 1);
  CSB_Write(device, 202, 20);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, 1);
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 4);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 1);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterF2W run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step331 (HANDLE& device) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 1);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 1);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, 1);
  CSB_Write(device, 10, 136742912);
  CSB_Write(device, 11, 89068032);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 129730560);
  CSB_Write(device, 14, 7);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 5301248);
  CSB_Write(device, 27, 128681984);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 64);
  CSB_Write(device, 30, 64);
  CSB_Write(device, 31, 64);
  CSB_Write(device, 32, 64);
  CSB_Write(device, 33, 1823);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step332 (HANDLE& device) {
// accel.hbm.layer_norm accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 5317632);
  CSB_Write(device, 195, 129730560);
  CSB_Write(device, 196, 64);
  CSB_Write(device, 197, 64);
  CSB_Write(device, 198, 128681984);
  CSB_Write(device, 199, 64);
  CSB_Write(device, 200, 64);
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, 1);
  CSB_Write(device, 204, 1);
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step333 (HANDLE& device) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 1);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 1);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, 1);
  CSB_Write(device, 10, 128681984);
  CSB_Write(device, 11, 90242304);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 136742912);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 5388800);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 64);
  CSB_Write(device, 30, 64);
  CSB_Write(device, 31, 64);
  CSB_Write(device, 32, 64);
  CSB_Write(device, 33, 799);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step334 (HANDLE& device) {
// accel.hbm.activate accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 32768);
  CSB_Write(device, 195, 136742912);
  CSB_Write(device, 196, 64);
  CSB_Write(device, 197, 64);
  CSB_Write(device, 198, 133236736);
  CSB_Write(device, 199, 64);
  CSB_Write(device, 200, 64);
  CSB_Write(device, 201, 428);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, 1);
  CSB_Write(device, 204, 1);
  CSB_Write(device, 205, 428);
  CSB_Write(device, 206, 13696);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 16);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.activate run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step335 (HANDLE& device) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 1);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 1);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, 1);
  CSB_Write(device, 10, 128681984);
  CSB_Write(device, 11, 89338368);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 136742912);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 2);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 5334016);
  CSB_Write(device, 27, 133236736);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 64);
  CSB_Write(device, 30, 64);
  CSB_Write(device, 31, 64);
  CSB_Write(device, 32, 64);
  CSB_Write(device, 33, 1823);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step336 (HANDLE& device) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 13696);
  CSB_Write(device, 3, 1);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 1);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 128);
  CSB_Write(device, 8, 128);
  CSB_Write(device, 9, 1);
  CSB_Write(device, 10, 136742912);
  CSB_Write(device, 11, 91146240);
  CSB_Write(device, 12, 56576);
  CSB_Write(device, 13, 128681984);
  CSB_Write(device, 14, 31);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 5443584);
  CSB_Write(device, 27, 129730560);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 64);
  CSB_Write(device, 30, 64);
  CSB_Write(device, 31, 64);
  CSB_Write(device, 32, 64);
  CSB_Write(device, 33, 1823);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step337 (HANDLE& device) {
// accel.hbm.layer_norm accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 5459968);
  CSB_Write(device, 195, 128681984);
  CSB_Write(device, 196, 64);
  CSB_Write(device, 197, 64);
  CSB_Write(device, 198, 129730560);
  CSB_Write(device, 199, 64);
  CSB_Write(device, 200, 64);
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, 1);
  CSB_Write(device, 204, 1);
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step338 (HANDLE& device) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 1);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 1);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, 1);
  CSB_Write(device, 10, 129731776);
  CSB_Write(device, 11, 92051456);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 136742912);
  CSB_Write(device, 14, 126);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 5476352);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 64);
  CSB_Write(device, 30, 64);
  CSB_Write(device, 31, 64);
  CSB_Write(device, 32, 64);
  CSB_Write(device, 60, 128681984);
  CSB_Write(device, 33, 2847);
  while(CSB_Read(device, 61) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}


void chatglm_with_kvcache_28_0422_2029(HANDLE& device) {
  step1(device);
  step2(device);
  step3(device);
  step4(device);
  step5(device);
  step6(device);
  step7(device);
  step8(device);
  step9(device);
  step10(device);
  step11(device);
  step12(device);
  step13(device);
  step14(device);
  step15(device);
  step16(device);
  step17(device);
  step18(device);
  step19(device);
  step20(device);
  step21(device);
  step22(device);
  step23(device);
  step24(device);
  step25(device);
  step26(device);
  step27(device);
  step28(device);
  step29(device);
  step30(device);
  step31(device);
  step32(device);
  step33(device);
  step34(device);
  step35(device);
  step36(device);
  step37(device);
  step38(device);
  step39(device);
  step40(device);
  step41(device);
  step42(device);
  step43(device);
  step44(device);
  step45(device);
  step46(device);
  step47(device);
  step48(device);
  step49(device);
  step50(device);
  step51(device);
  step52(device);
  step53(device);
  step54(device);
  step55(device);
  step56(device);
  step57(device);
  step58(device);
  step59(device);
  step60(device);
  step61(device);
  step62(device);
  step63(device);
  step64(device);
  step65(device);
  step66(device);
  step67(device);
  step68(device);
  step69(device);
  step70(device);
  step71(device);
  step72(device);
  step73(device);
  step74(device);
  step75(device);
  step76(device);
  step77(device);
  step78(device);
  step79(device);
  step80(device);
  step81(device);
  step82(device);
  step83(device);
  step84(device);
  step85(device);
  step86(device);
  step87(device);
  step88(device);
  step89(device);
  step90(device);
  step91(device);
  step92(device);
  step93(device);
  step94(device);
  step95(device);
  step96(device);
  step97(device);
  step98(device);
  step99(device);
  step100(device);
  step101(device);
  step102(device);
  step103(device);
  step104(device);
  step105(device);
  step106(device);
  step107(device);
  step108(device);
  step109(device);
  step110(device);
  step111(device);
  step112(device);
  step113(device);
  step114(device);
  step115(device);
  step116(device);
  step117(device);
  step118(device);
  step119(device);
  step120(device);
  step121(device);
  step122(device);
  step123(device);
  step124(device);
  step125(device);
  step126(device);
  step127(device);
  step128(device);
  step129(device);
  step130(device);
  step131(device);
  step132(device);
  step133(device);
  step134(device);
  step135(device);
  step136(device);
  step137(device);
  step138(device);
  step139(device);
  step140(device);
  step141(device);
  step142(device);
  step143(device);
  step144(device);
  step145(device);
  step146(device);
  step147(device);
  step148(device);
  step149(device);
  step150(device);
  step151(device);
  step152(device);
  step153(device);
  step154(device);
  step155(device);
  step156(device);
  step157(device);
  step158(device);
  step159(device);
  step160(device);
  step161(device);
  step162(device);
  step163(device);
  step164(device);
  step165(device);
  step166(device);
  step167(device);
  step168(device);
  step169(device);
  step170(device);
  step171(device);
  step172(device);
  step173(device);
  step174(device);
  step175(device);
  step176(device);
  step177(device);
  step178(device);
  step179(device);
  step180(device);
  step181(device);
  step182(device);
  step183(device);
  step184(device);
  step185(device);
  step186(device);
  step187(device);
  step188(device);
  step189(device);
  step190(device);
  step191(device);
  step192(device);
  step193(device);
  step194(device);
  step195(device);
  step196(device);
  step197(device);
  step198(device);
  step199(device);
  step200(device);
  step201(device);
  step202(device);
  step203(device);
  step204(device);
  step205(device);
  step206(device);
  step207(device);
  step208(device);
  step209(device);
  step210(device);
  step211(device);
  step212(device);
  step213(device);
  step214(device);
  step215(device);
  step216(device);
  step217(device);
  step218(device);
  step219(device);
  step220(device);
  step221(device);
  step222(device);
  step223(device);
  step224(device);
  step225(device);
  step226(device);
  step227(device);
  step228(device);
  step229(device);
  step230(device);
  step231(device);
  step232(device);
  step233(device);
  step234(device);
  step235(device);
  step236(device);
  step237(device);
  step238(device);
  step239(device);
  step240(device);
  step241(device);
  step242(device);
  step243(device);
  step244(device);
  step245(device);
  step246(device);
  step247(device);
  step248(device);
  step249(device);
  step250(device);
  step251(device);
  step252(device);
  step253(device);
  step254(device);
  step255(device);
  step256(device);
  step257(device);
  step258(device);
  step259(device);
  step260(device);
  step261(device);
  step262(device);
  step263(device);
  step264(device);
  step265(device);
  step266(device);
  step267(device);
  step268(device);
  step269(device);
  step270(device);
  step271(device);
  step272(device);
  step273(device);
  step274(device);
  step275(device);
  step276(device);
  step277(device);
  step278(device);
  step279(device);
  step280(device);
  step281(device);
  step282(device);
  step283(device);
  step284(device);
  step285(device);
  step286(device);
  step287(device);
  step288(device);
  step289(device);
  step290(device);
  step291(device);
  step292(device);
  step293(device);
  step294(device);
  step295(device);
  step296(device);
  step297(device);
  step298(device);
  step299(device);
  step300(device);
  step301(device);
  step302(device);
  step303(device);
  step304(device);
  step305(device);
  step306(device);
  step307(device);
  step308(device);
  step309(device);
  step310(device);
  step311(device);
  step312(device);
  step313(device);
  step314(device);
  step315(device);
  step316(device);
  step317(device);
  step318(device);
  step319(device);
  step320(device);
  step321(device);
  step322(device);
  step323(device);
  step324(device);
  step325(device);
  step326(device);
  step327(device);
  step328(device);
  step329(device);
  step330(device);
  step331(device);
  step332(device);
  step333(device);
  step334(device);
  step335(device);
  step336(device);
  step337(device);
  step338(device);
}
