// generated by codegen c++ test ops head at 2024-07-09 20:32:33
// runtime storage define
uint64_t runtime0 = 0x200000000; // storage size: 4096 B
uint64_t runtime1 = 0x200001000; // storage size: 65536 B
// hbm storage define
uint64_t hbm0 = 0x000000000; // storage size: 6144 B
uint64_t hbm1 = 0x000001800; // storage size: 4224 B

// get input ptr
uint64_t data_in = 0x200000000; // 0

// get output ptr
uint64_t data_out = 0x200000000; // 0

// get weight ddr ptr


// get weight hbm ptr
uint64_t weight0 = 0x000000000; // 0
uint64_t weight1 = 0x000001800; // 6144

// mod init
void kvmvm_token_0709_2032_load_params(HANDLE& device, HANDLE& h2cx) {

}

void step1 (HANDLE& device, int token) {
// accel.hbm.mvm accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 128);
  CSB_Write(device, 3, 16);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 16);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, ((((((token + 32) - 1) / 32) * 32) <= 32768) ? ((((token + 32) - 1) / 32) * 32) : 32768));
  CSB_Write(device, 8, ((((((token + 32) - 1) / 32) * 32) % ((((((token + 32) - 1) / 32) * 32) <= 32768) ? ((((token + 32) - 1) / 32) * 32) : 32768)) ? (((((token + 32) - 1) / 32) * 32) % ((((((token + 32) - 1) / 32) * 32) <= 32768) ? ((((token + 32) - 1) / 32) * 32) : 32768)) : ((((((token + 32) - 1) / 32) * 32) <= 32768) ? ((((token + 32) - 1) / 32) * 32) : 32768)));
  CSB_Write(device, 9, 16);
  CSB_Write(device, 10, 0);
  CSB_Write(device, 11, 0);
  CSB_Write(device, 12, ((((((((((token + 32) - 1) / 32) * 32) * 128) * 4) >> 3) + (((((((token + 32) - 1) / 32) * 32) * 256) * 1) >> 3)) / ((((token + 32) - 1) / 32) * 32)) * 8));
  CSB_Write(device, 13, 4096);
  CSB_Write(device, 14, (((((((((token + 32) - 1) / 32) * 32) <= 32768) ? ((((token + 32) - 1) / 32) * 32) : 32768) >= ((((token + 32) - 1) / 32) * 32)) ? 1 : (((((((token + 32) - 1) / 32) * 32) + ((((((token + 32) - 1) / 32) * 32) <= 32768) ? ((((token + 32) - 1) / 32) * 32) : 32768)) - 1) / ((((((token + 32) - 1) / 32) * 32) <= 32768) ? ((((token + 32) - 1) / 32) * 32) : 32768))) - 1));
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 0);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 1024);
  CSB_Write(device, 30, 1024);
  CSB_Write(device, 31, 1024);
  CSB_Write(device, 32, 1024);
  CSB_Write(device, 33, 287);
#ifdef PRINT_STEP
printf("start: step1!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step2 (HANDLE& device, int token) {
// accel.hbm.mvm accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, ((((token + 32) - 1) / 32) * 32));
  CSB_Write(device, 3, 16);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 16);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, ((((2048 / (((((token + 128) - 1) / 128) * 2) * 1)) * 32) >= 128) ? 128 : ((2048 / (((((token + 128) - 1) / 128) * 2) * 1)) * 32)));
  CSB_Write(device, 8, ((128 % ((((2048 / (((((token + 128) - 1) / 128) * 2) * 1)) * 32) >= 128) ? 128 : ((2048 / (((((token + 128) - 1) / 128) * 2) * 1)) * 32))) ? (128 % ((((2048 / (((((token + 128) - 1) / 128) * 2) * 1)) * 32) >= 128) ? 128 : ((2048 / (((((token + 128) - 1) / 128) * 2) * 1)) * 32))) : ((((2048 / (((((token + 128) - 1) / 128) * 2) * 1)) * 32) >= 128) ? 128 : ((2048 / (((((token + 128) - 1) / 128) * 2) * 1)) * 32))));
  CSB_Write(device, 9, 16);
  CSB_Write(device, 10, 4096);
  CSB_Write(device, 11, 6144);
  CSB_Write(device, 12, ((((((128 * ((((token + 128) - 1) / 128) * 128)) * 4) >> 3) + ((32768 * (((((((token + 128) - 1) / 128) * 128) + 2048) - 1) / 2048)) >> 3)) / 128) * 8));
  CSB_Write(device, 13, 0);
  CSB_Write(device, 14, (((((((2048 / (((((token + 128) - 1) / 128) * 2) * 1)) * 32) >= 128) ? 128 : ((2048 / (((((token + 128) - 1) / 128) * 2) * 1)) * 32)) >= 128) ? 1 : (((128 + ((((2048 / (((((token + 128) - 1) / 128) * 2) * 1)) * 32) >= 128) ? 128 : ((2048 / (((((token + 128) - 1) / 128) * 2) * 1)) * 32))) - 1) / ((((2048 / (((((token + 128) - 1) / 128) * 2) * 1)) * 32) >= 128) ? 128 : ((2048 / (((((token + 128) - 1) / 128) * 2) * 1)) * 32)))) - 1));
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 0);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 1024);
  CSB_Write(device, 30, 1024);
  CSB_Write(device, 31, 1024);
  CSB_Write(device, 32, 1024);
  CSB_Write(device, 33, 287);
#ifdef PRINT_STEP
printf("start: step2!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}


void kvmvm_token_0709_2032(HANDLE& device, int token) {
  step1(device, token);
  step2(device, token);
}
