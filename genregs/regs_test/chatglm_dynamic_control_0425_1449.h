// generated by codegen c++ test ops head at 2024-04-25 14:49:40
// global storage define
static uint8_t* global0 = (uint8_t*)0x200000000; // storage size: 32768 B
static uint8_t* global1 = (uint8_t*)0x200008000; // storage size: 8192 B
// weight storage define
static uint8_t* weight0 = (uint8_t*)0x20000a000; // storage size: 16384 B
static uint8_t* weight1 = (uint8_t*)0x20000e000; // storage size: 18432 B
static uint8_t* weight2 = (uint8_t*)0x200012800; // storage size: 16384 B
static uint8_t* weight3 = (uint8_t*)0x200016800; // storage size: 16384 B
static uint8_t* weight4 = (uint8_t*)0x20001a800; // storage size: 54784 B
static uint8_t* weight5 = (uint8_t*)0x200027e00; // storage size: 54784 B
static uint8_t* weight6 = (uint8_t*)0x200035400; // storage size: 16384 B
static uint8_t* weight7 = (uint8_t*)0x200039400; // storage size: 16384 B
static uint8_t* weight8 = (uint8_t*)0x20003d400; // storage size: 18432 B
static uint8_t* weight9 = (uint8_t*)0x200041c00; // storage size: 16384 B
static uint8_t* weight10 = (uint8_t*)0x200045c00; // storage size: 16384 B
static uint8_t* weight11 = (uint8_t*)0x200049c00; // storage size: 54784 B
static uint8_t* weight12 = (uint8_t*)0x200057200; // storage size: 54784 B
static uint8_t* weight13 = (uint8_t*)0x200064800; // storage size: 16384 B
static uint8_t* weight14 = (uint8_t*)0x200068800; // storage size: 16384 B
static uint8_t* weight15 = (uint8_t*)0x20006c800; // storage size: 18432 B
static uint8_t* weight16 = (uint8_t*)0x200071000; // storage size: 16384 B
static uint8_t* weight17 = (uint8_t*)0x200075000; // storage size: 16384 B
static uint8_t* weight18 = (uint8_t*)0x200079000; // storage size: 54784 B
static uint8_t* weight19 = (uint8_t*)0x200086600; // storage size: 54784 B
static uint8_t* weight20 = (uint8_t*)0x200093c00; // storage size: 16384 B
static uint8_t* weight21 = (uint8_t*)0x200097c00; // storage size: 16384 B
static uint8_t* weight22 = (uint8_t*)0x20009bc00; // storage size: 18432 B
static uint8_t* weight23 = (uint8_t*)0x2000a0400; // storage size: 16384 B
static uint8_t* weight24 = (uint8_t*)0x2000a4400; // storage size: 16384 B
static uint8_t* weight25 = (uint8_t*)0x2000a8400; // storage size: 54784 B
static uint8_t* weight26 = (uint8_t*)0x2000b5a00; // storage size: 54784 B
static uint8_t* weight27 = (uint8_t*)0x2000c3000; // storage size: 16384 B
static uint8_t* weight28 = (uint8_t*)0x2000c7000; // storage size: 16384 B
static uint8_t* weight29 = (uint8_t*)0x2000cb000; // storage size: 18432 B
static uint8_t* weight30 = (uint8_t*)0x2000cf800; // storage size: 16384 B
static uint8_t* weight31 = (uint8_t*)0x2000d3800; // storage size: 16384 B
static uint8_t* weight32 = (uint8_t*)0x2000d7800; // storage size: 54784 B
static uint8_t* weight33 = (uint8_t*)0x2000e4e00; // storage size: 54784 B
static uint8_t* weight34 = (uint8_t*)0x2000f2400; // storage size: 16384 B
static uint8_t* weight35 = (uint8_t*)0x2000f6400; // storage size: 16384 B
static uint8_t* weight36 = (uint8_t*)0x2000fa400; // storage size: 18432 B
static uint8_t* weight37 = (uint8_t*)0x2000fec00; // storage size: 16384 B
static uint8_t* weight38 = (uint8_t*)0x200102c00; // storage size: 16384 B
static uint8_t* weight39 = (uint8_t*)0x200106c00; // storage size: 54784 B
static uint8_t* weight40 = (uint8_t*)0x200114200; // storage size: 54784 B
static uint8_t* weight41 = (uint8_t*)0x200121800; // storage size: 16384 B
static uint8_t* weight42 = (uint8_t*)0x200125800; // storage size: 16384 B
static uint8_t* weight43 = (uint8_t*)0x200129800; // storage size: 18432 B
static uint8_t* weight44 = (uint8_t*)0x20012e000; // storage size: 16384 B
static uint8_t* weight45 = (uint8_t*)0x200132000; // storage size: 16384 B
static uint8_t* weight46 = (uint8_t*)0x200136000; // storage size: 54784 B
static uint8_t* weight47 = (uint8_t*)0x200143600; // storage size: 54784 B
static uint8_t* weight48 = (uint8_t*)0x200150c00; // storage size: 16384 B
static uint8_t* weight49 = (uint8_t*)0x200154c00; // storage size: 16384 B
static uint8_t* weight50 = (uint8_t*)0x200158c00; // storage size: 18432 B
static uint8_t* weight51 = (uint8_t*)0x20015d400; // storage size: 16384 B
static uint8_t* weight52 = (uint8_t*)0x200161400; // storage size: 16384 B
static uint8_t* weight53 = (uint8_t*)0x200165400; // storage size: 54784 B
static uint8_t* weight54 = (uint8_t*)0x200172a00; // storage size: 54784 B
static uint8_t* weight55 = (uint8_t*)0x200180000; // storage size: 16384 B
static uint8_t* weight56 = (uint8_t*)0x200184000; // storage size: 16384 B
static uint8_t* weight57 = (uint8_t*)0x200188000; // storage size: 18432 B
static uint8_t* weight58 = (uint8_t*)0x20018c800; // storage size: 16384 B
static uint8_t* weight59 = (uint8_t*)0x200190800; // storage size: 16384 B
static uint8_t* weight60 = (uint8_t*)0x200194800; // storage size: 54784 B
static uint8_t* weight61 = (uint8_t*)0x2001a1e00; // storage size: 54784 B
static uint8_t* weight62 = (uint8_t*)0x2001af400; // storage size: 16384 B
static uint8_t* weight63 = (uint8_t*)0x2001b3400; // storage size: 16384 B
static uint8_t* weight64 = (uint8_t*)0x2001b7400; // storage size: 18432 B
static uint8_t* weight65 = (uint8_t*)0x2001bbc00; // storage size: 16384 B
static uint8_t* weight66 = (uint8_t*)0x2001bfc00; // storage size: 16384 B
static uint8_t* weight67 = (uint8_t*)0x2001c3c00; // storage size: 54784 B
static uint8_t* weight68 = (uint8_t*)0x2001d1200; // storage size: 54784 B
static uint8_t* weight69 = (uint8_t*)0x2001de800; // storage size: 16384 B
static uint8_t* weight70 = (uint8_t*)0x2001e2800; // storage size: 16384 B
static uint8_t* weight71 = (uint8_t*)0x2001e6800; // storage size: 18432 B
static uint8_t* weight72 = (uint8_t*)0x2001eb000; // storage size: 16384 B
static uint8_t* weight73 = (uint8_t*)0x2001ef000; // storage size: 16384 B
static uint8_t* weight74 = (uint8_t*)0x2001f3000; // storage size: 54784 B
static uint8_t* weight75 = (uint8_t*)0x200200600; // storage size: 54784 B
static uint8_t* weight76 = (uint8_t*)0x20020dc00; // storage size: 16384 B
static uint8_t* weight77 = (uint8_t*)0x200211c00; // storage size: 16384 B
static uint8_t* weight78 = (uint8_t*)0x200215c00; // storage size: 18432 B
static uint8_t* weight79 = (uint8_t*)0x20021a400; // storage size: 16384 B
static uint8_t* weight80 = (uint8_t*)0x20021e400; // storage size: 16384 B
static uint8_t* weight81 = (uint8_t*)0x200222400; // storage size: 54784 B
static uint8_t* weight82 = (uint8_t*)0x20022fa00; // storage size: 54784 B
static uint8_t* weight83 = (uint8_t*)0x20023d000; // storage size: 16384 B
static uint8_t* weight84 = (uint8_t*)0x200241000; // storage size: 16384 B
static uint8_t* weight85 = (uint8_t*)0x200245000; // storage size: 18432 B
static uint8_t* weight86 = (uint8_t*)0x200249800; // storage size: 16384 B
static uint8_t* weight87 = (uint8_t*)0x20024d800; // storage size: 16384 B
static uint8_t* weight88 = (uint8_t*)0x200251800; // storage size: 54784 B
static uint8_t* weight89 = (uint8_t*)0x20025ee00; // storage size: 54784 B
static uint8_t* weight90 = (uint8_t*)0x20026c400; // storage size: 16384 B
static uint8_t* weight91 = (uint8_t*)0x200270400; // storage size: 16384 B
static uint8_t* weight92 = (uint8_t*)0x200274400; // storage size: 18432 B
static uint8_t* weight93 = (uint8_t*)0x200278c00; // storage size: 16384 B
static uint8_t* weight94 = (uint8_t*)0x20027cc00; // storage size: 16384 B
static uint8_t* weight95 = (uint8_t*)0x200280c00; // storage size: 54784 B
static uint8_t* weight96 = (uint8_t*)0x20028e200; // storage size: 54784 B
static uint8_t* weight97 = (uint8_t*)0x20029b800; // storage size: 16384 B
static uint8_t* weight98 = (uint8_t*)0x20029f800; // storage size: 16384 B
static uint8_t* weight99 = (uint8_t*)0x2002a3800; // storage size: 18432 B
static uint8_t* weight100 = (uint8_t*)0x2002a8000; // storage size: 16384 B
static uint8_t* weight101 = (uint8_t*)0x2002ac000; // storage size: 16384 B
static uint8_t* weight102 = (uint8_t*)0x2002b0000; // storage size: 54784 B
static uint8_t* weight103 = (uint8_t*)0x2002bd600; // storage size: 54784 B
static uint8_t* weight104 = (uint8_t*)0x2002cac00; // storage size: 16384 B
static uint8_t* weight105 = (uint8_t*)0x2002cec00; // storage size: 16384 B
static uint8_t* weight106 = (uint8_t*)0x2002d2c00; // storage size: 18432 B
static uint8_t* weight107 = (uint8_t*)0x2002d7400; // storage size: 16384 B
static uint8_t* weight108 = (uint8_t*)0x2002db400; // storage size: 16384 B
static uint8_t* weight109 = (uint8_t*)0x2002df400; // storage size: 54784 B
static uint8_t* weight110 = (uint8_t*)0x2002eca00; // storage size: 54784 B
static uint8_t* weight111 = (uint8_t*)0x2002fa000; // storage size: 16384 B
static uint8_t* weight112 = (uint8_t*)0x2002fe000; // storage size: 16384 B
static uint8_t* weight113 = (uint8_t*)0x200302000; // storage size: 18432 B
static uint8_t* weight114 = (uint8_t*)0x200306800; // storage size: 16384 B
static uint8_t* weight115 = (uint8_t*)0x20030a800; // storage size: 16384 B
static uint8_t* weight116 = (uint8_t*)0x20030e800; // storage size: 54784 B
static uint8_t* weight117 = (uint8_t*)0x20031be00; // storage size: 54784 B
static uint8_t* weight118 = (uint8_t*)0x200329400; // storage size: 16384 B
static uint8_t* weight119 = (uint8_t*)0x20032d400; // storage size: 16384 B
static uint8_t* weight120 = (uint8_t*)0x200331400; // storage size: 18432 B
static uint8_t* weight121 = (uint8_t*)0x200335c00; // storage size: 16384 B
static uint8_t* weight122 = (uint8_t*)0x200339c00; // storage size: 16384 B
static uint8_t* weight123 = (uint8_t*)0x20033dc00; // storage size: 54784 B
static uint8_t* weight124 = (uint8_t*)0x20034b200; // storage size: 54784 B
static uint8_t* weight125 = (uint8_t*)0x200358800; // storage size: 16384 B
static uint8_t* weight126 = (uint8_t*)0x20035c800; // storage size: 16384 B
static uint8_t* weight127 = (uint8_t*)0x200360800; // storage size: 18432 B
static uint8_t* weight128 = (uint8_t*)0x200365000; // storage size: 16384 B
static uint8_t* weight129 = (uint8_t*)0x200369000; // storage size: 16384 B
static uint8_t* weight130 = (uint8_t*)0x20036d000; // storage size: 54784 B
static uint8_t* weight131 = (uint8_t*)0x20037a600; // storage size: 54784 B
static uint8_t* weight132 = (uint8_t*)0x200387c00; // storage size: 16384 B
static uint8_t* weight133 = (uint8_t*)0x20038bc00; // storage size: 16384 B
static uint8_t* weight134 = (uint8_t*)0x20038fc00; // storage size: 18432 B
static uint8_t* weight135 = (uint8_t*)0x200394400; // storage size: 16384 B
static uint8_t* weight136 = (uint8_t*)0x200398400; // storage size: 16384 B
static uint8_t* weight137 = (uint8_t*)0x20039c400; // storage size: 54784 B
static uint8_t* weight138 = (uint8_t*)0x2003a9a00; // storage size: 54784 B
static uint8_t* weight139 = (uint8_t*)0x2003b7000; // storage size: 16384 B
static uint8_t* weight140 = (uint8_t*)0x2003bb000; // storage size: 16384 B
static uint8_t* weight141 = (uint8_t*)0x2003bf000; // storage size: 18432 B
static uint8_t* weight142 = (uint8_t*)0x2003c3800; // storage size: 16384 B
static uint8_t* weight143 = (uint8_t*)0x2003c7800; // storage size: 16384 B
static uint8_t* weight144 = (uint8_t*)0x2003cb800; // storage size: 54784 B
static uint8_t* weight145 = (uint8_t*)0x2003d8e00; // storage size: 54784 B
static uint8_t* weight146 = (uint8_t*)0x2003e6400; // storage size: 16384 B
static uint8_t* weight147 = (uint8_t*)0x2003ea400; // storage size: 16384 B
static uint8_t* weight148 = (uint8_t*)0x2003ee400; // storage size: 18432 B
static uint8_t* weight149 = (uint8_t*)0x2003f2c00; // storage size: 16384 B
static uint8_t* weight150 = (uint8_t*)0x2003f6c00; // storage size: 16384 B
static uint8_t* weight151 = (uint8_t*)0x2003fac00; // storage size: 54784 B
static uint8_t* weight152 = (uint8_t*)0x200408200; // storage size: 54784 B
static uint8_t* weight153 = (uint8_t*)0x200415800; // storage size: 16384 B
static uint8_t* weight154 = (uint8_t*)0x200419800; // storage size: 16384 B
static uint8_t* weight155 = (uint8_t*)0x20041d800; // storage size: 18432 B
static uint8_t* weight156 = (uint8_t*)0x200422000; // storage size: 16384 B
static uint8_t* weight157 = (uint8_t*)0x200426000; // storage size: 16384 B
static uint8_t* weight158 = (uint8_t*)0x20042a000; // storage size: 54784 B
static uint8_t* weight159 = (uint8_t*)0x200437600; // storage size: 54784 B
static uint8_t* weight160 = (uint8_t*)0x200444c00; // storage size: 16384 B
static uint8_t* weight161 = (uint8_t*)0x200448c00; // storage size: 16384 B
static uint8_t* weight162 = (uint8_t*)0x20044cc00; // storage size: 18432 B
static uint8_t* weight163 = (uint8_t*)0x200451400; // storage size: 16384 B
static uint8_t* weight164 = (uint8_t*)0x200455400; // storage size: 16384 B
static uint8_t* weight165 = (uint8_t*)0x200459400; // storage size: 54784 B
static uint8_t* weight166 = (uint8_t*)0x200466a00; // storage size: 54784 B
static uint8_t* weight167 = (uint8_t*)0x200474000; // storage size: 16384 B
static uint8_t* weight168 = (uint8_t*)0x200478000; // storage size: 16384 B
static uint8_t* weight169 = (uint8_t*)0x20047c000; // storage size: 18432 B
static uint8_t* weight170 = (uint8_t*)0x200480800; // storage size: 16384 B
static uint8_t* weight171 = (uint8_t*)0x200484800; // storage size: 16384 B
static uint8_t* weight172 = (uint8_t*)0x200488800; // storage size: 54784 B
static uint8_t* weight173 = (uint8_t*)0x200495e00; // storage size: 54784 B
static uint8_t* weight174 = (uint8_t*)0x2004a3400; // storage size: 16384 B
static uint8_t* weight175 = (uint8_t*)0x2004a7400; // storage size: 16384 B
static uint8_t* weight176 = (uint8_t*)0x2004ab400; // storage size: 18432 B
static uint8_t* weight177 = (uint8_t*)0x2004afc00; // storage size: 16384 B
static uint8_t* weight178 = (uint8_t*)0x2004b3c00; // storage size: 16384 B
static uint8_t* weight179 = (uint8_t*)0x2004b7c00; // storage size: 54784 B
static uint8_t* weight180 = (uint8_t*)0x2004c5200; // storage size: 54784 B
static uint8_t* weight181 = (uint8_t*)0x2004d2800; // storage size: 16384 B
static uint8_t* weight182 = (uint8_t*)0x2004d6800; // storage size: 16384 B
static uint8_t* weight183 = (uint8_t*)0x2004da800; // storage size: 18432 B
static uint8_t* weight184 = (uint8_t*)0x2004df000; // storage size: 16384 B
static uint8_t* weight185 = (uint8_t*)0x2004e3000; // storage size: 16384 B
static uint8_t* weight186 = (uint8_t*)0x2004e7000; // storage size: 54784 B
static uint8_t* weight187 = (uint8_t*)0x2004f4600; // storage size: 54784 B
static uint8_t* weight188 = (uint8_t*)0x200501c00; // storage size: 16384 B
static uint8_t* weight189 = (uint8_t*)0x200505c00; // storage size: 16384 B
static uint8_t* weight190 = (uint8_t*)0x200509c00; // storage size: 18432 B
static uint8_t* weight191 = (uint8_t*)0x20050e400; // storage size: 16384 B
static uint8_t* weight192 = (uint8_t*)0x200512400; // storage size: 16384 B
static uint8_t* weight193 = (uint8_t*)0x200516400; // storage size: 54784 B
static uint8_t* weight194 = (uint8_t*)0x200523a00; // storage size: 54784 B
static uint8_t* weight195 = (uint8_t*)0x200531000; // storage size: 16384 B
static uint8_t* weight196 = (uint8_t*)0x200535000; // storage size: 16384 B
static uint8_t* weight197 = (uint8_t*)0x200539000; // storage size: 260096 B
// cache storage define
static uint8_t* cache0 = (uint8_t*)0x200578800; // storage size: 1179648 B
static uint8_t* cache1 = (uint8_t*)0x200698800; // storage size: 1114112 B
static uint8_t* cache2 = (uint8_t*)0x2007a8800; // storage size: 1048576 B
static uint8_t* cache3 = (uint8_t*)0x2008a8800; // storage size: 1048576 B
static uint8_t* cache4 = (uint8_t*)0x2009a8800; // storage size: 1179648 B
static uint8_t* cache5 = (uint8_t*)0x200ac8800; // storage size: 1114112 B
static uint8_t* cache6 = (uint8_t*)0x200bd8800; // storage size: 1048576 B
static uint8_t* cache7 = (uint8_t*)0x200cd8800; // storage size: 1048576 B
static uint8_t* cache8 = (uint8_t*)0x200dd8800; // storage size: 1179648 B
static uint8_t* cache9 = (uint8_t*)0x200ef8800; // storage size: 1114112 B
static uint8_t* cache10 = (uint8_t*)0x201008800; // storage size: 1048576 B
static uint8_t* cache11 = (uint8_t*)0x201108800; // storage size: 1048576 B
static uint8_t* cache12 = (uint8_t*)0x201208800; // storage size: 1179648 B
static uint8_t* cache13 = (uint8_t*)0x201328800; // storage size: 1114112 B
static uint8_t* cache14 = (uint8_t*)0x201438800; // storage size: 1048576 B
static uint8_t* cache15 = (uint8_t*)0x201538800; // storage size: 1048576 B
static uint8_t* cache16 = (uint8_t*)0x201638800; // storage size: 1179648 B
static uint8_t* cache17 = (uint8_t*)0x201758800; // storage size: 1114112 B
static uint8_t* cache18 = (uint8_t*)0x201868800; // storage size: 1048576 B
static uint8_t* cache19 = (uint8_t*)0x201968800; // storage size: 1048576 B
static uint8_t* cache20 = (uint8_t*)0x201a68800; // storage size: 1179648 B
static uint8_t* cache21 = (uint8_t*)0x201b88800; // storage size: 1114112 B
static uint8_t* cache22 = (uint8_t*)0x201c98800; // storage size: 1048576 B
static uint8_t* cache23 = (uint8_t*)0x201d98800; // storage size: 1048576 B
static uint8_t* cache24 = (uint8_t*)0x201e98800; // storage size: 1179648 B
static uint8_t* cache25 = (uint8_t*)0x201fb8800; // storage size: 1114112 B
static uint8_t* cache26 = (uint8_t*)0x2020c8800; // storage size: 1048576 B
static uint8_t* cache27 = (uint8_t*)0x2021c8800; // storage size: 1048576 B
static uint8_t* cache28 = (uint8_t*)0x2022c8800; // storage size: 1179648 B
static uint8_t* cache29 = (uint8_t*)0x2023e8800; // storage size: 1114112 B
static uint8_t* cache30 = (uint8_t*)0x2024f8800; // storage size: 1048576 B
static uint8_t* cache31 = (uint8_t*)0x2025f8800; // storage size: 1048576 B
static uint8_t* cache32 = (uint8_t*)0x2026f8800; // storage size: 1179648 B
static uint8_t* cache33 = (uint8_t*)0x202818800; // storage size: 1114112 B
static uint8_t* cache34 = (uint8_t*)0x202928800; // storage size: 1048576 B
static uint8_t* cache35 = (uint8_t*)0x202a28800; // storage size: 1048576 B
static uint8_t* cache36 = (uint8_t*)0x202b28800; // storage size: 1179648 B
static uint8_t* cache37 = (uint8_t*)0x202c48800; // storage size: 1114112 B
static uint8_t* cache38 = (uint8_t*)0x202d58800; // storage size: 1048576 B
static uint8_t* cache39 = (uint8_t*)0x202e58800; // storage size: 1048576 B
static uint8_t* cache40 = (uint8_t*)0x202f58800; // storage size: 1179648 B
static uint8_t* cache41 = (uint8_t*)0x203078800; // storage size: 1114112 B
static uint8_t* cache42 = (uint8_t*)0x203188800; // storage size: 1048576 B
static uint8_t* cache43 = (uint8_t*)0x203288800; // storage size: 1048576 B
static uint8_t* cache44 = (uint8_t*)0x203388800; // storage size: 1179648 B
static uint8_t* cache45 = (uint8_t*)0x2034a8800; // storage size: 1114112 B
static uint8_t* cache46 = (uint8_t*)0x2035b8800; // storage size: 1048576 B
static uint8_t* cache47 = (uint8_t*)0x2036b8800; // storage size: 1048576 B
static uint8_t* cache48 = (uint8_t*)0x2037b8800; // storage size: 1179648 B
static uint8_t* cache49 = (uint8_t*)0x2038d8800; // storage size: 1114112 B
static uint8_t* cache50 = (uint8_t*)0x2039e8800; // storage size: 1048576 B
static uint8_t* cache51 = (uint8_t*)0x203ae8800; // storage size: 1048576 B
static uint8_t* cache52 = (uint8_t*)0x203be8800; // storage size: 1179648 B
static uint8_t* cache53 = (uint8_t*)0x203d08800; // storage size: 1114112 B
static uint8_t* cache54 = (uint8_t*)0x203e18800; // storage size: 1048576 B
static uint8_t* cache55 = (uint8_t*)0x203f18800; // storage size: 1048576 B
static uint8_t* cache56 = (uint8_t*)0x204018800; // storage size: 1179648 B
static uint8_t* cache57 = (uint8_t*)0x204138800; // storage size: 1114112 B
static uint8_t* cache58 = (uint8_t*)0x204248800; // storage size: 1048576 B
static uint8_t* cache59 = (uint8_t*)0x204348800; // storage size: 1048576 B
static uint8_t* cache60 = (uint8_t*)0x204448800; // storage size: 1179648 B
static uint8_t* cache61 = (uint8_t*)0x204568800; // storage size: 1114112 B
static uint8_t* cache62 = (uint8_t*)0x204678800; // storage size: 1048576 B
static uint8_t* cache63 = (uint8_t*)0x204778800; // storage size: 1048576 B
static uint8_t* cache64 = (uint8_t*)0x204878800; // storage size: 1179648 B
static uint8_t* cache65 = (uint8_t*)0x204998800; // storage size: 1114112 B
static uint8_t* cache66 = (uint8_t*)0x204aa8800; // storage size: 1048576 B
static uint8_t* cache67 = (uint8_t*)0x204ba8800; // storage size: 1048576 B
static uint8_t* cache68 = (uint8_t*)0x204ca8800; // storage size: 1179648 B
static uint8_t* cache69 = (uint8_t*)0x204dc8800; // storage size: 1114112 B
static uint8_t* cache70 = (uint8_t*)0x204ed8800; // storage size: 1048576 B
static uint8_t* cache71 = (uint8_t*)0x204fd8800; // storage size: 1048576 B
static uint8_t* cache72 = (uint8_t*)0x2050d8800; // storage size: 1179648 B
static uint8_t* cache73 = (uint8_t*)0x2051f8800; // storage size: 1114112 B
static uint8_t* cache74 = (uint8_t*)0x205308800; // storage size: 1048576 B
static uint8_t* cache75 = (uint8_t*)0x205408800; // storage size: 1048576 B
static uint8_t* cache76 = (uint8_t*)0x205508800; // storage size: 1179648 B
static uint8_t* cache77 = (uint8_t*)0x205628800; // storage size: 1114112 B
static uint8_t* cache78 = (uint8_t*)0x205738800; // storage size: 1048576 B
static uint8_t* cache79 = (uint8_t*)0x205838800; // storage size: 1048576 B
static uint8_t* cache80 = (uint8_t*)0x205938800; // storage size: 1179648 B
static uint8_t* cache81 = (uint8_t*)0x205a58800; // storage size: 1114112 B
static uint8_t* cache82 = (uint8_t*)0x205b68800; // storage size: 1048576 B
static uint8_t* cache83 = (uint8_t*)0x205c68800; // storage size: 1048576 B
static uint8_t* cache84 = (uint8_t*)0x205d68800; // storage size: 1179648 B
static uint8_t* cache85 = (uint8_t*)0x205e88800; // storage size: 1114112 B
static uint8_t* cache86 = (uint8_t*)0x205f98800; // storage size: 1048576 B
static uint8_t* cache87 = (uint8_t*)0x206098800; // storage size: 1048576 B
static uint8_t* cache88 = (uint8_t*)0x206198800; // storage size: 1179648 B
static uint8_t* cache89 = (uint8_t*)0x2062b8800; // storage size: 1114112 B
static uint8_t* cache90 = (uint8_t*)0x2063c8800; // storage size: 1048576 B
static uint8_t* cache91 = (uint8_t*)0x2064c8800; // storage size: 1048576 B
static uint8_t* cache92 = (uint8_t*)0x2065c8800; // storage size: 1179648 B
static uint8_t* cache93 = (uint8_t*)0x2066e8800; // storage size: 1114112 B
static uint8_t* cache94 = (uint8_t*)0x2067f8800; // storage size: 1048576 B
static uint8_t* cache95 = (uint8_t*)0x2068f8800; // storage size: 1048576 B
static uint8_t* cache96 = (uint8_t*)0x2069f8800; // storage size: 1179648 B
static uint8_t* cache97 = (uint8_t*)0x206b18800; // storage size: 1114112 B
static uint8_t* cache98 = (uint8_t*)0x206c28800; // storage size: 1048576 B
static uint8_t* cache99 = (uint8_t*)0x206d28800; // storage size: 1048576 B
static uint8_t* cache100 = (uint8_t*)0x206e28800; // storage size: 1179648 B
static uint8_t* cache101 = (uint8_t*)0x206f48800; // storage size: 1114112 B
static uint8_t* cache102 = (uint8_t*)0x207058800; // storage size: 1048576 B
static uint8_t* cache103 = (uint8_t*)0x207158800; // storage size: 1048576 B
static uint8_t* cache104 = (uint8_t*)0x207258800; // storage size: 1179648 B
static uint8_t* cache105 = (uint8_t*)0x207378800; // storage size: 1114112 B
static uint8_t* cache106 = (uint8_t*)0x207488800; // storage size: 1048576 B
static uint8_t* cache107 = (uint8_t*)0x207588800; // storage size: 1048576 B
static uint8_t* cache108 = (uint8_t*)0x207688800; // storage size: 1179648 B
static uint8_t* cache109 = (uint8_t*)0x2077a8800; // storage size: 1114112 B
static uint8_t* cache110 = (uint8_t*)0x2078b8800; // storage size: 1048576 B
static uint8_t* cache111 = (uint8_t*)0x2079b8800; // storage size: 1048576 B
// runtime storage define
static uint8_t* runtime0 = (uint8_t*)0x207ab8800; // storage size: 1048576 B
static uint8_t* runtime1 = (uint8_t*)0x207bb8800; // storage size: 3506176 B
static uint8_t* runtime2 = (uint8_t*)0x207f10800; // storage size: 16646144 B
static uint8_t* runtime3 = (uint8_t*)0x208ef0800; // storage size: 16646144 B
// hbm storage define
static uint8_t* hbm0 = (uint8_t*)0x000000000; // storage size: 304128 B
static uint8_t* hbm1 = (uint8_t*)0x00004a400; // storage size: 270336 B
static uint8_t* hbm2 = (uint8_t*)0x00008c400; // storage size: 903936 B
static uint8_t* hbm3 = (uint8_t*)0x000168f00; // storage size: 903936 B
static uint8_t* hbm4 = (uint8_t*)0x000245a00; // storage size: 905216 B
static uint8_t* hbm5 = (uint8_t*)0x000322a00; // storage size: 304128 B
static uint8_t* hbm6 = (uint8_t*)0x00036ce00; // storage size: 270336 B
static uint8_t* hbm7 = (uint8_t*)0x0003aee00; // storage size: 903936 B
static uint8_t* hbm8 = (uint8_t*)0x00048b900; // storage size: 903936 B
static uint8_t* hbm9 = (uint8_t*)0x000568400; // storage size: 905216 B
static uint8_t* hbm10 = (uint8_t*)0x000645400; // storage size: 304128 B
static uint8_t* hbm11 = (uint8_t*)0x00068f800; // storage size: 270336 B
static uint8_t* hbm12 = (uint8_t*)0x0006d1800; // storage size: 903936 B
static uint8_t* hbm13 = (uint8_t*)0x0007ae300; // storage size: 903936 B
static uint8_t* hbm14 = (uint8_t*)0x00088ae00; // storage size: 905216 B
static uint8_t* hbm15 = (uint8_t*)0x000967e00; // storage size: 304128 B
static uint8_t* hbm16 = (uint8_t*)0x0009b2200; // storage size: 270336 B
static uint8_t* hbm17 = (uint8_t*)0x0009f4200; // storage size: 903936 B
static uint8_t* hbm18 = (uint8_t*)0x000ad0d00; // storage size: 903936 B
static uint8_t* hbm19 = (uint8_t*)0x000bad800; // storage size: 905216 B
static uint8_t* hbm20 = (uint8_t*)0x000c8a800; // storage size: 304128 B
static uint8_t* hbm21 = (uint8_t*)0x000cd4c00; // storage size: 270336 B
static uint8_t* hbm22 = (uint8_t*)0x000d16c00; // storage size: 903936 B
static uint8_t* hbm23 = (uint8_t*)0x000df3700; // storage size: 903936 B
static uint8_t* hbm24 = (uint8_t*)0x000ed0200; // storage size: 905216 B
static uint8_t* hbm25 = (uint8_t*)0x000fad200; // storage size: 304128 B
static uint8_t* hbm26 = (uint8_t*)0x000ff7600; // storage size: 270336 B
static uint8_t* hbm27 = (uint8_t*)0x001039600; // storage size: 903936 B
static uint8_t* hbm28 = (uint8_t*)0x001116100; // storage size: 903936 B
static uint8_t* hbm29 = (uint8_t*)0x0011f2c00; // storage size: 905216 B
static uint8_t* hbm30 = (uint8_t*)0x0012cfc00; // storage size: 304128 B
static uint8_t* hbm31 = (uint8_t*)0x00131a000; // storage size: 270336 B
static uint8_t* hbm32 = (uint8_t*)0x00135c000; // storage size: 903936 B
static uint8_t* hbm33 = (uint8_t*)0x001438b00; // storage size: 903936 B
static uint8_t* hbm34 = (uint8_t*)0x001515600; // storage size: 905216 B
static uint8_t* hbm35 = (uint8_t*)0x0015f2600; // storage size: 304128 B
static uint8_t* hbm36 = (uint8_t*)0x00163ca00; // storage size: 270336 B
static uint8_t* hbm37 = (uint8_t*)0x00167ea00; // storage size: 903936 B
static uint8_t* hbm38 = (uint8_t*)0x00175b500; // storage size: 903936 B
static uint8_t* hbm39 = (uint8_t*)0x001838000; // storage size: 905216 B
static uint8_t* hbm40 = (uint8_t*)0x001915000; // storage size: 304128 B
static uint8_t* hbm41 = (uint8_t*)0x00195f400; // storage size: 270336 B
static uint8_t* hbm42 = (uint8_t*)0x0019a1400; // storage size: 903936 B
static uint8_t* hbm43 = (uint8_t*)0x001a7df00; // storage size: 903936 B
static uint8_t* hbm44 = (uint8_t*)0x001b5aa00; // storage size: 905216 B
static uint8_t* hbm45 = (uint8_t*)0x001c37a00; // storage size: 304128 B
static uint8_t* hbm46 = (uint8_t*)0x001c81e00; // storage size: 270336 B
static uint8_t* hbm47 = (uint8_t*)0x001cc3e00; // storage size: 903936 B
static uint8_t* hbm48 = (uint8_t*)0x001da0900; // storage size: 903936 B
static uint8_t* hbm49 = (uint8_t*)0x001e7d400; // storage size: 905216 B
static uint8_t* hbm50 = (uint8_t*)0x001f5a400; // storage size: 304128 B
static uint8_t* hbm51 = (uint8_t*)0x001fa4800; // storage size: 270336 B
static uint8_t* hbm52 = (uint8_t*)0x001fe6800; // storage size: 903936 B
static uint8_t* hbm53 = (uint8_t*)0x0020c3300; // storage size: 903936 B
static uint8_t* hbm54 = (uint8_t*)0x00219fe00; // storage size: 905216 B
static uint8_t* hbm55 = (uint8_t*)0x00227ce00; // storage size: 304128 B
static uint8_t* hbm56 = (uint8_t*)0x0022c7200; // storage size: 270336 B
static uint8_t* hbm57 = (uint8_t*)0x002309200; // storage size: 903936 B
static uint8_t* hbm58 = (uint8_t*)0x0023e5d00; // storage size: 903936 B
static uint8_t* hbm59 = (uint8_t*)0x0024c2800; // storage size: 905216 B
static uint8_t* hbm60 = (uint8_t*)0x00259f800; // storage size: 304128 B
static uint8_t* hbm61 = (uint8_t*)0x0025e9c00; // storage size: 270336 B
static uint8_t* hbm62 = (uint8_t*)0x00262bc00; // storage size: 903936 B
static uint8_t* hbm63 = (uint8_t*)0x002708700; // storage size: 903936 B
static uint8_t* hbm64 = (uint8_t*)0x0027e5200; // storage size: 905216 B
static uint8_t* hbm65 = (uint8_t*)0x0028c2200; // storage size: 304128 B
static uint8_t* hbm66 = (uint8_t*)0x00290c600; // storage size: 270336 B
static uint8_t* hbm67 = (uint8_t*)0x00294e600; // storage size: 903936 B
static uint8_t* hbm68 = (uint8_t*)0x002a2b100; // storage size: 903936 B
static uint8_t* hbm69 = (uint8_t*)0x002b07c00; // storage size: 905216 B
static uint8_t* hbm70 = (uint8_t*)0x002be4c00; // storage size: 304128 B
static uint8_t* hbm71 = (uint8_t*)0x002c2f000; // storage size: 270336 B
static uint8_t* hbm72 = (uint8_t*)0x002c71000; // storage size: 903936 B
static uint8_t* hbm73 = (uint8_t*)0x002d4db00; // storage size: 903936 B
static uint8_t* hbm74 = (uint8_t*)0x002e2a600; // storage size: 905216 B
static uint8_t* hbm75 = (uint8_t*)0x002f07600; // storage size: 304128 B
static uint8_t* hbm76 = (uint8_t*)0x002f51a00; // storage size: 270336 B
static uint8_t* hbm77 = (uint8_t*)0x002f93a00; // storage size: 903936 B
static uint8_t* hbm78 = (uint8_t*)0x003070500; // storage size: 903936 B
static uint8_t* hbm79 = (uint8_t*)0x00314d000; // storage size: 905216 B
static uint8_t* hbm80 = (uint8_t*)0x00322a000; // storage size: 304128 B
static uint8_t* hbm81 = (uint8_t*)0x003274400; // storage size: 270336 B
static uint8_t* hbm82 = (uint8_t*)0x0032b6400; // storage size: 903936 B
static uint8_t* hbm83 = (uint8_t*)0x003392f00; // storage size: 903936 B
static uint8_t* hbm84 = (uint8_t*)0x00346fa00; // storage size: 905216 B
static uint8_t* hbm85 = (uint8_t*)0x00354ca00; // storage size: 304128 B
static uint8_t* hbm86 = (uint8_t*)0x003596e00; // storage size: 270336 B
static uint8_t* hbm87 = (uint8_t*)0x0035d8e00; // storage size: 903936 B
static uint8_t* hbm88 = (uint8_t*)0x0036b5900; // storage size: 903936 B
static uint8_t* hbm89 = (uint8_t*)0x003792400; // storage size: 905216 B
static uint8_t* hbm90 = (uint8_t*)0x00386f400; // storage size: 304128 B
static uint8_t* hbm91 = (uint8_t*)0x0038b9800; // storage size: 270336 B
static uint8_t* hbm92 = (uint8_t*)0x0038fb800; // storage size: 903936 B
static uint8_t* hbm93 = (uint8_t*)0x0039d8300; // storage size: 903936 B
static uint8_t* hbm94 = (uint8_t*)0x003ab4e00; // storage size: 905216 B
static uint8_t* hbm95 = (uint8_t*)0x003b91e00; // storage size: 304128 B
static uint8_t* hbm96 = (uint8_t*)0x003bdc200; // storage size: 270336 B
static uint8_t* hbm97 = (uint8_t*)0x003c1e200; // storage size: 903936 B
static uint8_t* hbm98 = (uint8_t*)0x003cfad00; // storage size: 903936 B
static uint8_t* hbm99 = (uint8_t*)0x003dd7800; // storage size: 905216 B
static uint8_t* hbm100 = (uint8_t*)0x003eb4800; // storage size: 304128 B
static uint8_t* hbm101 = (uint8_t*)0x003efec00; // storage size: 270336 B
static uint8_t* hbm102 = (uint8_t*)0x003f40c00; // storage size: 903936 B
static uint8_t* hbm103 = (uint8_t*)0x00401d700; // storage size: 903936 B
static uint8_t* hbm104 = (uint8_t*)0x0040fa200; // storage size: 905216 B
static uint8_t* hbm105 = (uint8_t*)0x0041d7200; // storage size: 304128 B
static uint8_t* hbm106 = (uint8_t*)0x004221600; // storage size: 270336 B
static uint8_t* hbm107 = (uint8_t*)0x004263600; // storage size: 903936 B
static uint8_t* hbm108 = (uint8_t*)0x004340100; // storage size: 903936 B
static uint8_t* hbm109 = (uint8_t*)0x00441cc00; // storage size: 905216 B
static uint8_t* hbm110 = (uint8_t*)0x0044f9c00; // storage size: 304128 B
static uint8_t* hbm111 = (uint8_t*)0x004544000; // storage size: 270336 B
static uint8_t* hbm112 = (uint8_t*)0x004586000; // storage size: 903936 B
static uint8_t* hbm113 = (uint8_t*)0x004662b00; // storage size: 903936 B
static uint8_t* hbm114 = (uint8_t*)0x00473f600; // storage size: 905216 B
static uint8_t* hbm115 = (uint8_t*)0x00481c600; // storage size: 304128 B
static uint8_t* hbm116 = (uint8_t*)0x004866a00; // storage size: 270336 B
static uint8_t* hbm117 = (uint8_t*)0x0048a8a00; // storage size: 903936 B
static uint8_t* hbm118 = (uint8_t*)0x004985500; // storage size: 903936 B
static uint8_t* hbm119 = (uint8_t*)0x004a62000; // storage size: 905216 B
static uint8_t* hbm120 = (uint8_t*)0x004b3f000; // storage size: 304128 B
static uint8_t* hbm121 = (uint8_t*)0x004b89400; // storage size: 270336 B
static uint8_t* hbm122 = (uint8_t*)0x004bcb400; // storage size: 903936 B
static uint8_t* hbm123 = (uint8_t*)0x004ca7f00; // storage size: 903936 B
static uint8_t* hbm124 = (uint8_t*)0x004d84a00; // storage size: 905216 B
static uint8_t* hbm125 = (uint8_t*)0x004e61a00; // storage size: 304128 B
static uint8_t* hbm126 = (uint8_t*)0x004eabe00; // storage size: 270336 B
static uint8_t* hbm127 = (uint8_t*)0x004eede00; // storage size: 903936 B
static uint8_t* hbm128 = (uint8_t*)0x004fca900; // storage size: 903936 B
static uint8_t* hbm129 = (uint8_t*)0x0050a7400; // storage size: 905216 B
static uint8_t* hbm130 = (uint8_t*)0x005184400; // storage size: 304128 B
static uint8_t* hbm131 = (uint8_t*)0x0051ce800; // storage size: 270336 B
static uint8_t* hbm132 = (uint8_t*)0x005210800; // storage size: 903936 B
static uint8_t* hbm133 = (uint8_t*)0x0052ed300; // storage size: 903936 B
static uint8_t* hbm134 = (uint8_t*)0x0053c9e00; // storage size: 905216 B
static uint8_t* hbm135 = (uint8_t*)0x0054a6e00; // storage size: 304128 B
static uint8_t* hbm136 = (uint8_t*)0x0054f1200; // storage size: 270336 B
static uint8_t* hbm137 = (uint8_t*)0x005533200; // storage size: 903936 B
static uint8_t* hbm138 = (uint8_t*)0x00560fd00; // storage size: 903936 B
static uint8_t* hbm139 = (uint8_t*)0x0056ec800; // storage size: 905216 B
static uint8_t* hbm140 = (uint8_t*)0x0057c9800; // storage size: 4291584 B

// get input ptr
uint64_t data_in = 0x207ab8800; // 128681984

// get output ptr
uint64_t data_out = 0x207f10800; // 133236736

// get weight ddr ptr
uint64_t BLOCK00_ln_k_bias = 0x20000a000; // 40960
uint64_t BLOCK00_qkv_bn_bias = 0x20000e000; // 57344
uint64_t pos_emb = 0x200000000; // 0
uint64_t BLOCK00_atten_bn = 0x200012800; // 75776
uint64_t BLOCK00_post_k_bias = 0x200016800; // 92160
uint64_t BLOCK00_h_to_4h_bn_1 = 0x20001a800; // 108544
uint64_t BLOCK00_h_to_4h_bn_0 = 0x200027e00; // 163328
uint64_t silu_act = 0x200008000; // 32768
uint64_t BLOCK00_dense_4h_to_h_bn = 0x200035400; // 218112
uint64_t BLOCK01_ln_k_bias = 0x200039400; // 234496
uint64_t BLOCK01_qkv_bn_bias = 0x20003d400; // 250880
uint64_t BLOCK01_atten_bn = 0x200041c00; // 269312
uint64_t BLOCK01_post_k_bias = 0x200045c00; // 285696
uint64_t BLOCK01_h_to_4h_bn_1 = 0x200049c00; // 302080
uint64_t BLOCK01_h_to_4h_bn_0 = 0x200057200; // 356864
uint64_t BLOCK01_dense_4h_to_h_bn = 0x200064800; // 411648
uint64_t BLOCK02_ln_k_bias = 0x200068800; // 428032
uint64_t BLOCK02_qkv_bn_bias = 0x20006c800; // 444416
uint64_t BLOCK02_atten_bn = 0x200071000; // 462848
uint64_t BLOCK02_post_k_bias = 0x200075000; // 479232
uint64_t BLOCK02_h_to_4h_bn_1 = 0x200079000; // 495616
uint64_t BLOCK02_h_to_4h_bn_0 = 0x200086600; // 550400
uint64_t BLOCK02_dense_4h_to_h_bn = 0x200093c00; // 605184
uint64_t BLOCK03_ln_k_bias = 0x200097c00; // 621568
uint64_t BLOCK03_qkv_bn_bias = 0x20009bc00; // 637952
uint64_t BLOCK03_atten_bn = 0x2000a0400; // 656384
uint64_t BLOCK03_post_k_bias = 0x2000a4400; // 672768
uint64_t BLOCK03_h_to_4h_bn_1 = 0x2000a8400; // 689152
uint64_t BLOCK03_h_to_4h_bn_0 = 0x2000b5a00; // 743936
uint64_t BLOCK03_dense_4h_to_h_bn = 0x2000c3000; // 798720
uint64_t BLOCK04_ln_k_bias = 0x2000c7000; // 815104
uint64_t BLOCK04_qkv_bn_bias = 0x2000cb000; // 831488
uint64_t BLOCK04_atten_bn = 0x2000cf800; // 849920
uint64_t BLOCK04_post_k_bias = 0x2000d3800; // 866304
uint64_t BLOCK04_h_to_4h_bn_1 = 0x2000d7800; // 882688
uint64_t BLOCK04_h_to_4h_bn_0 = 0x2000e4e00; // 937472
uint64_t BLOCK04_dense_4h_to_h_bn = 0x2000f2400; // 992256
uint64_t BLOCK05_ln_k_bias = 0x2000f6400; // 1008640
uint64_t BLOCK05_qkv_bn_bias = 0x2000fa400; // 1025024
uint64_t BLOCK05_atten_bn = 0x2000fec00; // 1043456
uint64_t BLOCK05_post_k_bias = 0x200102c00; // 1059840
uint64_t BLOCK05_h_to_4h_bn_1 = 0x200106c00; // 1076224
uint64_t BLOCK05_h_to_4h_bn_0 = 0x200114200; // 1131008
uint64_t BLOCK05_dense_4h_to_h_bn = 0x200121800; // 1185792
uint64_t BLOCK06_ln_k_bias = 0x200125800; // 1202176
uint64_t BLOCK06_qkv_bn_bias = 0x200129800; // 1218560
uint64_t BLOCK06_atten_bn = 0x20012e000; // 1236992
uint64_t BLOCK06_post_k_bias = 0x200132000; // 1253376
uint64_t BLOCK06_h_to_4h_bn_1 = 0x200136000; // 1269760
uint64_t BLOCK06_h_to_4h_bn_0 = 0x200143600; // 1324544
uint64_t BLOCK06_dense_4h_to_h_bn = 0x200150c00; // 1379328
uint64_t BLOCK07_ln_k_bias = 0x200154c00; // 1395712
uint64_t BLOCK07_qkv_bn_bias = 0x200158c00; // 1412096
uint64_t BLOCK07_atten_bn = 0x20015d400; // 1430528
uint64_t BLOCK07_post_k_bias = 0x200161400; // 1446912
uint64_t BLOCK07_h_to_4h_bn_1 = 0x200165400; // 1463296
uint64_t BLOCK07_h_to_4h_bn_0 = 0x200172a00; // 1518080
uint64_t BLOCK07_dense_4h_to_h_bn = 0x200180000; // 1572864
uint64_t BLOCK08_ln_k_bias = 0x200184000; // 1589248
uint64_t BLOCK08_qkv_bn_bias = 0x200188000; // 1605632
uint64_t BLOCK08_atten_bn = 0x20018c800; // 1624064
uint64_t BLOCK08_post_k_bias = 0x200190800; // 1640448
uint64_t BLOCK08_h_to_4h_bn_1 = 0x200194800; // 1656832
uint64_t BLOCK08_h_to_4h_bn_0 = 0x2001a1e00; // 1711616
uint64_t BLOCK08_dense_4h_to_h_bn = 0x2001af400; // 1766400
uint64_t BLOCK09_ln_k_bias = 0x2001b3400; // 1782784
uint64_t BLOCK09_qkv_bn_bias = 0x2001b7400; // 1799168
uint64_t BLOCK09_atten_bn = 0x2001bbc00; // 1817600
uint64_t BLOCK09_post_k_bias = 0x2001bfc00; // 1833984
uint64_t BLOCK09_h_to_4h_bn_1 = 0x2001c3c00; // 1850368
uint64_t BLOCK09_h_to_4h_bn_0 = 0x2001d1200; // 1905152
uint64_t BLOCK09_dense_4h_to_h_bn = 0x2001de800; // 1959936
uint64_t BLOCK10_ln_k_bias = 0x2001e2800; // 1976320
uint64_t BLOCK10_qkv_bn_bias = 0x2001e6800; // 1992704
uint64_t BLOCK10_atten_bn = 0x2001eb000; // 2011136
uint64_t BLOCK10_post_k_bias = 0x2001ef000; // 2027520
uint64_t BLOCK10_h_to_4h_bn_1 = 0x2001f3000; // 2043904
uint64_t BLOCK10_h_to_4h_bn_0 = 0x200200600; // 2098688
uint64_t BLOCK10_dense_4h_to_h_bn = 0x20020dc00; // 2153472
uint64_t BLOCK11_ln_k_bias = 0x200211c00; // 2169856
uint64_t BLOCK11_qkv_bn_bias = 0x200215c00; // 2186240
uint64_t BLOCK11_atten_bn = 0x20021a400; // 2204672
uint64_t BLOCK11_post_k_bias = 0x20021e400; // 2221056
uint64_t BLOCK11_h_to_4h_bn_1 = 0x200222400; // 2237440
uint64_t BLOCK11_h_to_4h_bn_0 = 0x20022fa00; // 2292224
uint64_t BLOCK11_dense_4h_to_h_bn = 0x20023d000; // 2347008
uint64_t BLOCK12_ln_k_bias = 0x200241000; // 2363392
uint64_t BLOCK12_qkv_bn_bias = 0x200245000; // 2379776
uint64_t BLOCK12_atten_bn = 0x200249800; // 2398208
uint64_t BLOCK12_post_k_bias = 0x20024d800; // 2414592
uint64_t BLOCK12_h_to_4h_bn_1 = 0x200251800; // 2430976
uint64_t BLOCK12_h_to_4h_bn_0 = 0x20025ee00; // 2485760
uint64_t BLOCK12_dense_4h_to_h_bn = 0x20026c400; // 2540544
uint64_t BLOCK13_ln_k_bias = 0x200270400; // 2556928
uint64_t BLOCK13_qkv_bn_bias = 0x200274400; // 2573312
uint64_t BLOCK13_atten_bn = 0x200278c00; // 2591744
uint64_t BLOCK13_post_k_bias = 0x20027cc00; // 2608128
uint64_t BLOCK13_h_to_4h_bn_1 = 0x200280c00; // 2624512
uint64_t BLOCK13_h_to_4h_bn_0 = 0x20028e200; // 2679296
uint64_t BLOCK13_dense_4h_to_h_bn = 0x20029b800; // 2734080
uint64_t BLOCK14_ln_k_bias = 0x20029f800; // 2750464
uint64_t BLOCK14_qkv_bn_bias = 0x2002a3800; // 2766848
uint64_t BLOCK14_atten_bn = 0x2002a8000; // 2785280
uint64_t BLOCK14_post_k_bias = 0x2002ac000; // 2801664
uint64_t BLOCK14_h_to_4h_bn_1 = 0x2002b0000; // 2818048
uint64_t BLOCK14_h_to_4h_bn_0 = 0x2002bd600; // 2872832
uint64_t BLOCK14_dense_4h_to_h_bn = 0x2002cac00; // 2927616
uint64_t BLOCK15_ln_k_bias = 0x2002cec00; // 2944000
uint64_t BLOCK15_qkv_bn_bias = 0x2002d2c00; // 2960384
uint64_t BLOCK15_atten_bn = 0x2002d7400; // 2978816
uint64_t BLOCK15_post_k_bias = 0x2002db400; // 2995200
uint64_t BLOCK15_h_to_4h_bn_1 = 0x2002df400; // 3011584
uint64_t BLOCK15_h_to_4h_bn_0 = 0x2002eca00; // 3066368
uint64_t BLOCK15_dense_4h_to_h_bn = 0x2002fa000; // 3121152
uint64_t BLOCK16_ln_k_bias = 0x2002fe000; // 3137536
uint64_t BLOCK16_qkv_bn_bias = 0x200302000; // 3153920
uint64_t BLOCK16_atten_bn = 0x200306800; // 3172352
uint64_t BLOCK16_post_k_bias = 0x20030a800; // 3188736
uint64_t BLOCK16_h_to_4h_bn_1 = 0x20030e800; // 3205120
uint64_t BLOCK16_h_to_4h_bn_0 = 0x20031be00; // 3259904
uint64_t BLOCK16_dense_4h_to_h_bn = 0x200329400; // 3314688
uint64_t BLOCK17_ln_k_bias = 0x20032d400; // 3331072
uint64_t BLOCK17_qkv_bn_bias = 0x200331400; // 3347456
uint64_t BLOCK17_atten_bn = 0x200335c00; // 3365888
uint64_t BLOCK17_post_k_bias = 0x200339c00; // 3382272
uint64_t BLOCK17_h_to_4h_bn_1 = 0x20033dc00; // 3398656
uint64_t BLOCK17_h_to_4h_bn_0 = 0x20034b200; // 3453440
uint64_t BLOCK17_dense_4h_to_h_bn = 0x200358800; // 3508224
uint64_t BLOCK18_ln_k_bias = 0x20035c800; // 3524608
uint64_t BLOCK18_qkv_bn_bias = 0x200360800; // 3540992
uint64_t BLOCK18_atten_bn = 0x200365000; // 3559424
uint64_t BLOCK18_post_k_bias = 0x200369000; // 3575808
uint64_t BLOCK18_h_to_4h_bn_1 = 0x20036d000; // 3592192
uint64_t BLOCK18_h_to_4h_bn_0 = 0x20037a600; // 3646976
uint64_t BLOCK18_dense_4h_to_h_bn = 0x200387c00; // 3701760
uint64_t BLOCK19_ln_k_bias = 0x20038bc00; // 3718144
uint64_t BLOCK19_qkv_bn_bias = 0x20038fc00; // 3734528
uint64_t BLOCK19_atten_bn = 0x200394400; // 3752960
uint64_t BLOCK19_post_k_bias = 0x200398400; // 3769344
uint64_t BLOCK19_h_to_4h_bn_1 = 0x20039c400; // 3785728
uint64_t BLOCK19_h_to_4h_bn_0 = 0x2003a9a00; // 3840512
uint64_t BLOCK19_dense_4h_to_h_bn = 0x2003b7000; // 3895296
uint64_t BLOCK20_ln_k_bias = 0x2003bb000; // 3911680
uint64_t BLOCK20_qkv_bn_bias = 0x2003bf000; // 3928064
uint64_t BLOCK20_atten_bn = 0x2003c3800; // 3946496
uint64_t BLOCK20_post_k_bias = 0x2003c7800; // 3962880
uint64_t BLOCK20_h_to_4h_bn_1 = 0x2003cb800; // 3979264
uint64_t BLOCK20_h_to_4h_bn_0 = 0x2003d8e00; // 4034048
uint64_t BLOCK20_dense_4h_to_h_bn = 0x2003e6400; // 4088832
uint64_t BLOCK21_ln_k_bias = 0x2003ea400; // 4105216
uint64_t BLOCK21_qkv_bn_bias = 0x2003ee400; // 4121600
uint64_t BLOCK21_atten_bn = 0x2003f2c00; // 4140032
uint64_t BLOCK21_post_k_bias = 0x2003f6c00; // 4156416
uint64_t BLOCK21_h_to_4h_bn_1 = 0x2003fac00; // 4172800
uint64_t BLOCK21_h_to_4h_bn_0 = 0x200408200; // 4227584
uint64_t BLOCK21_dense_4h_to_h_bn = 0x200415800; // 4282368
uint64_t BLOCK22_ln_k_bias = 0x200419800; // 4298752
uint64_t BLOCK22_qkv_bn_bias = 0x20041d800; // 4315136
uint64_t BLOCK22_atten_bn = 0x200422000; // 4333568
uint64_t BLOCK22_post_k_bias = 0x200426000; // 4349952
uint64_t BLOCK22_h_to_4h_bn_1 = 0x20042a000; // 4366336
uint64_t BLOCK22_h_to_4h_bn_0 = 0x200437600; // 4421120
uint64_t BLOCK22_dense_4h_to_h_bn = 0x200444c00; // 4475904
uint64_t BLOCK23_ln_k_bias = 0x200448c00; // 4492288
uint64_t BLOCK23_qkv_bn_bias = 0x20044cc00; // 4508672
uint64_t BLOCK23_atten_bn = 0x200451400; // 4527104
uint64_t BLOCK23_post_k_bias = 0x200455400; // 4543488
uint64_t BLOCK23_h_to_4h_bn_1 = 0x200459400; // 4559872
uint64_t BLOCK23_h_to_4h_bn_0 = 0x200466a00; // 4614656
uint64_t BLOCK23_dense_4h_to_h_bn = 0x200474000; // 4669440
uint64_t BLOCK24_ln_k_bias = 0x200478000; // 4685824
uint64_t BLOCK24_qkv_bn_bias = 0x20047c000; // 4702208
uint64_t BLOCK24_atten_bn = 0x200480800; // 4720640
uint64_t BLOCK24_post_k_bias = 0x200484800; // 4737024
uint64_t BLOCK24_h_to_4h_bn_1 = 0x200488800; // 4753408
uint64_t BLOCK24_h_to_4h_bn_0 = 0x200495e00; // 4808192
uint64_t BLOCK24_dense_4h_to_h_bn = 0x2004a3400; // 4862976
uint64_t BLOCK25_ln_k_bias = 0x2004a7400; // 4879360
uint64_t BLOCK25_qkv_bn_bias = 0x2004ab400; // 4895744
uint64_t BLOCK25_atten_bn = 0x2004afc00; // 4914176
uint64_t BLOCK25_post_k_bias = 0x2004b3c00; // 4930560
uint64_t BLOCK25_h_to_4h_bn_1 = 0x2004b7c00; // 4946944
uint64_t BLOCK25_h_to_4h_bn_0 = 0x2004c5200; // 5001728
uint64_t BLOCK25_dense_4h_to_h_bn = 0x2004d2800; // 5056512
uint64_t BLOCK26_ln_k_bias = 0x2004d6800; // 5072896
uint64_t BLOCK26_qkv_bn_bias = 0x2004da800; // 5089280
uint64_t BLOCK26_atten_bn = 0x2004df000; // 5107712
uint64_t BLOCK26_post_k_bias = 0x2004e3000; // 5124096
uint64_t BLOCK26_h_to_4h_bn_1 = 0x2004e7000; // 5140480
uint64_t BLOCK26_h_to_4h_bn_0 = 0x2004f4600; // 5195264
uint64_t BLOCK26_dense_4h_to_h_bn = 0x200501c00; // 5250048
uint64_t BLOCK27_ln_k_bias = 0x200505c00; // 5266432
uint64_t BLOCK27_qkv_bn_bias = 0x200509c00; // 5282816
uint64_t BLOCK27_atten_bn = 0x20050e400; // 5301248
uint64_t BLOCK27_post_k_bias = 0x200512400; // 5317632
uint64_t BLOCK27_h_to_4h_bn_1 = 0x200516400; // 5334016
uint64_t BLOCK27_h_to_4h_bn_0 = 0x200523a00; // 5388800
uint64_t BLOCK27_dense_4h_to_h_bn = 0x200531000; // 5443584
uint64_t Final_LN_k_bias = 0x200535000; // 5459968
uint64_t Output_Layer_bn = 0x200539000; // 5476352

// get weight hbm ptr
uint64_t BLOCK00_qkv_weight = 0x000000000; // 0
uint64_t BLOCK00_atten_weight = 0x00004a400; // 304128
uint64_t BLOCK00_h_to_4h_wt_1 = 0x00008c400; // 574464
uint64_t BLOCK00_h_to_4h_wt_0 = 0x000168f00; // 1478400
uint64_t BLOCK00_dense_4h_to_h_wt = 0x000245a00; // 2382336
uint64_t BLOCK01_qkv_weight = 0x000322a00; // 3287552
uint64_t BLOCK01_atten_weight = 0x00036ce00; // 3591680
uint64_t BLOCK01_h_to_4h_wt_1 = 0x0003aee00; // 3862016
uint64_t BLOCK01_h_to_4h_wt_0 = 0x00048b900; // 4765952
uint64_t BLOCK01_dense_4h_to_h_wt = 0x000568400; // 5669888
uint64_t BLOCK02_qkv_weight = 0x000645400; // 6575104
uint64_t BLOCK02_atten_weight = 0x00068f800; // 6879232
uint64_t BLOCK02_h_to_4h_wt_1 = 0x0006d1800; // 7149568
uint64_t BLOCK02_h_to_4h_wt_0 = 0x0007ae300; // 8053504
uint64_t BLOCK02_dense_4h_to_h_wt = 0x00088ae00; // 8957440
uint64_t BLOCK03_qkv_weight = 0x000967e00; // 9862656
uint64_t BLOCK03_atten_weight = 0x0009b2200; // 10166784
uint64_t BLOCK03_h_to_4h_wt_1 = 0x0009f4200; // 10437120
uint64_t BLOCK03_h_to_4h_wt_0 = 0x000ad0d00; // 11341056
uint64_t BLOCK03_dense_4h_to_h_wt = 0x000bad800; // 12244992
uint64_t BLOCK04_qkv_weight = 0x000c8a800; // 13150208
uint64_t BLOCK04_atten_weight = 0x000cd4c00; // 13454336
uint64_t BLOCK04_h_to_4h_wt_1 = 0x000d16c00; // 13724672
uint64_t BLOCK04_h_to_4h_wt_0 = 0x000df3700; // 14628608
uint64_t BLOCK04_dense_4h_to_h_wt = 0x000ed0200; // 15532544
uint64_t BLOCK05_qkv_weight = 0x000fad200; // 16437760
uint64_t BLOCK05_atten_weight = 0x000ff7600; // 16741888
uint64_t BLOCK05_h_to_4h_wt_1 = 0x001039600; // 17012224
uint64_t BLOCK05_h_to_4h_wt_0 = 0x001116100; // 17916160
uint64_t BLOCK05_dense_4h_to_h_wt = 0x0011f2c00; // 18820096
uint64_t BLOCK06_qkv_weight = 0x0012cfc00; // 19725312
uint64_t BLOCK06_atten_weight = 0x00131a000; // 20029440
uint64_t BLOCK06_h_to_4h_wt_1 = 0x00135c000; // 20299776
uint64_t BLOCK06_h_to_4h_wt_0 = 0x001438b00; // 21203712
uint64_t BLOCK06_dense_4h_to_h_wt = 0x001515600; // 22107648
uint64_t BLOCK07_qkv_weight = 0x0015f2600; // 23012864
uint64_t BLOCK07_atten_weight = 0x00163ca00; // 23316992
uint64_t BLOCK07_h_to_4h_wt_1 = 0x00167ea00; // 23587328
uint64_t BLOCK07_h_to_4h_wt_0 = 0x00175b500; // 24491264
uint64_t BLOCK07_dense_4h_to_h_wt = 0x001838000; // 25395200
uint64_t BLOCK08_qkv_weight = 0x001915000; // 26300416
uint64_t BLOCK08_atten_weight = 0x00195f400; // 26604544
uint64_t BLOCK08_h_to_4h_wt_1 = 0x0019a1400; // 26874880
uint64_t BLOCK08_h_to_4h_wt_0 = 0x001a7df00; // 27778816
uint64_t BLOCK08_dense_4h_to_h_wt = 0x001b5aa00; // 28682752
uint64_t BLOCK09_qkv_weight = 0x001c37a00; // 29587968
uint64_t BLOCK09_atten_weight = 0x001c81e00; // 29892096
uint64_t BLOCK09_h_to_4h_wt_1 = 0x001cc3e00; // 30162432
uint64_t BLOCK09_h_to_4h_wt_0 = 0x001da0900; // 31066368
uint64_t BLOCK09_dense_4h_to_h_wt = 0x001e7d400; // 31970304
uint64_t BLOCK10_qkv_weight = 0x001f5a400; // 32875520
uint64_t BLOCK10_atten_weight = 0x001fa4800; // 33179648
uint64_t BLOCK10_h_to_4h_wt_1 = 0x001fe6800; // 33449984
uint64_t BLOCK10_h_to_4h_wt_0 = 0x0020c3300; // 34353920
uint64_t BLOCK10_dense_4h_to_h_wt = 0x00219fe00; // 35257856
uint64_t BLOCK11_qkv_weight = 0x00227ce00; // 36163072
uint64_t BLOCK11_atten_weight = 0x0022c7200; // 36467200
uint64_t BLOCK11_h_to_4h_wt_1 = 0x002309200; // 36737536
uint64_t BLOCK11_h_to_4h_wt_0 = 0x0023e5d00; // 37641472
uint64_t BLOCK11_dense_4h_to_h_wt = 0x0024c2800; // 38545408
uint64_t BLOCK12_qkv_weight = 0x00259f800; // 39450624
uint64_t BLOCK12_atten_weight = 0x0025e9c00; // 39754752
uint64_t BLOCK12_h_to_4h_wt_1 = 0x00262bc00; // 40025088
uint64_t BLOCK12_h_to_4h_wt_0 = 0x002708700; // 40929024
uint64_t BLOCK12_dense_4h_to_h_wt = 0x0027e5200; // 41832960
uint64_t BLOCK13_qkv_weight = 0x0028c2200; // 42738176
uint64_t BLOCK13_atten_weight = 0x00290c600; // 43042304
uint64_t BLOCK13_h_to_4h_wt_1 = 0x00294e600; // 43312640
uint64_t BLOCK13_h_to_4h_wt_0 = 0x002a2b100; // 44216576
uint64_t BLOCK13_dense_4h_to_h_wt = 0x002b07c00; // 45120512
uint64_t BLOCK14_qkv_weight = 0x002be4c00; // 46025728
uint64_t BLOCK14_atten_weight = 0x002c2f000; // 46329856
uint64_t BLOCK14_h_to_4h_wt_1 = 0x002c71000; // 46600192
uint64_t BLOCK14_h_to_4h_wt_0 = 0x002d4db00; // 47504128
uint64_t BLOCK14_dense_4h_to_h_wt = 0x002e2a600; // 48408064
uint64_t BLOCK15_qkv_weight = 0x002f07600; // 49313280
uint64_t BLOCK15_atten_weight = 0x002f51a00; // 49617408
uint64_t BLOCK15_h_to_4h_wt_1 = 0x002f93a00; // 49887744
uint64_t BLOCK15_h_to_4h_wt_0 = 0x003070500; // 50791680
uint64_t BLOCK15_dense_4h_to_h_wt = 0x00314d000; // 51695616
uint64_t BLOCK16_qkv_weight = 0x00322a000; // 52600832
uint64_t BLOCK16_atten_weight = 0x003274400; // 52904960
uint64_t BLOCK16_h_to_4h_wt_1 = 0x0032b6400; // 53175296
uint64_t BLOCK16_h_to_4h_wt_0 = 0x003392f00; // 54079232
uint64_t BLOCK16_dense_4h_to_h_wt = 0x00346fa00; // 54983168
uint64_t BLOCK17_qkv_weight = 0x00354ca00; // 55888384
uint64_t BLOCK17_atten_weight = 0x003596e00; // 56192512
uint64_t BLOCK17_h_to_4h_wt_1 = 0x0035d8e00; // 56462848
uint64_t BLOCK17_h_to_4h_wt_0 = 0x0036b5900; // 57366784
uint64_t BLOCK17_dense_4h_to_h_wt = 0x003792400; // 58270720
uint64_t BLOCK18_qkv_weight = 0x00386f400; // 59175936
uint64_t BLOCK18_atten_weight = 0x0038b9800; // 59480064
uint64_t BLOCK18_h_to_4h_wt_1 = 0x0038fb800; // 59750400
uint64_t BLOCK18_h_to_4h_wt_0 = 0x0039d8300; // 60654336
uint64_t BLOCK18_dense_4h_to_h_wt = 0x003ab4e00; // 61558272
uint64_t BLOCK19_qkv_weight = 0x003b91e00; // 62463488
uint64_t BLOCK19_atten_weight = 0x003bdc200; // 62767616
uint64_t BLOCK19_h_to_4h_wt_1 = 0x003c1e200; // 63037952
uint64_t BLOCK19_h_to_4h_wt_0 = 0x003cfad00; // 63941888
uint64_t BLOCK19_dense_4h_to_h_wt = 0x003dd7800; // 64845824
uint64_t BLOCK20_qkv_weight = 0x003eb4800; // 65751040
uint64_t BLOCK20_atten_weight = 0x003efec00; // 66055168
uint64_t BLOCK20_h_to_4h_wt_1 = 0x003f40c00; // 66325504
uint64_t BLOCK20_h_to_4h_wt_0 = 0x00401d700; // 67229440
uint64_t BLOCK20_dense_4h_to_h_wt = 0x0040fa200; // 68133376
uint64_t BLOCK21_qkv_weight = 0x0041d7200; // 69038592
uint64_t BLOCK21_atten_weight = 0x004221600; // 69342720
uint64_t BLOCK21_h_to_4h_wt_1 = 0x004263600; // 69613056
uint64_t BLOCK21_h_to_4h_wt_0 = 0x004340100; // 70516992
uint64_t BLOCK21_dense_4h_to_h_wt = 0x00441cc00; // 71420928
uint64_t BLOCK22_qkv_weight = 0x0044f9c00; // 72326144
uint64_t BLOCK22_atten_weight = 0x004544000; // 72630272
uint64_t BLOCK22_h_to_4h_wt_1 = 0x004586000; // 72900608
uint64_t BLOCK22_h_to_4h_wt_0 = 0x004662b00; // 73804544
uint64_t BLOCK22_dense_4h_to_h_wt = 0x00473f600; // 74708480
uint64_t BLOCK23_qkv_weight = 0x00481c600; // 75613696
uint64_t BLOCK23_atten_weight = 0x004866a00; // 75917824
uint64_t BLOCK23_h_to_4h_wt_1 = 0x0048a8a00; // 76188160
uint64_t BLOCK23_h_to_4h_wt_0 = 0x004985500; // 77092096
uint64_t BLOCK23_dense_4h_to_h_wt = 0x004a62000; // 77996032
uint64_t BLOCK24_qkv_weight = 0x004b3f000; // 78901248
uint64_t BLOCK24_atten_weight = 0x004b89400; // 79205376
uint64_t BLOCK24_h_to_4h_wt_1 = 0x004bcb400; // 79475712
uint64_t BLOCK24_h_to_4h_wt_0 = 0x004ca7f00; // 80379648
uint64_t BLOCK24_dense_4h_to_h_wt = 0x004d84a00; // 81283584
uint64_t BLOCK25_qkv_weight = 0x004e61a00; // 82188800
uint64_t BLOCK25_atten_weight = 0x004eabe00; // 82492928
uint64_t BLOCK25_h_to_4h_wt_1 = 0x004eede00; // 82763264
uint64_t BLOCK25_h_to_4h_wt_0 = 0x004fca900; // 83667200
uint64_t BLOCK25_dense_4h_to_h_wt = 0x0050a7400; // 84571136
uint64_t BLOCK26_qkv_weight = 0x005184400; // 85476352
uint64_t BLOCK26_atten_weight = 0x0051ce800; // 85780480
uint64_t BLOCK26_h_to_4h_wt_1 = 0x005210800; // 86050816
uint64_t BLOCK26_h_to_4h_wt_0 = 0x0052ed300; // 86954752
uint64_t BLOCK26_dense_4h_to_h_wt = 0x0053c9e00; // 87858688
uint64_t BLOCK27_qkv_weight = 0x0054a6e00; // 88763904
uint64_t BLOCK27_atten_weight = 0x0054f1200; // 89068032
uint64_t BLOCK27_h_to_4h_wt_1 = 0x005533200; // 89338368
uint64_t BLOCK27_h_to_4h_wt_0 = 0x00560fd00; // 90242304
uint64_t BLOCK27_dense_4h_to_h_wt = 0x0056ec800; // 91146240
uint64_t Output_Layer_wt = 0x0057c9800; // 92051456

// mod init
void step1 (HANDLE device, int kvcache, int token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 40960);
  CSB_Write(device, 195, 128681984);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (1 * token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (1 * token))));
  CSB_Write(device, 198, 129730560);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (1 * token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (1 * token))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (1 * token)));
  CSB_Write(device, 204, (kvcache ? 1 : (1 * token)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_STEP
printf("step1!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step2 (HANDLE device, int kvcache, int token) {
// accel.hbm.mvm_bn accel operator node, storage data in cache0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : token));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : token));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 129730560);
  CSB_Write(device, 11, 0);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, (kvcache ? (5736448 + ((token - 1) * 64)) : 5736448));
  CSB_Write(device, 14, 8);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 57344);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 31, 8192);
  CSB_Write(device, 32, 8192);
  CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("step2!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step3 (HANDLE device, int kvcache, int token) {
// accel.hbm.pos_emb accel operator node, storage data in cache1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (kvcache ? (0 + ((token - 1) * 64)) : 0));
  CSB_Write(device, 195, (kvcache ? (5736448 + ((token - 1) * 64)) : 5736448));
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, (kvcache ? (6916096 + ((token - 1) * 64)) : 6916096));
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, (kvcache ? 1 : token));
  CSB_Write(device, 203, 34);
  CSB_Write(device, 204, 8192);
  CSB_Write(device, 205, 0);
  CSB_Write(device, 206, 0);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
#ifdef PRINT_STEP
printf("step3!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step4 (HANDLE device, int kvcache, int token) {
// accel.hbm.mvm_afterTRP accel operator node, storage data in cache2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 7964672);
  CSB_Write(device, 195, (kvcache ? (6916096 + ((token - 1) * 64)) : 6916096));
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, (kvcache ? (8030208 + ((token - 1) * 64)) : 8030208));
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, token);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, (kvcache ? 1 : token));
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 11688);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 2);
#ifdef PRINT_STEP
printf("step4!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterTRP run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step5 (HANDLE device, int kvcache, int token) {
// accel.hbm.softmax accel operator node, storage data in cache3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (1 - kvcache));
  CSB_Write(device, 195, 8030208);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 9078784);
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, (((token + 32) - 1) / 32));
  CSB_Write(device, 202, 32);
  CSB_Write(device, 203, token);
  CSB_Write(device, 204, (kvcache ? 1 : token));
  CSB_Write(device, 205, (kvcache ? 1 : token));
  CSB_Write(device, 206, 0);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 8);
#ifdef PRINT_STEP
printf("step5!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.softmax run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step6 (HANDLE device, int kvcache, int token) {
// accel.hbm.mvm_afterF2W accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 6850560);
  CSB_Write(device, 195, (kvcache ? (9078784 + ((token - 1) * 64)) : 9078784));
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 129730560);
  CSB_Write(device, 199, (((64 * token) * 1) * 4));
  CSB_Write(device, 200, (64 * token));
  CSB_Write(device, 201, (((token + 32) - 1) / 32));
  CSB_Write(device, 202, token);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, (kvcache ? 1 : token));
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 4);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 1);
#ifdef PRINT_STEP
printf("step6!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterF2W run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step7 (HANDLE device, int kvcache, int token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : token));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : token));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 129730560);
  CSB_Write(device, 11, 304128);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 133236736);
  CSB_Write(device, 14, 7);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 75776);
  CSB_Write(device, 27, 128681984);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("step7!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step8 (HANDLE device, int kvcache, int token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 92160);
  CSB_Write(device, 195, 133236736);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (1 * token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (1 * token))));
  CSB_Write(device, 198, 128681984);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (1 * token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (1 * token))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (1 * token)));
  CSB_Write(device, 204, (kvcache ? 1 : (1 * token)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_STEP
printf("step8!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step9 (HANDLE device, int kvcache, int token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : token));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : token));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 128681984);
  CSB_Write(device, 11, 1478400);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 129730560);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 163328);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("step9!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step10 (HANDLE device, int kvcache, int token) {
// accel.hbm.activate accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 32768);
  CSB_Write(device, 195, 129730560);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 198, 149882880);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 201, 428);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : token));
  CSB_Write(device, 204, (kvcache ? 1 : token));
  CSB_Write(device, 205, 428);
  CSB_Write(device, 206, 13696);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 16);
#ifdef PRINT_STEP
printf("step10!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.activate run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step11 (HANDLE device, int kvcache, int token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : token));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : token));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 128681984);
  CSB_Write(device, 11, 574464);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 129730560);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 2);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 108544);
  CSB_Write(device, 27, 149882880);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("step11!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step12 (HANDLE device, int kvcache, int token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 13696);
  CSB_Write(device, 3, (kvcache ? 1 : token));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : token));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 128);
  CSB_Write(device, 8, 128);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 129730560);
  CSB_Write(device, 11, 2382336);
  CSB_Write(device, 12, 56576);
  CSB_Write(device, 13, 128681984);
  CSB_Write(device, 14, 31);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 218112);
  CSB_Write(device, 27, 133236736);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("step12!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step13 (HANDLE device, int kvcache, int token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 234496);
  CSB_Write(device, 195, 128681984);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (1 * token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (1 * token))));
  CSB_Write(device, 198, 133236736);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (1 * token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (1 * token))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (1 * token)));
  CSB_Write(device, 204, (kvcache ? 1 : (1 * token)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_STEP
printf("step13!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step14 (HANDLE device, int kvcache, int token) {
// accel.hbm.mvm_bn accel operator node, storage data in cache4 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : token));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : token));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 133236736);
  CSB_Write(device, 11, 3287552);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, (kvcache ? (10127360 + ((token - 1) * 64)) : 10127360));
  CSB_Write(device, 14, 8);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 250880);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 31, 8192);
  CSB_Write(device, 32, 8192);
  CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("step14!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step15 (HANDLE device, int kvcache, int token) {
// accel.hbm.pos_emb accel operator node, storage data in cache5 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (kvcache ? (0 + ((token - 1) * 64)) : 0));
  CSB_Write(device, 195, (kvcache ? (10127360 + ((token - 1) * 64)) : 10127360));
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, (kvcache ? (11307008 + ((token - 1) * 64)) : 11307008));
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, (kvcache ? 1 : token));
  CSB_Write(device, 203, 34);
  CSB_Write(device, 204, 8192);
  CSB_Write(device, 205, 0);
  CSB_Write(device, 206, 0);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
#ifdef PRINT_STEP
printf("step15!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step16 (HANDLE device, int kvcache, int token) {
// accel.hbm.mvm_afterTRP accel operator node, storage data in cache6 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 12355584);
  CSB_Write(device, 195, (kvcache ? (11307008 + ((token - 1) * 64)) : 11307008));
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, (kvcache ? (12421120 + ((token - 1) * 64)) : 12421120));
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, token);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, (kvcache ? 1 : token));
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 11688);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 2);
#ifdef PRINT_STEP
printf("step16!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterTRP run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step17 (HANDLE device, int kvcache, int token) {
// accel.hbm.softmax accel operator node, storage data in cache7 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (1 - kvcache));
  CSB_Write(device, 195, 12421120);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 13469696);
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, (((token + 32) - 1) / 32));
  CSB_Write(device, 202, 32);
  CSB_Write(device, 203, token);
  CSB_Write(device, 204, (kvcache ? 1 : token));
  CSB_Write(device, 205, (kvcache ? 1 : token));
  CSB_Write(device, 206, 0);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 8);
#ifdef PRINT_STEP
printf("step17!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.softmax run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step18 (HANDLE device, int kvcache, int token) {
// accel.hbm.mvm_afterF2W accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 11241472);
  CSB_Write(device, 195, (kvcache ? (13469696 + ((token - 1) * 64)) : 13469696));
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 133236736);
  CSB_Write(device, 199, (((64 * token) * 1) * 4));
  CSB_Write(device, 200, (64 * token));
  CSB_Write(device, 201, (((token + 32) - 1) / 32));
  CSB_Write(device, 202, token);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, (kvcache ? 1 : token));
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 4);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 1);
#ifdef PRINT_STEP
printf("step18!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterF2W run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step19 (HANDLE device, int kvcache, int token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : token));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : token));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 133236736);
  CSB_Write(device, 11, 3591680);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 129730560);
  CSB_Write(device, 14, 7);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 269312);
  CSB_Write(device, 27, 128681984);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("step19!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step20 (HANDLE device, int kvcache, int token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 285696);
  CSB_Write(device, 195, 129730560);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (1 * token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (1 * token))));
  CSB_Write(device, 198, 128681984);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (1 * token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (1 * token))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (1 * token)));
  CSB_Write(device, 204, (kvcache ? 1 : (1 * token)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_STEP
printf("step20!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step21 (HANDLE device, int kvcache, int token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : token));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : token));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 128681984);
  CSB_Write(device, 11, 4765952);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 149882880);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 356864);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("step21!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step22 (HANDLE device, int kvcache, int token) {
// accel.hbm.activate accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 32768);
  CSB_Write(device, 195, 149882880);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 198, 133236736);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 201, 428);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : token));
  CSB_Write(device, 204, (kvcache ? 1 : token));
  CSB_Write(device, 205, 428);
  CSB_Write(device, 206, 13696);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 16);
#ifdef PRINT_STEP
printf("step22!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.activate run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step23 (HANDLE device, int kvcache, int token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : token));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : token));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 128681984);
  CSB_Write(device, 11, 3862016);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 149882880);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 2);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 302080);
  CSB_Write(device, 27, 133236736);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("step23!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step24 (HANDLE device, int kvcache, int token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 13696);
  CSB_Write(device, 3, (kvcache ? 1 : token));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : token));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 128);
  CSB_Write(device, 8, 128);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 149882880);
  CSB_Write(device, 11, 5669888);
  CSB_Write(device, 12, 56576);
  CSB_Write(device, 13, 128681984);
  CSB_Write(device, 14, 31);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 411648);
  CSB_Write(device, 27, 129730560);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("step24!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step25 (HANDLE device, int kvcache, int token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 428032);
  CSB_Write(device, 195, 128681984);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (1 * token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (1 * token))));
  CSB_Write(device, 198, 129730560);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (1 * token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (1 * token))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (1 * token)));
  CSB_Write(device, 204, (kvcache ? 1 : (1 * token)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_STEP
printf("step25!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step26 (HANDLE device, int kvcache, int token) {
// accel.hbm.mvm_bn accel operator node, storage data in cache8 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : token));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : token));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 129730560);
  CSB_Write(device, 11, 6575104);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, (kvcache ? (14518272 + ((token - 1) * 64)) : 14518272));
  CSB_Write(device, 14, 8);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 444416);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 31, 8192);
  CSB_Write(device, 32, 8192);
  CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("step26!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step27 (HANDLE device, int kvcache, int token) {
// accel.hbm.pos_emb accel operator node, storage data in cache9 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (kvcache ? (0 + ((token - 1) * 64)) : 0));
  CSB_Write(device, 195, (kvcache ? (14518272 + ((token - 1) * 64)) : 14518272));
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, (kvcache ? (15697920 + ((token - 1) * 64)) : 15697920));
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, (kvcache ? 1 : token));
  CSB_Write(device, 203, 34);
  CSB_Write(device, 204, 8192);
  CSB_Write(device, 205, 0);
  CSB_Write(device, 206, 0);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
#ifdef PRINT_STEP
printf("step27!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step28 (HANDLE device, int kvcache, int token) {
// accel.hbm.mvm_afterTRP accel operator node, storage data in cache10 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 16746496);
  CSB_Write(device, 195, (kvcache ? (15697920 + ((token - 1) * 64)) : 15697920));
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, (kvcache ? (16812032 + ((token - 1) * 64)) : 16812032));
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, token);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, (kvcache ? 1 : token));
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 11688);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 2);
#ifdef PRINT_STEP
printf("step28!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterTRP run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step29 (HANDLE device, int kvcache, int token) {
// accel.hbm.softmax accel operator node, storage data in cache11 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (1 - kvcache));
  CSB_Write(device, 195, 16812032);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 17860608);
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, (((token + 32) - 1) / 32));
  CSB_Write(device, 202, 32);
  CSB_Write(device, 203, token);
  CSB_Write(device, 204, (kvcache ? 1 : token));
  CSB_Write(device, 205, (kvcache ? 1 : token));
  CSB_Write(device, 206, 0);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 8);
#ifdef PRINT_STEP
printf("step29!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.softmax run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step30 (HANDLE device, int kvcache, int token) {
// accel.hbm.mvm_afterF2W accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 15632384);
  CSB_Write(device, 195, (kvcache ? (17860608 + ((token - 1) * 64)) : 17860608));
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 129730560);
  CSB_Write(device, 199, (((64 * token) * 1) * 4));
  CSB_Write(device, 200, (64 * token));
  CSB_Write(device, 201, (((token + 32) - 1) / 32));
  CSB_Write(device, 202, token);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, (kvcache ? 1 : token));
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 4);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 1);
#ifdef PRINT_STEP
printf("step30!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterF2W run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step31 (HANDLE device, int kvcache, int token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : token));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : token));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 129730560);
  CSB_Write(device, 11, 6879232);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 149882880);
  CSB_Write(device, 14, 7);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 462848);
  CSB_Write(device, 27, 128681984);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("step31!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step32 (HANDLE device, int kvcache, int token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 479232);
  CSB_Write(device, 195, 149882880);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (1 * token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (1 * token))));
  CSB_Write(device, 198, 128681984);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (1 * token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (1 * token))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (1 * token)));
  CSB_Write(device, 204, (kvcache ? 1 : (1 * token)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_STEP
printf("step32!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step33 (HANDLE device, int kvcache, int token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : token));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : token));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 128681984);
  CSB_Write(device, 11, 8053504);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 129730560);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 550400);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("step33!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step34 (HANDLE device, int kvcache, int token) {
// accel.hbm.activate accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 32768);
  CSB_Write(device, 195, 129730560);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 198, 133236736);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 201, 428);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : token));
  CSB_Write(device, 204, (kvcache ? 1 : token));
  CSB_Write(device, 205, 428);
  CSB_Write(device, 206, 13696);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 16);
#ifdef PRINT_STEP
printf("step34!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.activate run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step35 (HANDLE device, int kvcache, int token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : token));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : token));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 128681984);
  CSB_Write(device, 11, 7149568);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 129730560);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 2);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 495616);
  CSB_Write(device, 27, 133236736);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("step35!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step36 (HANDLE device, int kvcache, int token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 13696);
  CSB_Write(device, 3, (kvcache ? 1 : token));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : token));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 128);
  CSB_Write(device, 8, 128);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 129730560);
  CSB_Write(device, 11, 8957440);
  CSB_Write(device, 12, 56576);
  CSB_Write(device, 13, 128681984);
  CSB_Write(device, 14, 31);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 605184);
  CSB_Write(device, 27, 149882880);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("step36!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step37 (HANDLE device, int kvcache, int token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 621568);
  CSB_Write(device, 195, 128681984);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (1 * token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (1 * token))));
  CSB_Write(device, 198, 149882880);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (1 * token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (1 * token))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (1 * token)));
  CSB_Write(device, 204, (kvcache ? 1 : (1 * token)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_STEP
printf("step37!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step38 (HANDLE device, int kvcache, int token) {
// accel.hbm.mvm_bn accel operator node, storage data in cache12 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : token));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : token));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 149882880);
  CSB_Write(device, 11, 9862656);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, (kvcache ? (18909184 + ((token - 1) * 64)) : 18909184));
  CSB_Write(device, 14, 8);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 637952);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 31, 8192);
  CSB_Write(device, 32, 8192);
  CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("step38!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step39 (HANDLE device, int kvcache, int token) {
// accel.hbm.pos_emb accel operator node, storage data in cache13 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (kvcache ? (0 + ((token - 1) * 64)) : 0));
  CSB_Write(device, 195, (kvcache ? (18909184 + ((token - 1) * 64)) : 18909184));
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, (kvcache ? (20088832 + ((token - 1) * 64)) : 20088832));
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, (kvcache ? 1 : token));
  CSB_Write(device, 203, 34);
  CSB_Write(device, 204, 8192);
  CSB_Write(device, 205, 0);
  CSB_Write(device, 206, 0);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
#ifdef PRINT_STEP
printf("step39!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step40 (HANDLE device, int kvcache, int token) {
// accel.hbm.mvm_afterTRP accel operator node, storage data in cache14 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 21137408);
  CSB_Write(device, 195, (kvcache ? (20088832 + ((token - 1) * 64)) : 20088832));
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, (kvcache ? (21202944 + ((token - 1) * 64)) : 21202944));
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, token);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, (kvcache ? 1 : token));
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 11688);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 2);
#ifdef PRINT_STEP
printf("step40!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterTRP run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step41 (HANDLE device, int kvcache, int token) {
// accel.hbm.softmax accel operator node, storage data in cache15 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (1 - kvcache));
  CSB_Write(device, 195, 21202944);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 22251520);
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, (((token + 32) - 1) / 32));
  CSB_Write(device, 202, 32);
  CSB_Write(device, 203, token);
  CSB_Write(device, 204, (kvcache ? 1 : token));
  CSB_Write(device, 205, (kvcache ? 1 : token));
  CSB_Write(device, 206, 0);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 8);
#ifdef PRINT_STEP
printf("step41!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.softmax run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step42 (HANDLE device, int kvcache, int token) {
// accel.hbm.mvm_afterF2W accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 20023296);
  CSB_Write(device, 195, (kvcache ? (22251520 + ((token - 1) * 64)) : 22251520));
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 149882880);
  CSB_Write(device, 199, (((64 * token) * 1) * 4));
  CSB_Write(device, 200, (64 * token));
  CSB_Write(device, 201, (((token + 32) - 1) / 32));
  CSB_Write(device, 202, token);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, (kvcache ? 1 : token));
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 4);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 1);
#ifdef PRINT_STEP
printf("step42!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterF2W run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step43 (HANDLE device, int kvcache, int token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : token));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : token));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 149882880);
  CSB_Write(device, 11, 10166784);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 129730560);
  CSB_Write(device, 14, 7);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 656384);
  CSB_Write(device, 27, 128681984);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("step43!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step44 (HANDLE device, int kvcache, int token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 672768);
  CSB_Write(device, 195, 129730560);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (1 * token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (1 * token))));
  CSB_Write(device, 198, 128681984);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (1 * token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (1 * token))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (1 * token)));
  CSB_Write(device, 204, (kvcache ? 1 : (1 * token)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_STEP
printf("step44!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step45 (HANDLE device, int kvcache, int token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : token));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : token));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 128681984);
  CSB_Write(device, 11, 11341056);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 149882880);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 743936);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("step45!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step46 (HANDLE device, int kvcache, int token) {
// accel.hbm.activate accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 32768);
  CSB_Write(device, 195, 149882880);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 198, 133236736);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 201, 428);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : token));
  CSB_Write(device, 204, (kvcache ? 1 : token));
  CSB_Write(device, 205, 428);
  CSB_Write(device, 206, 13696);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 16);
#ifdef PRINT_STEP
printf("step46!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.activate run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step47 (HANDLE device, int kvcache, int token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : token));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : token));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 128681984);
  CSB_Write(device, 11, 10437120);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 149882880);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 2);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 689152);
  CSB_Write(device, 27, 133236736);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("step47!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step48 (HANDLE device, int kvcache, int token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 13696);
  CSB_Write(device, 3, (kvcache ? 1 : token));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : token));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 128);
  CSB_Write(device, 8, 128);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 149882880);
  CSB_Write(device, 11, 12244992);
  CSB_Write(device, 12, 56576);
  CSB_Write(device, 13, 128681984);
  CSB_Write(device, 14, 31);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 798720);
  CSB_Write(device, 27, 129730560);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("step48!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step49 (HANDLE device, int kvcache, int token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 815104);
  CSB_Write(device, 195, 128681984);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (1 * token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (1 * token))));
  CSB_Write(device, 198, 129730560);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (1 * token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (1 * token))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (1 * token)));
  CSB_Write(device, 204, (kvcache ? 1 : (1 * token)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_STEP
printf("step49!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step50 (HANDLE device, int kvcache, int token) {
// accel.hbm.mvm_bn accel operator node, storage data in cache16 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : token));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : token));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 129730560);
  CSB_Write(device, 11, 13150208);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, (kvcache ? (23300096 + ((token - 1) * 64)) : 23300096));
  CSB_Write(device, 14, 8);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 831488);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 31, 8192);
  CSB_Write(device, 32, 8192);
  CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("step50!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step51 (HANDLE device, int kvcache, int token) {
// accel.hbm.pos_emb accel operator node, storage data in cache17 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (kvcache ? (0 + ((token - 1) * 64)) : 0));
  CSB_Write(device, 195, (kvcache ? (23300096 + ((token - 1) * 64)) : 23300096));
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, (kvcache ? (24479744 + ((token - 1) * 64)) : 24479744));
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, (kvcache ? 1 : token));
  CSB_Write(device, 203, 34);
  CSB_Write(device, 204, 8192);
  CSB_Write(device, 205, 0);
  CSB_Write(device, 206, 0);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
#ifdef PRINT_STEP
printf("step51!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step52 (HANDLE device, int kvcache, int token) {
// accel.hbm.mvm_afterTRP accel operator node, storage data in cache18 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 25528320);
  CSB_Write(device, 195, (kvcache ? (24479744 + ((token - 1) * 64)) : 24479744));
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, (kvcache ? (25593856 + ((token - 1) * 64)) : 25593856));
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, token);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, (kvcache ? 1 : token));
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 11688);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 2);
#ifdef PRINT_STEP
printf("step52!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterTRP run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step53 (HANDLE device, int kvcache, int token) {
// accel.hbm.softmax accel operator node, storage data in cache19 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (1 - kvcache));
  CSB_Write(device, 195, 25593856);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 26642432);
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, (((token + 32) - 1) / 32));
  CSB_Write(device, 202, 32);
  CSB_Write(device, 203, token);
  CSB_Write(device, 204, (kvcache ? 1 : token));
  CSB_Write(device, 205, (kvcache ? 1 : token));
  CSB_Write(device, 206, 0);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 8);
#ifdef PRINT_STEP
printf("step53!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.softmax run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step54 (HANDLE device, int kvcache, int token) {
// accel.hbm.mvm_afterF2W accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 24414208);
  CSB_Write(device, 195, (kvcache ? (26642432 + ((token - 1) * 64)) : 26642432));
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 129730560);
  CSB_Write(device, 199, (((64 * token) * 1) * 4));
  CSB_Write(device, 200, (64 * token));
  CSB_Write(device, 201, (((token + 32) - 1) / 32));
  CSB_Write(device, 202, token);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, (kvcache ? 1 : token));
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 4);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 1);
#ifdef PRINT_STEP
printf("step54!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterF2W run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step55 (HANDLE device, int kvcache, int token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : token));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : token));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 129730560);
  CSB_Write(device, 11, 13454336);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 149882880);
  CSB_Write(device, 14, 7);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 849920);
  CSB_Write(device, 27, 128681984);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("step55!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step56 (HANDLE device, int kvcache, int token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 866304);
  CSB_Write(device, 195, 149882880);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (1 * token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (1 * token))));
  CSB_Write(device, 198, 128681984);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (1 * token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (1 * token))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (1 * token)));
  CSB_Write(device, 204, (kvcache ? 1 : (1 * token)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_STEP
printf("step56!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step57 (HANDLE device, int kvcache, int token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : token));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : token));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 128681984);
  CSB_Write(device, 11, 14628608);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 129730560);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 937472);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("step57!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step58 (HANDLE device, int kvcache, int token) {
// accel.hbm.activate accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 32768);
  CSB_Write(device, 195, 129730560);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 198, 133236736);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 201, 428);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : token));
  CSB_Write(device, 204, (kvcache ? 1 : token));
  CSB_Write(device, 205, 428);
  CSB_Write(device, 206, 13696);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 16);
#ifdef PRINT_STEP
printf("step58!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.activate run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step59 (HANDLE device, int kvcache, int token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : token));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : token));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 128681984);
  CSB_Write(device, 11, 13724672);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 129730560);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 2);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 882688);
  CSB_Write(device, 27, 133236736);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("step59!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step60 (HANDLE device, int kvcache, int token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 13696);
  CSB_Write(device, 3, (kvcache ? 1 : token));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : token));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 128);
  CSB_Write(device, 8, 128);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 129730560);
  CSB_Write(device, 11, 15532544);
  CSB_Write(device, 12, 56576);
  CSB_Write(device, 13, 128681984);
  CSB_Write(device, 14, 31);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 992256);
  CSB_Write(device, 27, 149882880);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("step60!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step61 (HANDLE device, int kvcache, int token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 1008640);
  CSB_Write(device, 195, 128681984);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (1 * token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (1 * token))));
  CSB_Write(device, 198, 149882880);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (1 * token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (1 * token))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (1 * token)));
  CSB_Write(device, 204, (kvcache ? 1 : (1 * token)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_STEP
printf("step61!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step62 (HANDLE device, int kvcache, int token) {
// accel.hbm.mvm_bn accel operator node, storage data in cache20 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : token));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : token));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 149882880);
  CSB_Write(device, 11, 16437760);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, (kvcache ? (27691008 + ((token - 1) * 64)) : 27691008));
  CSB_Write(device, 14, 8);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 1025024);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 31, 8192);
  CSB_Write(device, 32, 8192);
  CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("step62!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step63 (HANDLE device, int kvcache, int token) {
// accel.hbm.pos_emb accel operator node, storage data in cache21 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (kvcache ? (0 + ((token - 1) * 64)) : 0));
  CSB_Write(device, 195, (kvcache ? (27691008 + ((token - 1) * 64)) : 27691008));
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, (kvcache ? (28870656 + ((token - 1) * 64)) : 28870656));
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, (kvcache ? 1 : token));
  CSB_Write(device, 203, 34);
  CSB_Write(device, 204, 8192);
  CSB_Write(device, 205, 0);
  CSB_Write(device, 206, 0);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
#ifdef PRINT_STEP
printf("step63!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step64 (HANDLE device, int kvcache, int token) {
// accel.hbm.mvm_afterTRP accel operator node, storage data in cache22 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 29919232);
  CSB_Write(device, 195, (kvcache ? (28870656 + ((token - 1) * 64)) : 28870656));
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, (kvcache ? (29984768 + ((token - 1) * 64)) : 29984768));
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, token);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, (kvcache ? 1 : token));
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 11688);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 2);
#ifdef PRINT_STEP
printf("step64!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterTRP run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step65 (HANDLE device, int kvcache, int token) {
// accel.hbm.softmax accel operator node, storage data in cache23 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (1 - kvcache));
  CSB_Write(device, 195, 29984768);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 31033344);
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, (((token + 32) - 1) / 32));
  CSB_Write(device, 202, 32);
  CSB_Write(device, 203, token);
  CSB_Write(device, 204, (kvcache ? 1 : token));
  CSB_Write(device, 205, (kvcache ? 1 : token));
  CSB_Write(device, 206, 0);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 8);
#ifdef PRINT_STEP
printf("step65!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.softmax run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step66 (HANDLE device, int kvcache, int token) {
// accel.hbm.mvm_afterF2W accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 28805120);
  CSB_Write(device, 195, (kvcache ? (31033344 + ((token - 1) * 64)) : 31033344));
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 149882880);
  CSB_Write(device, 199, (((64 * token) * 1) * 4));
  CSB_Write(device, 200, (64 * token));
  CSB_Write(device, 201, (((token + 32) - 1) / 32));
  CSB_Write(device, 202, token);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, (kvcache ? 1 : token));
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 4);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 1);
#ifdef PRINT_STEP
printf("step66!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterF2W run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step67 (HANDLE device, int kvcache, int token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : token));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : token));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 149882880);
  CSB_Write(device, 11, 16741888);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 129730560);
  CSB_Write(device, 14, 7);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 1043456);
  CSB_Write(device, 27, 128681984);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("step67!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step68 (HANDLE device, int kvcache, int token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 1059840);
  CSB_Write(device, 195, 129730560);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (1 * token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (1 * token))));
  CSB_Write(device, 198, 128681984);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (1 * token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (1 * token))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (1 * token)));
  CSB_Write(device, 204, (kvcache ? 1 : (1 * token)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_STEP
printf("step68!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step69 (HANDLE device, int kvcache, int token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : token));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : token));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 128681984);
  CSB_Write(device, 11, 17916160);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 149882880);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 1131008);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("step69!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step70 (HANDLE device, int kvcache, int token) {
// accel.hbm.activate accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 32768);
  CSB_Write(device, 195, 149882880);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 198, 133236736);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 201, 428);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : token));
  CSB_Write(device, 204, (kvcache ? 1 : token));
  CSB_Write(device, 205, 428);
  CSB_Write(device, 206, 13696);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 16);
#ifdef PRINT_STEP
printf("step70!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.activate run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step71 (HANDLE device, int kvcache, int token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : token));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : token));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 128681984);
  CSB_Write(device, 11, 17012224);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 149882880);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 2);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 1076224);
  CSB_Write(device, 27, 133236736);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("step71!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step72 (HANDLE device, int kvcache, int token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 13696);
  CSB_Write(device, 3, (kvcache ? 1 : token));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : token));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 128);
  CSB_Write(device, 8, 128);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 149882880);
  CSB_Write(device, 11, 18820096);
  CSB_Write(device, 12, 56576);
  CSB_Write(device, 13, 128681984);
  CSB_Write(device, 14, 31);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 1185792);
  CSB_Write(device, 27, 129730560);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("step72!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step73 (HANDLE device, int kvcache, int token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 1202176);
  CSB_Write(device, 195, 128681984);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (1 * token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (1 * token))));
  CSB_Write(device, 198, 129730560);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (1 * token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (1 * token))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (1 * token)));
  CSB_Write(device, 204, (kvcache ? 1 : (1 * token)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_STEP
printf("step73!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step74 (HANDLE device, int kvcache, int token) {
// accel.hbm.mvm_bn accel operator node, storage data in cache24 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : token));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : token));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 129730560);
  CSB_Write(device, 11, 19725312);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, (kvcache ? (32081920 + ((token - 1) * 64)) : 32081920));
  CSB_Write(device, 14, 8);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 1218560);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 31, 8192);
  CSB_Write(device, 32, 8192);
  CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("step74!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step75 (HANDLE device, int kvcache, int token) {
// accel.hbm.pos_emb accel operator node, storage data in cache25 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (kvcache ? (0 + ((token - 1) * 64)) : 0));
  CSB_Write(device, 195, (kvcache ? (32081920 + ((token - 1) * 64)) : 32081920));
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, (kvcache ? (33261568 + ((token - 1) * 64)) : 33261568));
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, (kvcache ? 1 : token));
  CSB_Write(device, 203, 34);
  CSB_Write(device, 204, 8192);
  CSB_Write(device, 205, 0);
  CSB_Write(device, 206, 0);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
#ifdef PRINT_STEP
printf("step75!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step76 (HANDLE device, int kvcache, int token) {
// accel.hbm.mvm_afterTRP accel operator node, storage data in cache26 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 34310144);
  CSB_Write(device, 195, (kvcache ? (33261568 + ((token - 1) * 64)) : 33261568));
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, (kvcache ? (34375680 + ((token - 1) * 64)) : 34375680));
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, token);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, (kvcache ? 1 : token));
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 11688);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 2);
#ifdef PRINT_STEP
printf("step76!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterTRP run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step77 (HANDLE device, int kvcache, int token) {
// accel.hbm.softmax accel operator node, storage data in cache27 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (1 - kvcache));
  CSB_Write(device, 195, 34375680);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 35424256);
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, (((token + 32) - 1) / 32));
  CSB_Write(device, 202, 32);
  CSB_Write(device, 203, token);
  CSB_Write(device, 204, (kvcache ? 1 : token));
  CSB_Write(device, 205, (kvcache ? 1 : token));
  CSB_Write(device, 206, 0);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 8);
#ifdef PRINT_STEP
printf("step77!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.softmax run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step78 (HANDLE device, int kvcache, int token) {
// accel.hbm.mvm_afterF2W accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 33196032);
  CSB_Write(device, 195, (kvcache ? (35424256 + ((token - 1) * 64)) : 35424256));
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 129730560);
  CSB_Write(device, 199, (((64 * token) * 1) * 4));
  CSB_Write(device, 200, (64 * token));
  CSB_Write(device, 201, (((token + 32) - 1) / 32));
  CSB_Write(device, 202, token);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, (kvcache ? 1 : token));
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 4);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 1);
#ifdef PRINT_STEP
printf("step78!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterF2W run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step79 (HANDLE device, int kvcache, int token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : token));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : token));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 129730560);
  CSB_Write(device, 11, 20029440);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 149882880);
  CSB_Write(device, 14, 7);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 1236992);
  CSB_Write(device, 27, 128681984);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("step79!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step80 (HANDLE device, int kvcache, int token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 1253376);
  CSB_Write(device, 195, 149882880);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (1 * token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (1 * token))));
  CSB_Write(device, 198, 128681984);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (1 * token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (1 * token))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (1 * token)));
  CSB_Write(device, 204, (kvcache ? 1 : (1 * token)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_STEP
printf("step80!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step81 (HANDLE device, int kvcache, int token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : token));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : token));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 128681984);
  CSB_Write(device, 11, 21203712);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 129730560);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 1324544);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("step81!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step82 (HANDLE device, int kvcache, int token) {
// accel.hbm.activate accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 32768);
  CSB_Write(device, 195, 129730560);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 198, 133236736);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 201, 428);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : token));
  CSB_Write(device, 204, (kvcache ? 1 : token));
  CSB_Write(device, 205, 428);
  CSB_Write(device, 206, 13696);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 16);
#ifdef PRINT_STEP
printf("step82!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.activate run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step83 (HANDLE device, int kvcache, int token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : token));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : token));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 128681984);
  CSB_Write(device, 11, 20299776);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 129730560);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 2);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 1269760);
  CSB_Write(device, 27, 133236736);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("step83!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step84 (HANDLE device, int kvcache, int token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 13696);
  CSB_Write(device, 3, (kvcache ? 1 : token));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : token));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 128);
  CSB_Write(device, 8, 128);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 129730560);
  CSB_Write(device, 11, 22107648);
  CSB_Write(device, 12, 56576);
  CSB_Write(device, 13, 128681984);
  CSB_Write(device, 14, 31);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 1379328);
  CSB_Write(device, 27, 149882880);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("step84!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step85 (HANDLE device, int kvcache, int token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 1395712);
  CSB_Write(device, 195, 128681984);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (1 * token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (1 * token))));
  CSB_Write(device, 198, 149882880);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (1 * token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (1 * token))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (1 * token)));
  CSB_Write(device, 204, (kvcache ? 1 : (1 * token)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_STEP
printf("step85!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step86 (HANDLE device, int kvcache, int token) {
// accel.hbm.mvm_bn accel operator node, storage data in cache28 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : token));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : token));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 149882880);
  CSB_Write(device, 11, 23012864);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, (kvcache ? (36472832 + ((token - 1) * 64)) : 36472832));
  CSB_Write(device, 14, 8);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 1412096);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 31, 8192);
  CSB_Write(device, 32, 8192);
  CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("step86!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step87 (HANDLE device, int kvcache, int token) {
// accel.hbm.pos_emb accel operator node, storage data in cache29 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (kvcache ? (0 + ((token - 1) * 64)) : 0));
  CSB_Write(device, 195, (kvcache ? (36472832 + ((token - 1) * 64)) : 36472832));
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, (kvcache ? (37652480 + ((token - 1) * 64)) : 37652480));
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, (kvcache ? 1 : token));
  CSB_Write(device, 203, 34);
  CSB_Write(device, 204, 8192);
  CSB_Write(device, 205, 0);
  CSB_Write(device, 206, 0);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
#ifdef PRINT_STEP
printf("step87!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step88 (HANDLE device, int kvcache, int token) {
// accel.hbm.mvm_afterTRP accel operator node, storage data in cache30 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 38701056);
  CSB_Write(device, 195, (kvcache ? (37652480 + ((token - 1) * 64)) : 37652480));
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, (kvcache ? (38766592 + ((token - 1) * 64)) : 38766592));
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, token);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, (kvcache ? 1 : token));
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 11688);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 2);
#ifdef PRINT_STEP
printf("step88!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterTRP run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step89 (HANDLE device, int kvcache, int token) {
// accel.hbm.softmax accel operator node, storage data in cache31 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (1 - kvcache));
  CSB_Write(device, 195, 38766592);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 39815168);
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, (((token + 32) - 1) / 32));
  CSB_Write(device, 202, 32);
  CSB_Write(device, 203, token);
  CSB_Write(device, 204, (kvcache ? 1 : token));
  CSB_Write(device, 205, (kvcache ? 1 : token));
  CSB_Write(device, 206, 0);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 8);
#ifdef PRINT_STEP
printf("step89!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.softmax run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step90 (HANDLE device, int kvcache, int token) {
// accel.hbm.mvm_afterF2W accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 37586944);
  CSB_Write(device, 195, (kvcache ? (39815168 + ((token - 1) * 64)) : 39815168));
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 149882880);
  CSB_Write(device, 199, (((64 * token) * 1) * 4));
  CSB_Write(device, 200, (64 * token));
  CSB_Write(device, 201, (((token + 32) - 1) / 32));
  CSB_Write(device, 202, token);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, (kvcache ? 1 : token));
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 4);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 1);
#ifdef PRINT_STEP
printf("step90!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterF2W run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step91 (HANDLE device, int kvcache, int token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : token));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : token));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 149882880);
  CSB_Write(device, 11, 23316992);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 129730560);
  CSB_Write(device, 14, 7);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 1430528);
  CSB_Write(device, 27, 128681984);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("step91!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step92 (HANDLE device, int kvcache, int token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 1446912);
  CSB_Write(device, 195, 129730560);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (1 * token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (1 * token))));
  CSB_Write(device, 198, 128681984);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (1 * token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (1 * token))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (1 * token)));
  CSB_Write(device, 204, (kvcache ? 1 : (1 * token)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_STEP
printf("step92!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step93 (HANDLE device, int kvcache, int token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : token));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : token));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 128681984);
  CSB_Write(device, 11, 24491264);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 149882880);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 1518080);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("step93!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step94 (HANDLE device, int kvcache, int token) {
// accel.hbm.activate accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 32768);
  CSB_Write(device, 195, 149882880);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 198, 133236736);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 201, 428);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : token));
  CSB_Write(device, 204, (kvcache ? 1 : token));
  CSB_Write(device, 205, 428);
  CSB_Write(device, 206, 13696);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 16);
#ifdef PRINT_STEP
printf("step94!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.activate run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step95 (HANDLE device, int kvcache, int token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : token));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : token));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 128681984);
  CSB_Write(device, 11, 23587328);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 149882880);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 2);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 1463296);
  CSB_Write(device, 27, 133236736);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("step95!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step96 (HANDLE device, int kvcache, int token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 13696);
  CSB_Write(device, 3, (kvcache ? 1 : token));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : token));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 128);
  CSB_Write(device, 8, 128);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 149882880);
  CSB_Write(device, 11, 25395200);
  CSB_Write(device, 12, 56576);
  CSB_Write(device, 13, 128681984);
  CSB_Write(device, 14, 31);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 1572864);
  CSB_Write(device, 27, 129730560);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("step96!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step97 (HANDLE device, int kvcache, int token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 1589248);
  CSB_Write(device, 195, 128681984);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (1 * token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (1 * token))));
  CSB_Write(device, 198, 129730560);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (1 * token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (1 * token))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (1 * token)));
  CSB_Write(device, 204, (kvcache ? 1 : (1 * token)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_STEP
printf("step97!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step98 (HANDLE device, int kvcache, int token) {
// accel.hbm.mvm_bn accel operator node, storage data in cache32 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : token));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : token));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 129730560);
  CSB_Write(device, 11, 26300416);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, (kvcache ? (40863744 + ((token - 1) * 64)) : 40863744));
  CSB_Write(device, 14, 8);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 1605632);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 31, 8192);
  CSB_Write(device, 32, 8192);
  CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("step98!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step99 (HANDLE device, int kvcache, int token) {
// accel.hbm.pos_emb accel operator node, storage data in cache33 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (kvcache ? (0 + ((token - 1) * 64)) : 0));
  CSB_Write(device, 195, (kvcache ? (40863744 + ((token - 1) * 64)) : 40863744));
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, (kvcache ? (42043392 + ((token - 1) * 64)) : 42043392));
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, (kvcache ? 1 : token));
  CSB_Write(device, 203, 34);
  CSB_Write(device, 204, 8192);
  CSB_Write(device, 205, 0);
  CSB_Write(device, 206, 0);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
#ifdef PRINT_STEP
printf("step99!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step100 (HANDLE device, int kvcache, int token) {
// accel.hbm.mvm_afterTRP accel operator node, storage data in cache34 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 43091968);
  CSB_Write(device, 195, (kvcache ? (42043392 + ((token - 1) * 64)) : 42043392));
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, (kvcache ? (43157504 + ((token - 1) * 64)) : 43157504));
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, token);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, (kvcache ? 1 : token));
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 11688);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 2);
#ifdef PRINT_STEP
printf("step100!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterTRP run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step101 (HANDLE device, int kvcache, int token) {
// accel.hbm.softmax accel operator node, storage data in cache35 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (1 - kvcache));
  CSB_Write(device, 195, 43157504);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 44206080);
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, (((token + 32) - 1) / 32));
  CSB_Write(device, 202, 32);
  CSB_Write(device, 203, token);
  CSB_Write(device, 204, (kvcache ? 1 : token));
  CSB_Write(device, 205, (kvcache ? 1 : token));
  CSB_Write(device, 206, 0);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 8);
#ifdef PRINT_STEP
printf("step101!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.softmax run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step102 (HANDLE device, int kvcache, int token) {
// accel.hbm.mvm_afterF2W accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 41977856);
  CSB_Write(device, 195, (kvcache ? (44206080 + ((token - 1) * 64)) : 44206080));
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 129730560);
  CSB_Write(device, 199, (((64 * token) * 1) * 4));
  CSB_Write(device, 200, (64 * token));
  CSB_Write(device, 201, (((token + 32) - 1) / 32));
  CSB_Write(device, 202, token);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, (kvcache ? 1 : token));
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 4);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 1);
#ifdef PRINT_STEP
printf("step102!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterF2W run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step103 (HANDLE device, int kvcache, int token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : token));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : token));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 129730560);
  CSB_Write(device, 11, 26604544);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 149882880);
  CSB_Write(device, 14, 7);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 1624064);
  CSB_Write(device, 27, 128681984);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("step103!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step104 (HANDLE device, int kvcache, int token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 1640448);
  CSB_Write(device, 195, 149882880);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (1 * token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (1 * token))));
  CSB_Write(device, 198, 128681984);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (1 * token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (1 * token))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (1 * token)));
  CSB_Write(device, 204, (kvcache ? 1 : (1 * token)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_STEP
printf("step104!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step105 (HANDLE device, int kvcache, int token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : token));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : token));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 128681984);
  CSB_Write(device, 11, 27778816);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 129730560);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 1711616);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("step105!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step106 (HANDLE device, int kvcache, int token) {
// accel.hbm.activate accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 32768);
  CSB_Write(device, 195, 129730560);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 198, 133236736);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 201, 428);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : token));
  CSB_Write(device, 204, (kvcache ? 1 : token));
  CSB_Write(device, 205, 428);
  CSB_Write(device, 206, 13696);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 16);
#ifdef PRINT_STEP
printf("step106!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.activate run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step107 (HANDLE device, int kvcache, int token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : token));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : token));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 128681984);
  CSB_Write(device, 11, 26874880);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 129730560);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 2);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 1656832);
  CSB_Write(device, 27, 133236736);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("step107!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step108 (HANDLE device, int kvcache, int token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 13696);
  CSB_Write(device, 3, (kvcache ? 1 : token));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : token));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 128);
  CSB_Write(device, 8, 128);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 129730560);
  CSB_Write(device, 11, 28682752);
  CSB_Write(device, 12, 56576);
  CSB_Write(device, 13, 128681984);
  CSB_Write(device, 14, 31);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 1766400);
  CSB_Write(device, 27, 149882880);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("step108!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step109 (HANDLE device, int kvcache, int token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 1782784);
  CSB_Write(device, 195, 128681984);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (1 * token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (1 * token))));
  CSB_Write(device, 198, 149882880);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (1 * token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (1 * token))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (1 * token)));
  CSB_Write(device, 204, (kvcache ? 1 : (1 * token)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_STEP
printf("step109!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step110 (HANDLE device, int kvcache, int token) {
// accel.hbm.mvm_bn accel operator node, storage data in cache36 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : token));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : token));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 149882880);
  CSB_Write(device, 11, 29587968);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, (kvcache ? (45254656 + ((token - 1) * 64)) : 45254656));
  CSB_Write(device, 14, 8);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 1799168);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 31, 8192);
  CSB_Write(device, 32, 8192);
  CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("step110!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step111 (HANDLE device, int kvcache, int token) {
// accel.hbm.pos_emb accel operator node, storage data in cache37 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (kvcache ? (0 + ((token - 1) * 64)) : 0));
  CSB_Write(device, 195, (kvcache ? (45254656 + ((token - 1) * 64)) : 45254656));
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, (kvcache ? (46434304 + ((token - 1) * 64)) : 46434304));
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, (kvcache ? 1 : token));
  CSB_Write(device, 203, 34);
  CSB_Write(device, 204, 8192);
  CSB_Write(device, 205, 0);
  CSB_Write(device, 206, 0);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
#ifdef PRINT_STEP
printf("step111!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step112 (HANDLE device, int kvcache, int token) {
// accel.hbm.mvm_afterTRP accel operator node, storage data in cache38 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 47482880);
  CSB_Write(device, 195, (kvcache ? (46434304 + ((token - 1) * 64)) : 46434304));
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, (kvcache ? (47548416 + ((token - 1) * 64)) : 47548416));
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, token);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, (kvcache ? 1 : token));
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 11688);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 2);
#ifdef PRINT_STEP
printf("step112!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterTRP run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step113 (HANDLE device, int kvcache, int token) {
// accel.hbm.softmax accel operator node, storage data in cache39 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (1 - kvcache));
  CSB_Write(device, 195, 47548416);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 48596992);
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, (((token + 32) - 1) / 32));
  CSB_Write(device, 202, 32);
  CSB_Write(device, 203, token);
  CSB_Write(device, 204, (kvcache ? 1 : token));
  CSB_Write(device, 205, (kvcache ? 1 : token));
  CSB_Write(device, 206, 0);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 8);
#ifdef PRINT_STEP
printf("step113!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.softmax run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step114 (HANDLE device, int kvcache, int token) {
// accel.hbm.mvm_afterF2W accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 46368768);
  CSB_Write(device, 195, (kvcache ? (48596992 + ((token - 1) * 64)) : 48596992));
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 149882880);
  CSB_Write(device, 199, (((64 * token) * 1) * 4));
  CSB_Write(device, 200, (64 * token));
  CSB_Write(device, 201, (((token + 32) - 1) / 32));
  CSB_Write(device, 202, token);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, (kvcache ? 1 : token));
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 4);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 1);
#ifdef PRINT_STEP
printf("step114!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterF2W run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step115 (HANDLE device, int kvcache, int token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : token));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : token));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 149882880);
  CSB_Write(device, 11, 29892096);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 129730560);
  CSB_Write(device, 14, 7);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 1817600);
  CSB_Write(device, 27, 128681984);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("step115!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step116 (HANDLE device, int kvcache, int token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 1833984);
  CSB_Write(device, 195, 129730560);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (1 * token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (1 * token))));
  CSB_Write(device, 198, 128681984);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (1 * token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (1 * token))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (1 * token)));
  CSB_Write(device, 204, (kvcache ? 1 : (1 * token)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_STEP
printf("step116!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step117 (HANDLE device, int kvcache, int token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : token));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : token));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 128681984);
  CSB_Write(device, 11, 31066368);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 149882880);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 1905152);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("step117!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step118 (HANDLE device, int kvcache, int token) {
// accel.hbm.activate accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 32768);
  CSB_Write(device, 195, 149882880);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 198, 133236736);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 201, 428);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : token));
  CSB_Write(device, 204, (kvcache ? 1 : token));
  CSB_Write(device, 205, 428);
  CSB_Write(device, 206, 13696);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 16);
#ifdef PRINT_STEP
printf("step118!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.activate run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step119 (HANDLE device, int kvcache, int token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : token));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : token));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 128681984);
  CSB_Write(device, 11, 30162432);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 149882880);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 2);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 1850368);
  CSB_Write(device, 27, 133236736);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("step119!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step120 (HANDLE device, int kvcache, int token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 13696);
  CSB_Write(device, 3, (kvcache ? 1 : token));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : token));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 128);
  CSB_Write(device, 8, 128);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 149882880);
  CSB_Write(device, 11, 31970304);
  CSB_Write(device, 12, 56576);
  CSB_Write(device, 13, 128681984);
  CSB_Write(device, 14, 31);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 1959936);
  CSB_Write(device, 27, 129730560);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("step120!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step121 (HANDLE device, int kvcache, int token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 1976320);
  CSB_Write(device, 195, 128681984);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (1 * token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (1 * token))));
  CSB_Write(device, 198, 129730560);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (1 * token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (1 * token))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (1 * token)));
  CSB_Write(device, 204, (kvcache ? 1 : (1 * token)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_STEP
printf("step121!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step122 (HANDLE device, int kvcache, int token) {
// accel.hbm.mvm_bn accel operator node, storage data in cache40 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : token));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : token));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 129730560);
  CSB_Write(device, 11, 32875520);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, (kvcache ? (49645568 + ((token - 1) * 64)) : 49645568));
  CSB_Write(device, 14, 8);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 1992704);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 31, 8192);
  CSB_Write(device, 32, 8192);
  CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("step122!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step123 (HANDLE device, int kvcache, int token) {
// accel.hbm.pos_emb accel operator node, storage data in cache41 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (kvcache ? (0 + ((token - 1) * 64)) : 0));
  CSB_Write(device, 195, (kvcache ? (49645568 + ((token - 1) * 64)) : 49645568));
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, (kvcache ? (50825216 + ((token - 1) * 64)) : 50825216));
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, (kvcache ? 1 : token));
  CSB_Write(device, 203, 34);
  CSB_Write(device, 204, 8192);
  CSB_Write(device, 205, 0);
  CSB_Write(device, 206, 0);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
#ifdef PRINT_STEP
printf("step123!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step124 (HANDLE device, int kvcache, int token) {
// accel.hbm.mvm_afterTRP accel operator node, storage data in cache42 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 51873792);
  CSB_Write(device, 195, (kvcache ? (50825216 + ((token - 1) * 64)) : 50825216));
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, (kvcache ? (51939328 + ((token - 1) * 64)) : 51939328));
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, token);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, (kvcache ? 1 : token));
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 11688);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 2);
#ifdef PRINT_STEP
printf("step124!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterTRP run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step125 (HANDLE device, int kvcache, int token) {
// accel.hbm.softmax accel operator node, storage data in cache43 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (1 - kvcache));
  CSB_Write(device, 195, 51939328);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 52987904);
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, (((token + 32) - 1) / 32));
  CSB_Write(device, 202, 32);
  CSB_Write(device, 203, token);
  CSB_Write(device, 204, (kvcache ? 1 : token));
  CSB_Write(device, 205, (kvcache ? 1 : token));
  CSB_Write(device, 206, 0);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 8);
#ifdef PRINT_STEP
printf("step125!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.softmax run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step126 (HANDLE device, int kvcache, int token) {
// accel.hbm.mvm_afterF2W accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 50759680);
  CSB_Write(device, 195, (kvcache ? (52987904 + ((token - 1) * 64)) : 52987904));
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 129730560);
  CSB_Write(device, 199, (((64 * token) * 1) * 4));
  CSB_Write(device, 200, (64 * token));
  CSB_Write(device, 201, (((token + 32) - 1) / 32));
  CSB_Write(device, 202, token);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, (kvcache ? 1 : token));
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 4);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 1);
#ifdef PRINT_STEP
printf("step126!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterF2W run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step127 (HANDLE device, int kvcache, int token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : token));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : token));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 129730560);
  CSB_Write(device, 11, 33179648);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 149882880);
  CSB_Write(device, 14, 7);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 2011136);
  CSB_Write(device, 27, 128681984);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("step127!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step128 (HANDLE device, int kvcache, int token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 2027520);
  CSB_Write(device, 195, 149882880);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (1 * token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (1 * token))));
  CSB_Write(device, 198, 128681984);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (1 * token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (1 * token))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (1 * token)));
  CSB_Write(device, 204, (kvcache ? 1 : (1 * token)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_STEP
printf("step128!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step129 (HANDLE device, int kvcache, int token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : token));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : token));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 128681984);
  CSB_Write(device, 11, 34353920);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 129730560);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 2098688);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("step129!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step130 (HANDLE device, int kvcache, int token) {
// accel.hbm.activate accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 32768);
  CSB_Write(device, 195, 129730560);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 198, 133236736);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 201, 428);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : token));
  CSB_Write(device, 204, (kvcache ? 1 : token));
  CSB_Write(device, 205, 428);
  CSB_Write(device, 206, 13696);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 16);
#ifdef PRINT_STEP
printf("step130!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.activate run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step131 (HANDLE device, int kvcache, int token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : token));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : token));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 128681984);
  CSB_Write(device, 11, 33449984);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 129730560);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 2);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 2043904);
  CSB_Write(device, 27, 133236736);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("step131!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step132 (HANDLE device, int kvcache, int token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 13696);
  CSB_Write(device, 3, (kvcache ? 1 : token));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : token));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 128);
  CSB_Write(device, 8, 128);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 129730560);
  CSB_Write(device, 11, 35257856);
  CSB_Write(device, 12, 56576);
  CSB_Write(device, 13, 128681984);
  CSB_Write(device, 14, 31);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 2153472);
  CSB_Write(device, 27, 149882880);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("step132!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step133 (HANDLE device, int kvcache, int token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 2169856);
  CSB_Write(device, 195, 128681984);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (1 * token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (1 * token))));
  CSB_Write(device, 198, 149882880);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (1 * token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (1 * token))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (1 * token)));
  CSB_Write(device, 204, (kvcache ? 1 : (1 * token)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_STEP
printf("step133!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step134 (HANDLE device, int kvcache, int token) {
// accel.hbm.mvm_bn accel operator node, storage data in cache44 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : token));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : token));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 149882880);
  CSB_Write(device, 11, 36163072);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, (kvcache ? (54036480 + ((token - 1) * 64)) : 54036480));
  CSB_Write(device, 14, 8);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 2186240);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 31, 8192);
  CSB_Write(device, 32, 8192);
  CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("step134!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step135 (HANDLE device, int kvcache, int token) {
// accel.hbm.pos_emb accel operator node, storage data in cache45 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (kvcache ? (0 + ((token - 1) * 64)) : 0));
  CSB_Write(device, 195, (kvcache ? (54036480 + ((token - 1) * 64)) : 54036480));
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, (kvcache ? (55216128 + ((token - 1) * 64)) : 55216128));
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, (kvcache ? 1 : token));
  CSB_Write(device, 203, 34);
  CSB_Write(device, 204, 8192);
  CSB_Write(device, 205, 0);
  CSB_Write(device, 206, 0);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
#ifdef PRINT_STEP
printf("step135!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step136 (HANDLE device, int kvcache, int token) {
// accel.hbm.mvm_afterTRP accel operator node, storage data in cache46 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 56264704);
  CSB_Write(device, 195, (kvcache ? (55216128 + ((token - 1) * 64)) : 55216128));
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, (kvcache ? (56330240 + ((token - 1) * 64)) : 56330240));
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, token);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, (kvcache ? 1 : token));
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 11688);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 2);
#ifdef PRINT_STEP
printf("step136!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterTRP run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step137 (HANDLE device, int kvcache, int token) {
// accel.hbm.softmax accel operator node, storage data in cache47 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (1 - kvcache));
  CSB_Write(device, 195, 56330240);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 57378816);
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, (((token + 32) - 1) / 32));
  CSB_Write(device, 202, 32);
  CSB_Write(device, 203, token);
  CSB_Write(device, 204, (kvcache ? 1 : token));
  CSB_Write(device, 205, (kvcache ? 1 : token));
  CSB_Write(device, 206, 0);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 8);
#ifdef PRINT_STEP
printf("step137!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.softmax run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step138 (HANDLE device, int kvcache, int token) {
// accel.hbm.mvm_afterF2W accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 55150592);
  CSB_Write(device, 195, (kvcache ? (57378816 + ((token - 1) * 64)) : 57378816));
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 149882880);
  CSB_Write(device, 199, (((64 * token) * 1) * 4));
  CSB_Write(device, 200, (64 * token));
  CSB_Write(device, 201, (((token + 32) - 1) / 32));
  CSB_Write(device, 202, token);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, (kvcache ? 1 : token));
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 4);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 1);
#ifdef PRINT_STEP
printf("step138!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterF2W run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step139 (HANDLE device, int kvcache, int token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : token));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : token));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 149882880);
  CSB_Write(device, 11, 36467200);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 129730560);
  CSB_Write(device, 14, 7);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 2204672);
  CSB_Write(device, 27, 128681984);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("step139!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step140 (HANDLE device, int kvcache, int token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 2221056);
  CSB_Write(device, 195, 129730560);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (1 * token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (1 * token))));
  CSB_Write(device, 198, 128681984);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (1 * token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (1 * token))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (1 * token)));
  CSB_Write(device, 204, (kvcache ? 1 : (1 * token)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_STEP
printf("step140!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step141 (HANDLE device, int kvcache, int token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : token));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : token));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 128681984);
  CSB_Write(device, 11, 37641472);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 149882880);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 2292224);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("step141!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step142 (HANDLE device, int kvcache, int token) {
// accel.hbm.activate accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 32768);
  CSB_Write(device, 195, 149882880);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 198, 133236736);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 201, 428);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : token));
  CSB_Write(device, 204, (kvcache ? 1 : token));
  CSB_Write(device, 205, 428);
  CSB_Write(device, 206, 13696);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 16);
#ifdef PRINT_STEP
printf("step142!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.activate run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step143 (HANDLE device, int kvcache, int token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : token));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : token));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 128681984);
  CSB_Write(device, 11, 36737536);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 149882880);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 2);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 2237440);
  CSB_Write(device, 27, 133236736);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("step143!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step144 (HANDLE device, int kvcache, int token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 13696);
  CSB_Write(device, 3, (kvcache ? 1 : token));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : token));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 128);
  CSB_Write(device, 8, 128);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 149882880);
  CSB_Write(device, 11, 38545408);
  CSB_Write(device, 12, 56576);
  CSB_Write(device, 13, 128681984);
  CSB_Write(device, 14, 31);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 2347008);
  CSB_Write(device, 27, 129730560);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("step144!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step145 (HANDLE device, int kvcache, int token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 2363392);
  CSB_Write(device, 195, 128681984);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (1 * token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (1 * token))));
  CSB_Write(device, 198, 129730560);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (1 * token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (1 * token))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (1 * token)));
  CSB_Write(device, 204, (kvcache ? 1 : (1 * token)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_STEP
printf("step145!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step146 (HANDLE device, int kvcache, int token) {
// accel.hbm.mvm_bn accel operator node, storage data in cache48 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : token));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : token));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 129730560);
  CSB_Write(device, 11, 39450624);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, (kvcache ? (58427392 + ((token - 1) * 64)) : 58427392));
  CSB_Write(device, 14, 8);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 2379776);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 31, 8192);
  CSB_Write(device, 32, 8192);
  CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("step146!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step147 (HANDLE device, int kvcache, int token) {
// accel.hbm.pos_emb accel operator node, storage data in cache49 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (kvcache ? (0 + ((token - 1) * 64)) : 0));
  CSB_Write(device, 195, (kvcache ? (58427392 + ((token - 1) * 64)) : 58427392));
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, (kvcache ? (59607040 + ((token - 1) * 64)) : 59607040));
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, (kvcache ? 1 : token));
  CSB_Write(device, 203, 34);
  CSB_Write(device, 204, 8192);
  CSB_Write(device, 205, 0);
  CSB_Write(device, 206, 0);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
#ifdef PRINT_STEP
printf("step147!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step148 (HANDLE device, int kvcache, int token) {
// accel.hbm.mvm_afterTRP accel operator node, storage data in cache50 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 60655616);
  CSB_Write(device, 195, (kvcache ? (59607040 + ((token - 1) * 64)) : 59607040));
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, (kvcache ? (60721152 + ((token - 1) * 64)) : 60721152));
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, token);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, (kvcache ? 1 : token));
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 11688);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 2);
#ifdef PRINT_STEP
printf("step148!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterTRP run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step149 (HANDLE device, int kvcache, int token) {
// accel.hbm.softmax accel operator node, storage data in cache51 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (1 - kvcache));
  CSB_Write(device, 195, 60721152);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 61769728);
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, (((token + 32) - 1) / 32));
  CSB_Write(device, 202, 32);
  CSB_Write(device, 203, token);
  CSB_Write(device, 204, (kvcache ? 1 : token));
  CSB_Write(device, 205, (kvcache ? 1 : token));
  CSB_Write(device, 206, 0);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 8);
#ifdef PRINT_STEP
printf("step149!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.softmax run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step150 (HANDLE device, int kvcache, int token) {
// accel.hbm.mvm_afterF2W accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 59541504);
  CSB_Write(device, 195, (kvcache ? (61769728 + ((token - 1) * 64)) : 61769728));
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 129730560);
  CSB_Write(device, 199, (((64 * token) * 1) * 4));
  CSB_Write(device, 200, (64 * token));
  CSB_Write(device, 201, (((token + 32) - 1) / 32));
  CSB_Write(device, 202, token);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, (kvcache ? 1 : token));
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 4);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 1);
#ifdef PRINT_STEP
printf("step150!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterF2W run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step151 (HANDLE device, int kvcache, int token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : token));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : token));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 129730560);
  CSB_Write(device, 11, 39754752);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 149882880);
  CSB_Write(device, 14, 7);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 2398208);
  CSB_Write(device, 27, 128681984);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("step151!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step152 (HANDLE device, int kvcache, int token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 2414592);
  CSB_Write(device, 195, 149882880);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (1 * token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (1 * token))));
  CSB_Write(device, 198, 128681984);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (1 * token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (1 * token))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (1 * token)));
  CSB_Write(device, 204, (kvcache ? 1 : (1 * token)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_STEP
printf("step152!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step153 (HANDLE device, int kvcache, int token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : token));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : token));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 128681984);
  CSB_Write(device, 11, 40929024);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 129730560);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 2485760);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("step153!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step154 (HANDLE device, int kvcache, int token) {
// accel.hbm.activate accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 32768);
  CSB_Write(device, 195, 129730560);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 198, 133236736);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 201, 428);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : token));
  CSB_Write(device, 204, (kvcache ? 1 : token));
  CSB_Write(device, 205, 428);
  CSB_Write(device, 206, 13696);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 16);
#ifdef PRINT_STEP
printf("step154!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.activate run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step155 (HANDLE device, int kvcache, int token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : token));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : token));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 128681984);
  CSB_Write(device, 11, 40025088);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 129730560);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 2);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 2430976);
  CSB_Write(device, 27, 133236736);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("step155!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step156 (HANDLE device, int kvcache, int token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 13696);
  CSB_Write(device, 3, (kvcache ? 1 : token));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : token));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 128);
  CSB_Write(device, 8, 128);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 129730560);
  CSB_Write(device, 11, 41832960);
  CSB_Write(device, 12, 56576);
  CSB_Write(device, 13, 128681984);
  CSB_Write(device, 14, 31);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 2540544);
  CSB_Write(device, 27, 149882880);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("step156!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step157 (HANDLE device, int kvcache, int token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 2556928);
  CSB_Write(device, 195, 128681984);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (1 * token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (1 * token))));
  CSB_Write(device, 198, 149882880);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (1 * token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (1 * token))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (1 * token)));
  CSB_Write(device, 204, (kvcache ? 1 : (1 * token)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_STEP
printf("step157!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step158 (HANDLE device, int kvcache, int token) {
// accel.hbm.mvm_bn accel operator node, storage data in cache52 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : token));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : token));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 149882880);
  CSB_Write(device, 11, 42738176);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, (kvcache ? (62818304 + ((token - 1) * 64)) : 62818304));
  CSB_Write(device, 14, 8);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 2573312);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 31, 8192);
  CSB_Write(device, 32, 8192);
  CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("step158!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step159 (HANDLE device, int kvcache, int token) {
// accel.hbm.pos_emb accel operator node, storage data in cache53 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (kvcache ? (0 + ((token - 1) * 64)) : 0));
  CSB_Write(device, 195, (kvcache ? (62818304 + ((token - 1) * 64)) : 62818304));
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, (kvcache ? (63997952 + ((token - 1) * 64)) : 63997952));
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, (kvcache ? 1 : token));
  CSB_Write(device, 203, 34);
  CSB_Write(device, 204, 8192);
  CSB_Write(device, 205, 0);
  CSB_Write(device, 206, 0);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
#ifdef PRINT_STEP
printf("step159!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step160 (HANDLE device, int kvcache, int token) {
// accel.hbm.mvm_afterTRP accel operator node, storage data in cache54 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 65046528);
  CSB_Write(device, 195, (kvcache ? (63997952 + ((token - 1) * 64)) : 63997952));
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, (kvcache ? (65112064 + ((token - 1) * 64)) : 65112064));
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, token);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, (kvcache ? 1 : token));
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 11688);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 2);
#ifdef PRINT_STEP
printf("step160!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterTRP run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step161 (HANDLE device, int kvcache, int token) {
// accel.hbm.softmax accel operator node, storage data in cache55 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (1 - kvcache));
  CSB_Write(device, 195, 65112064);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 66160640);
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, (((token + 32) - 1) / 32));
  CSB_Write(device, 202, 32);
  CSB_Write(device, 203, token);
  CSB_Write(device, 204, (kvcache ? 1 : token));
  CSB_Write(device, 205, (kvcache ? 1 : token));
  CSB_Write(device, 206, 0);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 8);
#ifdef PRINT_STEP
printf("step161!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.softmax run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step162 (HANDLE device, int kvcache, int token) {
// accel.hbm.mvm_afterF2W accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 63932416);
  CSB_Write(device, 195, (kvcache ? (66160640 + ((token - 1) * 64)) : 66160640));
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 149882880);
  CSB_Write(device, 199, (((64 * token) * 1) * 4));
  CSB_Write(device, 200, (64 * token));
  CSB_Write(device, 201, (((token + 32) - 1) / 32));
  CSB_Write(device, 202, token);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, (kvcache ? 1 : token));
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 4);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 1);
#ifdef PRINT_STEP
printf("step162!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterF2W run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step163 (HANDLE device, int kvcache, int token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : token));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : token));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 149882880);
  CSB_Write(device, 11, 43042304);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 129730560);
  CSB_Write(device, 14, 7);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 2591744);
  CSB_Write(device, 27, 128681984);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("step163!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step164 (HANDLE device, int kvcache, int token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 2608128);
  CSB_Write(device, 195, 129730560);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (1 * token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (1 * token))));
  CSB_Write(device, 198, 128681984);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (1 * token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (1 * token))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (1 * token)));
  CSB_Write(device, 204, (kvcache ? 1 : (1 * token)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_STEP
printf("step164!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step165 (HANDLE device, int kvcache, int token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : token));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : token));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 128681984);
  CSB_Write(device, 11, 44216576);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 149882880);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 2679296);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("step165!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step166 (HANDLE device, int kvcache, int token) {
// accel.hbm.activate accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 32768);
  CSB_Write(device, 195, 149882880);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 198, 133236736);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 201, 428);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : token));
  CSB_Write(device, 204, (kvcache ? 1 : token));
  CSB_Write(device, 205, 428);
  CSB_Write(device, 206, 13696);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 16);
#ifdef PRINT_STEP
printf("step166!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.activate run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step167 (HANDLE device, int kvcache, int token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : token));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : token));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 128681984);
  CSB_Write(device, 11, 43312640);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 149882880);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 2);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 2624512);
  CSB_Write(device, 27, 133236736);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("step167!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step168 (HANDLE device, int kvcache, int token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 13696);
  CSB_Write(device, 3, (kvcache ? 1 : token));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : token));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 128);
  CSB_Write(device, 8, 128);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 149882880);
  CSB_Write(device, 11, 45120512);
  CSB_Write(device, 12, 56576);
  CSB_Write(device, 13, 128681984);
  CSB_Write(device, 14, 31);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 2734080);
  CSB_Write(device, 27, 129730560);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("step168!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step169 (HANDLE device, int kvcache, int token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 2750464);
  CSB_Write(device, 195, 128681984);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (1 * token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (1 * token))));
  CSB_Write(device, 198, 129730560);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (1 * token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (1 * token))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (1 * token)));
  CSB_Write(device, 204, (kvcache ? 1 : (1 * token)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_STEP
printf("step169!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step170 (HANDLE device, int kvcache, int token) {
// accel.hbm.mvm_bn accel operator node, storage data in cache56 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : token));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : token));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 129730560);
  CSB_Write(device, 11, 46025728);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, (kvcache ? (67209216 + ((token - 1) * 64)) : 67209216));
  CSB_Write(device, 14, 8);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 2766848);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 31, 8192);
  CSB_Write(device, 32, 8192);
  CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("step170!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step171 (HANDLE device, int kvcache, int token) {
// accel.hbm.pos_emb accel operator node, storage data in cache57 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (kvcache ? (0 + ((token - 1) * 64)) : 0));
  CSB_Write(device, 195, (kvcache ? (67209216 + ((token - 1) * 64)) : 67209216));
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, (kvcache ? (68388864 + ((token - 1) * 64)) : 68388864));
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, (kvcache ? 1 : token));
  CSB_Write(device, 203, 34);
  CSB_Write(device, 204, 8192);
  CSB_Write(device, 205, 0);
  CSB_Write(device, 206, 0);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
#ifdef PRINT_STEP
printf("step171!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step172 (HANDLE device, int kvcache, int token) {
// accel.hbm.mvm_afterTRP accel operator node, storage data in cache58 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 69437440);
  CSB_Write(device, 195, (kvcache ? (68388864 + ((token - 1) * 64)) : 68388864));
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, (kvcache ? (69502976 + ((token - 1) * 64)) : 69502976));
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, token);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, (kvcache ? 1 : token));
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 11688);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 2);
#ifdef PRINT_STEP
printf("step172!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterTRP run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step173 (HANDLE device, int kvcache, int token) {
// accel.hbm.softmax accel operator node, storage data in cache59 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (1 - kvcache));
  CSB_Write(device, 195, 69502976);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 70551552);
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, (((token + 32) - 1) / 32));
  CSB_Write(device, 202, 32);
  CSB_Write(device, 203, token);
  CSB_Write(device, 204, (kvcache ? 1 : token));
  CSB_Write(device, 205, (kvcache ? 1 : token));
  CSB_Write(device, 206, 0);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 8);
#ifdef PRINT_STEP
printf("step173!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.softmax run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step174 (HANDLE device, int kvcache, int token) {
// accel.hbm.mvm_afterF2W accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 68323328);
  CSB_Write(device, 195, (kvcache ? (70551552 + ((token - 1) * 64)) : 70551552));
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 129730560);
  CSB_Write(device, 199, (((64 * token) * 1) * 4));
  CSB_Write(device, 200, (64 * token));
  CSB_Write(device, 201, (((token + 32) - 1) / 32));
  CSB_Write(device, 202, token);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, (kvcache ? 1 : token));
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 4);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 1);
#ifdef PRINT_STEP
printf("step174!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterF2W run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step175 (HANDLE device, int kvcache, int token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : token));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : token));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 129730560);
  CSB_Write(device, 11, 46329856);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 149882880);
  CSB_Write(device, 14, 7);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 2785280);
  CSB_Write(device, 27, 128681984);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("step175!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step176 (HANDLE device, int kvcache, int token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 2801664);
  CSB_Write(device, 195, 149882880);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (1 * token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (1 * token))));
  CSB_Write(device, 198, 128681984);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (1 * token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (1 * token))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (1 * token)));
  CSB_Write(device, 204, (kvcache ? 1 : (1 * token)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_STEP
printf("step176!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step177 (HANDLE device, int kvcache, int token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : token));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : token));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 128681984);
  CSB_Write(device, 11, 47504128);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 129730560);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 2872832);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("step177!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step178 (HANDLE device, int kvcache, int token) {
// accel.hbm.activate accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 32768);
  CSB_Write(device, 195, 129730560);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 198, 133236736);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 201, 428);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : token));
  CSB_Write(device, 204, (kvcache ? 1 : token));
  CSB_Write(device, 205, 428);
  CSB_Write(device, 206, 13696);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 16);
#ifdef PRINT_STEP
printf("step178!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.activate run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step179 (HANDLE device, int kvcache, int token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : token));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : token));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 128681984);
  CSB_Write(device, 11, 46600192);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 129730560);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 2);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 2818048);
  CSB_Write(device, 27, 133236736);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("step179!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step180 (HANDLE device, int kvcache, int token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 13696);
  CSB_Write(device, 3, (kvcache ? 1 : token));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : token));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 128);
  CSB_Write(device, 8, 128);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 129730560);
  CSB_Write(device, 11, 48408064);
  CSB_Write(device, 12, 56576);
  CSB_Write(device, 13, 128681984);
  CSB_Write(device, 14, 31);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 2927616);
  CSB_Write(device, 27, 149882880);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("step180!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step181 (HANDLE device, int kvcache, int token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 2944000);
  CSB_Write(device, 195, 128681984);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (1 * token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (1 * token))));
  CSB_Write(device, 198, 149882880);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (1 * token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (1 * token))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (1 * token)));
  CSB_Write(device, 204, (kvcache ? 1 : (1 * token)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_STEP
printf("step181!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step182 (HANDLE device, int kvcache, int token) {
// accel.hbm.mvm_bn accel operator node, storage data in cache60 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : token));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : token));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 149882880);
  CSB_Write(device, 11, 49313280);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, (kvcache ? (71600128 + ((token - 1) * 64)) : 71600128));
  CSB_Write(device, 14, 8);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 2960384);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 31, 8192);
  CSB_Write(device, 32, 8192);
  CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("step182!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step183 (HANDLE device, int kvcache, int token) {
// accel.hbm.pos_emb accel operator node, storage data in cache61 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (kvcache ? (0 + ((token - 1) * 64)) : 0));
  CSB_Write(device, 195, (kvcache ? (71600128 + ((token - 1) * 64)) : 71600128));
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, (kvcache ? (72779776 + ((token - 1) * 64)) : 72779776));
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, (kvcache ? 1 : token));
  CSB_Write(device, 203, 34);
  CSB_Write(device, 204, 8192);
  CSB_Write(device, 205, 0);
  CSB_Write(device, 206, 0);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
#ifdef PRINT_STEP
printf("step183!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step184 (HANDLE device, int kvcache, int token) {
// accel.hbm.mvm_afterTRP accel operator node, storage data in cache62 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 73828352);
  CSB_Write(device, 195, (kvcache ? (72779776 + ((token - 1) * 64)) : 72779776));
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, (kvcache ? (73893888 + ((token - 1) * 64)) : 73893888));
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, token);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, (kvcache ? 1 : token));
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 11688);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 2);
#ifdef PRINT_STEP
printf("step184!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterTRP run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step185 (HANDLE device, int kvcache, int token) {
// accel.hbm.softmax accel operator node, storage data in cache63 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (1 - kvcache));
  CSB_Write(device, 195, 73893888);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 74942464);
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, (((token + 32) - 1) / 32));
  CSB_Write(device, 202, 32);
  CSB_Write(device, 203, token);
  CSB_Write(device, 204, (kvcache ? 1 : token));
  CSB_Write(device, 205, (kvcache ? 1 : token));
  CSB_Write(device, 206, 0);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 8);
#ifdef PRINT_STEP
printf("step185!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.softmax run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step186 (HANDLE device, int kvcache, int token) {
// accel.hbm.mvm_afterF2W accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 72714240);
  CSB_Write(device, 195, (kvcache ? (74942464 + ((token - 1) * 64)) : 74942464));
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 149882880);
  CSB_Write(device, 199, (((64 * token) * 1) * 4));
  CSB_Write(device, 200, (64 * token));
  CSB_Write(device, 201, (((token + 32) - 1) / 32));
  CSB_Write(device, 202, token);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, (kvcache ? 1 : token));
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 4);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 1);
#ifdef PRINT_STEP
printf("step186!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterF2W run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step187 (HANDLE device, int kvcache, int token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : token));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : token));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 149882880);
  CSB_Write(device, 11, 49617408);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 129730560);
  CSB_Write(device, 14, 7);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 2978816);
  CSB_Write(device, 27, 128681984);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("step187!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step188 (HANDLE device, int kvcache, int token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 2995200);
  CSB_Write(device, 195, 129730560);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (1 * token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (1 * token))));
  CSB_Write(device, 198, 128681984);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (1 * token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (1 * token))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (1 * token)));
  CSB_Write(device, 204, (kvcache ? 1 : (1 * token)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_STEP
printf("step188!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step189 (HANDLE device, int kvcache, int token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : token));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : token));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 128681984);
  CSB_Write(device, 11, 50791680);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 149882880);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 3066368);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("step189!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step190 (HANDLE device, int kvcache, int token) {
// accel.hbm.activate accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 32768);
  CSB_Write(device, 195, 149882880);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 198, 133236736);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 201, 428);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : token));
  CSB_Write(device, 204, (kvcache ? 1 : token));
  CSB_Write(device, 205, 428);
  CSB_Write(device, 206, 13696);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 16);
#ifdef PRINT_STEP
printf("step190!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.activate run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step191 (HANDLE device, int kvcache, int token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : token));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : token));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 128681984);
  CSB_Write(device, 11, 49887744);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 149882880);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 2);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 3011584);
  CSB_Write(device, 27, 133236736);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("step191!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step192 (HANDLE device, int kvcache, int token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 13696);
  CSB_Write(device, 3, (kvcache ? 1 : token));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : token));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 128);
  CSB_Write(device, 8, 128);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 149882880);
  CSB_Write(device, 11, 51695616);
  CSB_Write(device, 12, 56576);
  CSB_Write(device, 13, 128681984);
  CSB_Write(device, 14, 31);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 3121152);
  CSB_Write(device, 27, 129730560);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("step192!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step193 (HANDLE device, int kvcache, int token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 3137536);
  CSB_Write(device, 195, 128681984);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (1 * token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (1 * token))));
  CSB_Write(device, 198, 129730560);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (1 * token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (1 * token))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (1 * token)));
  CSB_Write(device, 204, (kvcache ? 1 : (1 * token)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_STEP
printf("step193!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step194 (HANDLE device, int kvcache, int token) {
// accel.hbm.mvm_bn accel operator node, storage data in cache64 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : token));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : token));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 129730560);
  CSB_Write(device, 11, 52600832);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, (kvcache ? (75991040 + ((token - 1) * 64)) : 75991040));
  CSB_Write(device, 14, 8);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 3153920);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 31, 8192);
  CSB_Write(device, 32, 8192);
  CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("step194!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step195 (HANDLE device, int kvcache, int token) {
// accel.hbm.pos_emb accel operator node, storage data in cache65 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (kvcache ? (0 + ((token - 1) * 64)) : 0));
  CSB_Write(device, 195, (kvcache ? (75991040 + ((token - 1) * 64)) : 75991040));
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, (kvcache ? (77170688 + ((token - 1) * 64)) : 77170688));
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, (kvcache ? 1 : token));
  CSB_Write(device, 203, 34);
  CSB_Write(device, 204, 8192);
  CSB_Write(device, 205, 0);
  CSB_Write(device, 206, 0);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
#ifdef PRINT_STEP
printf("step195!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step196 (HANDLE device, int kvcache, int token) {
// accel.hbm.mvm_afterTRP accel operator node, storage data in cache66 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 78219264);
  CSB_Write(device, 195, (kvcache ? (77170688 + ((token - 1) * 64)) : 77170688));
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, (kvcache ? (78284800 + ((token - 1) * 64)) : 78284800));
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, token);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, (kvcache ? 1 : token));
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 11688);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 2);
#ifdef PRINT_STEP
printf("step196!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterTRP run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step197 (HANDLE device, int kvcache, int token) {
// accel.hbm.softmax accel operator node, storage data in cache67 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (1 - kvcache));
  CSB_Write(device, 195, 78284800);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 79333376);
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, (((token + 32) - 1) / 32));
  CSB_Write(device, 202, 32);
  CSB_Write(device, 203, token);
  CSB_Write(device, 204, (kvcache ? 1 : token));
  CSB_Write(device, 205, (kvcache ? 1 : token));
  CSB_Write(device, 206, 0);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 8);
#ifdef PRINT_STEP
printf("step197!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.softmax run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step198 (HANDLE device, int kvcache, int token) {
// accel.hbm.mvm_afterF2W accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 77105152);
  CSB_Write(device, 195, (kvcache ? (79333376 + ((token - 1) * 64)) : 79333376));
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 129730560);
  CSB_Write(device, 199, (((64 * token) * 1) * 4));
  CSB_Write(device, 200, (64 * token));
  CSB_Write(device, 201, (((token + 32) - 1) / 32));
  CSB_Write(device, 202, token);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, (kvcache ? 1 : token));
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 4);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 1);
#ifdef PRINT_STEP
printf("step198!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterF2W run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step199 (HANDLE device, int kvcache, int token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : token));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : token));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 129730560);
  CSB_Write(device, 11, 52904960);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 149882880);
  CSB_Write(device, 14, 7);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 3172352);
  CSB_Write(device, 27, 128681984);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("step199!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step200 (HANDLE device, int kvcache, int token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 3188736);
  CSB_Write(device, 195, 149882880);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (1 * token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (1 * token))));
  CSB_Write(device, 198, 128681984);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (1 * token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (1 * token))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (1 * token)));
  CSB_Write(device, 204, (kvcache ? 1 : (1 * token)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_STEP
printf("step200!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step201 (HANDLE device, int kvcache, int token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : token));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : token));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 128681984);
  CSB_Write(device, 11, 54079232);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 129730560);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 3259904);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("step201!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step202 (HANDLE device, int kvcache, int token) {
// accel.hbm.activate accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 32768);
  CSB_Write(device, 195, 129730560);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 198, 133236736);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 201, 428);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : token));
  CSB_Write(device, 204, (kvcache ? 1 : token));
  CSB_Write(device, 205, 428);
  CSB_Write(device, 206, 13696);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 16);
#ifdef PRINT_STEP
printf("step202!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.activate run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step203 (HANDLE device, int kvcache, int token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : token));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : token));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 128681984);
  CSB_Write(device, 11, 53175296);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 129730560);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 2);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 3205120);
  CSB_Write(device, 27, 133236736);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("step203!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step204 (HANDLE device, int kvcache, int token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 13696);
  CSB_Write(device, 3, (kvcache ? 1 : token));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : token));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 128);
  CSB_Write(device, 8, 128);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 129730560);
  CSB_Write(device, 11, 54983168);
  CSB_Write(device, 12, 56576);
  CSB_Write(device, 13, 128681984);
  CSB_Write(device, 14, 31);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 3314688);
  CSB_Write(device, 27, 149882880);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("step204!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step205 (HANDLE device, int kvcache, int token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 3331072);
  CSB_Write(device, 195, 128681984);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (1 * token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (1 * token))));
  CSB_Write(device, 198, 149882880);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (1 * token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (1 * token))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (1 * token)));
  CSB_Write(device, 204, (kvcache ? 1 : (1 * token)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_STEP
printf("step205!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step206 (HANDLE device, int kvcache, int token) {
// accel.hbm.mvm_bn accel operator node, storage data in cache68 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : token));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : token));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 149882880);
  CSB_Write(device, 11, 55888384);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, (kvcache ? (80381952 + ((token - 1) * 64)) : 80381952));
  CSB_Write(device, 14, 8);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 3347456);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 31, 8192);
  CSB_Write(device, 32, 8192);
  CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("step206!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step207 (HANDLE device, int kvcache, int token) {
// accel.hbm.pos_emb accel operator node, storage data in cache69 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (kvcache ? (0 + ((token - 1) * 64)) : 0));
  CSB_Write(device, 195, (kvcache ? (80381952 + ((token - 1) * 64)) : 80381952));
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, (kvcache ? (81561600 + ((token - 1) * 64)) : 81561600));
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, (kvcache ? 1 : token));
  CSB_Write(device, 203, 34);
  CSB_Write(device, 204, 8192);
  CSB_Write(device, 205, 0);
  CSB_Write(device, 206, 0);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
#ifdef PRINT_STEP
printf("step207!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step208 (HANDLE device, int kvcache, int token) {
// accel.hbm.mvm_afterTRP accel operator node, storage data in cache70 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 82610176);
  CSB_Write(device, 195, (kvcache ? (81561600 + ((token - 1) * 64)) : 81561600));
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, (kvcache ? (82675712 + ((token - 1) * 64)) : 82675712));
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, token);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, (kvcache ? 1 : token));
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 11688);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 2);
#ifdef PRINT_STEP
printf("step208!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterTRP run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step209 (HANDLE device, int kvcache, int token) {
// accel.hbm.softmax accel operator node, storage data in cache71 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (1 - kvcache));
  CSB_Write(device, 195, 82675712);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 83724288);
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, (((token + 32) - 1) / 32));
  CSB_Write(device, 202, 32);
  CSB_Write(device, 203, token);
  CSB_Write(device, 204, (kvcache ? 1 : token));
  CSB_Write(device, 205, (kvcache ? 1 : token));
  CSB_Write(device, 206, 0);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 8);
#ifdef PRINT_STEP
printf("step209!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.softmax run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step210 (HANDLE device, int kvcache, int token) {
// accel.hbm.mvm_afterF2W accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 81496064);
  CSB_Write(device, 195, (kvcache ? (83724288 + ((token - 1) * 64)) : 83724288));
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 149882880);
  CSB_Write(device, 199, (((64 * token) * 1) * 4));
  CSB_Write(device, 200, (64 * token));
  CSB_Write(device, 201, (((token + 32) - 1) / 32));
  CSB_Write(device, 202, token);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, (kvcache ? 1 : token));
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 4);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 1);
#ifdef PRINT_STEP
printf("step210!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterF2W run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step211 (HANDLE device, int kvcache, int token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : token));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : token));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 149882880);
  CSB_Write(device, 11, 56192512);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 129730560);
  CSB_Write(device, 14, 7);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 3365888);
  CSB_Write(device, 27, 128681984);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("step211!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step212 (HANDLE device, int kvcache, int token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 3382272);
  CSB_Write(device, 195, 129730560);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (1 * token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (1 * token))));
  CSB_Write(device, 198, 128681984);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (1 * token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (1 * token))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (1 * token)));
  CSB_Write(device, 204, (kvcache ? 1 : (1 * token)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_STEP
printf("step212!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step213 (HANDLE device, int kvcache, int token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : token));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : token));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 128681984);
  CSB_Write(device, 11, 57366784);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 149882880);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 3453440);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("step213!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step214 (HANDLE device, int kvcache, int token) {
// accel.hbm.activate accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 32768);
  CSB_Write(device, 195, 149882880);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 198, 133236736);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 201, 428);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : token));
  CSB_Write(device, 204, (kvcache ? 1 : token));
  CSB_Write(device, 205, 428);
  CSB_Write(device, 206, 13696);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 16);
#ifdef PRINT_STEP
printf("step214!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.activate run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step215 (HANDLE device, int kvcache, int token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : token));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : token));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 128681984);
  CSB_Write(device, 11, 56462848);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 149882880);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 2);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 3398656);
  CSB_Write(device, 27, 133236736);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("step215!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step216 (HANDLE device, int kvcache, int token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 13696);
  CSB_Write(device, 3, (kvcache ? 1 : token));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : token));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 128);
  CSB_Write(device, 8, 128);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 149882880);
  CSB_Write(device, 11, 58270720);
  CSB_Write(device, 12, 56576);
  CSB_Write(device, 13, 128681984);
  CSB_Write(device, 14, 31);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 3508224);
  CSB_Write(device, 27, 129730560);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("step216!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step217 (HANDLE device, int kvcache, int token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 3524608);
  CSB_Write(device, 195, 128681984);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (1 * token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (1 * token))));
  CSB_Write(device, 198, 129730560);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (1 * token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (1 * token))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (1 * token)));
  CSB_Write(device, 204, (kvcache ? 1 : (1 * token)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_STEP
printf("step217!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step218 (HANDLE device, int kvcache, int token) {
// accel.hbm.mvm_bn accel operator node, storage data in cache72 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : token));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : token));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 129730560);
  CSB_Write(device, 11, 59175936);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, (kvcache ? (84772864 + ((token - 1) * 64)) : 84772864));
  CSB_Write(device, 14, 8);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 3540992);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 31, 8192);
  CSB_Write(device, 32, 8192);
  CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("step218!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step219 (HANDLE device, int kvcache, int token) {
// accel.hbm.pos_emb accel operator node, storage data in cache73 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (kvcache ? (0 + ((token - 1) * 64)) : 0));
  CSB_Write(device, 195, (kvcache ? (84772864 + ((token - 1) * 64)) : 84772864));
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, (kvcache ? (85952512 + ((token - 1) * 64)) : 85952512));
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, (kvcache ? 1 : token));
  CSB_Write(device, 203, 34);
  CSB_Write(device, 204, 8192);
  CSB_Write(device, 205, 0);
  CSB_Write(device, 206, 0);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
#ifdef PRINT_STEP
printf("step219!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step220 (HANDLE device, int kvcache, int token) {
// accel.hbm.mvm_afterTRP accel operator node, storage data in cache74 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 87001088);
  CSB_Write(device, 195, (kvcache ? (85952512 + ((token - 1) * 64)) : 85952512));
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, (kvcache ? (87066624 + ((token - 1) * 64)) : 87066624));
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, token);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, (kvcache ? 1 : token));
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 11688);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 2);
#ifdef PRINT_STEP
printf("step220!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterTRP run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step221 (HANDLE device, int kvcache, int token) {
// accel.hbm.softmax accel operator node, storage data in cache75 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (1 - kvcache));
  CSB_Write(device, 195, 87066624);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 88115200);
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, (((token + 32) - 1) / 32));
  CSB_Write(device, 202, 32);
  CSB_Write(device, 203, token);
  CSB_Write(device, 204, (kvcache ? 1 : token));
  CSB_Write(device, 205, (kvcache ? 1 : token));
  CSB_Write(device, 206, 0);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 8);
#ifdef PRINT_STEP
printf("step221!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.softmax run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step222 (HANDLE device, int kvcache, int token) {
// accel.hbm.mvm_afterF2W accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 85886976);
  CSB_Write(device, 195, (kvcache ? (88115200 + ((token - 1) * 64)) : 88115200));
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 129730560);
  CSB_Write(device, 199, (((64 * token) * 1) * 4));
  CSB_Write(device, 200, (64 * token));
  CSB_Write(device, 201, (((token + 32) - 1) / 32));
  CSB_Write(device, 202, token);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, (kvcache ? 1 : token));
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 4);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 1);
#ifdef PRINT_STEP
printf("step222!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterF2W run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step223 (HANDLE device, int kvcache, int token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : token));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : token));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 129730560);
  CSB_Write(device, 11, 59480064);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 149882880);
  CSB_Write(device, 14, 7);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 3559424);
  CSB_Write(device, 27, 128681984);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("step223!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step224 (HANDLE device, int kvcache, int token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 3575808);
  CSB_Write(device, 195, 149882880);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (1 * token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (1 * token))));
  CSB_Write(device, 198, 128681984);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (1 * token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (1 * token))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (1 * token)));
  CSB_Write(device, 204, (kvcache ? 1 : (1 * token)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_STEP
printf("step224!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step225 (HANDLE device, int kvcache, int token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : token));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : token));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 128681984);
  CSB_Write(device, 11, 60654336);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 129730560);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 3646976);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("step225!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step226 (HANDLE device, int kvcache, int token) {
// accel.hbm.activate accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 32768);
  CSB_Write(device, 195, 129730560);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 198, 133236736);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 201, 428);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : token));
  CSB_Write(device, 204, (kvcache ? 1 : token));
  CSB_Write(device, 205, 428);
  CSB_Write(device, 206, 13696);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 16);
#ifdef PRINT_STEP
printf("step226!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.activate run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step227 (HANDLE device, int kvcache, int token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : token));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : token));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 128681984);
  CSB_Write(device, 11, 59750400);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 129730560);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 2);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 3592192);
  CSB_Write(device, 27, 133236736);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("step227!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step228 (HANDLE device, int kvcache, int token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 13696);
  CSB_Write(device, 3, (kvcache ? 1 : token));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : token));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 128);
  CSB_Write(device, 8, 128);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 129730560);
  CSB_Write(device, 11, 61558272);
  CSB_Write(device, 12, 56576);
  CSB_Write(device, 13, 128681984);
  CSB_Write(device, 14, 31);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 3701760);
  CSB_Write(device, 27, 149882880);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("step228!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step229 (HANDLE device, int kvcache, int token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 3718144);
  CSB_Write(device, 195, 128681984);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (1 * token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (1 * token))));
  CSB_Write(device, 198, 149882880);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (1 * token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (1 * token))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (1 * token)));
  CSB_Write(device, 204, (kvcache ? 1 : (1 * token)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_STEP
printf("step229!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step230 (HANDLE device, int kvcache, int token) {
// accel.hbm.mvm_bn accel operator node, storage data in cache76 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : token));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : token));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 149882880);
  CSB_Write(device, 11, 62463488);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, (kvcache ? (89163776 + ((token - 1) * 64)) : 89163776));
  CSB_Write(device, 14, 8);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 3734528);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 31, 8192);
  CSB_Write(device, 32, 8192);
  CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("step230!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step231 (HANDLE device, int kvcache, int token) {
// accel.hbm.pos_emb accel operator node, storage data in cache77 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (kvcache ? (0 + ((token - 1) * 64)) : 0));
  CSB_Write(device, 195, (kvcache ? (89163776 + ((token - 1) * 64)) : 89163776));
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, (kvcache ? (90343424 + ((token - 1) * 64)) : 90343424));
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, (kvcache ? 1 : token));
  CSB_Write(device, 203, 34);
  CSB_Write(device, 204, 8192);
  CSB_Write(device, 205, 0);
  CSB_Write(device, 206, 0);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
#ifdef PRINT_STEP
printf("step231!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step232 (HANDLE device, int kvcache, int token) {
// accel.hbm.mvm_afterTRP accel operator node, storage data in cache78 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 91392000);
  CSB_Write(device, 195, (kvcache ? (90343424 + ((token - 1) * 64)) : 90343424));
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, (kvcache ? (91457536 + ((token - 1) * 64)) : 91457536));
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, token);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, (kvcache ? 1 : token));
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 11688);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 2);
#ifdef PRINT_STEP
printf("step232!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterTRP run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step233 (HANDLE device, int kvcache, int token) {
// accel.hbm.softmax accel operator node, storage data in cache79 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (1 - kvcache));
  CSB_Write(device, 195, 91457536);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 92506112);
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, (((token + 32) - 1) / 32));
  CSB_Write(device, 202, 32);
  CSB_Write(device, 203, token);
  CSB_Write(device, 204, (kvcache ? 1 : token));
  CSB_Write(device, 205, (kvcache ? 1 : token));
  CSB_Write(device, 206, 0);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 8);
#ifdef PRINT_STEP
printf("step233!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.softmax run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step234 (HANDLE device, int kvcache, int token) {
// accel.hbm.mvm_afterF2W accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 90277888);
  CSB_Write(device, 195, (kvcache ? (92506112 + ((token - 1) * 64)) : 92506112));
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 149882880);
  CSB_Write(device, 199, (((64 * token) * 1) * 4));
  CSB_Write(device, 200, (64 * token));
  CSB_Write(device, 201, (((token + 32) - 1) / 32));
  CSB_Write(device, 202, token);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, (kvcache ? 1 : token));
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 4);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 1);
#ifdef PRINT_STEP
printf("step234!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterF2W run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step235 (HANDLE device, int kvcache, int token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : token));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : token));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 149882880);
  CSB_Write(device, 11, 62767616);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 129730560);
  CSB_Write(device, 14, 7);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 3752960);
  CSB_Write(device, 27, 128681984);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("step235!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step236 (HANDLE device, int kvcache, int token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 3769344);
  CSB_Write(device, 195, 129730560);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (1 * token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (1 * token))));
  CSB_Write(device, 198, 128681984);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (1 * token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (1 * token))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (1 * token)));
  CSB_Write(device, 204, (kvcache ? 1 : (1 * token)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_STEP
printf("step236!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step237 (HANDLE device, int kvcache, int token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : token));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : token));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 128681984);
  CSB_Write(device, 11, 63941888);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 149882880);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 3840512);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("step237!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step238 (HANDLE device, int kvcache, int token) {
// accel.hbm.activate accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 32768);
  CSB_Write(device, 195, 149882880);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 198, 133236736);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 201, 428);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : token));
  CSB_Write(device, 204, (kvcache ? 1 : token));
  CSB_Write(device, 205, 428);
  CSB_Write(device, 206, 13696);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 16);
#ifdef PRINT_STEP
printf("step238!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.activate run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step239 (HANDLE device, int kvcache, int token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : token));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : token));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 128681984);
  CSB_Write(device, 11, 63037952);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 149882880);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 2);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 3785728);
  CSB_Write(device, 27, 133236736);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("step239!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step240 (HANDLE device, int kvcache, int token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 13696);
  CSB_Write(device, 3, (kvcache ? 1 : token));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : token));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 128);
  CSB_Write(device, 8, 128);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 149882880);
  CSB_Write(device, 11, 64845824);
  CSB_Write(device, 12, 56576);
  CSB_Write(device, 13, 128681984);
  CSB_Write(device, 14, 31);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 3895296);
  CSB_Write(device, 27, 129730560);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("step240!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step241 (HANDLE device, int kvcache, int token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 3911680);
  CSB_Write(device, 195, 128681984);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (1 * token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (1 * token))));
  CSB_Write(device, 198, 129730560);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (1 * token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (1 * token))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (1 * token)));
  CSB_Write(device, 204, (kvcache ? 1 : (1 * token)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_STEP
printf("step241!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step242 (HANDLE device, int kvcache, int token) {
// accel.hbm.mvm_bn accel operator node, storage data in cache80 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : token));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : token));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 129730560);
  CSB_Write(device, 11, 65751040);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, (kvcache ? (93554688 + ((token - 1) * 64)) : 93554688));
  CSB_Write(device, 14, 8);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 3928064);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 31, 8192);
  CSB_Write(device, 32, 8192);
  CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("step242!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step243 (HANDLE device, int kvcache, int token) {
// accel.hbm.pos_emb accel operator node, storage data in cache81 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (kvcache ? (0 + ((token - 1) * 64)) : 0));
  CSB_Write(device, 195, (kvcache ? (93554688 + ((token - 1) * 64)) : 93554688));
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, (kvcache ? (94734336 + ((token - 1) * 64)) : 94734336));
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, (kvcache ? 1 : token));
  CSB_Write(device, 203, 34);
  CSB_Write(device, 204, 8192);
  CSB_Write(device, 205, 0);
  CSB_Write(device, 206, 0);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
#ifdef PRINT_STEP
printf("step243!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step244 (HANDLE device, int kvcache, int token) {
// accel.hbm.mvm_afterTRP accel operator node, storage data in cache82 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 95782912);
  CSB_Write(device, 195, (kvcache ? (94734336 + ((token - 1) * 64)) : 94734336));
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, (kvcache ? (95848448 + ((token - 1) * 64)) : 95848448));
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, token);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, (kvcache ? 1 : token));
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 11688);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 2);
#ifdef PRINT_STEP
printf("step244!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterTRP run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step245 (HANDLE device, int kvcache, int token) {
// accel.hbm.softmax accel operator node, storage data in cache83 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (1 - kvcache));
  CSB_Write(device, 195, 95848448);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 96897024);
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, (((token + 32) - 1) / 32));
  CSB_Write(device, 202, 32);
  CSB_Write(device, 203, token);
  CSB_Write(device, 204, (kvcache ? 1 : token));
  CSB_Write(device, 205, (kvcache ? 1 : token));
  CSB_Write(device, 206, 0);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 8);
#ifdef PRINT_STEP
printf("step245!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.softmax run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step246 (HANDLE device, int kvcache, int token) {
// accel.hbm.mvm_afterF2W accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 94668800);
  CSB_Write(device, 195, (kvcache ? (96897024 + ((token - 1) * 64)) : 96897024));
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 129730560);
  CSB_Write(device, 199, (((64 * token) * 1) * 4));
  CSB_Write(device, 200, (64 * token));
  CSB_Write(device, 201, (((token + 32) - 1) / 32));
  CSB_Write(device, 202, token);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, (kvcache ? 1 : token));
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 4);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 1);
#ifdef PRINT_STEP
printf("step246!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterF2W run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step247 (HANDLE device, int kvcache, int token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : token));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : token));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 129730560);
  CSB_Write(device, 11, 66055168);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 149882880);
  CSB_Write(device, 14, 7);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 3946496);
  CSB_Write(device, 27, 128681984);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("step247!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step248 (HANDLE device, int kvcache, int token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 3962880);
  CSB_Write(device, 195, 149882880);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (1 * token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (1 * token))));
  CSB_Write(device, 198, 128681984);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (1 * token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (1 * token))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (1 * token)));
  CSB_Write(device, 204, (kvcache ? 1 : (1 * token)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_STEP
printf("step248!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step249 (HANDLE device, int kvcache, int token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : token));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : token));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 128681984);
  CSB_Write(device, 11, 67229440);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 129730560);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 4034048);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("step249!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step250 (HANDLE device, int kvcache, int token) {
// accel.hbm.activate accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 32768);
  CSB_Write(device, 195, 129730560);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 198, 133236736);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 201, 428);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : token));
  CSB_Write(device, 204, (kvcache ? 1 : token));
  CSB_Write(device, 205, 428);
  CSB_Write(device, 206, 13696);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 16);
#ifdef PRINT_STEP
printf("step250!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.activate run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step251 (HANDLE device, int kvcache, int token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : token));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : token));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 128681984);
  CSB_Write(device, 11, 66325504);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 129730560);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 2);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 3979264);
  CSB_Write(device, 27, 133236736);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("step251!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step252 (HANDLE device, int kvcache, int token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 13696);
  CSB_Write(device, 3, (kvcache ? 1 : token));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : token));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 128);
  CSB_Write(device, 8, 128);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 129730560);
  CSB_Write(device, 11, 68133376);
  CSB_Write(device, 12, 56576);
  CSB_Write(device, 13, 128681984);
  CSB_Write(device, 14, 31);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 4088832);
  CSB_Write(device, 27, 149882880);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("step252!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step253 (HANDLE device, int kvcache, int token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 4105216);
  CSB_Write(device, 195, 128681984);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (1 * token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (1 * token))));
  CSB_Write(device, 198, 149882880);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (1 * token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (1 * token))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (1 * token)));
  CSB_Write(device, 204, (kvcache ? 1 : (1 * token)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_STEP
printf("step253!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step254 (HANDLE device, int kvcache, int token) {
// accel.hbm.mvm_bn accel operator node, storage data in cache84 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : token));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : token));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 149882880);
  CSB_Write(device, 11, 69038592);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, (kvcache ? (97945600 + ((token - 1) * 64)) : 97945600));
  CSB_Write(device, 14, 8);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 4121600);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 31, 8192);
  CSB_Write(device, 32, 8192);
  CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("step254!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step255 (HANDLE device, int kvcache, int token) {
// accel.hbm.pos_emb accel operator node, storage data in cache85 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (kvcache ? (0 + ((token - 1) * 64)) : 0));
  CSB_Write(device, 195, (kvcache ? (97945600 + ((token - 1) * 64)) : 97945600));
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, (kvcache ? (99125248 + ((token - 1) * 64)) : 99125248));
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, (kvcache ? 1 : token));
  CSB_Write(device, 203, 34);
  CSB_Write(device, 204, 8192);
  CSB_Write(device, 205, 0);
  CSB_Write(device, 206, 0);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
#ifdef PRINT_STEP
printf("step255!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step256 (HANDLE device, int kvcache, int token) {
// accel.hbm.mvm_afterTRP accel operator node, storage data in cache86 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 100173824);
  CSB_Write(device, 195, (kvcache ? (99125248 + ((token - 1) * 64)) : 99125248));
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, (kvcache ? (100239360 + ((token - 1) * 64)) : 100239360));
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, token);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, (kvcache ? 1 : token));
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 11688);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 2);
#ifdef PRINT_STEP
printf("step256!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterTRP run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step257 (HANDLE device, int kvcache, int token) {
// accel.hbm.softmax accel operator node, storage data in cache87 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (1 - kvcache));
  CSB_Write(device, 195, 100239360);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 101287936);
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, (((token + 32) - 1) / 32));
  CSB_Write(device, 202, 32);
  CSB_Write(device, 203, token);
  CSB_Write(device, 204, (kvcache ? 1 : token));
  CSB_Write(device, 205, (kvcache ? 1 : token));
  CSB_Write(device, 206, 0);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 8);
#ifdef PRINT_STEP
printf("step257!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.softmax run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step258 (HANDLE device, int kvcache, int token) {
// accel.hbm.mvm_afterF2W accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 99059712);
  CSB_Write(device, 195, (kvcache ? (101287936 + ((token - 1) * 64)) : 101287936));
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 149882880);
  CSB_Write(device, 199, (((64 * token) * 1) * 4));
  CSB_Write(device, 200, (64 * token));
  CSB_Write(device, 201, (((token + 32) - 1) / 32));
  CSB_Write(device, 202, token);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, (kvcache ? 1 : token));
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 4);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 1);
#ifdef PRINT_STEP
printf("step258!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterF2W run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step259 (HANDLE device, int kvcache, int token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : token));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : token));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 149882880);
  CSB_Write(device, 11, 69342720);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 129730560);
  CSB_Write(device, 14, 7);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 4140032);
  CSB_Write(device, 27, 128681984);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("step259!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step260 (HANDLE device, int kvcache, int token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 4156416);
  CSB_Write(device, 195, 129730560);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (1 * token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (1 * token))));
  CSB_Write(device, 198, 128681984);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (1 * token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (1 * token))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (1 * token)));
  CSB_Write(device, 204, (kvcache ? 1 : (1 * token)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_STEP
printf("step260!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step261 (HANDLE device, int kvcache, int token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : token));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : token));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 128681984);
  CSB_Write(device, 11, 70516992);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 149882880);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 4227584);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("step261!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step262 (HANDLE device, int kvcache, int token) {
// accel.hbm.activate accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 32768);
  CSB_Write(device, 195, 149882880);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 198, 133236736);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 201, 428);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : token));
  CSB_Write(device, 204, (kvcache ? 1 : token));
  CSB_Write(device, 205, 428);
  CSB_Write(device, 206, 13696);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 16);
#ifdef PRINT_STEP
printf("step262!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.activate run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step263 (HANDLE device, int kvcache, int token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : token));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : token));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 128681984);
  CSB_Write(device, 11, 69613056);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 149882880);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 2);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 4172800);
  CSB_Write(device, 27, 133236736);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("step263!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step264 (HANDLE device, int kvcache, int token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 13696);
  CSB_Write(device, 3, (kvcache ? 1 : token));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : token));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 128);
  CSB_Write(device, 8, 128);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 149882880);
  CSB_Write(device, 11, 71420928);
  CSB_Write(device, 12, 56576);
  CSB_Write(device, 13, 128681984);
  CSB_Write(device, 14, 31);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 4282368);
  CSB_Write(device, 27, 129730560);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("step264!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step265 (HANDLE device, int kvcache, int token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 4298752);
  CSB_Write(device, 195, 128681984);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (1 * token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (1 * token))));
  CSB_Write(device, 198, 129730560);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (1 * token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (1 * token))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (1 * token)));
  CSB_Write(device, 204, (kvcache ? 1 : (1 * token)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_STEP
printf("step265!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step266 (HANDLE device, int kvcache, int token) {
// accel.hbm.mvm_bn accel operator node, storage data in cache88 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : token));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : token));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 129730560);
  CSB_Write(device, 11, 72326144);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, (kvcache ? (102336512 + ((token - 1) * 64)) : 102336512));
  CSB_Write(device, 14, 8);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 4315136);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 31, 8192);
  CSB_Write(device, 32, 8192);
  CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("step266!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step267 (HANDLE device, int kvcache, int token) {
// accel.hbm.pos_emb accel operator node, storage data in cache89 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (kvcache ? (0 + ((token - 1) * 64)) : 0));
  CSB_Write(device, 195, (kvcache ? (102336512 + ((token - 1) * 64)) : 102336512));
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, (kvcache ? (103516160 + ((token - 1) * 64)) : 103516160));
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, (kvcache ? 1 : token));
  CSB_Write(device, 203, 34);
  CSB_Write(device, 204, 8192);
  CSB_Write(device, 205, 0);
  CSB_Write(device, 206, 0);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
#ifdef PRINT_STEP
printf("step267!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step268 (HANDLE device, int kvcache, int token) {
// accel.hbm.mvm_afterTRP accel operator node, storage data in cache90 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 104564736);
  CSB_Write(device, 195, (kvcache ? (103516160 + ((token - 1) * 64)) : 103516160));
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, (kvcache ? (104630272 + ((token - 1) * 64)) : 104630272));
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, token);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, (kvcache ? 1 : token));
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 11688);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 2);
#ifdef PRINT_STEP
printf("step268!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterTRP run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step269 (HANDLE device, int kvcache, int token) {
// accel.hbm.softmax accel operator node, storage data in cache91 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (1 - kvcache));
  CSB_Write(device, 195, 104630272);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 105678848);
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, (((token + 32) - 1) / 32));
  CSB_Write(device, 202, 32);
  CSB_Write(device, 203, token);
  CSB_Write(device, 204, (kvcache ? 1 : token));
  CSB_Write(device, 205, (kvcache ? 1 : token));
  CSB_Write(device, 206, 0);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 8);
#ifdef PRINT_STEP
printf("step269!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.softmax run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step270 (HANDLE device, int kvcache, int token) {
// accel.hbm.mvm_afterF2W accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 103450624);
  CSB_Write(device, 195, (kvcache ? (105678848 + ((token - 1) * 64)) : 105678848));
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 129730560);
  CSB_Write(device, 199, (((64 * token) * 1) * 4));
  CSB_Write(device, 200, (64 * token));
  CSB_Write(device, 201, (((token + 32) - 1) / 32));
  CSB_Write(device, 202, token);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, (kvcache ? 1 : token));
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 4);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 1);
#ifdef PRINT_STEP
printf("step270!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterF2W run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step271 (HANDLE device, int kvcache, int token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : token));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : token));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 129730560);
  CSB_Write(device, 11, 72630272);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 149882880);
  CSB_Write(device, 14, 7);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 4333568);
  CSB_Write(device, 27, 128681984);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("step271!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step272 (HANDLE device, int kvcache, int token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 4349952);
  CSB_Write(device, 195, 149882880);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (1 * token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (1 * token))));
  CSB_Write(device, 198, 128681984);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (1 * token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (1 * token))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (1 * token)));
  CSB_Write(device, 204, (kvcache ? 1 : (1 * token)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_STEP
printf("step272!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step273 (HANDLE device, int kvcache, int token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : token));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : token));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 128681984);
  CSB_Write(device, 11, 73804544);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 129730560);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 4421120);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("step273!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step274 (HANDLE device, int kvcache, int token) {
// accel.hbm.activate accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 32768);
  CSB_Write(device, 195, 129730560);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 198, 133236736);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 201, 428);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : token));
  CSB_Write(device, 204, (kvcache ? 1 : token));
  CSB_Write(device, 205, 428);
  CSB_Write(device, 206, 13696);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 16);
#ifdef PRINT_STEP
printf("step274!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.activate run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step275 (HANDLE device, int kvcache, int token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : token));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : token));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 128681984);
  CSB_Write(device, 11, 72900608);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 129730560);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 2);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 4366336);
  CSB_Write(device, 27, 133236736);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("step275!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step276 (HANDLE device, int kvcache, int token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 13696);
  CSB_Write(device, 3, (kvcache ? 1 : token));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : token));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 128);
  CSB_Write(device, 8, 128);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 129730560);
  CSB_Write(device, 11, 74708480);
  CSB_Write(device, 12, 56576);
  CSB_Write(device, 13, 128681984);
  CSB_Write(device, 14, 31);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 4475904);
  CSB_Write(device, 27, 149882880);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("step276!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step277 (HANDLE device, int kvcache, int token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 4492288);
  CSB_Write(device, 195, 128681984);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (1 * token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (1 * token))));
  CSB_Write(device, 198, 149882880);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (1 * token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (1 * token))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (1 * token)));
  CSB_Write(device, 204, (kvcache ? 1 : (1 * token)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_STEP
printf("step277!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step278 (HANDLE device, int kvcache, int token) {
// accel.hbm.mvm_bn accel operator node, storage data in cache92 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : token));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : token));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 149882880);
  CSB_Write(device, 11, 75613696);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, (kvcache ? (106727424 + ((token - 1) * 64)) : 106727424));
  CSB_Write(device, 14, 8);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 4508672);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 31, 8192);
  CSB_Write(device, 32, 8192);
  CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("step278!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step279 (HANDLE device, int kvcache, int token) {
// accel.hbm.pos_emb accel operator node, storage data in cache93 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (kvcache ? (0 + ((token - 1) * 64)) : 0));
  CSB_Write(device, 195, (kvcache ? (106727424 + ((token - 1) * 64)) : 106727424));
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, (kvcache ? (107907072 + ((token - 1) * 64)) : 107907072));
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, (kvcache ? 1 : token));
  CSB_Write(device, 203, 34);
  CSB_Write(device, 204, 8192);
  CSB_Write(device, 205, 0);
  CSB_Write(device, 206, 0);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
#ifdef PRINT_STEP
printf("step279!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step280 (HANDLE device, int kvcache, int token) {
// accel.hbm.mvm_afterTRP accel operator node, storage data in cache94 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 108955648);
  CSB_Write(device, 195, (kvcache ? (107907072 + ((token - 1) * 64)) : 107907072));
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, (kvcache ? (109021184 + ((token - 1) * 64)) : 109021184));
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, token);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, (kvcache ? 1 : token));
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 11688);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 2);
#ifdef PRINT_STEP
printf("step280!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterTRP run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step281 (HANDLE device, int kvcache, int token) {
// accel.hbm.softmax accel operator node, storage data in cache95 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (1 - kvcache));
  CSB_Write(device, 195, 109021184);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 110069760);
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, (((token + 32) - 1) / 32));
  CSB_Write(device, 202, 32);
  CSB_Write(device, 203, token);
  CSB_Write(device, 204, (kvcache ? 1 : token));
  CSB_Write(device, 205, (kvcache ? 1 : token));
  CSB_Write(device, 206, 0);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 8);
#ifdef PRINT_STEP
printf("step281!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.softmax run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step282 (HANDLE device, int kvcache, int token) {
// accel.hbm.mvm_afterF2W accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 107841536);
  CSB_Write(device, 195, (kvcache ? (110069760 + ((token - 1) * 64)) : 110069760));
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 149882880);
  CSB_Write(device, 199, (((64 * token) * 1) * 4));
  CSB_Write(device, 200, (64 * token));
  CSB_Write(device, 201, (((token + 32) - 1) / 32));
  CSB_Write(device, 202, token);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, (kvcache ? 1 : token));
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 4);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 1);
#ifdef PRINT_STEP
printf("step282!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterF2W run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step283 (HANDLE device, int kvcache, int token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : token));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : token));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 149882880);
  CSB_Write(device, 11, 75917824);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 129730560);
  CSB_Write(device, 14, 7);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 4527104);
  CSB_Write(device, 27, 128681984);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("step283!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step284 (HANDLE device, int kvcache, int token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 4543488);
  CSB_Write(device, 195, 129730560);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (1 * token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (1 * token))));
  CSB_Write(device, 198, 128681984);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (1 * token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (1 * token))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (1 * token)));
  CSB_Write(device, 204, (kvcache ? 1 : (1 * token)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_STEP
printf("step284!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step285 (HANDLE device, int kvcache, int token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : token));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : token));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 128681984);
  CSB_Write(device, 11, 77092096);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 149882880);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 4614656);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("step285!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step286 (HANDLE device, int kvcache, int token) {
// accel.hbm.activate accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 32768);
  CSB_Write(device, 195, 149882880);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 198, 133236736);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 201, 428);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : token));
  CSB_Write(device, 204, (kvcache ? 1 : token));
  CSB_Write(device, 205, 428);
  CSB_Write(device, 206, 13696);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 16);
#ifdef PRINT_STEP
printf("step286!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.activate run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step287 (HANDLE device, int kvcache, int token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : token));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : token));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 128681984);
  CSB_Write(device, 11, 76188160);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 149882880);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 2);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 4559872);
  CSB_Write(device, 27, 133236736);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("step287!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step288 (HANDLE device, int kvcache, int token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 13696);
  CSB_Write(device, 3, (kvcache ? 1 : token));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : token));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 128);
  CSB_Write(device, 8, 128);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 149882880);
  CSB_Write(device, 11, 77996032);
  CSB_Write(device, 12, 56576);
  CSB_Write(device, 13, 128681984);
  CSB_Write(device, 14, 31);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 4669440);
  CSB_Write(device, 27, 129730560);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("step288!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step289 (HANDLE device, int kvcache, int token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 4685824);
  CSB_Write(device, 195, 128681984);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (1 * token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (1 * token))));
  CSB_Write(device, 198, 129730560);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (1 * token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (1 * token))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (1 * token)));
  CSB_Write(device, 204, (kvcache ? 1 : (1 * token)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_STEP
printf("step289!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step290 (HANDLE device, int kvcache, int token) {
// accel.hbm.mvm_bn accel operator node, storage data in cache96 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : token));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : token));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 129730560);
  CSB_Write(device, 11, 78901248);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, (kvcache ? (111118336 + ((token - 1) * 64)) : 111118336));
  CSB_Write(device, 14, 8);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 4702208);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 31, 8192);
  CSB_Write(device, 32, 8192);
  CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("step290!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step291 (HANDLE device, int kvcache, int token) {
// accel.hbm.pos_emb accel operator node, storage data in cache97 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (kvcache ? (0 + ((token - 1) * 64)) : 0));
  CSB_Write(device, 195, (kvcache ? (111118336 + ((token - 1) * 64)) : 111118336));
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, (kvcache ? (112297984 + ((token - 1) * 64)) : 112297984));
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, (kvcache ? 1 : token));
  CSB_Write(device, 203, 34);
  CSB_Write(device, 204, 8192);
  CSB_Write(device, 205, 0);
  CSB_Write(device, 206, 0);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
#ifdef PRINT_STEP
printf("step291!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step292 (HANDLE device, int kvcache, int token) {
// accel.hbm.mvm_afterTRP accel operator node, storage data in cache98 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 113346560);
  CSB_Write(device, 195, (kvcache ? (112297984 + ((token - 1) * 64)) : 112297984));
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, (kvcache ? (113412096 + ((token - 1) * 64)) : 113412096));
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, token);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, (kvcache ? 1 : token));
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 11688);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 2);
#ifdef PRINT_STEP
printf("step292!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterTRP run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step293 (HANDLE device, int kvcache, int token) {
// accel.hbm.softmax accel operator node, storage data in cache99 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (1 - kvcache));
  CSB_Write(device, 195, 113412096);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 114460672);
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, (((token + 32) - 1) / 32));
  CSB_Write(device, 202, 32);
  CSB_Write(device, 203, token);
  CSB_Write(device, 204, (kvcache ? 1 : token));
  CSB_Write(device, 205, (kvcache ? 1 : token));
  CSB_Write(device, 206, 0);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 8);
#ifdef PRINT_STEP
printf("step293!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.softmax run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step294 (HANDLE device, int kvcache, int token) {
// accel.hbm.mvm_afterF2W accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 112232448);
  CSB_Write(device, 195, (kvcache ? (114460672 + ((token - 1) * 64)) : 114460672));
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 129730560);
  CSB_Write(device, 199, (((64 * token) * 1) * 4));
  CSB_Write(device, 200, (64 * token));
  CSB_Write(device, 201, (((token + 32) - 1) / 32));
  CSB_Write(device, 202, token);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, (kvcache ? 1 : token));
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 4);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 1);
#ifdef PRINT_STEP
printf("step294!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterF2W run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step295 (HANDLE device, int kvcache, int token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : token));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : token));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 129730560);
  CSB_Write(device, 11, 79205376);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 149882880);
  CSB_Write(device, 14, 7);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 4720640);
  CSB_Write(device, 27, 128681984);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("step295!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step296 (HANDLE device, int kvcache, int token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 4737024);
  CSB_Write(device, 195, 149882880);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (1 * token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (1 * token))));
  CSB_Write(device, 198, 128681984);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (1 * token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (1 * token))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (1 * token)));
  CSB_Write(device, 204, (kvcache ? 1 : (1 * token)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_STEP
printf("step296!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step297 (HANDLE device, int kvcache, int token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : token));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : token));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 128681984);
  CSB_Write(device, 11, 80379648);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 129730560);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 4808192);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("step297!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step298 (HANDLE device, int kvcache, int token) {
// accel.hbm.activate accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 32768);
  CSB_Write(device, 195, 129730560);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 198, 133236736);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 201, 428);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : token));
  CSB_Write(device, 204, (kvcache ? 1 : token));
  CSB_Write(device, 205, 428);
  CSB_Write(device, 206, 13696);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 16);
#ifdef PRINT_STEP
printf("step298!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.activate run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step299 (HANDLE device, int kvcache, int token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : token));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : token));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 128681984);
  CSB_Write(device, 11, 79475712);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 129730560);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 2);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 4753408);
  CSB_Write(device, 27, 133236736);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("step299!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step300 (HANDLE device, int kvcache, int token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 13696);
  CSB_Write(device, 3, (kvcache ? 1 : token));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : token));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 128);
  CSB_Write(device, 8, 128);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 129730560);
  CSB_Write(device, 11, 81283584);
  CSB_Write(device, 12, 56576);
  CSB_Write(device, 13, 128681984);
  CSB_Write(device, 14, 31);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 4862976);
  CSB_Write(device, 27, 149882880);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("step300!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step301 (HANDLE device, int kvcache, int token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 4879360);
  CSB_Write(device, 195, 128681984);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (1 * token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (1 * token))));
  CSB_Write(device, 198, 149882880);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (1 * token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (1 * token))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (1 * token)));
  CSB_Write(device, 204, (kvcache ? 1 : (1 * token)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_STEP
printf("step301!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step302 (HANDLE device, int kvcache, int token) {
// accel.hbm.mvm_bn accel operator node, storage data in cache100 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : token));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : token));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 149882880);
  CSB_Write(device, 11, 82188800);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, (kvcache ? (115509248 + ((token - 1) * 64)) : 115509248));
  CSB_Write(device, 14, 8);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 4895744);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 31, 8192);
  CSB_Write(device, 32, 8192);
  CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("step302!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step303 (HANDLE device, int kvcache, int token) {
// accel.hbm.pos_emb accel operator node, storage data in cache101 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (kvcache ? (0 + ((token - 1) * 64)) : 0));
  CSB_Write(device, 195, (kvcache ? (115509248 + ((token - 1) * 64)) : 115509248));
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, (kvcache ? (116688896 + ((token - 1) * 64)) : 116688896));
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, (kvcache ? 1 : token));
  CSB_Write(device, 203, 34);
  CSB_Write(device, 204, 8192);
  CSB_Write(device, 205, 0);
  CSB_Write(device, 206, 0);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
#ifdef PRINT_STEP
printf("step303!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step304 (HANDLE device, int kvcache, int token) {
// accel.hbm.mvm_afterTRP accel operator node, storage data in cache102 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 117737472);
  CSB_Write(device, 195, (kvcache ? (116688896 + ((token - 1) * 64)) : 116688896));
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, (kvcache ? (117803008 + ((token - 1) * 64)) : 117803008));
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, token);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, (kvcache ? 1 : token));
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 11688);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 2);
#ifdef PRINT_STEP
printf("step304!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterTRP run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step305 (HANDLE device, int kvcache, int token) {
// accel.hbm.softmax accel operator node, storage data in cache103 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (1 - kvcache));
  CSB_Write(device, 195, 117803008);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 118851584);
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, (((token + 32) - 1) / 32));
  CSB_Write(device, 202, 32);
  CSB_Write(device, 203, token);
  CSB_Write(device, 204, (kvcache ? 1 : token));
  CSB_Write(device, 205, (kvcache ? 1 : token));
  CSB_Write(device, 206, 0);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 8);
#ifdef PRINT_STEP
printf("step305!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.softmax run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step306 (HANDLE device, int kvcache, int token) {
// accel.hbm.mvm_afterF2W accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 116623360);
  CSB_Write(device, 195, (kvcache ? (118851584 + ((token - 1) * 64)) : 118851584));
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 149882880);
  CSB_Write(device, 199, (((64 * token) * 1) * 4));
  CSB_Write(device, 200, (64 * token));
  CSB_Write(device, 201, (((token + 32) - 1) / 32));
  CSB_Write(device, 202, token);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, (kvcache ? 1 : token));
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 4);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 1);
#ifdef PRINT_STEP
printf("step306!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterF2W run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step307 (HANDLE device, int kvcache, int token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : token));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : token));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 149882880);
  CSB_Write(device, 11, 82492928);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 129730560);
  CSB_Write(device, 14, 7);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 4914176);
  CSB_Write(device, 27, 128681984);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("step307!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step308 (HANDLE device, int kvcache, int token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 4930560);
  CSB_Write(device, 195, 129730560);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (1 * token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (1 * token))));
  CSB_Write(device, 198, 128681984);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (1 * token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (1 * token))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (1 * token)));
  CSB_Write(device, 204, (kvcache ? 1 : (1 * token)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_STEP
printf("step308!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step309 (HANDLE device, int kvcache, int token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : token));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : token));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 128681984);
  CSB_Write(device, 11, 83667200);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 149882880);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 5001728);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("step309!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step310 (HANDLE device, int kvcache, int token) {
// accel.hbm.activate accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 32768);
  CSB_Write(device, 195, 149882880);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 198, 133236736);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 201, 428);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : token));
  CSB_Write(device, 204, (kvcache ? 1 : token));
  CSB_Write(device, 205, 428);
  CSB_Write(device, 206, 13696);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 16);
#ifdef PRINT_STEP
printf("step310!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.activate run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step311 (HANDLE device, int kvcache, int token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : token));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : token));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 128681984);
  CSB_Write(device, 11, 82763264);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 149882880);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 2);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 4946944);
  CSB_Write(device, 27, 133236736);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("step311!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step312 (HANDLE device, int kvcache, int token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 13696);
  CSB_Write(device, 3, (kvcache ? 1 : token));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : token));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 128);
  CSB_Write(device, 8, 128);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 149882880);
  CSB_Write(device, 11, 84571136);
  CSB_Write(device, 12, 56576);
  CSB_Write(device, 13, 128681984);
  CSB_Write(device, 14, 31);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 5056512);
  CSB_Write(device, 27, 129730560);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("step312!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step313 (HANDLE device, int kvcache, int token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 5072896);
  CSB_Write(device, 195, 128681984);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (1 * token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (1 * token))));
  CSB_Write(device, 198, 129730560);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (1 * token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (1 * token))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (1 * token)));
  CSB_Write(device, 204, (kvcache ? 1 : (1 * token)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_STEP
printf("step313!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step314 (HANDLE device, int kvcache, int token) {
// accel.hbm.mvm_bn accel operator node, storage data in cache104 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : token));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : token));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 129730560);
  CSB_Write(device, 11, 85476352);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, (kvcache ? (119900160 + ((token - 1) * 64)) : 119900160));
  CSB_Write(device, 14, 8);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 5089280);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 31, 8192);
  CSB_Write(device, 32, 8192);
  CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("step314!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step315 (HANDLE device, int kvcache, int token) {
// accel.hbm.pos_emb accel operator node, storage data in cache105 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (kvcache ? (0 + ((token - 1) * 64)) : 0));
  CSB_Write(device, 195, (kvcache ? (119900160 + ((token - 1) * 64)) : 119900160));
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, (kvcache ? (121079808 + ((token - 1) * 64)) : 121079808));
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, (kvcache ? 1 : token));
  CSB_Write(device, 203, 34);
  CSB_Write(device, 204, 8192);
  CSB_Write(device, 205, 0);
  CSB_Write(device, 206, 0);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
#ifdef PRINT_STEP
printf("step315!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step316 (HANDLE device, int kvcache, int token) {
// accel.hbm.mvm_afterTRP accel operator node, storage data in cache106 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 122128384);
  CSB_Write(device, 195, (kvcache ? (121079808 + ((token - 1) * 64)) : 121079808));
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, (kvcache ? (122193920 + ((token - 1) * 64)) : 122193920));
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, token);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, (kvcache ? 1 : token));
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 11688);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 2);
#ifdef PRINT_STEP
printf("step316!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterTRP run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step317 (HANDLE device, int kvcache, int token) {
// accel.hbm.softmax accel operator node, storage data in cache107 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (1 - kvcache));
  CSB_Write(device, 195, 122193920);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 123242496);
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, (((token + 32) - 1) / 32));
  CSB_Write(device, 202, 32);
  CSB_Write(device, 203, token);
  CSB_Write(device, 204, (kvcache ? 1 : token));
  CSB_Write(device, 205, (kvcache ? 1 : token));
  CSB_Write(device, 206, 0);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 8);
#ifdef PRINT_STEP
printf("step317!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.softmax run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step318 (HANDLE device, int kvcache, int token) {
// accel.hbm.mvm_afterF2W accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 121014272);
  CSB_Write(device, 195, (kvcache ? (123242496 + ((token - 1) * 64)) : 123242496));
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 129730560);
  CSB_Write(device, 199, (((64 * token) * 1) * 4));
  CSB_Write(device, 200, (64 * token));
  CSB_Write(device, 201, (((token + 32) - 1) / 32));
  CSB_Write(device, 202, token);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, (kvcache ? 1 : token));
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 4);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 1);
#ifdef PRINT_STEP
printf("step318!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterF2W run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step319 (HANDLE device, int kvcache, int token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : token));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : token));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 129730560);
  CSB_Write(device, 11, 85780480);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 149882880);
  CSB_Write(device, 14, 7);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 5107712);
  CSB_Write(device, 27, 128681984);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("step319!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step320 (HANDLE device, int kvcache, int token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 5124096);
  CSB_Write(device, 195, 149882880);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (1 * token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (1 * token))));
  CSB_Write(device, 198, 128681984);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (1 * token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (1 * token))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (1 * token)));
  CSB_Write(device, 204, (kvcache ? 1 : (1 * token)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_STEP
printf("step320!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step321 (HANDLE device, int kvcache, int token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : token));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : token));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 128681984);
  CSB_Write(device, 11, 86954752);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 129730560);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 5195264);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("step321!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step322 (HANDLE device, int kvcache, int token) {
// accel.hbm.activate accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 32768);
  CSB_Write(device, 195, 129730560);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 198, 133236736);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 201, 428);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : token));
  CSB_Write(device, 204, (kvcache ? 1 : token));
  CSB_Write(device, 205, 428);
  CSB_Write(device, 206, 13696);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 16);
#ifdef PRINT_STEP
printf("step322!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.activate run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step323 (HANDLE device, int kvcache, int token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : token));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : token));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 128681984);
  CSB_Write(device, 11, 86050816);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 129730560);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 2);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 5140480);
  CSB_Write(device, 27, 133236736);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("step323!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step324 (HANDLE device, int kvcache, int token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 13696);
  CSB_Write(device, 3, (kvcache ? 1 : token));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : token));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 128);
  CSB_Write(device, 8, 128);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 129730560);
  CSB_Write(device, 11, 87858688);
  CSB_Write(device, 12, 56576);
  CSB_Write(device, 13, 128681984);
  CSB_Write(device, 14, 31);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 5250048);
  CSB_Write(device, 27, 149882880);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("step324!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step325 (HANDLE device, int kvcache, int token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 5266432);
  CSB_Write(device, 195, 128681984);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (1 * token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (1 * token))));
  CSB_Write(device, 198, 149882880);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (1 * token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (1 * token))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (1 * token)));
  CSB_Write(device, 204, (kvcache ? 1 : (1 * token)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_STEP
printf("step325!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step326 (HANDLE device, int kvcache, int token) {
// accel.hbm.mvm_bn accel operator node, storage data in cache108 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : token));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : token));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 149882880);
  CSB_Write(device, 11, 88763904);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, (kvcache ? (124291072 + ((token - 1) * 64)) : 124291072));
  CSB_Write(device, 14, 8);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 5282816);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 31, 8192);
  CSB_Write(device, 32, 8192);
  CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("step326!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step327 (HANDLE device, int kvcache, int token) {
// accel.hbm.pos_emb accel operator node, storage data in cache109 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (kvcache ? (0 + ((token - 1) * 64)) : 0));
  CSB_Write(device, 195, (kvcache ? (124291072 + ((token - 1) * 64)) : 124291072));
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, (kvcache ? (125470720 + ((token - 1) * 64)) : 125470720));
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, (kvcache ? 1 : token));
  CSB_Write(device, 203, 34);
  CSB_Write(device, 204, 8192);
  CSB_Write(device, 205, 0);
  CSB_Write(device, 206, 0);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
#ifdef PRINT_STEP
printf("step327!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step328 (HANDLE device, int kvcache, int token) {
// accel.hbm.mvm_afterTRP accel operator node, storage data in cache110 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 126519296);
  CSB_Write(device, 195, (kvcache ? (125470720 + ((token - 1) * 64)) : 125470720));
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, (kvcache ? (126584832 + ((token - 1) * 64)) : 126584832));
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, token);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, (kvcache ? 1 : token));
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 11688);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 2);
#ifdef PRINT_STEP
printf("step328!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterTRP run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step329 (HANDLE device, int kvcache, int token) {
// accel.hbm.softmax accel operator node, storage data in cache111 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (1 - kvcache));
  CSB_Write(device, 195, 126584832);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 127633408);
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, (((token + 32) - 1) / 32));
  CSB_Write(device, 202, 32);
  CSB_Write(device, 203, token);
  CSB_Write(device, 204, (kvcache ? 1 : token));
  CSB_Write(device, 205, (kvcache ? 1 : token));
  CSB_Write(device, 206, 0);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 8);
#ifdef PRINT_STEP
printf("step329!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.softmax run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step330 (HANDLE device, int kvcache, int token) {
// accel.hbm.mvm_afterF2W accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 125405184);
  CSB_Write(device, 195, (kvcache ? (127633408 + ((token - 1) * 64)) : 127633408));
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 149882880);
  CSB_Write(device, 199, (((64 * token) * 1) * 4));
  CSB_Write(device, 200, (64 * token));
  CSB_Write(device, 201, (((token + 32) - 1) / 32));
  CSB_Write(device, 202, token);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, (kvcache ? 1 : token));
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 4);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 1);
#ifdef PRINT_STEP
printf("step330!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterF2W run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step331 (HANDLE device, int kvcache, int token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : token));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : token));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 149882880);
  CSB_Write(device, 11, 89068032);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 129730560);
  CSB_Write(device, 14, 7);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 5301248);
  CSB_Write(device, 27, 128681984);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("step331!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step332 (HANDLE device, int kvcache, int token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 5317632);
  CSB_Write(device, 195, 129730560);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (1 * token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (1 * token))));
  CSB_Write(device, 198, 128681984);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (1 * token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (1 * token))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (1 * token)));
  CSB_Write(device, 204, (kvcache ? 1 : (1 * token)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_STEP
printf("step332!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step333 (HANDLE device, int kvcache, int token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : token));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : token));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 128681984);
  CSB_Write(device, 11, 90242304);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 149882880);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 5388800);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("step333!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step334 (HANDLE device, int kvcache, int token) {
// accel.hbm.activate accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 32768);
  CSB_Write(device, 195, 149882880);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 198, 133236736);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 201, 428);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : token));
  CSB_Write(device, 204, (kvcache ? 1 : token));
  CSB_Write(device, 205, 428);
  CSB_Write(device, 206, 13696);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 16);
#ifdef PRINT_STEP
printf("step334!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.activate run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step335 (HANDLE device, int kvcache, int token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : token));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : token));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 128681984);
  CSB_Write(device, 11, 89338368);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 149882880);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 2);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 5334016);
  CSB_Write(device, 27, 133236736);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("step335!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step336 (HANDLE device, int kvcache, int token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 13696);
  CSB_Write(device, 3, (kvcache ? 1 : token));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : token));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 128);
  CSB_Write(device, 8, 128);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 149882880);
  CSB_Write(device, 11, 91146240);
  CSB_Write(device, 12, 56576);
  CSB_Write(device, 13, 128681984);
  CSB_Write(device, 14, 31);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 5443584);
  CSB_Write(device, 27, 129730560);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : token)) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : token)));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("step336!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step337 (HANDLE device, int kvcache, int token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 5459968);
  CSB_Write(device, 195, ((kvcache ? 0 : 1) ? (128681984 + (((1 * token) - 1) * 64)) : 128681984));
  CSB_Write(device, 196, ((kvcache ? 0 : 1) ? ((64 * (1 * token)) * 1) : 64));
  CSB_Write(device, 197, ((kvcache ? 0 : 1) ? (64 * (1 * token)) : 64));
  CSB_Write(device, 198, 129730560);
  CSB_Write(device, 199, 64);
  CSB_Write(device, 200, 64);
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, 1);
  CSB_Write(device, 204, 1);
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_STEP
printf("step337!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step338 (HANDLE device) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 1);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 1);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, 1);
  CSB_Write(device, 10, 129730560);
  CSB_Write(device, 11, 92051456);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 149882880);
  CSB_Write(device, 14, 126);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 5476352);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 64);
  CSB_Write(device, 30, 64);
  CSB_Write(device, 31, 64);
  CSB_Write(device, 32, 64);
  CSB_Write(device, 60, 133236736);
  CSB_Write(device, 33, 2847);
#ifdef PRINT_STEP
printf("step338!\n");
#endif
  while(CSB_Read(device, 61) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}


void chatglm_dynamic_control_0425_1449(HANDLE device, int token, int kvcache) {
  step1(device, kvcache, token);
  step2(device, kvcache, token);
  step3(device, kvcache, token);
  step4(device, kvcache, token);
  step5(device, kvcache, token);
  step6(device, kvcache, token);
  step7(device, kvcache, token);
  step8(device, kvcache, token);
  step9(device, kvcache, token);
  step10(device, kvcache, token);
  step11(device, kvcache, token);
  step12(device, kvcache, token);
  step13(device, kvcache, token);
  step14(device, kvcache, token);
  step15(device, kvcache, token);
  step16(device, kvcache, token);
  step17(device, kvcache, token);
  step18(device, kvcache, token);
  step19(device, kvcache, token);
  step20(device, kvcache, token);
  step21(device, kvcache, token);
  step22(device, kvcache, token);
  step23(device, kvcache, token);
  step24(device, kvcache, token);
  step25(device, kvcache, token);
  step26(device, kvcache, token);
  step27(device, kvcache, token);
  step28(device, kvcache, token);
  step29(device, kvcache, token);
  step30(device, kvcache, token);
  step31(device, kvcache, token);
  step32(device, kvcache, token);
  step33(device, kvcache, token);
  step34(device, kvcache, token);
  step35(device, kvcache, token);
  step36(device, kvcache, token);
  step37(device, kvcache, token);
  step38(device, kvcache, token);
  step39(device, kvcache, token);
  step40(device, kvcache, token);
  step41(device, kvcache, token);
  step42(device, kvcache, token);
  step43(device, kvcache, token);
  step44(device, kvcache, token);
  step45(device, kvcache, token);
  step46(device, kvcache, token);
  step47(device, kvcache, token);
  step48(device, kvcache, token);
  step49(device, kvcache, token);
  step50(device, kvcache, token);
  step51(device, kvcache, token);
  step52(device, kvcache, token);
  step53(device, kvcache, token);
  step54(device, kvcache, token);
  step55(device, kvcache, token);
  step56(device, kvcache, token);
  step57(device, kvcache, token);
  step58(device, kvcache, token);
  step59(device, kvcache, token);
  step60(device, kvcache, token);
  step61(device, kvcache, token);
  step62(device, kvcache, token);
  step63(device, kvcache, token);
  step64(device, kvcache, token);
  step65(device, kvcache, token);
  step66(device, kvcache, token);
  step67(device, kvcache, token);
  step68(device, kvcache, token);
  step69(device, kvcache, token);
  step70(device, kvcache, token);
  step71(device, kvcache, token);
  step72(device, kvcache, token);
  step73(device, kvcache, token);
  step74(device, kvcache, token);
  step75(device, kvcache, token);
  step76(device, kvcache, token);
  step77(device, kvcache, token);
  step78(device, kvcache, token);
  step79(device, kvcache, token);
  step80(device, kvcache, token);
  step81(device, kvcache, token);
  step82(device, kvcache, token);
  step83(device, kvcache, token);
  step84(device, kvcache, token);
  step85(device, kvcache, token);
  step86(device, kvcache, token);
  step87(device, kvcache, token);
  step88(device, kvcache, token);
  step89(device, kvcache, token);
  step90(device, kvcache, token);
  step91(device, kvcache, token);
  step92(device, kvcache, token);
  step93(device, kvcache, token);
  step94(device, kvcache, token);
  step95(device, kvcache, token);
  step96(device, kvcache, token);
  step97(device, kvcache, token);
  step98(device, kvcache, token);
  step99(device, kvcache, token);
  step100(device, kvcache, token);
  step101(device, kvcache, token);
  step102(device, kvcache, token);
  step103(device, kvcache, token);
  step104(device, kvcache, token);
  step105(device, kvcache, token);
  step106(device, kvcache, token);
  step107(device, kvcache, token);
  step108(device, kvcache, token);
  step109(device, kvcache, token);
  step110(device, kvcache, token);
  step111(device, kvcache, token);
  step112(device, kvcache, token);
  step113(device, kvcache, token);
  step114(device, kvcache, token);
  step115(device, kvcache, token);
  step116(device, kvcache, token);
  step117(device, kvcache, token);
  step118(device, kvcache, token);
  step119(device, kvcache, token);
  step120(device, kvcache, token);
  step121(device, kvcache, token);
  step122(device, kvcache, token);
  step123(device, kvcache, token);
  step124(device, kvcache, token);
  step125(device, kvcache, token);
  step126(device, kvcache, token);
  step127(device, kvcache, token);
  step128(device, kvcache, token);
  step129(device, kvcache, token);
  step130(device, kvcache, token);
  step131(device, kvcache, token);
  step132(device, kvcache, token);
  step133(device, kvcache, token);
  step134(device, kvcache, token);
  step135(device, kvcache, token);
  step136(device, kvcache, token);
  step137(device, kvcache, token);
  step138(device, kvcache, token);
  step139(device, kvcache, token);
  step140(device, kvcache, token);
  step141(device, kvcache, token);
  step142(device, kvcache, token);
  step143(device, kvcache, token);
  step144(device, kvcache, token);
  step145(device, kvcache, token);
  step146(device, kvcache, token);
  step147(device, kvcache, token);
  step148(device, kvcache, token);
  step149(device, kvcache, token);
  step150(device, kvcache, token);
  step151(device, kvcache, token);
  step152(device, kvcache, token);
  step153(device, kvcache, token);
  step154(device, kvcache, token);
  step155(device, kvcache, token);
  step156(device, kvcache, token);
  step157(device, kvcache, token);
  step158(device, kvcache, token);
  step159(device, kvcache, token);
  step160(device, kvcache, token);
  step161(device, kvcache, token);
  step162(device, kvcache, token);
  step163(device, kvcache, token);
  step164(device, kvcache, token);
  step165(device, kvcache, token);
  step166(device, kvcache, token);
  step167(device, kvcache, token);
  step168(device, kvcache, token);
  step169(device, kvcache, token);
  step170(device, kvcache, token);
  step171(device, kvcache, token);
  step172(device, kvcache, token);
  step173(device, kvcache, token);
  step174(device, kvcache, token);
  step175(device, kvcache, token);
  step176(device, kvcache, token);
  step177(device, kvcache, token);
  step178(device, kvcache, token);
  step179(device, kvcache, token);
  step180(device, kvcache, token);
  step181(device, kvcache, token);
  step182(device, kvcache, token);
  step183(device, kvcache, token);
  step184(device, kvcache, token);
  step185(device, kvcache, token);
  step186(device, kvcache, token);
  step187(device, kvcache, token);
  step188(device, kvcache, token);
  step189(device, kvcache, token);
  step190(device, kvcache, token);
  step191(device, kvcache, token);
  step192(device, kvcache, token);
  step193(device, kvcache, token);
  step194(device, kvcache, token);
  step195(device, kvcache, token);
  step196(device, kvcache, token);
  step197(device, kvcache, token);
  step198(device, kvcache, token);
  step199(device, kvcache, token);
  step200(device, kvcache, token);
  step201(device, kvcache, token);
  step202(device, kvcache, token);
  step203(device, kvcache, token);
  step204(device, kvcache, token);
  step205(device, kvcache, token);
  step206(device, kvcache, token);
  step207(device, kvcache, token);
  step208(device, kvcache, token);
  step209(device, kvcache, token);
  step210(device, kvcache, token);
  step211(device, kvcache, token);
  step212(device, kvcache, token);
  step213(device, kvcache, token);
  step214(device, kvcache, token);
  step215(device, kvcache, token);
  step216(device, kvcache, token);
  step217(device, kvcache, token);
  step218(device, kvcache, token);
  step219(device, kvcache, token);
  step220(device, kvcache, token);
  step221(device, kvcache, token);
  step222(device, kvcache, token);
  step223(device, kvcache, token);
  step224(device, kvcache, token);
  step225(device, kvcache, token);
  step226(device, kvcache, token);
  step227(device, kvcache, token);
  step228(device, kvcache, token);
  step229(device, kvcache, token);
  step230(device, kvcache, token);
  step231(device, kvcache, token);
  step232(device, kvcache, token);
  step233(device, kvcache, token);
  step234(device, kvcache, token);
  step235(device, kvcache, token);
  step236(device, kvcache, token);
  step237(device, kvcache, token);
  step238(device, kvcache, token);
  step239(device, kvcache, token);
  step240(device, kvcache, token);
  step241(device, kvcache, token);
  step242(device, kvcache, token);
  step243(device, kvcache, token);
  step244(device, kvcache, token);
  step245(device, kvcache, token);
  step246(device, kvcache, token);
  step247(device, kvcache, token);
  step248(device, kvcache, token);
  step249(device, kvcache, token);
  step250(device, kvcache, token);
  step251(device, kvcache, token);
  step252(device, kvcache, token);
  step253(device, kvcache, token);
  step254(device, kvcache, token);
  step255(device, kvcache, token);
  step256(device, kvcache, token);
  step257(device, kvcache, token);
  step258(device, kvcache, token);
  step259(device, kvcache, token);
  step260(device, kvcache, token);
  step261(device, kvcache, token);
  step262(device, kvcache, token);
  step263(device, kvcache, token);
  step264(device, kvcache, token);
  step265(device, kvcache, token);
  step266(device, kvcache, token);
  step267(device, kvcache, token);
  step268(device, kvcache, token);
  step269(device, kvcache, token);
  step270(device, kvcache, token);
  step271(device, kvcache, token);
  step272(device, kvcache, token);
  step273(device, kvcache, token);
  step274(device, kvcache, token);
  step275(device, kvcache, token);
  step276(device, kvcache, token);
  step277(device, kvcache, token);
  step278(device, kvcache, token);
  step279(device, kvcache, token);
  step280(device, kvcache, token);
  step281(device, kvcache, token);
  step282(device, kvcache, token);
  step283(device, kvcache, token);
  step284(device, kvcache, token);
  step285(device, kvcache, token);
  step286(device, kvcache, token);
  step287(device, kvcache, token);
  step288(device, kvcache, token);
  step289(device, kvcache, token);
  step290(device, kvcache, token);
  step291(device, kvcache, token);
  step292(device, kvcache, token);
  step293(device, kvcache, token);
  step294(device, kvcache, token);
  step295(device, kvcache, token);
  step296(device, kvcache, token);
  step297(device, kvcache, token);
  step298(device, kvcache, token);
  step299(device, kvcache, token);
  step300(device, kvcache, token);
  step301(device, kvcache, token);
  step302(device, kvcache, token);
  step303(device, kvcache, token);
  step304(device, kvcache, token);
  step305(device, kvcache, token);
  step306(device, kvcache, token);
  step307(device, kvcache, token);
  step308(device, kvcache, token);
  step309(device, kvcache, token);
  step310(device, kvcache, token);
  step311(device, kvcache, token);
  step312(device, kvcache, token);
  step313(device, kvcache, token);
  step314(device, kvcache, token);
  step315(device, kvcache, token);
  step316(device, kvcache, token);
  step317(device, kvcache, token);
  step318(device, kvcache, token);
  step319(device, kvcache, token);
  step320(device, kvcache, token);
  step321(device, kvcache, token);
  step322(device, kvcache, token);
  step323(device, kvcache, token);
  step324(device, kvcache, token);
  step325(device, kvcache, token);
  step326(device, kvcache, token);
  step327(device, kvcache, token);
  step328(device, kvcache, token);
  step329(device, kvcache, token);
  step330(device, kvcache, token);
  step331(device, kvcache, token);
  step332(device, kvcache, token);
  step333(device, kvcache, token);
  step334(device, kvcache, token);
  step335(device, kvcache, token);
  step336(device, kvcache, token);
  step337(device, kvcache, token);
  step338(device);
}
