// generated by codegen c++ test ops head at 2024-04-30 14:43:17
// global storage define
uint64_t global0 = 0x200000000; // storage size: 32768 B
uint64_t global1 = 0x200008000; // storage size: 8192 B
// weight storage define
uint64_t weight0 = 0x20000a000; // storage size: 16384 B
uint64_t weight1 = 0x20000e000; // storage size: 18432 B
uint64_t weight2 = 0x200012800; // storage size: 16384 B
uint64_t weight3 = 0x200016800; // storage size: 16384 B
uint64_t weight4 = 0x20001a800; // storage size: 54784 B
uint64_t weight5 = 0x200027e00; // storage size: 54784 B
uint64_t weight6 = 0x200035400; // storage size: 16384 B
uint64_t weight7 = 0x200039400; // storage size: 16384 B
uint64_t weight8 = 0x20003d400; // storage size: 18432 B
uint64_t weight9 = 0x200041c00; // storage size: 16384 B
uint64_t weight10 = 0x200045c00; // storage size: 16384 B
uint64_t weight11 = 0x200049c00; // storage size: 54784 B
uint64_t weight12 = 0x200057200; // storage size: 54784 B
uint64_t weight13 = 0x200064800; // storage size: 16384 B
uint64_t weight14 = 0x200068800; // storage size: 16384 B
uint64_t weight15 = 0x20006c800; // storage size: 18432 B
uint64_t weight16 = 0x200071000; // storage size: 16384 B
uint64_t weight17 = 0x200075000; // storage size: 16384 B
uint64_t weight18 = 0x200079000; // storage size: 54784 B
uint64_t weight19 = 0x200086600; // storage size: 54784 B
uint64_t weight20 = 0x200093c00; // storage size: 16384 B
uint64_t weight21 = 0x200097c00; // storage size: 16384 B
uint64_t weight22 = 0x20009bc00; // storage size: 18432 B
uint64_t weight23 = 0x2000a0400; // storage size: 16384 B
uint64_t weight24 = 0x2000a4400; // storage size: 16384 B
uint64_t weight25 = 0x2000a8400; // storage size: 54784 B
uint64_t weight26 = 0x2000b5a00; // storage size: 54784 B
uint64_t weight27 = 0x2000c3000; // storage size: 16384 B
uint64_t weight28 = 0x2000c7000; // storage size: 16384 B
uint64_t weight29 = 0x2000cb000; // storage size: 18432 B
uint64_t weight30 = 0x2000cf800; // storage size: 16384 B
uint64_t weight31 = 0x2000d3800; // storage size: 16384 B
uint64_t weight32 = 0x2000d7800; // storage size: 54784 B
uint64_t weight33 = 0x2000e4e00; // storage size: 54784 B
uint64_t weight34 = 0x2000f2400; // storage size: 16384 B
uint64_t weight35 = 0x2000f6400; // storage size: 16384 B
uint64_t weight36 = 0x2000fa400; // storage size: 18432 B
uint64_t weight37 = 0x2000fec00; // storage size: 16384 B
uint64_t weight38 = 0x200102c00; // storage size: 16384 B
uint64_t weight39 = 0x200106c00; // storage size: 54784 B
uint64_t weight40 = 0x200114200; // storage size: 54784 B
uint64_t weight41 = 0x200121800; // storage size: 16384 B
uint64_t weight42 = 0x200125800; // storage size: 16384 B
uint64_t weight43 = 0x200129800; // storage size: 18432 B
uint64_t weight44 = 0x20012e000; // storage size: 16384 B
uint64_t weight45 = 0x200132000; // storage size: 16384 B
uint64_t weight46 = 0x200136000; // storage size: 54784 B
uint64_t weight47 = 0x200143600; // storage size: 54784 B
uint64_t weight48 = 0x200150c00; // storage size: 16384 B
uint64_t weight49 = 0x200154c00; // storage size: 16384 B
uint64_t weight50 = 0x200158c00; // storage size: 18432 B
uint64_t weight51 = 0x20015d400; // storage size: 16384 B
uint64_t weight52 = 0x200161400; // storage size: 16384 B
uint64_t weight53 = 0x200165400; // storage size: 54784 B
uint64_t weight54 = 0x200172a00; // storage size: 54784 B
uint64_t weight55 = 0x200180000; // storage size: 16384 B
uint64_t weight56 = 0x200184000; // storage size: 16384 B
uint64_t weight57 = 0x200188000; // storage size: 18432 B
uint64_t weight58 = 0x20018c800; // storage size: 16384 B
uint64_t weight59 = 0x200190800; // storage size: 16384 B
uint64_t weight60 = 0x200194800; // storage size: 54784 B
uint64_t weight61 = 0x2001a1e00; // storage size: 54784 B
uint64_t weight62 = 0x2001af400; // storage size: 16384 B
uint64_t weight63 = 0x2001b3400; // storage size: 16384 B
uint64_t weight64 = 0x2001b7400; // storage size: 18432 B
uint64_t weight65 = 0x2001bbc00; // storage size: 16384 B
uint64_t weight66 = 0x2001bfc00; // storage size: 16384 B
uint64_t weight67 = 0x2001c3c00; // storage size: 54784 B
uint64_t weight68 = 0x2001d1200; // storage size: 54784 B
uint64_t weight69 = 0x2001de800; // storage size: 16384 B
uint64_t weight70 = 0x2001e2800; // storage size: 16384 B
uint64_t weight71 = 0x2001e6800; // storage size: 18432 B
uint64_t weight72 = 0x2001eb000; // storage size: 16384 B
uint64_t weight73 = 0x2001ef000; // storage size: 16384 B
uint64_t weight74 = 0x2001f3000; // storage size: 54784 B
uint64_t weight75 = 0x200200600; // storage size: 54784 B
uint64_t weight76 = 0x20020dc00; // storage size: 16384 B
uint64_t weight77 = 0x200211c00; // storage size: 16384 B
uint64_t weight78 = 0x200215c00; // storage size: 18432 B
uint64_t weight79 = 0x20021a400; // storage size: 16384 B
uint64_t weight80 = 0x20021e400; // storage size: 16384 B
uint64_t weight81 = 0x200222400; // storage size: 54784 B
uint64_t weight82 = 0x20022fa00; // storage size: 54784 B
uint64_t weight83 = 0x20023d000; // storage size: 16384 B
uint64_t weight84 = 0x200241000; // storage size: 16384 B
uint64_t weight85 = 0x200245000; // storage size: 18432 B
uint64_t weight86 = 0x200249800; // storage size: 16384 B
uint64_t weight87 = 0x20024d800; // storage size: 16384 B
uint64_t weight88 = 0x200251800; // storage size: 54784 B
uint64_t weight89 = 0x20025ee00; // storage size: 54784 B
uint64_t weight90 = 0x20026c400; // storage size: 16384 B
uint64_t weight91 = 0x200270400; // storage size: 16384 B
uint64_t weight92 = 0x200274400; // storage size: 18432 B
uint64_t weight93 = 0x200278c00; // storage size: 16384 B
uint64_t weight94 = 0x20027cc00; // storage size: 16384 B
uint64_t weight95 = 0x200280c00; // storage size: 54784 B
uint64_t weight96 = 0x20028e200; // storage size: 54784 B
uint64_t weight97 = 0x20029b800; // storage size: 16384 B
uint64_t weight98 = 0x20029f800; // storage size: 16384 B
uint64_t weight99 = 0x2002a3800; // storage size: 18432 B
uint64_t weight100 = 0x2002a8000; // storage size: 16384 B
uint64_t weight101 = 0x2002ac000; // storage size: 16384 B
uint64_t weight102 = 0x2002b0000; // storage size: 54784 B
uint64_t weight103 = 0x2002bd600; // storage size: 54784 B
uint64_t weight104 = 0x2002cac00; // storage size: 16384 B
uint64_t weight105 = 0x2002cec00; // storage size: 16384 B
uint64_t weight106 = 0x2002d2c00; // storage size: 18432 B
uint64_t weight107 = 0x2002d7400; // storage size: 16384 B
uint64_t weight108 = 0x2002db400; // storage size: 16384 B
uint64_t weight109 = 0x2002df400; // storage size: 54784 B
uint64_t weight110 = 0x2002eca00; // storage size: 54784 B
uint64_t weight111 = 0x2002fa000; // storage size: 16384 B
uint64_t weight112 = 0x2002fe000; // storage size: 16384 B
uint64_t weight113 = 0x200302000; // storage size: 18432 B
uint64_t weight114 = 0x200306800; // storage size: 16384 B
uint64_t weight115 = 0x20030a800; // storage size: 16384 B
uint64_t weight116 = 0x20030e800; // storage size: 54784 B
uint64_t weight117 = 0x20031be00; // storage size: 54784 B
uint64_t weight118 = 0x200329400; // storage size: 16384 B
uint64_t weight119 = 0x20032d400; // storage size: 16384 B
uint64_t weight120 = 0x200331400; // storage size: 18432 B
uint64_t weight121 = 0x200335c00; // storage size: 16384 B
uint64_t weight122 = 0x200339c00; // storage size: 16384 B
uint64_t weight123 = 0x20033dc00; // storage size: 54784 B
uint64_t weight124 = 0x20034b200; // storage size: 54784 B
uint64_t weight125 = 0x200358800; // storage size: 16384 B
uint64_t weight126 = 0x20035c800; // storage size: 16384 B
uint64_t weight127 = 0x200360800; // storage size: 18432 B
uint64_t weight128 = 0x200365000; // storage size: 16384 B
uint64_t weight129 = 0x200369000; // storage size: 16384 B
uint64_t weight130 = 0x20036d000; // storage size: 54784 B
uint64_t weight131 = 0x20037a600; // storage size: 54784 B
uint64_t weight132 = 0x200387c00; // storage size: 16384 B
uint64_t weight133 = 0x20038bc00; // storage size: 16384 B
uint64_t weight134 = 0x20038fc00; // storage size: 18432 B
uint64_t weight135 = 0x200394400; // storage size: 16384 B
uint64_t weight136 = 0x200398400; // storage size: 16384 B
uint64_t weight137 = 0x20039c400; // storage size: 54784 B
uint64_t weight138 = 0x2003a9a00; // storage size: 54784 B
uint64_t weight139 = 0x2003b7000; // storage size: 16384 B
uint64_t weight140 = 0x2003bb000; // storage size: 16384 B
uint64_t weight141 = 0x2003bf000; // storage size: 18432 B
uint64_t weight142 = 0x2003c3800; // storage size: 16384 B
uint64_t weight143 = 0x2003c7800; // storage size: 16384 B
uint64_t weight144 = 0x2003cb800; // storage size: 54784 B
uint64_t weight145 = 0x2003d8e00; // storage size: 54784 B
uint64_t weight146 = 0x2003e6400; // storage size: 16384 B
uint64_t weight147 = 0x2003ea400; // storage size: 16384 B
uint64_t weight148 = 0x2003ee400; // storage size: 18432 B
uint64_t weight149 = 0x2003f2c00; // storage size: 16384 B
uint64_t weight150 = 0x2003f6c00; // storage size: 16384 B
uint64_t weight151 = 0x2003fac00; // storage size: 54784 B
uint64_t weight152 = 0x200408200; // storage size: 54784 B
uint64_t weight153 = 0x200415800; // storage size: 16384 B
uint64_t weight154 = 0x200419800; // storage size: 16384 B
uint64_t weight155 = 0x20041d800; // storage size: 18432 B
uint64_t weight156 = 0x200422000; // storage size: 16384 B
uint64_t weight157 = 0x200426000; // storage size: 16384 B
uint64_t weight158 = 0x20042a000; // storage size: 54784 B
uint64_t weight159 = 0x200437600; // storage size: 54784 B
uint64_t weight160 = 0x200444c00; // storage size: 16384 B
uint64_t weight161 = 0x200448c00; // storage size: 16384 B
uint64_t weight162 = 0x20044cc00; // storage size: 18432 B
uint64_t weight163 = 0x200451400; // storage size: 16384 B
uint64_t weight164 = 0x200455400; // storage size: 16384 B
uint64_t weight165 = 0x200459400; // storage size: 54784 B
uint64_t weight166 = 0x200466a00; // storage size: 54784 B
uint64_t weight167 = 0x200474000; // storage size: 16384 B
uint64_t weight168 = 0x200478000; // storage size: 16384 B
uint64_t weight169 = 0x20047c000; // storage size: 18432 B
uint64_t weight170 = 0x200480800; // storage size: 16384 B
uint64_t weight171 = 0x200484800; // storage size: 16384 B
uint64_t weight172 = 0x200488800; // storage size: 54784 B
uint64_t weight173 = 0x200495e00; // storage size: 54784 B
uint64_t weight174 = 0x2004a3400; // storage size: 16384 B
uint64_t weight175 = 0x2004a7400; // storage size: 16384 B
uint64_t weight176 = 0x2004ab400; // storage size: 18432 B
uint64_t weight177 = 0x2004afc00; // storage size: 16384 B
uint64_t weight178 = 0x2004b3c00; // storage size: 16384 B
uint64_t weight179 = 0x2004b7c00; // storage size: 54784 B
uint64_t weight180 = 0x2004c5200; // storage size: 54784 B
uint64_t weight181 = 0x2004d2800; // storage size: 16384 B
uint64_t weight182 = 0x2004d6800; // storage size: 16384 B
uint64_t weight183 = 0x2004da800; // storage size: 18432 B
uint64_t weight184 = 0x2004df000; // storage size: 16384 B
uint64_t weight185 = 0x2004e3000; // storage size: 16384 B
uint64_t weight186 = 0x2004e7000; // storage size: 54784 B
uint64_t weight187 = 0x2004f4600; // storage size: 54784 B
uint64_t weight188 = 0x200501c00; // storage size: 16384 B
uint64_t weight189 = 0x200505c00; // storage size: 16384 B
uint64_t weight190 = 0x200509c00; // storage size: 18432 B
uint64_t weight191 = 0x20050e400; // storage size: 16384 B
uint64_t weight192 = 0x200512400; // storage size: 16384 B
uint64_t weight193 = 0x200516400; // storage size: 54784 B
uint64_t weight194 = 0x200523a00; // storage size: 54784 B
uint64_t weight195 = 0x200531000; // storage size: 16384 B
uint64_t weight196 = 0x200535000; // storage size: 16384 B
uint64_t weight197 = 0x200539000; // storage size: 260096 B
// cache storage define
uint64_t cache0 = 0x200578800; // storage size: 9437184 B
uint64_t cache1 = 0x200e78800; // storage size: 8912896 B
uint64_t cache2 = 0x2016f8800; // storage size: 8388608 B
uint64_t cache3 = 0x201ef8800; // storage size: 8388608 B
uint64_t cache4 = 0x2026f8800; // storage size: 9437184 B
uint64_t cache5 = 0x202ff8800; // storage size: 8912896 B
uint64_t cache6 = 0x203878800; // storage size: 8388608 B
uint64_t cache7 = 0x204078800; // storage size: 8388608 B
uint64_t cache8 = 0x204878800; // storage size: 9437184 B
uint64_t cache9 = 0x205178800; // storage size: 8912896 B
uint64_t cache10 = 0x2059f8800; // storage size: 8388608 B
uint64_t cache11 = 0x2061f8800; // storage size: 8388608 B
uint64_t cache12 = 0x2069f8800; // storage size: 9437184 B
uint64_t cache13 = 0x2072f8800; // storage size: 8912896 B
uint64_t cache14 = 0x207b78800; // storage size: 8388608 B
uint64_t cache15 = 0x208378800; // storage size: 8388608 B
uint64_t cache16 = 0x208b78800; // storage size: 9437184 B
uint64_t cache17 = 0x209478800; // storage size: 8912896 B
uint64_t cache18 = 0x209cf8800; // storage size: 8388608 B
uint64_t cache19 = 0x20a4f8800; // storage size: 8388608 B
uint64_t cache20 = 0x20acf8800; // storage size: 9437184 B
uint64_t cache21 = 0x20b5f8800; // storage size: 8912896 B
uint64_t cache22 = 0x20be78800; // storage size: 8388608 B
uint64_t cache23 = 0x20c678800; // storage size: 8388608 B
uint64_t cache24 = 0x20ce78800; // storage size: 9437184 B
uint64_t cache25 = 0x20d778800; // storage size: 8912896 B
uint64_t cache26 = 0x20dff8800; // storage size: 8388608 B
uint64_t cache27 = 0x20e7f8800; // storage size: 8388608 B
uint64_t cache28 = 0x20eff8800; // storage size: 9437184 B
uint64_t cache29 = 0x20f8f8800; // storage size: 8912896 B
uint64_t cache30 = 0x210178800; // storage size: 8388608 B
uint64_t cache31 = 0x210978800; // storage size: 8388608 B
uint64_t cache32 = 0x211178800; // storage size: 9437184 B
uint64_t cache33 = 0x211a78800; // storage size: 8912896 B
uint64_t cache34 = 0x2122f8800; // storage size: 8388608 B
uint64_t cache35 = 0x212af8800; // storage size: 8388608 B
uint64_t cache36 = 0x2132f8800; // storage size: 9437184 B
uint64_t cache37 = 0x213bf8800; // storage size: 8912896 B
uint64_t cache38 = 0x214478800; // storage size: 8388608 B
uint64_t cache39 = 0x214c78800; // storage size: 8388608 B
uint64_t cache40 = 0x215478800; // storage size: 9437184 B
uint64_t cache41 = 0x215d78800; // storage size: 8912896 B
uint64_t cache42 = 0x2165f8800; // storage size: 8388608 B
uint64_t cache43 = 0x216df8800; // storage size: 8388608 B
uint64_t cache44 = 0x2175f8800; // storage size: 9437184 B
uint64_t cache45 = 0x217ef8800; // storage size: 8912896 B
uint64_t cache46 = 0x218778800; // storage size: 8388608 B
uint64_t cache47 = 0x218f78800; // storage size: 8388608 B
uint64_t cache48 = 0x219778800; // storage size: 9437184 B
uint64_t cache49 = 0x21a078800; // storage size: 8912896 B
uint64_t cache50 = 0x21a8f8800; // storage size: 8388608 B
uint64_t cache51 = 0x21b0f8800; // storage size: 8388608 B
uint64_t cache52 = 0x21b8f8800; // storage size: 9437184 B
uint64_t cache53 = 0x21c1f8800; // storage size: 8912896 B
uint64_t cache54 = 0x21ca78800; // storage size: 8388608 B
uint64_t cache55 = 0x21d278800; // storage size: 8388608 B
uint64_t cache56 = 0x21da78800; // storage size: 9437184 B
uint64_t cache57 = 0x21e378800; // storage size: 8912896 B
uint64_t cache58 = 0x21ebf8800; // storage size: 8388608 B
uint64_t cache59 = 0x21f3f8800; // storage size: 8388608 B
uint64_t cache60 = 0x21fbf8800; // storage size: 9437184 B
uint64_t cache61 = 0x2204f8800; // storage size: 8912896 B
uint64_t cache62 = 0x220d78800; // storage size: 8388608 B
uint64_t cache63 = 0x221578800; // storage size: 8388608 B
uint64_t cache64 = 0x221d78800; // storage size: 9437184 B
uint64_t cache65 = 0x222678800; // storage size: 8912896 B
uint64_t cache66 = 0x222ef8800; // storage size: 8388608 B
uint64_t cache67 = 0x2236f8800; // storage size: 8388608 B
uint64_t cache68 = 0x223ef8800; // storage size: 9437184 B
uint64_t cache69 = 0x2247f8800; // storage size: 8912896 B
uint64_t cache70 = 0x225078800; // storage size: 8388608 B
uint64_t cache71 = 0x225878800; // storage size: 8388608 B
uint64_t cache72 = 0x226078800; // storage size: 9437184 B
uint64_t cache73 = 0x226978800; // storage size: 8912896 B
uint64_t cache74 = 0x2271f8800; // storage size: 8388608 B
uint64_t cache75 = 0x2279f8800; // storage size: 8388608 B
uint64_t cache76 = 0x2281f8800; // storage size: 9437184 B
uint64_t cache77 = 0x228af8800; // storage size: 8912896 B
uint64_t cache78 = 0x229378800; // storage size: 8388608 B
uint64_t cache79 = 0x229b78800; // storage size: 8388608 B
uint64_t cache80 = 0x22a378800; // storage size: 9437184 B
uint64_t cache81 = 0x22ac78800; // storage size: 8912896 B
uint64_t cache82 = 0x22b4f8800; // storage size: 8388608 B
uint64_t cache83 = 0x22bcf8800; // storage size: 8388608 B
uint64_t cache84 = 0x22c4f8800; // storage size: 9437184 B
uint64_t cache85 = 0x22cdf8800; // storage size: 8912896 B
uint64_t cache86 = 0x22d678800; // storage size: 8388608 B
uint64_t cache87 = 0x22de78800; // storage size: 8388608 B
uint64_t cache88 = 0x22e678800; // storage size: 9437184 B
uint64_t cache89 = 0x22ef78800; // storage size: 8912896 B
uint64_t cache90 = 0x22f7f8800; // storage size: 8388608 B
uint64_t cache91 = 0x22fff8800; // storage size: 8388608 B
uint64_t cache92 = 0x2307f8800; // storage size: 9437184 B
uint64_t cache93 = 0x2310f8800; // storage size: 8912896 B
uint64_t cache94 = 0x231978800; // storage size: 8388608 B
uint64_t cache95 = 0x232178800; // storage size: 8388608 B
uint64_t cache96 = 0x232978800; // storage size: 9437184 B
uint64_t cache97 = 0x233278800; // storage size: 8912896 B
uint64_t cache98 = 0x233af8800; // storage size: 8388608 B
uint64_t cache99 = 0x2342f8800; // storage size: 8388608 B
uint64_t cache100 = 0x234af8800; // storage size: 9437184 B
uint64_t cache101 = 0x2353f8800; // storage size: 8912896 B
uint64_t cache102 = 0x235c78800; // storage size: 8388608 B
uint64_t cache103 = 0x236478800; // storage size: 8388608 B
uint64_t cache104 = 0x236c78800; // storage size: 9437184 B
uint64_t cache105 = 0x237578800; // storage size: 8912896 B
uint64_t cache106 = 0x237df8800; // storage size: 8388608 B
uint64_t cache107 = 0x2385f8800; // storage size: 8388608 B
uint64_t cache108 = 0x238df8800; // storage size: 9437184 B
uint64_t cache109 = 0x2396f8800; // storage size: 8912896 B
uint64_t cache110 = 0x239f78800; // storage size: 8388608 B
uint64_t cache111 = 0x23a778800; // storage size: 8388608 B
// runtime storage define
uint64_t runtime0 = 0x23af78800; // storage size: 8388608 B
uint64_t runtime1 = 0x23b778800; // storage size: 28049408 B
uint64_t runtime2 = 0x23d238800; // storage size: 133169152 B
uint64_t runtime3 = 0x245138800; // storage size: 133169152 B
// hbm storage define
uint64_t hbm0 = 0x000000000; // storage size: 304128 B
uint64_t hbm1 = 0x00004a400; // storage size: 270336 B
uint64_t hbm2 = 0x00008c400; // storage size: 903936 B
uint64_t hbm3 = 0x000168f00; // storage size: 903936 B
uint64_t hbm4 = 0x000245a00; // storage size: 905216 B
uint64_t hbm5 = 0x000322a00; // storage size: 304128 B
uint64_t hbm6 = 0x00036ce00; // storage size: 270336 B
uint64_t hbm7 = 0x0003aee00; // storage size: 903936 B
uint64_t hbm8 = 0x00048b900; // storage size: 903936 B
uint64_t hbm9 = 0x000568400; // storage size: 905216 B
uint64_t hbm10 = 0x000645400; // storage size: 304128 B
uint64_t hbm11 = 0x00068f800; // storage size: 270336 B
uint64_t hbm12 = 0x0006d1800; // storage size: 903936 B
uint64_t hbm13 = 0x0007ae300; // storage size: 903936 B
uint64_t hbm14 = 0x00088ae00; // storage size: 905216 B
uint64_t hbm15 = 0x000967e00; // storage size: 304128 B
uint64_t hbm16 = 0x0009b2200; // storage size: 270336 B
uint64_t hbm17 = 0x0009f4200; // storage size: 903936 B
uint64_t hbm18 = 0x000ad0d00; // storage size: 903936 B
uint64_t hbm19 = 0x000bad800; // storage size: 905216 B
uint64_t hbm20 = 0x000c8a800; // storage size: 304128 B
uint64_t hbm21 = 0x000cd4c00; // storage size: 270336 B
uint64_t hbm22 = 0x000d16c00; // storage size: 903936 B
uint64_t hbm23 = 0x000df3700; // storage size: 903936 B
uint64_t hbm24 = 0x000ed0200; // storage size: 905216 B
uint64_t hbm25 = 0x000fad200; // storage size: 304128 B
uint64_t hbm26 = 0x000ff7600; // storage size: 270336 B
uint64_t hbm27 = 0x001039600; // storage size: 903936 B
uint64_t hbm28 = 0x001116100; // storage size: 903936 B
uint64_t hbm29 = 0x0011f2c00; // storage size: 905216 B
uint64_t hbm30 = 0x0012cfc00; // storage size: 304128 B
uint64_t hbm31 = 0x00131a000; // storage size: 270336 B
uint64_t hbm32 = 0x00135c000; // storage size: 903936 B
uint64_t hbm33 = 0x001438b00; // storage size: 903936 B
uint64_t hbm34 = 0x001515600; // storage size: 905216 B
uint64_t hbm35 = 0x0015f2600; // storage size: 304128 B
uint64_t hbm36 = 0x00163ca00; // storage size: 270336 B
uint64_t hbm37 = 0x00167ea00; // storage size: 903936 B
uint64_t hbm38 = 0x00175b500; // storage size: 903936 B
uint64_t hbm39 = 0x001838000; // storage size: 905216 B
uint64_t hbm40 = 0x001915000; // storage size: 304128 B
uint64_t hbm41 = 0x00195f400; // storage size: 270336 B
uint64_t hbm42 = 0x0019a1400; // storage size: 903936 B
uint64_t hbm43 = 0x001a7df00; // storage size: 903936 B
uint64_t hbm44 = 0x001b5aa00; // storage size: 905216 B
uint64_t hbm45 = 0x001c37a00; // storage size: 304128 B
uint64_t hbm46 = 0x001c81e00; // storage size: 270336 B
uint64_t hbm47 = 0x001cc3e00; // storage size: 903936 B
uint64_t hbm48 = 0x001da0900; // storage size: 903936 B
uint64_t hbm49 = 0x001e7d400; // storage size: 905216 B
uint64_t hbm50 = 0x001f5a400; // storage size: 304128 B
uint64_t hbm51 = 0x001fa4800; // storage size: 270336 B
uint64_t hbm52 = 0x001fe6800; // storage size: 903936 B
uint64_t hbm53 = 0x0020c3300; // storage size: 903936 B
uint64_t hbm54 = 0x00219fe00; // storage size: 905216 B
uint64_t hbm55 = 0x00227ce00; // storage size: 304128 B
uint64_t hbm56 = 0x0022c7200; // storage size: 270336 B
uint64_t hbm57 = 0x002309200; // storage size: 903936 B
uint64_t hbm58 = 0x0023e5d00; // storage size: 903936 B
uint64_t hbm59 = 0x0024c2800; // storage size: 905216 B
uint64_t hbm60 = 0x00259f800; // storage size: 304128 B
uint64_t hbm61 = 0x0025e9c00; // storage size: 270336 B
uint64_t hbm62 = 0x00262bc00; // storage size: 903936 B
uint64_t hbm63 = 0x002708700; // storage size: 903936 B
uint64_t hbm64 = 0x0027e5200; // storage size: 905216 B
uint64_t hbm65 = 0x0028c2200; // storage size: 304128 B
uint64_t hbm66 = 0x00290c600; // storage size: 270336 B
uint64_t hbm67 = 0x00294e600; // storage size: 903936 B
uint64_t hbm68 = 0x002a2b100; // storage size: 903936 B
uint64_t hbm69 = 0x002b07c00; // storage size: 905216 B
uint64_t hbm70 = 0x002be4c00; // storage size: 304128 B
uint64_t hbm71 = 0x002c2f000; // storage size: 270336 B
uint64_t hbm72 = 0x002c71000; // storage size: 903936 B
uint64_t hbm73 = 0x002d4db00; // storage size: 903936 B
uint64_t hbm74 = 0x002e2a600; // storage size: 905216 B
uint64_t hbm75 = 0x002f07600; // storage size: 304128 B
uint64_t hbm76 = 0x002f51a00; // storage size: 270336 B
uint64_t hbm77 = 0x002f93a00; // storage size: 903936 B
uint64_t hbm78 = 0x003070500; // storage size: 903936 B
uint64_t hbm79 = 0x00314d000; // storage size: 905216 B
uint64_t hbm80 = 0x00322a000; // storage size: 304128 B
uint64_t hbm81 = 0x003274400; // storage size: 270336 B
uint64_t hbm82 = 0x0032b6400; // storage size: 903936 B
uint64_t hbm83 = 0x003392f00; // storage size: 903936 B
uint64_t hbm84 = 0x00346fa00; // storage size: 905216 B
uint64_t hbm85 = 0x00354ca00; // storage size: 304128 B
uint64_t hbm86 = 0x003596e00; // storage size: 270336 B
uint64_t hbm87 = 0x0035d8e00; // storage size: 903936 B
uint64_t hbm88 = 0x0036b5900; // storage size: 903936 B
uint64_t hbm89 = 0x003792400; // storage size: 905216 B
uint64_t hbm90 = 0x00386f400; // storage size: 304128 B
uint64_t hbm91 = 0x0038b9800; // storage size: 270336 B
uint64_t hbm92 = 0x0038fb800; // storage size: 903936 B
uint64_t hbm93 = 0x0039d8300; // storage size: 903936 B
uint64_t hbm94 = 0x003ab4e00; // storage size: 905216 B
uint64_t hbm95 = 0x003b91e00; // storage size: 304128 B
uint64_t hbm96 = 0x003bdc200; // storage size: 270336 B
uint64_t hbm97 = 0x003c1e200; // storage size: 903936 B
uint64_t hbm98 = 0x003cfad00; // storage size: 903936 B
uint64_t hbm99 = 0x003dd7800; // storage size: 905216 B
uint64_t hbm100 = 0x003eb4800; // storage size: 304128 B
uint64_t hbm101 = 0x003efec00; // storage size: 270336 B
uint64_t hbm102 = 0x003f40c00; // storage size: 903936 B
uint64_t hbm103 = 0x00401d700; // storage size: 903936 B
uint64_t hbm104 = 0x0040fa200; // storage size: 905216 B
uint64_t hbm105 = 0x0041d7200; // storage size: 304128 B
uint64_t hbm106 = 0x004221600; // storage size: 270336 B
uint64_t hbm107 = 0x004263600; // storage size: 903936 B
uint64_t hbm108 = 0x004340100; // storage size: 903936 B
uint64_t hbm109 = 0x00441cc00; // storage size: 905216 B
uint64_t hbm110 = 0x0044f9c00; // storage size: 304128 B
uint64_t hbm111 = 0x004544000; // storage size: 270336 B
uint64_t hbm112 = 0x004586000; // storage size: 903936 B
uint64_t hbm113 = 0x004662b00; // storage size: 903936 B
uint64_t hbm114 = 0x00473f600; // storage size: 905216 B
uint64_t hbm115 = 0x00481c600; // storage size: 304128 B
uint64_t hbm116 = 0x004866a00; // storage size: 270336 B
uint64_t hbm117 = 0x0048a8a00; // storage size: 903936 B
uint64_t hbm118 = 0x004985500; // storage size: 903936 B
uint64_t hbm119 = 0x004a62000; // storage size: 905216 B
uint64_t hbm120 = 0x004b3f000; // storage size: 304128 B
uint64_t hbm121 = 0x004b89400; // storage size: 270336 B
uint64_t hbm122 = 0x004bcb400; // storage size: 903936 B
uint64_t hbm123 = 0x004ca7f00; // storage size: 903936 B
uint64_t hbm124 = 0x004d84a00; // storage size: 905216 B
uint64_t hbm125 = 0x004e61a00; // storage size: 304128 B
uint64_t hbm126 = 0x004eabe00; // storage size: 270336 B
uint64_t hbm127 = 0x004eede00; // storage size: 903936 B
uint64_t hbm128 = 0x004fca900; // storage size: 903936 B
uint64_t hbm129 = 0x0050a7400; // storage size: 905216 B
uint64_t hbm130 = 0x005184400; // storage size: 304128 B
uint64_t hbm131 = 0x0051ce800; // storage size: 270336 B
uint64_t hbm132 = 0x005210800; // storage size: 903936 B
uint64_t hbm133 = 0x0052ed300; // storage size: 903936 B
uint64_t hbm134 = 0x0053c9e00; // storage size: 905216 B
uint64_t hbm135 = 0x0054a6e00; // storage size: 304128 B
uint64_t hbm136 = 0x0054f1200; // storage size: 270336 B
uint64_t hbm137 = 0x005533200; // storage size: 903936 B
uint64_t hbm138 = 0x00560fd00; // storage size: 903936 B
uint64_t hbm139 = 0x0056ec800; // storage size: 905216 B
uint64_t hbm140 = 0x0057c9800; // storage size: 4291584 B

// get input ptr
uint64_t data_in = 0x23af78800; // 989300736

// get output ptr
uint64_t data_out = 0x23d238800; // 1025738752

// get weight ddr ptr
uint64_t BLOCK00_ln_k_bias = 0x20000a000; // 40960
uint64_t BLOCK00_qkv_bn_bias = 0x20000e000; // 57344
uint64_t pos_emb = 0x200000000; // 0
uint64_t BLOCK00_atten_bn = 0x200012800; // 75776
uint64_t BLOCK00_post_k_bias = 0x200016800; // 92160
uint64_t BLOCK00_h_to_4h_bn_1 = 0x20001a800; // 108544
uint64_t BLOCK00_h_to_4h_bn_0 = 0x200027e00; // 163328
uint64_t silu_act = 0x200008000; // 32768
uint64_t BLOCK00_dense_4h_to_h_bn = 0x200035400; // 218112
uint64_t BLOCK01_ln_k_bias = 0x200039400; // 234496
uint64_t BLOCK01_qkv_bn_bias = 0x20003d400; // 250880
uint64_t BLOCK01_atten_bn = 0x200041c00; // 269312
uint64_t BLOCK01_post_k_bias = 0x200045c00; // 285696
uint64_t BLOCK01_h_to_4h_bn_1 = 0x200049c00; // 302080
uint64_t BLOCK01_h_to_4h_bn_0 = 0x200057200; // 356864
uint64_t BLOCK01_dense_4h_to_h_bn = 0x200064800; // 411648
uint64_t BLOCK02_ln_k_bias = 0x200068800; // 428032
uint64_t BLOCK02_qkv_bn_bias = 0x20006c800; // 444416
uint64_t BLOCK02_atten_bn = 0x200071000; // 462848
uint64_t BLOCK02_post_k_bias = 0x200075000; // 479232
uint64_t BLOCK02_h_to_4h_bn_1 = 0x200079000; // 495616
uint64_t BLOCK02_h_to_4h_bn_0 = 0x200086600; // 550400
uint64_t BLOCK02_dense_4h_to_h_bn = 0x200093c00; // 605184
uint64_t BLOCK03_ln_k_bias = 0x200097c00; // 621568
uint64_t BLOCK03_qkv_bn_bias = 0x20009bc00; // 637952
uint64_t BLOCK03_atten_bn = 0x2000a0400; // 656384
uint64_t BLOCK03_post_k_bias = 0x2000a4400; // 672768
uint64_t BLOCK03_h_to_4h_bn_1 = 0x2000a8400; // 689152
uint64_t BLOCK03_h_to_4h_bn_0 = 0x2000b5a00; // 743936
uint64_t BLOCK03_dense_4h_to_h_bn = 0x2000c3000; // 798720
uint64_t BLOCK04_ln_k_bias = 0x2000c7000; // 815104
uint64_t BLOCK04_qkv_bn_bias = 0x2000cb000; // 831488
uint64_t BLOCK04_atten_bn = 0x2000cf800; // 849920
uint64_t BLOCK04_post_k_bias = 0x2000d3800; // 866304
uint64_t BLOCK04_h_to_4h_bn_1 = 0x2000d7800; // 882688
uint64_t BLOCK04_h_to_4h_bn_0 = 0x2000e4e00; // 937472
uint64_t BLOCK04_dense_4h_to_h_bn = 0x2000f2400; // 992256
uint64_t BLOCK05_ln_k_bias = 0x2000f6400; // 1008640
uint64_t BLOCK05_qkv_bn_bias = 0x2000fa400; // 1025024
uint64_t BLOCK05_atten_bn = 0x2000fec00; // 1043456
uint64_t BLOCK05_post_k_bias = 0x200102c00; // 1059840
uint64_t BLOCK05_h_to_4h_bn_1 = 0x200106c00; // 1076224
uint64_t BLOCK05_h_to_4h_bn_0 = 0x200114200; // 1131008
uint64_t BLOCK05_dense_4h_to_h_bn = 0x200121800; // 1185792
uint64_t BLOCK06_ln_k_bias = 0x200125800; // 1202176
uint64_t BLOCK06_qkv_bn_bias = 0x200129800; // 1218560
uint64_t BLOCK06_atten_bn = 0x20012e000; // 1236992
uint64_t BLOCK06_post_k_bias = 0x200132000; // 1253376
uint64_t BLOCK06_h_to_4h_bn_1 = 0x200136000; // 1269760
uint64_t BLOCK06_h_to_4h_bn_0 = 0x200143600; // 1324544
uint64_t BLOCK06_dense_4h_to_h_bn = 0x200150c00; // 1379328
uint64_t BLOCK07_ln_k_bias = 0x200154c00; // 1395712
uint64_t BLOCK07_qkv_bn_bias = 0x200158c00; // 1412096
uint64_t BLOCK07_atten_bn = 0x20015d400; // 1430528
uint64_t BLOCK07_post_k_bias = 0x200161400; // 1446912
uint64_t BLOCK07_h_to_4h_bn_1 = 0x200165400; // 1463296
uint64_t BLOCK07_h_to_4h_bn_0 = 0x200172a00; // 1518080
uint64_t BLOCK07_dense_4h_to_h_bn = 0x200180000; // 1572864
uint64_t BLOCK08_ln_k_bias = 0x200184000; // 1589248
uint64_t BLOCK08_qkv_bn_bias = 0x200188000; // 1605632
uint64_t BLOCK08_atten_bn = 0x20018c800; // 1624064
uint64_t BLOCK08_post_k_bias = 0x200190800; // 1640448
uint64_t BLOCK08_h_to_4h_bn_1 = 0x200194800; // 1656832
uint64_t BLOCK08_h_to_4h_bn_0 = 0x2001a1e00; // 1711616
uint64_t BLOCK08_dense_4h_to_h_bn = 0x2001af400; // 1766400
uint64_t BLOCK09_ln_k_bias = 0x2001b3400; // 1782784
uint64_t BLOCK09_qkv_bn_bias = 0x2001b7400; // 1799168
uint64_t BLOCK09_atten_bn = 0x2001bbc00; // 1817600
uint64_t BLOCK09_post_k_bias = 0x2001bfc00; // 1833984
uint64_t BLOCK09_h_to_4h_bn_1 = 0x2001c3c00; // 1850368
uint64_t BLOCK09_h_to_4h_bn_0 = 0x2001d1200; // 1905152
uint64_t BLOCK09_dense_4h_to_h_bn = 0x2001de800; // 1959936
uint64_t BLOCK10_ln_k_bias = 0x2001e2800; // 1976320
uint64_t BLOCK10_qkv_bn_bias = 0x2001e6800; // 1992704
uint64_t BLOCK10_atten_bn = 0x2001eb000; // 2011136
uint64_t BLOCK10_post_k_bias = 0x2001ef000; // 2027520
uint64_t BLOCK10_h_to_4h_bn_1 = 0x2001f3000; // 2043904
uint64_t BLOCK10_h_to_4h_bn_0 = 0x200200600; // 2098688
uint64_t BLOCK10_dense_4h_to_h_bn = 0x20020dc00; // 2153472
uint64_t BLOCK11_ln_k_bias = 0x200211c00; // 2169856
uint64_t BLOCK11_qkv_bn_bias = 0x200215c00; // 2186240
uint64_t BLOCK11_atten_bn = 0x20021a400; // 2204672
uint64_t BLOCK11_post_k_bias = 0x20021e400; // 2221056
uint64_t BLOCK11_h_to_4h_bn_1 = 0x200222400; // 2237440
uint64_t BLOCK11_h_to_4h_bn_0 = 0x20022fa00; // 2292224
uint64_t BLOCK11_dense_4h_to_h_bn = 0x20023d000; // 2347008
uint64_t BLOCK12_ln_k_bias = 0x200241000; // 2363392
uint64_t BLOCK12_qkv_bn_bias = 0x200245000; // 2379776
uint64_t BLOCK12_atten_bn = 0x200249800; // 2398208
uint64_t BLOCK12_post_k_bias = 0x20024d800; // 2414592
uint64_t BLOCK12_h_to_4h_bn_1 = 0x200251800; // 2430976
uint64_t BLOCK12_h_to_4h_bn_0 = 0x20025ee00; // 2485760
uint64_t BLOCK12_dense_4h_to_h_bn = 0x20026c400; // 2540544
uint64_t BLOCK13_ln_k_bias = 0x200270400; // 2556928
uint64_t BLOCK13_qkv_bn_bias = 0x200274400; // 2573312
uint64_t BLOCK13_atten_bn = 0x200278c00; // 2591744
uint64_t BLOCK13_post_k_bias = 0x20027cc00; // 2608128
uint64_t BLOCK13_h_to_4h_bn_1 = 0x200280c00; // 2624512
uint64_t BLOCK13_h_to_4h_bn_0 = 0x20028e200; // 2679296
uint64_t BLOCK13_dense_4h_to_h_bn = 0x20029b800; // 2734080
uint64_t BLOCK14_ln_k_bias = 0x20029f800; // 2750464
uint64_t BLOCK14_qkv_bn_bias = 0x2002a3800; // 2766848
uint64_t BLOCK14_atten_bn = 0x2002a8000; // 2785280
uint64_t BLOCK14_post_k_bias = 0x2002ac000; // 2801664
uint64_t BLOCK14_h_to_4h_bn_1 = 0x2002b0000; // 2818048
uint64_t BLOCK14_h_to_4h_bn_0 = 0x2002bd600; // 2872832
uint64_t BLOCK14_dense_4h_to_h_bn = 0x2002cac00; // 2927616
uint64_t BLOCK15_ln_k_bias = 0x2002cec00; // 2944000
uint64_t BLOCK15_qkv_bn_bias = 0x2002d2c00; // 2960384
uint64_t BLOCK15_atten_bn = 0x2002d7400; // 2978816
uint64_t BLOCK15_post_k_bias = 0x2002db400; // 2995200
uint64_t BLOCK15_h_to_4h_bn_1 = 0x2002df400; // 3011584
uint64_t BLOCK15_h_to_4h_bn_0 = 0x2002eca00; // 3066368
uint64_t BLOCK15_dense_4h_to_h_bn = 0x2002fa000; // 3121152
uint64_t BLOCK16_ln_k_bias = 0x2002fe000; // 3137536
uint64_t BLOCK16_qkv_bn_bias = 0x200302000; // 3153920
uint64_t BLOCK16_atten_bn = 0x200306800; // 3172352
uint64_t BLOCK16_post_k_bias = 0x20030a800; // 3188736
uint64_t BLOCK16_h_to_4h_bn_1 = 0x20030e800; // 3205120
uint64_t BLOCK16_h_to_4h_bn_0 = 0x20031be00; // 3259904
uint64_t BLOCK16_dense_4h_to_h_bn = 0x200329400; // 3314688
uint64_t BLOCK17_ln_k_bias = 0x20032d400; // 3331072
uint64_t BLOCK17_qkv_bn_bias = 0x200331400; // 3347456
uint64_t BLOCK17_atten_bn = 0x200335c00; // 3365888
uint64_t BLOCK17_post_k_bias = 0x200339c00; // 3382272
uint64_t BLOCK17_h_to_4h_bn_1 = 0x20033dc00; // 3398656
uint64_t BLOCK17_h_to_4h_bn_0 = 0x20034b200; // 3453440
uint64_t BLOCK17_dense_4h_to_h_bn = 0x200358800; // 3508224
uint64_t BLOCK18_ln_k_bias = 0x20035c800; // 3524608
uint64_t BLOCK18_qkv_bn_bias = 0x200360800; // 3540992
uint64_t BLOCK18_atten_bn = 0x200365000; // 3559424
uint64_t BLOCK18_post_k_bias = 0x200369000; // 3575808
uint64_t BLOCK18_h_to_4h_bn_1 = 0x20036d000; // 3592192
uint64_t BLOCK18_h_to_4h_bn_0 = 0x20037a600; // 3646976
uint64_t BLOCK18_dense_4h_to_h_bn = 0x200387c00; // 3701760
uint64_t BLOCK19_ln_k_bias = 0x20038bc00; // 3718144
uint64_t BLOCK19_qkv_bn_bias = 0x20038fc00; // 3734528
uint64_t BLOCK19_atten_bn = 0x200394400; // 3752960
uint64_t BLOCK19_post_k_bias = 0x200398400; // 3769344
uint64_t BLOCK19_h_to_4h_bn_1 = 0x20039c400; // 3785728
uint64_t BLOCK19_h_to_4h_bn_0 = 0x2003a9a00; // 3840512
uint64_t BLOCK19_dense_4h_to_h_bn = 0x2003b7000; // 3895296
uint64_t BLOCK20_ln_k_bias = 0x2003bb000; // 3911680
uint64_t BLOCK20_qkv_bn_bias = 0x2003bf000; // 3928064
uint64_t BLOCK20_atten_bn = 0x2003c3800; // 3946496
uint64_t BLOCK20_post_k_bias = 0x2003c7800; // 3962880
uint64_t BLOCK20_h_to_4h_bn_1 = 0x2003cb800; // 3979264
uint64_t BLOCK20_h_to_4h_bn_0 = 0x2003d8e00; // 4034048
uint64_t BLOCK20_dense_4h_to_h_bn = 0x2003e6400; // 4088832
uint64_t BLOCK21_ln_k_bias = 0x2003ea400; // 4105216
uint64_t BLOCK21_qkv_bn_bias = 0x2003ee400; // 4121600
uint64_t BLOCK21_atten_bn = 0x2003f2c00; // 4140032
uint64_t BLOCK21_post_k_bias = 0x2003f6c00; // 4156416
uint64_t BLOCK21_h_to_4h_bn_1 = 0x2003fac00; // 4172800
uint64_t BLOCK21_h_to_4h_bn_0 = 0x200408200; // 4227584
uint64_t BLOCK21_dense_4h_to_h_bn = 0x200415800; // 4282368
uint64_t BLOCK22_ln_k_bias = 0x200419800; // 4298752
uint64_t BLOCK22_qkv_bn_bias = 0x20041d800; // 4315136
uint64_t BLOCK22_atten_bn = 0x200422000; // 4333568
uint64_t BLOCK22_post_k_bias = 0x200426000; // 4349952
uint64_t BLOCK22_h_to_4h_bn_1 = 0x20042a000; // 4366336
uint64_t BLOCK22_h_to_4h_bn_0 = 0x200437600; // 4421120
uint64_t BLOCK22_dense_4h_to_h_bn = 0x200444c00; // 4475904
uint64_t BLOCK23_ln_k_bias = 0x200448c00; // 4492288
uint64_t BLOCK23_qkv_bn_bias = 0x20044cc00; // 4508672
uint64_t BLOCK23_atten_bn = 0x200451400; // 4527104
uint64_t BLOCK23_post_k_bias = 0x200455400; // 4543488
uint64_t BLOCK23_h_to_4h_bn_1 = 0x200459400; // 4559872
uint64_t BLOCK23_h_to_4h_bn_0 = 0x200466a00; // 4614656
uint64_t BLOCK23_dense_4h_to_h_bn = 0x200474000; // 4669440
uint64_t BLOCK24_ln_k_bias = 0x200478000; // 4685824
uint64_t BLOCK24_qkv_bn_bias = 0x20047c000; // 4702208
uint64_t BLOCK24_atten_bn = 0x200480800; // 4720640
uint64_t BLOCK24_post_k_bias = 0x200484800; // 4737024
uint64_t BLOCK24_h_to_4h_bn_1 = 0x200488800; // 4753408
uint64_t BLOCK24_h_to_4h_bn_0 = 0x200495e00; // 4808192
uint64_t BLOCK24_dense_4h_to_h_bn = 0x2004a3400; // 4862976
uint64_t BLOCK25_ln_k_bias = 0x2004a7400; // 4879360
uint64_t BLOCK25_qkv_bn_bias = 0x2004ab400; // 4895744
uint64_t BLOCK25_atten_bn = 0x2004afc00; // 4914176
uint64_t BLOCK25_post_k_bias = 0x2004b3c00; // 4930560
uint64_t BLOCK25_h_to_4h_bn_1 = 0x2004b7c00; // 4946944
uint64_t BLOCK25_h_to_4h_bn_0 = 0x2004c5200; // 5001728
uint64_t BLOCK25_dense_4h_to_h_bn = 0x2004d2800; // 5056512
uint64_t BLOCK26_ln_k_bias = 0x2004d6800; // 5072896
uint64_t BLOCK26_qkv_bn_bias = 0x2004da800; // 5089280
uint64_t BLOCK26_atten_bn = 0x2004df000; // 5107712
uint64_t BLOCK26_post_k_bias = 0x2004e3000; // 5124096
uint64_t BLOCK26_h_to_4h_bn_1 = 0x2004e7000; // 5140480
uint64_t BLOCK26_h_to_4h_bn_0 = 0x2004f4600; // 5195264
uint64_t BLOCK26_dense_4h_to_h_bn = 0x200501c00; // 5250048
uint64_t BLOCK27_ln_k_bias = 0x200505c00; // 5266432
uint64_t BLOCK27_qkv_bn_bias = 0x200509c00; // 5282816
uint64_t BLOCK27_atten_bn = 0x20050e400; // 5301248
uint64_t BLOCK27_post_k_bias = 0x200512400; // 5317632
uint64_t BLOCK27_h_to_4h_bn_1 = 0x200516400; // 5334016
uint64_t BLOCK27_h_to_4h_bn_0 = 0x200523a00; // 5388800
uint64_t BLOCK27_dense_4h_to_h_bn = 0x200531000; // 5443584
uint64_t Final_LN_k_bias = 0x200535000; // 5459968
uint64_t Output_Layer_bn = 0x200539000; // 5476352

// get weight hbm ptr
uint64_t BLOCK00_qkv_weight = 0x000000000; // 0
uint64_t BLOCK00_atten_weight = 0x00004a400; // 304128
uint64_t BLOCK00_h_to_4h_wt_1 = 0x00008c400; // 574464
uint64_t BLOCK00_h_to_4h_wt_0 = 0x000168f00; // 1478400
uint64_t BLOCK00_dense_4h_to_h_wt = 0x000245a00; // 2382336
uint64_t BLOCK01_qkv_weight = 0x000322a00; // 3287552
uint64_t BLOCK01_atten_weight = 0x00036ce00; // 3591680
uint64_t BLOCK01_h_to_4h_wt_1 = 0x0003aee00; // 3862016
uint64_t BLOCK01_h_to_4h_wt_0 = 0x00048b900; // 4765952
uint64_t BLOCK01_dense_4h_to_h_wt = 0x000568400; // 5669888
uint64_t BLOCK02_qkv_weight = 0x000645400; // 6575104
uint64_t BLOCK02_atten_weight = 0x00068f800; // 6879232
uint64_t BLOCK02_h_to_4h_wt_1 = 0x0006d1800; // 7149568
uint64_t BLOCK02_h_to_4h_wt_0 = 0x0007ae300; // 8053504
uint64_t BLOCK02_dense_4h_to_h_wt = 0x00088ae00; // 8957440
uint64_t BLOCK03_qkv_weight = 0x000967e00; // 9862656
uint64_t BLOCK03_atten_weight = 0x0009b2200; // 10166784
uint64_t BLOCK03_h_to_4h_wt_1 = 0x0009f4200; // 10437120
uint64_t BLOCK03_h_to_4h_wt_0 = 0x000ad0d00; // 11341056
uint64_t BLOCK03_dense_4h_to_h_wt = 0x000bad800; // 12244992
uint64_t BLOCK04_qkv_weight = 0x000c8a800; // 13150208
uint64_t BLOCK04_atten_weight = 0x000cd4c00; // 13454336
uint64_t BLOCK04_h_to_4h_wt_1 = 0x000d16c00; // 13724672
uint64_t BLOCK04_h_to_4h_wt_0 = 0x000df3700; // 14628608
uint64_t BLOCK04_dense_4h_to_h_wt = 0x000ed0200; // 15532544
uint64_t BLOCK05_qkv_weight = 0x000fad200; // 16437760
uint64_t BLOCK05_atten_weight = 0x000ff7600; // 16741888
uint64_t BLOCK05_h_to_4h_wt_1 = 0x001039600; // 17012224
uint64_t BLOCK05_h_to_4h_wt_0 = 0x001116100; // 17916160
uint64_t BLOCK05_dense_4h_to_h_wt = 0x0011f2c00; // 18820096
uint64_t BLOCK06_qkv_weight = 0x0012cfc00; // 19725312
uint64_t BLOCK06_atten_weight = 0x00131a000; // 20029440
uint64_t BLOCK06_h_to_4h_wt_1 = 0x00135c000; // 20299776
uint64_t BLOCK06_h_to_4h_wt_0 = 0x001438b00; // 21203712
uint64_t BLOCK06_dense_4h_to_h_wt = 0x001515600; // 22107648
uint64_t BLOCK07_qkv_weight = 0x0015f2600; // 23012864
uint64_t BLOCK07_atten_weight = 0x00163ca00; // 23316992
uint64_t BLOCK07_h_to_4h_wt_1 = 0x00167ea00; // 23587328
uint64_t BLOCK07_h_to_4h_wt_0 = 0x00175b500; // 24491264
uint64_t BLOCK07_dense_4h_to_h_wt = 0x001838000; // 25395200
uint64_t BLOCK08_qkv_weight = 0x001915000; // 26300416
uint64_t BLOCK08_atten_weight = 0x00195f400; // 26604544
uint64_t BLOCK08_h_to_4h_wt_1 = 0x0019a1400; // 26874880
uint64_t BLOCK08_h_to_4h_wt_0 = 0x001a7df00; // 27778816
uint64_t BLOCK08_dense_4h_to_h_wt = 0x001b5aa00; // 28682752
uint64_t BLOCK09_qkv_weight = 0x001c37a00; // 29587968
uint64_t BLOCK09_atten_weight = 0x001c81e00; // 29892096
uint64_t BLOCK09_h_to_4h_wt_1 = 0x001cc3e00; // 30162432
uint64_t BLOCK09_h_to_4h_wt_0 = 0x001da0900; // 31066368
uint64_t BLOCK09_dense_4h_to_h_wt = 0x001e7d400; // 31970304
uint64_t BLOCK10_qkv_weight = 0x001f5a400; // 32875520
uint64_t BLOCK10_atten_weight = 0x001fa4800; // 33179648
uint64_t BLOCK10_h_to_4h_wt_1 = 0x001fe6800; // 33449984
uint64_t BLOCK10_h_to_4h_wt_0 = 0x0020c3300; // 34353920
uint64_t BLOCK10_dense_4h_to_h_wt = 0x00219fe00; // 35257856
uint64_t BLOCK11_qkv_weight = 0x00227ce00; // 36163072
uint64_t BLOCK11_atten_weight = 0x0022c7200; // 36467200
uint64_t BLOCK11_h_to_4h_wt_1 = 0x002309200; // 36737536
uint64_t BLOCK11_h_to_4h_wt_0 = 0x0023e5d00; // 37641472
uint64_t BLOCK11_dense_4h_to_h_wt = 0x0024c2800; // 38545408
uint64_t BLOCK12_qkv_weight = 0x00259f800; // 39450624
uint64_t BLOCK12_atten_weight = 0x0025e9c00; // 39754752
uint64_t BLOCK12_h_to_4h_wt_1 = 0x00262bc00; // 40025088
uint64_t BLOCK12_h_to_4h_wt_0 = 0x002708700; // 40929024
uint64_t BLOCK12_dense_4h_to_h_wt = 0x0027e5200; // 41832960
uint64_t BLOCK13_qkv_weight = 0x0028c2200; // 42738176
uint64_t BLOCK13_atten_weight = 0x00290c600; // 43042304
uint64_t BLOCK13_h_to_4h_wt_1 = 0x00294e600; // 43312640
uint64_t BLOCK13_h_to_4h_wt_0 = 0x002a2b100; // 44216576
uint64_t BLOCK13_dense_4h_to_h_wt = 0x002b07c00; // 45120512
uint64_t BLOCK14_qkv_weight = 0x002be4c00; // 46025728
uint64_t BLOCK14_atten_weight = 0x002c2f000; // 46329856
uint64_t BLOCK14_h_to_4h_wt_1 = 0x002c71000; // 46600192
uint64_t BLOCK14_h_to_4h_wt_0 = 0x002d4db00; // 47504128
uint64_t BLOCK14_dense_4h_to_h_wt = 0x002e2a600; // 48408064
uint64_t BLOCK15_qkv_weight = 0x002f07600; // 49313280
uint64_t BLOCK15_atten_weight = 0x002f51a00; // 49617408
uint64_t BLOCK15_h_to_4h_wt_1 = 0x002f93a00; // 49887744
uint64_t BLOCK15_h_to_4h_wt_0 = 0x003070500; // 50791680
uint64_t BLOCK15_dense_4h_to_h_wt = 0x00314d000; // 51695616
uint64_t BLOCK16_qkv_weight = 0x00322a000; // 52600832
uint64_t BLOCK16_atten_weight = 0x003274400; // 52904960
uint64_t BLOCK16_h_to_4h_wt_1 = 0x0032b6400; // 53175296
uint64_t BLOCK16_h_to_4h_wt_0 = 0x003392f00; // 54079232
uint64_t BLOCK16_dense_4h_to_h_wt = 0x00346fa00; // 54983168
uint64_t BLOCK17_qkv_weight = 0x00354ca00; // 55888384
uint64_t BLOCK17_atten_weight = 0x003596e00; // 56192512
uint64_t BLOCK17_h_to_4h_wt_1 = 0x0035d8e00; // 56462848
uint64_t BLOCK17_h_to_4h_wt_0 = 0x0036b5900; // 57366784
uint64_t BLOCK17_dense_4h_to_h_wt = 0x003792400; // 58270720
uint64_t BLOCK18_qkv_weight = 0x00386f400; // 59175936
uint64_t BLOCK18_atten_weight = 0x0038b9800; // 59480064
uint64_t BLOCK18_h_to_4h_wt_1 = 0x0038fb800; // 59750400
uint64_t BLOCK18_h_to_4h_wt_0 = 0x0039d8300; // 60654336
uint64_t BLOCK18_dense_4h_to_h_wt = 0x003ab4e00; // 61558272
uint64_t BLOCK19_qkv_weight = 0x003b91e00; // 62463488
uint64_t BLOCK19_atten_weight = 0x003bdc200; // 62767616
uint64_t BLOCK19_h_to_4h_wt_1 = 0x003c1e200; // 63037952
uint64_t BLOCK19_h_to_4h_wt_0 = 0x003cfad00; // 63941888
uint64_t BLOCK19_dense_4h_to_h_wt = 0x003dd7800; // 64845824
uint64_t BLOCK20_qkv_weight = 0x003eb4800; // 65751040
uint64_t BLOCK20_atten_weight = 0x003efec00; // 66055168
uint64_t BLOCK20_h_to_4h_wt_1 = 0x003f40c00; // 66325504
uint64_t BLOCK20_h_to_4h_wt_0 = 0x00401d700; // 67229440
uint64_t BLOCK20_dense_4h_to_h_wt = 0x0040fa200; // 68133376
uint64_t BLOCK21_qkv_weight = 0x0041d7200; // 69038592
uint64_t BLOCK21_atten_weight = 0x004221600; // 69342720
uint64_t BLOCK21_h_to_4h_wt_1 = 0x004263600; // 69613056
uint64_t BLOCK21_h_to_4h_wt_0 = 0x004340100; // 70516992
uint64_t BLOCK21_dense_4h_to_h_wt = 0x00441cc00; // 71420928
uint64_t BLOCK22_qkv_weight = 0x0044f9c00; // 72326144
uint64_t BLOCK22_atten_weight = 0x004544000; // 72630272
uint64_t BLOCK22_h_to_4h_wt_1 = 0x004586000; // 72900608
uint64_t BLOCK22_h_to_4h_wt_0 = 0x004662b00; // 73804544
uint64_t BLOCK22_dense_4h_to_h_wt = 0x00473f600; // 74708480
uint64_t BLOCK23_qkv_weight = 0x00481c600; // 75613696
uint64_t BLOCK23_atten_weight = 0x004866a00; // 75917824
uint64_t BLOCK23_h_to_4h_wt_1 = 0x0048a8a00; // 76188160
uint64_t BLOCK23_h_to_4h_wt_0 = 0x004985500; // 77092096
uint64_t BLOCK23_dense_4h_to_h_wt = 0x004a62000; // 77996032
uint64_t BLOCK24_qkv_weight = 0x004b3f000; // 78901248
uint64_t BLOCK24_atten_weight = 0x004b89400; // 79205376
uint64_t BLOCK24_h_to_4h_wt_1 = 0x004bcb400; // 79475712
uint64_t BLOCK24_h_to_4h_wt_0 = 0x004ca7f00; // 80379648
uint64_t BLOCK24_dense_4h_to_h_wt = 0x004d84a00; // 81283584
uint64_t BLOCK25_qkv_weight = 0x004e61a00; // 82188800
uint64_t BLOCK25_atten_weight = 0x004eabe00; // 82492928
uint64_t BLOCK25_h_to_4h_wt_1 = 0x004eede00; // 82763264
uint64_t BLOCK25_h_to_4h_wt_0 = 0x004fca900; // 83667200
uint64_t BLOCK25_dense_4h_to_h_wt = 0x0050a7400; // 84571136
uint64_t BLOCK26_qkv_weight = 0x005184400; // 85476352
uint64_t BLOCK26_atten_weight = 0x0051ce800; // 85780480
uint64_t BLOCK26_h_to_4h_wt_1 = 0x005210800; // 86050816
uint64_t BLOCK26_h_to_4h_wt_0 = 0x0052ed300; // 86954752
uint64_t BLOCK26_dense_4h_to_h_wt = 0x0053c9e00; // 87858688
uint64_t BLOCK27_qkv_weight = 0x0054a6e00; // 88763904
uint64_t BLOCK27_atten_weight = 0x0054f1200; // 89068032
uint64_t BLOCK27_h_to_4h_wt_1 = 0x005533200; // 89338368
uint64_t BLOCK27_h_to_4h_wt_0 = 0x00560fd00; // 90242304
uint64_t BLOCK27_dense_4h_to_h_wt = 0x0056ec800; // 91146240
uint64_t Output_Layer_wt = 0x0057c9800; // 92051456

// mod init
void step1 (HANDLE& device, int kvcache, int token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 40960);
  CSB_Write(device, 195, 989300736);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : ((1 * token) - 0))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : ((1 * token) - 0))));
  CSB_Write(device, 198, 997689344);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : ((1 * token) - 0))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : ((1 * token) - 0))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : ((1 * token) - 0)));
  CSB_Write(device, 204, (kvcache ? 1 : ((1 * token) - 0)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_STEP
printf("step1!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step2 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in cache0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 997689344);
  CSB_Write(device, 11, 0);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, (kvcache ? (5736448 + ((token - 1) * 64)) : (5736448 + (last_token * 64))));
  CSB_Write(device, 14, 8);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 57344);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, 65536);
  CSB_Write(device, 32, 65536);
  CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("step2!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step3 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.pos_emb accel operator node, storage data in cache1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (kvcache ? (0 + ((token - 1) * 64)) : (0 + (last_token * 64))));
  CSB_Write(device, 195, (kvcache ? (5736448 + ((token - 1) * 64)) : (5736448 + (last_token * 64))));
  CSB_Write(device, 196, 262144);
  CSB_Write(device, 197, 65536);
  CSB_Write(device, 198, (kvcache ? (15173632 + ((token - 1) * 64)) : (15173632 + (last_token * 64))));
  CSB_Write(device, 199, 262144);
  CSB_Write(device, 200, 65536);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 203, 34);
  CSB_Write(device, 204, 65536);
  CSB_Write(device, 205, 0);
  CSB_Write(device, 206, 0);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
#ifdef PRINT_STEP
printf("step3!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step4 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_afterTRP accel operator node, storage data in cache2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 23562240);
  CSB_Write(device, 195, (kvcache ? (15173632 + ((token - 1) * 64)) : (15173632 + (last_token * 64))));
  CSB_Write(device, 196, 262144);
  CSB_Write(device, 197, 65536);
  CSB_Write(device, 198, (kvcache ? (24086528 + ((token - 1) * 64)) : (24086528 + (last_token * 64))));
  CSB_Write(device, 199, 262144);
  CSB_Write(device, 200, 65536);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, token);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 11688);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 2);
#ifdef PRINT_STEP
printf("step4!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterTRP run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step5 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.softmax accel operator node, storage data in cache3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (1 - kvcache));
  CSB_Write(device, 195, (kvcache ? (24086528 + ((token - 1) * 64)) : (24086528 + (last_token * 64))));
  CSB_Write(device, 196, 262144);
  CSB_Write(device, 197, 65536);
  CSB_Write(device, 198, (kvcache ? (32475136 + ((token - 1) * 64)) : (32475136 + (last_token * 64))));
  CSB_Write(device, 199, 262144);
  CSB_Write(device, 200, 65536);
  CSB_Write(device, 201, (((token + 32) - 1) / 32));
  CSB_Write(device, 202, 32);
  CSB_Write(device, 203, token);
  CSB_Write(device, 204, (kvcache ? 1 : (((((token - last_token) + 1) - 1) / 1) * 1)));
  CSB_Write(device, 205, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 206, last_token);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 8);
#ifdef PRINT_STEP
printf("step5!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.softmax run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step6 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_afterF2W accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 14649344);
  CSB_Write(device, 195, (kvcache ? (32475136 + ((token - 1) * 64)) : (32475136 + (last_token * 64))));
  CSB_Write(device, 196, 262144);
  CSB_Write(device, 197, 65536);
  CSB_Write(device, 198, 997689344);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, (((token + 32) - 1) / 32));
  CSB_Write(device, 202, token);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 4);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 1);
#ifdef PRINT_STEP
printf("step6!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterF2W run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step7 (HANDLE& device, int kvcache, int token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 997689344);
  CSB_Write(device, 11, 304128);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 1025738752);
  CSB_Write(device, 14, 7);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 75776);
  CSB_Write(device, 27, 989300736);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("step7!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step8 (HANDLE& device, int kvcache, int token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 92160);
  CSB_Write(device, 195, 1025738752);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : ((1 * token) - 0))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : ((1 * token) - 0))));
  CSB_Write(device, 198, 989300736);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : ((1 * token) - 0))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : ((1 * token) - 0))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : ((1 * token) - 0)));
  CSB_Write(device, 204, (kvcache ? 1 : ((1 * token) - 0)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_STEP
printf("step8!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step9 (HANDLE& device, int kvcache, int token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 989300736);
  CSB_Write(device, 11, 1478400);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 997689344);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 163328);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("step9!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step10 (HANDLE& device, int kvcache, int token) {
// accel.hbm.activate accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 32768);
  CSB_Write(device, 195, 997689344);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 198, 1158907904);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 201, 428);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 204, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 205, 428);
  CSB_Write(device, 206, 13696);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 16);
#ifdef PRINT_STEP
printf("step10!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.activate run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step11 (HANDLE& device, int kvcache, int token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 989300736);
  CSB_Write(device, 11, 574464);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 997689344);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 2);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 108544);
  CSB_Write(device, 27, 1158907904);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("step11!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step12 (HANDLE& device, int kvcache, int token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 13696);
  CSB_Write(device, 3, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 128);
  CSB_Write(device, 8, 128);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 997689344);
  CSB_Write(device, 11, 2382336);
  CSB_Write(device, 12, 56576);
  CSB_Write(device, 13, 989300736);
  CSB_Write(device, 14, 31);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 218112);
  CSB_Write(device, 27, 1025738752);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("step12!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step13 (HANDLE& device, int kvcache, int token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 234496);
  CSB_Write(device, 195, 989300736);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : ((1 * token) - 0))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : ((1 * token) - 0))));
  CSB_Write(device, 198, 1025738752);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : ((1 * token) - 0))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : ((1 * token) - 0))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : ((1 * token) - 0)));
  CSB_Write(device, 204, (kvcache ? 1 : ((1 * token) - 0)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_STEP
printf("step13!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step14 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in cache4 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 1025738752);
  CSB_Write(device, 11, 3287552);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, (kvcache ? (40863744 + ((token - 1) * 64)) : (40863744 + (last_token * 64))));
  CSB_Write(device, 14, 8);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 250880);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, 65536);
  CSB_Write(device, 32, 65536);
  CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("step14!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step15 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.pos_emb accel operator node, storage data in cache5 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (kvcache ? (0 + ((token - 1) * 64)) : (0 + (last_token * 64))));
  CSB_Write(device, 195, (kvcache ? (40863744 + ((token - 1) * 64)) : (40863744 + (last_token * 64))));
  CSB_Write(device, 196, 262144);
  CSB_Write(device, 197, 65536);
  CSB_Write(device, 198, (kvcache ? (50300928 + ((token - 1) * 64)) : (50300928 + (last_token * 64))));
  CSB_Write(device, 199, 262144);
  CSB_Write(device, 200, 65536);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 203, 34);
  CSB_Write(device, 204, 65536);
  CSB_Write(device, 205, 0);
  CSB_Write(device, 206, 0);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
#ifdef PRINT_STEP
printf("step15!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step16 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_afterTRP accel operator node, storage data in cache6 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 58689536);
  CSB_Write(device, 195, (kvcache ? (50300928 + ((token - 1) * 64)) : (50300928 + (last_token * 64))));
  CSB_Write(device, 196, 262144);
  CSB_Write(device, 197, 65536);
  CSB_Write(device, 198, (kvcache ? (59213824 + ((token - 1) * 64)) : (59213824 + (last_token * 64))));
  CSB_Write(device, 199, 262144);
  CSB_Write(device, 200, 65536);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, token);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 11688);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 2);
#ifdef PRINT_STEP
printf("step16!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterTRP run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step17 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.softmax accel operator node, storage data in cache7 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (1 - kvcache));
  CSB_Write(device, 195, (kvcache ? (59213824 + ((token - 1) * 64)) : (59213824 + (last_token * 64))));
  CSB_Write(device, 196, 262144);
  CSB_Write(device, 197, 65536);
  CSB_Write(device, 198, (kvcache ? (67602432 + ((token - 1) * 64)) : (67602432 + (last_token * 64))));
  CSB_Write(device, 199, 262144);
  CSB_Write(device, 200, 65536);
  CSB_Write(device, 201, (((token + 32) - 1) / 32));
  CSB_Write(device, 202, 32);
  CSB_Write(device, 203, token);
  CSB_Write(device, 204, (kvcache ? 1 : (((((token - last_token) + 1) - 1) / 1) * 1)));
  CSB_Write(device, 205, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 206, last_token);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 8);
#ifdef PRINT_STEP
printf("step17!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.softmax run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step18 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_afterF2W accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 49776640);
  CSB_Write(device, 195, (kvcache ? (67602432 + ((token - 1) * 64)) : (67602432 + (last_token * 64))));
  CSB_Write(device, 196, 262144);
  CSB_Write(device, 197, 65536);
  CSB_Write(device, 198, 1025738752);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, (((token + 32) - 1) / 32));
  CSB_Write(device, 202, token);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 4);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 1);
#ifdef PRINT_STEP
printf("step18!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterF2W run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step19 (HANDLE& device, int kvcache, int token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 1025738752);
  CSB_Write(device, 11, 3591680);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 997689344);
  CSB_Write(device, 14, 7);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 269312);
  CSB_Write(device, 27, 989300736);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("step19!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step20 (HANDLE& device, int kvcache, int token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 285696);
  CSB_Write(device, 195, 997689344);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : ((1 * token) - 0))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : ((1 * token) - 0))));
  CSB_Write(device, 198, 989300736);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : ((1 * token) - 0))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : ((1 * token) - 0))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : ((1 * token) - 0)));
  CSB_Write(device, 204, (kvcache ? 1 : ((1 * token) - 0)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_STEP
printf("step20!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step21 (HANDLE& device, int kvcache, int token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 989300736);
  CSB_Write(device, 11, 4765952);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 1158907904);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 356864);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("step21!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step22 (HANDLE& device, int kvcache, int token) {
// accel.hbm.activate accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 32768);
  CSB_Write(device, 195, 1158907904);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 198, 1025738752);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 201, 428);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 204, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 205, 428);
  CSB_Write(device, 206, 13696);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 16);
#ifdef PRINT_STEP
printf("step22!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.activate run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step23 (HANDLE& device, int kvcache, int token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 989300736);
  CSB_Write(device, 11, 3862016);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 1158907904);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 2);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 302080);
  CSB_Write(device, 27, 1025738752);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("step23!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step24 (HANDLE& device, int kvcache, int token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 13696);
  CSB_Write(device, 3, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 128);
  CSB_Write(device, 8, 128);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 1158907904);
  CSB_Write(device, 11, 5669888);
  CSB_Write(device, 12, 56576);
  CSB_Write(device, 13, 989300736);
  CSB_Write(device, 14, 31);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 411648);
  CSB_Write(device, 27, 997689344);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("step24!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step25 (HANDLE& device, int kvcache, int token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 428032);
  CSB_Write(device, 195, 989300736);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : ((1 * token) - 0))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : ((1 * token) - 0))));
  CSB_Write(device, 198, 997689344);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : ((1 * token) - 0))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : ((1 * token) - 0))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : ((1 * token) - 0)));
  CSB_Write(device, 204, (kvcache ? 1 : ((1 * token) - 0)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_STEP
printf("step25!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step26 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in cache8 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 997689344);
  CSB_Write(device, 11, 6575104);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, (kvcache ? (75991040 + ((token - 1) * 64)) : (75991040 + (last_token * 64))));
  CSB_Write(device, 14, 8);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 444416);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, 65536);
  CSB_Write(device, 32, 65536);
  CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("step26!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step27 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.pos_emb accel operator node, storage data in cache9 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (kvcache ? (0 + ((token - 1) * 64)) : (0 + (last_token * 64))));
  CSB_Write(device, 195, (kvcache ? (75991040 + ((token - 1) * 64)) : (75991040 + (last_token * 64))));
  CSB_Write(device, 196, 262144);
  CSB_Write(device, 197, 65536);
  CSB_Write(device, 198, (kvcache ? (85428224 + ((token - 1) * 64)) : (85428224 + (last_token * 64))));
  CSB_Write(device, 199, 262144);
  CSB_Write(device, 200, 65536);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 203, 34);
  CSB_Write(device, 204, 65536);
  CSB_Write(device, 205, 0);
  CSB_Write(device, 206, 0);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
#ifdef PRINT_STEP
printf("step27!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step28 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_afterTRP accel operator node, storage data in cache10 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 93816832);
  CSB_Write(device, 195, (kvcache ? (85428224 + ((token - 1) * 64)) : (85428224 + (last_token * 64))));
  CSB_Write(device, 196, 262144);
  CSB_Write(device, 197, 65536);
  CSB_Write(device, 198, (kvcache ? (94341120 + ((token - 1) * 64)) : (94341120 + (last_token * 64))));
  CSB_Write(device, 199, 262144);
  CSB_Write(device, 200, 65536);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, token);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 11688);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 2);
#ifdef PRINT_STEP
printf("step28!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterTRP run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step29 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.softmax accel operator node, storage data in cache11 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (1 - kvcache));
  CSB_Write(device, 195, (kvcache ? (94341120 + ((token - 1) * 64)) : (94341120 + (last_token * 64))));
  CSB_Write(device, 196, 262144);
  CSB_Write(device, 197, 65536);
  CSB_Write(device, 198, (kvcache ? (102729728 + ((token - 1) * 64)) : (102729728 + (last_token * 64))));
  CSB_Write(device, 199, 262144);
  CSB_Write(device, 200, 65536);
  CSB_Write(device, 201, (((token + 32) - 1) / 32));
  CSB_Write(device, 202, 32);
  CSB_Write(device, 203, token);
  CSB_Write(device, 204, (kvcache ? 1 : (((((token - last_token) + 1) - 1) / 1) * 1)));
  CSB_Write(device, 205, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 206, last_token);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 8);
#ifdef PRINT_STEP
printf("step29!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.softmax run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step30 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_afterF2W accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 84903936);
  CSB_Write(device, 195, (kvcache ? (102729728 + ((token - 1) * 64)) : (102729728 + (last_token * 64))));
  CSB_Write(device, 196, 262144);
  CSB_Write(device, 197, 65536);
  CSB_Write(device, 198, 997689344);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, (((token + 32) - 1) / 32));
  CSB_Write(device, 202, token);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 4);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 1);
#ifdef PRINT_STEP
printf("step30!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterF2W run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step31 (HANDLE& device, int kvcache, int token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 997689344);
  CSB_Write(device, 11, 6879232);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 1158907904);
  CSB_Write(device, 14, 7);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 462848);
  CSB_Write(device, 27, 989300736);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("step31!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step32 (HANDLE& device, int kvcache, int token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 479232);
  CSB_Write(device, 195, 1158907904);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : ((1 * token) - 0))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : ((1 * token) - 0))));
  CSB_Write(device, 198, 989300736);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : ((1 * token) - 0))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : ((1 * token) - 0))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : ((1 * token) - 0)));
  CSB_Write(device, 204, (kvcache ? 1 : ((1 * token) - 0)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_STEP
printf("step32!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step33 (HANDLE& device, int kvcache, int token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 989300736);
  CSB_Write(device, 11, 8053504);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 997689344);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 550400);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("step33!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step34 (HANDLE& device, int kvcache, int token) {
// accel.hbm.activate accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 32768);
  CSB_Write(device, 195, 997689344);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 198, 1025738752);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 201, 428);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 204, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 205, 428);
  CSB_Write(device, 206, 13696);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 16);
#ifdef PRINT_STEP
printf("step34!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.activate run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step35 (HANDLE& device, int kvcache, int token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 989300736);
  CSB_Write(device, 11, 7149568);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 997689344);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 2);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 495616);
  CSB_Write(device, 27, 1025738752);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("step35!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step36 (HANDLE& device, int kvcache, int token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 13696);
  CSB_Write(device, 3, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 128);
  CSB_Write(device, 8, 128);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 997689344);
  CSB_Write(device, 11, 8957440);
  CSB_Write(device, 12, 56576);
  CSB_Write(device, 13, 989300736);
  CSB_Write(device, 14, 31);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 605184);
  CSB_Write(device, 27, 1158907904);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("step36!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step37 (HANDLE& device, int kvcache, int token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 621568);
  CSB_Write(device, 195, 989300736);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : ((1 * token) - 0))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : ((1 * token) - 0))));
  CSB_Write(device, 198, 1158907904);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : ((1 * token) - 0))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : ((1 * token) - 0))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : ((1 * token) - 0)));
  CSB_Write(device, 204, (kvcache ? 1 : ((1 * token) - 0)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_STEP
printf("step37!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step38 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in cache12 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 1158907904);
  CSB_Write(device, 11, 9862656);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, (kvcache ? (111118336 + ((token - 1) * 64)) : (111118336 + (last_token * 64))));
  CSB_Write(device, 14, 8);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 637952);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, 65536);
  CSB_Write(device, 32, 65536);
  CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("step38!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step39 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.pos_emb accel operator node, storage data in cache13 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (kvcache ? (0 + ((token - 1) * 64)) : (0 + (last_token * 64))));
  CSB_Write(device, 195, (kvcache ? (111118336 + ((token - 1) * 64)) : (111118336 + (last_token * 64))));
  CSB_Write(device, 196, 262144);
  CSB_Write(device, 197, 65536);
  CSB_Write(device, 198, (kvcache ? (120555520 + ((token - 1) * 64)) : (120555520 + (last_token * 64))));
  CSB_Write(device, 199, 262144);
  CSB_Write(device, 200, 65536);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 203, 34);
  CSB_Write(device, 204, 65536);
  CSB_Write(device, 205, 0);
  CSB_Write(device, 206, 0);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
#ifdef PRINT_STEP
printf("step39!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step40 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_afterTRP accel operator node, storage data in cache14 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 128944128);
  CSB_Write(device, 195, (kvcache ? (120555520 + ((token - 1) * 64)) : (120555520 + (last_token * 64))));
  CSB_Write(device, 196, 262144);
  CSB_Write(device, 197, 65536);
  CSB_Write(device, 198, (kvcache ? (129468416 + ((token - 1) * 64)) : (129468416 + (last_token * 64))));
  CSB_Write(device, 199, 262144);
  CSB_Write(device, 200, 65536);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, token);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 11688);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 2);
#ifdef PRINT_STEP
printf("step40!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterTRP run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step41 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.softmax accel operator node, storage data in cache15 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (1 - kvcache));
  CSB_Write(device, 195, (kvcache ? (129468416 + ((token - 1) * 64)) : (129468416 + (last_token * 64))));
  CSB_Write(device, 196, 262144);
  CSB_Write(device, 197, 65536);
  CSB_Write(device, 198, (kvcache ? (137857024 + ((token - 1) * 64)) : (137857024 + (last_token * 64))));
  CSB_Write(device, 199, 262144);
  CSB_Write(device, 200, 65536);
  CSB_Write(device, 201, (((token + 32) - 1) / 32));
  CSB_Write(device, 202, 32);
  CSB_Write(device, 203, token);
  CSB_Write(device, 204, (kvcache ? 1 : (((((token - last_token) + 1) - 1) / 1) * 1)));
  CSB_Write(device, 205, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 206, last_token);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 8);
#ifdef PRINT_STEP
printf("step41!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.softmax run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step42 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_afterF2W accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 120031232);
  CSB_Write(device, 195, (kvcache ? (137857024 + ((token - 1) * 64)) : (137857024 + (last_token * 64))));
  CSB_Write(device, 196, 262144);
  CSB_Write(device, 197, 65536);
  CSB_Write(device, 198, 1158907904);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, (((token + 32) - 1) / 32));
  CSB_Write(device, 202, token);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 4);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 1);
#ifdef PRINT_STEP
printf("step42!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterF2W run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step43 (HANDLE& device, int kvcache, int token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 1158907904);
  CSB_Write(device, 11, 10166784);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 997689344);
  CSB_Write(device, 14, 7);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 656384);
  CSB_Write(device, 27, 989300736);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("step43!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step44 (HANDLE& device, int kvcache, int token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 672768);
  CSB_Write(device, 195, 997689344);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : ((1 * token) - 0))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : ((1 * token) - 0))));
  CSB_Write(device, 198, 989300736);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : ((1 * token) - 0))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : ((1 * token) - 0))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : ((1 * token) - 0)));
  CSB_Write(device, 204, (kvcache ? 1 : ((1 * token) - 0)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_STEP
printf("step44!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step45 (HANDLE& device, int kvcache, int token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 989300736);
  CSB_Write(device, 11, 11341056);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 1158907904);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 743936);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("step45!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step46 (HANDLE& device, int kvcache, int token) {
// accel.hbm.activate accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 32768);
  CSB_Write(device, 195, 1158907904);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 198, 1025738752);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 201, 428);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 204, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 205, 428);
  CSB_Write(device, 206, 13696);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 16);
#ifdef PRINT_STEP
printf("step46!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.activate run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step47 (HANDLE& device, int kvcache, int token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 989300736);
  CSB_Write(device, 11, 10437120);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 1158907904);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 2);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 689152);
  CSB_Write(device, 27, 1025738752);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("step47!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step48 (HANDLE& device, int kvcache, int token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 13696);
  CSB_Write(device, 3, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 128);
  CSB_Write(device, 8, 128);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 1158907904);
  CSB_Write(device, 11, 12244992);
  CSB_Write(device, 12, 56576);
  CSB_Write(device, 13, 989300736);
  CSB_Write(device, 14, 31);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 798720);
  CSB_Write(device, 27, 997689344);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("step48!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step49 (HANDLE& device, int kvcache, int token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 815104);
  CSB_Write(device, 195, 989300736);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : ((1 * token) - 0))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : ((1 * token) - 0))));
  CSB_Write(device, 198, 997689344);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : ((1 * token) - 0))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : ((1 * token) - 0))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : ((1 * token) - 0)));
  CSB_Write(device, 204, (kvcache ? 1 : ((1 * token) - 0)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_STEP
printf("step49!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step50 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in cache16 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 997689344);
  CSB_Write(device, 11, 13150208);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, (kvcache ? (146245632 + ((token - 1) * 64)) : (146245632 + (last_token * 64))));
  CSB_Write(device, 14, 8);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 831488);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, 65536);
  CSB_Write(device, 32, 65536);
  CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("step50!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step51 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.pos_emb accel operator node, storage data in cache17 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (kvcache ? (0 + ((token - 1) * 64)) : (0 + (last_token * 64))));
  CSB_Write(device, 195, (kvcache ? (146245632 + ((token - 1) * 64)) : (146245632 + (last_token * 64))));
  CSB_Write(device, 196, 262144);
  CSB_Write(device, 197, 65536);
  CSB_Write(device, 198, (kvcache ? (155682816 + ((token - 1) * 64)) : (155682816 + (last_token * 64))));
  CSB_Write(device, 199, 262144);
  CSB_Write(device, 200, 65536);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 203, 34);
  CSB_Write(device, 204, 65536);
  CSB_Write(device, 205, 0);
  CSB_Write(device, 206, 0);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
#ifdef PRINT_STEP
printf("step51!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step52 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_afterTRP accel operator node, storage data in cache18 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 164071424);
  CSB_Write(device, 195, (kvcache ? (155682816 + ((token - 1) * 64)) : (155682816 + (last_token * 64))));
  CSB_Write(device, 196, 262144);
  CSB_Write(device, 197, 65536);
  CSB_Write(device, 198, (kvcache ? (164595712 + ((token - 1) * 64)) : (164595712 + (last_token * 64))));
  CSB_Write(device, 199, 262144);
  CSB_Write(device, 200, 65536);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, token);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 11688);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 2);
#ifdef PRINT_STEP
printf("step52!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterTRP run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step53 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.softmax accel operator node, storage data in cache19 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (1 - kvcache));
  CSB_Write(device, 195, (kvcache ? (164595712 + ((token - 1) * 64)) : (164595712 + (last_token * 64))));
  CSB_Write(device, 196, 262144);
  CSB_Write(device, 197, 65536);
  CSB_Write(device, 198, (kvcache ? (172984320 + ((token - 1) * 64)) : (172984320 + (last_token * 64))));
  CSB_Write(device, 199, 262144);
  CSB_Write(device, 200, 65536);
  CSB_Write(device, 201, (((token + 32) - 1) / 32));
  CSB_Write(device, 202, 32);
  CSB_Write(device, 203, token);
  CSB_Write(device, 204, (kvcache ? 1 : (((((token - last_token) + 1) - 1) / 1) * 1)));
  CSB_Write(device, 205, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 206, last_token);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 8);
#ifdef PRINT_STEP
printf("step53!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.softmax run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step54 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_afterF2W accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 155158528);
  CSB_Write(device, 195, (kvcache ? (172984320 + ((token - 1) * 64)) : (172984320 + (last_token * 64))));
  CSB_Write(device, 196, 262144);
  CSB_Write(device, 197, 65536);
  CSB_Write(device, 198, 997689344);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, (((token + 32) - 1) / 32));
  CSB_Write(device, 202, token);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 4);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 1);
#ifdef PRINT_STEP
printf("step54!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterF2W run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step55 (HANDLE& device, int kvcache, int token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 997689344);
  CSB_Write(device, 11, 13454336);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 1158907904);
  CSB_Write(device, 14, 7);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 849920);
  CSB_Write(device, 27, 989300736);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("step55!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step56 (HANDLE& device, int kvcache, int token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 866304);
  CSB_Write(device, 195, 1158907904);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : ((1 * token) - 0))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : ((1 * token) - 0))));
  CSB_Write(device, 198, 989300736);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : ((1 * token) - 0))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : ((1 * token) - 0))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : ((1 * token) - 0)));
  CSB_Write(device, 204, (kvcache ? 1 : ((1 * token) - 0)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_STEP
printf("step56!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step57 (HANDLE& device, int kvcache, int token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 989300736);
  CSB_Write(device, 11, 14628608);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 997689344);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 937472);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("step57!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step58 (HANDLE& device, int kvcache, int token) {
// accel.hbm.activate accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 32768);
  CSB_Write(device, 195, 997689344);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 198, 1025738752);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 201, 428);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 204, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 205, 428);
  CSB_Write(device, 206, 13696);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 16);
#ifdef PRINT_STEP
printf("step58!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.activate run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step59 (HANDLE& device, int kvcache, int token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 989300736);
  CSB_Write(device, 11, 13724672);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 997689344);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 2);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 882688);
  CSB_Write(device, 27, 1025738752);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("step59!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step60 (HANDLE& device, int kvcache, int token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 13696);
  CSB_Write(device, 3, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 128);
  CSB_Write(device, 8, 128);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 997689344);
  CSB_Write(device, 11, 15532544);
  CSB_Write(device, 12, 56576);
  CSB_Write(device, 13, 989300736);
  CSB_Write(device, 14, 31);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 992256);
  CSB_Write(device, 27, 1158907904);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("step60!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step61 (HANDLE& device, int kvcache, int token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 1008640);
  CSB_Write(device, 195, 989300736);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : ((1 * token) - 0))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : ((1 * token) - 0))));
  CSB_Write(device, 198, 1158907904);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : ((1 * token) - 0))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : ((1 * token) - 0))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : ((1 * token) - 0)));
  CSB_Write(device, 204, (kvcache ? 1 : ((1 * token) - 0)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_STEP
printf("step61!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step62 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in cache20 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 1158907904);
  CSB_Write(device, 11, 16437760);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, (kvcache ? (181372928 + ((token - 1) * 64)) : (181372928 + (last_token * 64))));
  CSB_Write(device, 14, 8);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 1025024);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, 65536);
  CSB_Write(device, 32, 65536);
  CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("step62!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step63 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.pos_emb accel operator node, storage data in cache21 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (kvcache ? (0 + ((token - 1) * 64)) : (0 + (last_token * 64))));
  CSB_Write(device, 195, (kvcache ? (181372928 + ((token - 1) * 64)) : (181372928 + (last_token * 64))));
  CSB_Write(device, 196, 262144);
  CSB_Write(device, 197, 65536);
  CSB_Write(device, 198, (kvcache ? (190810112 + ((token - 1) * 64)) : (190810112 + (last_token * 64))));
  CSB_Write(device, 199, 262144);
  CSB_Write(device, 200, 65536);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 203, 34);
  CSB_Write(device, 204, 65536);
  CSB_Write(device, 205, 0);
  CSB_Write(device, 206, 0);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
#ifdef PRINT_STEP
printf("step63!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step64 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_afterTRP accel operator node, storage data in cache22 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 199198720);
  CSB_Write(device, 195, (kvcache ? (190810112 + ((token - 1) * 64)) : (190810112 + (last_token * 64))));
  CSB_Write(device, 196, 262144);
  CSB_Write(device, 197, 65536);
  CSB_Write(device, 198, (kvcache ? (199723008 + ((token - 1) * 64)) : (199723008 + (last_token * 64))));
  CSB_Write(device, 199, 262144);
  CSB_Write(device, 200, 65536);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, token);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 11688);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 2);
#ifdef PRINT_STEP
printf("step64!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterTRP run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step65 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.softmax accel operator node, storage data in cache23 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (1 - kvcache));
  CSB_Write(device, 195, (kvcache ? (199723008 + ((token - 1) * 64)) : (199723008 + (last_token * 64))));
  CSB_Write(device, 196, 262144);
  CSB_Write(device, 197, 65536);
  CSB_Write(device, 198, (kvcache ? (208111616 + ((token - 1) * 64)) : (208111616 + (last_token * 64))));
  CSB_Write(device, 199, 262144);
  CSB_Write(device, 200, 65536);
  CSB_Write(device, 201, (((token + 32) - 1) / 32));
  CSB_Write(device, 202, 32);
  CSB_Write(device, 203, token);
  CSB_Write(device, 204, (kvcache ? 1 : (((((token - last_token) + 1) - 1) / 1) * 1)));
  CSB_Write(device, 205, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 206, last_token);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 8);
#ifdef PRINT_STEP
printf("step65!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.softmax run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step66 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_afterF2W accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 190285824);
  CSB_Write(device, 195, (kvcache ? (208111616 + ((token - 1) * 64)) : (208111616 + (last_token * 64))));
  CSB_Write(device, 196, 262144);
  CSB_Write(device, 197, 65536);
  CSB_Write(device, 198, 1158907904);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, (((token + 32) - 1) / 32));
  CSB_Write(device, 202, token);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 4);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 1);
#ifdef PRINT_STEP
printf("step66!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterF2W run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step67 (HANDLE& device, int kvcache, int token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 1158907904);
  CSB_Write(device, 11, 16741888);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 997689344);
  CSB_Write(device, 14, 7);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 1043456);
  CSB_Write(device, 27, 989300736);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("step67!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step68 (HANDLE& device, int kvcache, int token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 1059840);
  CSB_Write(device, 195, 997689344);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : ((1 * token) - 0))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : ((1 * token) - 0))));
  CSB_Write(device, 198, 989300736);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : ((1 * token) - 0))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : ((1 * token) - 0))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : ((1 * token) - 0)));
  CSB_Write(device, 204, (kvcache ? 1 : ((1 * token) - 0)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_STEP
printf("step68!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step69 (HANDLE& device, int kvcache, int token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 989300736);
  CSB_Write(device, 11, 17916160);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 1158907904);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 1131008);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("step69!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step70 (HANDLE& device, int kvcache, int token) {
// accel.hbm.activate accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 32768);
  CSB_Write(device, 195, 1158907904);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 198, 1025738752);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 201, 428);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 204, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 205, 428);
  CSB_Write(device, 206, 13696);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 16);
#ifdef PRINT_STEP
printf("step70!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.activate run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step71 (HANDLE& device, int kvcache, int token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 989300736);
  CSB_Write(device, 11, 17012224);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 1158907904);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 2);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 1076224);
  CSB_Write(device, 27, 1025738752);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("step71!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step72 (HANDLE& device, int kvcache, int token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 13696);
  CSB_Write(device, 3, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 128);
  CSB_Write(device, 8, 128);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 1158907904);
  CSB_Write(device, 11, 18820096);
  CSB_Write(device, 12, 56576);
  CSB_Write(device, 13, 989300736);
  CSB_Write(device, 14, 31);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 1185792);
  CSB_Write(device, 27, 997689344);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("step72!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step73 (HANDLE& device, int kvcache, int token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 1202176);
  CSB_Write(device, 195, 989300736);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : ((1 * token) - 0))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : ((1 * token) - 0))));
  CSB_Write(device, 198, 997689344);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : ((1 * token) - 0))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : ((1 * token) - 0))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : ((1 * token) - 0)));
  CSB_Write(device, 204, (kvcache ? 1 : ((1 * token) - 0)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_STEP
printf("step73!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step74 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in cache24 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 997689344);
  CSB_Write(device, 11, 19725312);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, (kvcache ? (216500224 + ((token - 1) * 64)) : (216500224 + (last_token * 64))));
  CSB_Write(device, 14, 8);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 1218560);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, 65536);
  CSB_Write(device, 32, 65536);
  CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("step74!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step75 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.pos_emb accel operator node, storage data in cache25 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (kvcache ? (0 + ((token - 1) * 64)) : (0 + (last_token * 64))));
  CSB_Write(device, 195, (kvcache ? (216500224 + ((token - 1) * 64)) : (216500224 + (last_token * 64))));
  CSB_Write(device, 196, 262144);
  CSB_Write(device, 197, 65536);
  CSB_Write(device, 198, (kvcache ? (225937408 + ((token - 1) * 64)) : (225937408 + (last_token * 64))));
  CSB_Write(device, 199, 262144);
  CSB_Write(device, 200, 65536);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 203, 34);
  CSB_Write(device, 204, 65536);
  CSB_Write(device, 205, 0);
  CSB_Write(device, 206, 0);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
#ifdef PRINT_STEP
printf("step75!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step76 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_afterTRP accel operator node, storage data in cache26 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 234326016);
  CSB_Write(device, 195, (kvcache ? (225937408 + ((token - 1) * 64)) : (225937408 + (last_token * 64))));
  CSB_Write(device, 196, 262144);
  CSB_Write(device, 197, 65536);
  CSB_Write(device, 198, (kvcache ? (234850304 + ((token - 1) * 64)) : (234850304 + (last_token * 64))));
  CSB_Write(device, 199, 262144);
  CSB_Write(device, 200, 65536);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, token);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 11688);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 2);
#ifdef PRINT_STEP
printf("step76!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterTRP run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step77 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.softmax accel operator node, storage data in cache27 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (1 - kvcache));
  CSB_Write(device, 195, (kvcache ? (234850304 + ((token - 1) * 64)) : (234850304 + (last_token * 64))));
  CSB_Write(device, 196, 262144);
  CSB_Write(device, 197, 65536);
  CSB_Write(device, 198, (kvcache ? (243238912 + ((token - 1) * 64)) : (243238912 + (last_token * 64))));
  CSB_Write(device, 199, 262144);
  CSB_Write(device, 200, 65536);
  CSB_Write(device, 201, (((token + 32) - 1) / 32));
  CSB_Write(device, 202, 32);
  CSB_Write(device, 203, token);
  CSB_Write(device, 204, (kvcache ? 1 : (((((token - last_token) + 1) - 1) / 1) * 1)));
  CSB_Write(device, 205, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 206, last_token);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 8);
#ifdef PRINT_STEP
printf("step77!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.softmax run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step78 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_afterF2W accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 225413120);
  CSB_Write(device, 195, (kvcache ? (243238912 + ((token - 1) * 64)) : (243238912 + (last_token * 64))));
  CSB_Write(device, 196, 262144);
  CSB_Write(device, 197, 65536);
  CSB_Write(device, 198, 997689344);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, (((token + 32) - 1) / 32));
  CSB_Write(device, 202, token);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 4);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 1);
#ifdef PRINT_STEP
printf("step78!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterF2W run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step79 (HANDLE& device, int kvcache, int token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 997689344);
  CSB_Write(device, 11, 20029440);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 1158907904);
  CSB_Write(device, 14, 7);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 1236992);
  CSB_Write(device, 27, 989300736);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("step79!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step80 (HANDLE& device, int kvcache, int token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 1253376);
  CSB_Write(device, 195, 1158907904);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : ((1 * token) - 0))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : ((1 * token) - 0))));
  CSB_Write(device, 198, 989300736);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : ((1 * token) - 0))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : ((1 * token) - 0))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : ((1 * token) - 0)));
  CSB_Write(device, 204, (kvcache ? 1 : ((1 * token) - 0)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_STEP
printf("step80!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step81 (HANDLE& device, int kvcache, int token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 989300736);
  CSB_Write(device, 11, 21203712);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 997689344);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 1324544);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("step81!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step82 (HANDLE& device, int kvcache, int token) {
// accel.hbm.activate accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 32768);
  CSB_Write(device, 195, 997689344);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 198, 1025738752);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 201, 428);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 204, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 205, 428);
  CSB_Write(device, 206, 13696);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 16);
#ifdef PRINT_STEP
printf("step82!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.activate run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step83 (HANDLE& device, int kvcache, int token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 989300736);
  CSB_Write(device, 11, 20299776);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 997689344);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 2);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 1269760);
  CSB_Write(device, 27, 1025738752);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("step83!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step84 (HANDLE& device, int kvcache, int token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 13696);
  CSB_Write(device, 3, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 128);
  CSB_Write(device, 8, 128);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 997689344);
  CSB_Write(device, 11, 22107648);
  CSB_Write(device, 12, 56576);
  CSB_Write(device, 13, 989300736);
  CSB_Write(device, 14, 31);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 1379328);
  CSB_Write(device, 27, 1158907904);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("step84!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step85 (HANDLE& device, int kvcache, int token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 1395712);
  CSB_Write(device, 195, 989300736);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : ((1 * token) - 0))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : ((1 * token) - 0))));
  CSB_Write(device, 198, 1158907904);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : ((1 * token) - 0))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : ((1 * token) - 0))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : ((1 * token) - 0)));
  CSB_Write(device, 204, (kvcache ? 1 : ((1 * token) - 0)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_STEP
printf("step85!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step86 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in cache28 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 1158907904);
  CSB_Write(device, 11, 23012864);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, (kvcache ? (251627520 + ((token - 1) * 64)) : (251627520 + (last_token * 64))));
  CSB_Write(device, 14, 8);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 1412096);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, 65536);
  CSB_Write(device, 32, 65536);
  CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("step86!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step87 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.pos_emb accel operator node, storage data in cache29 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (kvcache ? (0 + ((token - 1) * 64)) : (0 + (last_token * 64))));
  CSB_Write(device, 195, (kvcache ? (251627520 + ((token - 1) * 64)) : (251627520 + (last_token * 64))));
  CSB_Write(device, 196, 262144);
  CSB_Write(device, 197, 65536);
  CSB_Write(device, 198, (kvcache ? (261064704 + ((token - 1) * 64)) : (261064704 + (last_token * 64))));
  CSB_Write(device, 199, 262144);
  CSB_Write(device, 200, 65536);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 203, 34);
  CSB_Write(device, 204, 65536);
  CSB_Write(device, 205, 0);
  CSB_Write(device, 206, 0);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
#ifdef PRINT_STEP
printf("step87!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step88 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_afterTRP accel operator node, storage data in cache30 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 269453312);
  CSB_Write(device, 195, (kvcache ? (261064704 + ((token - 1) * 64)) : (261064704 + (last_token * 64))));
  CSB_Write(device, 196, 262144);
  CSB_Write(device, 197, 65536);
  CSB_Write(device, 198, (kvcache ? (269977600 + ((token - 1) * 64)) : (269977600 + (last_token * 64))));
  CSB_Write(device, 199, 262144);
  CSB_Write(device, 200, 65536);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, token);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 11688);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 2);
#ifdef PRINT_STEP
printf("step88!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterTRP run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step89 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.softmax accel operator node, storage data in cache31 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (1 - kvcache));
  CSB_Write(device, 195, (kvcache ? (269977600 + ((token - 1) * 64)) : (269977600 + (last_token * 64))));
  CSB_Write(device, 196, 262144);
  CSB_Write(device, 197, 65536);
  CSB_Write(device, 198, (kvcache ? (278366208 + ((token - 1) * 64)) : (278366208 + (last_token * 64))));
  CSB_Write(device, 199, 262144);
  CSB_Write(device, 200, 65536);
  CSB_Write(device, 201, (((token + 32) - 1) / 32));
  CSB_Write(device, 202, 32);
  CSB_Write(device, 203, token);
  CSB_Write(device, 204, (kvcache ? 1 : (((((token - last_token) + 1) - 1) / 1) * 1)));
  CSB_Write(device, 205, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 206, last_token);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 8);
#ifdef PRINT_STEP
printf("step89!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.softmax run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step90 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_afterF2W accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 260540416);
  CSB_Write(device, 195, (kvcache ? (278366208 + ((token - 1) * 64)) : (278366208 + (last_token * 64))));
  CSB_Write(device, 196, 262144);
  CSB_Write(device, 197, 65536);
  CSB_Write(device, 198, 1158907904);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, (((token + 32) - 1) / 32));
  CSB_Write(device, 202, token);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 4);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 1);
#ifdef PRINT_STEP
printf("step90!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterF2W run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step91 (HANDLE& device, int kvcache, int token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 1158907904);
  CSB_Write(device, 11, 23316992);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 997689344);
  CSB_Write(device, 14, 7);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 1430528);
  CSB_Write(device, 27, 989300736);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("step91!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step92 (HANDLE& device, int kvcache, int token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 1446912);
  CSB_Write(device, 195, 997689344);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : ((1 * token) - 0))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : ((1 * token) - 0))));
  CSB_Write(device, 198, 989300736);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : ((1 * token) - 0))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : ((1 * token) - 0))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : ((1 * token) - 0)));
  CSB_Write(device, 204, (kvcache ? 1 : ((1 * token) - 0)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_STEP
printf("step92!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step93 (HANDLE& device, int kvcache, int token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 989300736);
  CSB_Write(device, 11, 24491264);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 1158907904);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 1518080);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("step93!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step94 (HANDLE& device, int kvcache, int token) {
// accel.hbm.activate accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 32768);
  CSB_Write(device, 195, 1158907904);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 198, 1025738752);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 201, 428);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 204, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 205, 428);
  CSB_Write(device, 206, 13696);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 16);
#ifdef PRINT_STEP
printf("step94!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.activate run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step95 (HANDLE& device, int kvcache, int token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 989300736);
  CSB_Write(device, 11, 23587328);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 1158907904);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 2);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 1463296);
  CSB_Write(device, 27, 1025738752);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("step95!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step96 (HANDLE& device, int kvcache, int token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 13696);
  CSB_Write(device, 3, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 128);
  CSB_Write(device, 8, 128);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 1158907904);
  CSB_Write(device, 11, 25395200);
  CSB_Write(device, 12, 56576);
  CSB_Write(device, 13, 989300736);
  CSB_Write(device, 14, 31);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 1572864);
  CSB_Write(device, 27, 997689344);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("step96!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step97 (HANDLE& device, int kvcache, int token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 1589248);
  CSB_Write(device, 195, 989300736);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : ((1 * token) - 0))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : ((1 * token) - 0))));
  CSB_Write(device, 198, 997689344);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : ((1 * token) - 0))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : ((1 * token) - 0))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : ((1 * token) - 0)));
  CSB_Write(device, 204, (kvcache ? 1 : ((1 * token) - 0)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_STEP
printf("step97!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step98 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in cache32 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 997689344);
  CSB_Write(device, 11, 26300416);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, (kvcache ? (286754816 + ((token - 1) * 64)) : (286754816 + (last_token * 64))));
  CSB_Write(device, 14, 8);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 1605632);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, 65536);
  CSB_Write(device, 32, 65536);
  CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("step98!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step99 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.pos_emb accel operator node, storage data in cache33 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (kvcache ? (0 + ((token - 1) * 64)) : (0 + (last_token * 64))));
  CSB_Write(device, 195, (kvcache ? (286754816 + ((token - 1) * 64)) : (286754816 + (last_token * 64))));
  CSB_Write(device, 196, 262144);
  CSB_Write(device, 197, 65536);
  CSB_Write(device, 198, (kvcache ? (296192000 + ((token - 1) * 64)) : (296192000 + (last_token * 64))));
  CSB_Write(device, 199, 262144);
  CSB_Write(device, 200, 65536);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 203, 34);
  CSB_Write(device, 204, 65536);
  CSB_Write(device, 205, 0);
  CSB_Write(device, 206, 0);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
#ifdef PRINT_STEP
printf("step99!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step100 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_afterTRP accel operator node, storage data in cache34 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 304580608);
  CSB_Write(device, 195, (kvcache ? (296192000 + ((token - 1) * 64)) : (296192000 + (last_token * 64))));
  CSB_Write(device, 196, 262144);
  CSB_Write(device, 197, 65536);
  CSB_Write(device, 198, (kvcache ? (305104896 + ((token - 1) * 64)) : (305104896 + (last_token * 64))));
  CSB_Write(device, 199, 262144);
  CSB_Write(device, 200, 65536);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, token);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 11688);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 2);
#ifdef PRINT_STEP
printf("step100!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterTRP run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step101 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.softmax accel operator node, storage data in cache35 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (1 - kvcache));
  CSB_Write(device, 195, (kvcache ? (305104896 + ((token - 1) * 64)) : (305104896 + (last_token * 64))));
  CSB_Write(device, 196, 262144);
  CSB_Write(device, 197, 65536);
  CSB_Write(device, 198, (kvcache ? (313493504 + ((token - 1) * 64)) : (313493504 + (last_token * 64))));
  CSB_Write(device, 199, 262144);
  CSB_Write(device, 200, 65536);
  CSB_Write(device, 201, (((token + 32) - 1) / 32));
  CSB_Write(device, 202, 32);
  CSB_Write(device, 203, token);
  CSB_Write(device, 204, (kvcache ? 1 : (((((token - last_token) + 1) - 1) / 1) * 1)));
  CSB_Write(device, 205, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 206, last_token);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 8);
#ifdef PRINT_STEP
printf("step101!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.softmax run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step102 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_afterF2W accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 295667712);
  CSB_Write(device, 195, (kvcache ? (313493504 + ((token - 1) * 64)) : (313493504 + (last_token * 64))));
  CSB_Write(device, 196, 262144);
  CSB_Write(device, 197, 65536);
  CSB_Write(device, 198, 997689344);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, (((token + 32) - 1) / 32));
  CSB_Write(device, 202, token);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 4);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 1);
#ifdef PRINT_STEP
printf("step102!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterF2W run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step103 (HANDLE& device, int kvcache, int token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 997689344);
  CSB_Write(device, 11, 26604544);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 1158907904);
  CSB_Write(device, 14, 7);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 1624064);
  CSB_Write(device, 27, 989300736);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("step103!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step104 (HANDLE& device, int kvcache, int token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 1640448);
  CSB_Write(device, 195, 1158907904);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : ((1 * token) - 0))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : ((1 * token) - 0))));
  CSB_Write(device, 198, 989300736);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : ((1 * token) - 0))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : ((1 * token) - 0))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : ((1 * token) - 0)));
  CSB_Write(device, 204, (kvcache ? 1 : ((1 * token) - 0)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_STEP
printf("step104!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step105 (HANDLE& device, int kvcache, int token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 989300736);
  CSB_Write(device, 11, 27778816);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 997689344);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 1711616);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("step105!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step106 (HANDLE& device, int kvcache, int token) {
// accel.hbm.activate accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 32768);
  CSB_Write(device, 195, 997689344);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 198, 1025738752);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 201, 428);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 204, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 205, 428);
  CSB_Write(device, 206, 13696);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 16);
#ifdef PRINT_STEP
printf("step106!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.activate run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step107 (HANDLE& device, int kvcache, int token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 989300736);
  CSB_Write(device, 11, 26874880);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 997689344);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 2);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 1656832);
  CSB_Write(device, 27, 1025738752);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("step107!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step108 (HANDLE& device, int kvcache, int token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 13696);
  CSB_Write(device, 3, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 128);
  CSB_Write(device, 8, 128);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 997689344);
  CSB_Write(device, 11, 28682752);
  CSB_Write(device, 12, 56576);
  CSB_Write(device, 13, 989300736);
  CSB_Write(device, 14, 31);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 1766400);
  CSB_Write(device, 27, 1158907904);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("step108!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step109 (HANDLE& device, int kvcache, int token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 1782784);
  CSB_Write(device, 195, 989300736);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : ((1 * token) - 0))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : ((1 * token) - 0))));
  CSB_Write(device, 198, 1158907904);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : ((1 * token) - 0))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : ((1 * token) - 0))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : ((1 * token) - 0)));
  CSB_Write(device, 204, (kvcache ? 1 : ((1 * token) - 0)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_STEP
printf("step109!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step110 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in cache36 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 1158907904);
  CSB_Write(device, 11, 29587968);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, (kvcache ? (321882112 + ((token - 1) * 64)) : (321882112 + (last_token * 64))));
  CSB_Write(device, 14, 8);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 1799168);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, 65536);
  CSB_Write(device, 32, 65536);
  CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("step110!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step111 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.pos_emb accel operator node, storage data in cache37 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (kvcache ? (0 + ((token - 1) * 64)) : (0 + (last_token * 64))));
  CSB_Write(device, 195, (kvcache ? (321882112 + ((token - 1) * 64)) : (321882112 + (last_token * 64))));
  CSB_Write(device, 196, 262144);
  CSB_Write(device, 197, 65536);
  CSB_Write(device, 198, (kvcache ? (331319296 + ((token - 1) * 64)) : (331319296 + (last_token * 64))));
  CSB_Write(device, 199, 262144);
  CSB_Write(device, 200, 65536);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 203, 34);
  CSB_Write(device, 204, 65536);
  CSB_Write(device, 205, 0);
  CSB_Write(device, 206, 0);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
#ifdef PRINT_STEP
printf("step111!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step112 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_afterTRP accel operator node, storage data in cache38 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 339707904);
  CSB_Write(device, 195, (kvcache ? (331319296 + ((token - 1) * 64)) : (331319296 + (last_token * 64))));
  CSB_Write(device, 196, 262144);
  CSB_Write(device, 197, 65536);
  CSB_Write(device, 198, (kvcache ? (340232192 + ((token - 1) * 64)) : (340232192 + (last_token * 64))));
  CSB_Write(device, 199, 262144);
  CSB_Write(device, 200, 65536);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, token);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 11688);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 2);
#ifdef PRINT_STEP
printf("step112!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterTRP run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step113 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.softmax accel operator node, storage data in cache39 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (1 - kvcache));
  CSB_Write(device, 195, (kvcache ? (340232192 + ((token - 1) * 64)) : (340232192 + (last_token * 64))));
  CSB_Write(device, 196, 262144);
  CSB_Write(device, 197, 65536);
  CSB_Write(device, 198, (kvcache ? (348620800 + ((token - 1) * 64)) : (348620800 + (last_token * 64))));
  CSB_Write(device, 199, 262144);
  CSB_Write(device, 200, 65536);
  CSB_Write(device, 201, (((token + 32) - 1) / 32));
  CSB_Write(device, 202, 32);
  CSB_Write(device, 203, token);
  CSB_Write(device, 204, (kvcache ? 1 : (((((token - last_token) + 1) - 1) / 1) * 1)));
  CSB_Write(device, 205, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 206, last_token);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 8);
#ifdef PRINT_STEP
printf("step113!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.softmax run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step114 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_afterF2W accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 330795008);
  CSB_Write(device, 195, (kvcache ? (348620800 + ((token - 1) * 64)) : (348620800 + (last_token * 64))));
  CSB_Write(device, 196, 262144);
  CSB_Write(device, 197, 65536);
  CSB_Write(device, 198, 1158907904);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, (((token + 32) - 1) / 32));
  CSB_Write(device, 202, token);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 4);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 1);
#ifdef PRINT_STEP
printf("step114!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterF2W run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step115 (HANDLE& device, int kvcache, int token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 1158907904);
  CSB_Write(device, 11, 29892096);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 997689344);
  CSB_Write(device, 14, 7);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 1817600);
  CSB_Write(device, 27, 989300736);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("step115!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step116 (HANDLE& device, int kvcache, int token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 1833984);
  CSB_Write(device, 195, 997689344);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : ((1 * token) - 0))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : ((1 * token) - 0))));
  CSB_Write(device, 198, 989300736);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : ((1 * token) - 0))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : ((1 * token) - 0))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : ((1 * token) - 0)));
  CSB_Write(device, 204, (kvcache ? 1 : ((1 * token) - 0)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_STEP
printf("step116!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step117 (HANDLE& device, int kvcache, int token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 989300736);
  CSB_Write(device, 11, 31066368);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 1158907904);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 1905152);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("step117!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step118 (HANDLE& device, int kvcache, int token) {
// accel.hbm.activate accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 32768);
  CSB_Write(device, 195, 1158907904);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 198, 1025738752);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 201, 428);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 204, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 205, 428);
  CSB_Write(device, 206, 13696);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 16);
#ifdef PRINT_STEP
printf("step118!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.activate run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step119 (HANDLE& device, int kvcache, int token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 989300736);
  CSB_Write(device, 11, 30162432);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 1158907904);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 2);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 1850368);
  CSB_Write(device, 27, 1025738752);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("step119!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step120 (HANDLE& device, int kvcache, int token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 13696);
  CSB_Write(device, 3, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 128);
  CSB_Write(device, 8, 128);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 1158907904);
  CSB_Write(device, 11, 31970304);
  CSB_Write(device, 12, 56576);
  CSB_Write(device, 13, 989300736);
  CSB_Write(device, 14, 31);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 1959936);
  CSB_Write(device, 27, 997689344);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("step120!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step121 (HANDLE& device, int kvcache, int token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 1976320);
  CSB_Write(device, 195, 989300736);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : ((1 * token) - 0))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : ((1 * token) - 0))));
  CSB_Write(device, 198, 997689344);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : ((1 * token) - 0))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : ((1 * token) - 0))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : ((1 * token) - 0)));
  CSB_Write(device, 204, (kvcache ? 1 : ((1 * token) - 0)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_STEP
printf("step121!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step122 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in cache40 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 997689344);
  CSB_Write(device, 11, 32875520);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, (kvcache ? (357009408 + ((token - 1) * 64)) : (357009408 + (last_token * 64))));
  CSB_Write(device, 14, 8);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 1992704);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, 65536);
  CSB_Write(device, 32, 65536);
  CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("step122!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step123 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.pos_emb accel operator node, storage data in cache41 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (kvcache ? (0 + ((token - 1) * 64)) : (0 + (last_token * 64))));
  CSB_Write(device, 195, (kvcache ? (357009408 + ((token - 1) * 64)) : (357009408 + (last_token * 64))));
  CSB_Write(device, 196, 262144);
  CSB_Write(device, 197, 65536);
  CSB_Write(device, 198, (kvcache ? (366446592 + ((token - 1) * 64)) : (366446592 + (last_token * 64))));
  CSB_Write(device, 199, 262144);
  CSB_Write(device, 200, 65536);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 203, 34);
  CSB_Write(device, 204, 65536);
  CSB_Write(device, 205, 0);
  CSB_Write(device, 206, 0);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
#ifdef PRINT_STEP
printf("step123!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step124 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_afterTRP accel operator node, storage data in cache42 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 374835200);
  CSB_Write(device, 195, (kvcache ? (366446592 + ((token - 1) * 64)) : (366446592 + (last_token * 64))));
  CSB_Write(device, 196, 262144);
  CSB_Write(device, 197, 65536);
  CSB_Write(device, 198, (kvcache ? (375359488 + ((token - 1) * 64)) : (375359488 + (last_token * 64))));
  CSB_Write(device, 199, 262144);
  CSB_Write(device, 200, 65536);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, token);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 11688);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 2);
#ifdef PRINT_STEP
printf("step124!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterTRP run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step125 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.softmax accel operator node, storage data in cache43 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (1 - kvcache));
  CSB_Write(device, 195, (kvcache ? (375359488 + ((token - 1) * 64)) : (375359488 + (last_token * 64))));
  CSB_Write(device, 196, 262144);
  CSB_Write(device, 197, 65536);
  CSB_Write(device, 198, (kvcache ? (383748096 + ((token - 1) * 64)) : (383748096 + (last_token * 64))));
  CSB_Write(device, 199, 262144);
  CSB_Write(device, 200, 65536);
  CSB_Write(device, 201, (((token + 32) - 1) / 32));
  CSB_Write(device, 202, 32);
  CSB_Write(device, 203, token);
  CSB_Write(device, 204, (kvcache ? 1 : (((((token - last_token) + 1) - 1) / 1) * 1)));
  CSB_Write(device, 205, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 206, last_token);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 8);
#ifdef PRINT_STEP
printf("step125!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.softmax run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step126 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_afterF2W accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 365922304);
  CSB_Write(device, 195, (kvcache ? (383748096 + ((token - 1) * 64)) : (383748096 + (last_token * 64))));
  CSB_Write(device, 196, 262144);
  CSB_Write(device, 197, 65536);
  CSB_Write(device, 198, 997689344);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, (((token + 32) - 1) / 32));
  CSB_Write(device, 202, token);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 4);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 1);
#ifdef PRINT_STEP
printf("step126!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterF2W run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step127 (HANDLE& device, int kvcache, int token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 997689344);
  CSB_Write(device, 11, 33179648);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 1158907904);
  CSB_Write(device, 14, 7);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 2011136);
  CSB_Write(device, 27, 989300736);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("step127!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step128 (HANDLE& device, int kvcache, int token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 2027520);
  CSB_Write(device, 195, 1158907904);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : ((1 * token) - 0))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : ((1 * token) - 0))));
  CSB_Write(device, 198, 989300736);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : ((1 * token) - 0))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : ((1 * token) - 0))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : ((1 * token) - 0)));
  CSB_Write(device, 204, (kvcache ? 1 : ((1 * token) - 0)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_STEP
printf("step128!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step129 (HANDLE& device, int kvcache, int token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 989300736);
  CSB_Write(device, 11, 34353920);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 997689344);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 2098688);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("step129!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step130 (HANDLE& device, int kvcache, int token) {
// accel.hbm.activate accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 32768);
  CSB_Write(device, 195, 997689344);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 198, 1025738752);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 201, 428);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 204, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 205, 428);
  CSB_Write(device, 206, 13696);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 16);
#ifdef PRINT_STEP
printf("step130!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.activate run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step131 (HANDLE& device, int kvcache, int token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 989300736);
  CSB_Write(device, 11, 33449984);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 997689344);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 2);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 2043904);
  CSB_Write(device, 27, 1025738752);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("step131!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step132 (HANDLE& device, int kvcache, int token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 13696);
  CSB_Write(device, 3, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 128);
  CSB_Write(device, 8, 128);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 997689344);
  CSB_Write(device, 11, 35257856);
  CSB_Write(device, 12, 56576);
  CSB_Write(device, 13, 989300736);
  CSB_Write(device, 14, 31);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 2153472);
  CSB_Write(device, 27, 1158907904);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("step132!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step133 (HANDLE& device, int kvcache, int token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 2169856);
  CSB_Write(device, 195, 989300736);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : ((1 * token) - 0))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : ((1 * token) - 0))));
  CSB_Write(device, 198, 1158907904);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : ((1 * token) - 0))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : ((1 * token) - 0))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : ((1 * token) - 0)));
  CSB_Write(device, 204, (kvcache ? 1 : ((1 * token) - 0)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_STEP
printf("step133!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step134 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in cache44 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 1158907904);
  CSB_Write(device, 11, 36163072);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, (kvcache ? (392136704 + ((token - 1) * 64)) : (392136704 + (last_token * 64))));
  CSB_Write(device, 14, 8);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 2186240);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, 65536);
  CSB_Write(device, 32, 65536);
  CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("step134!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step135 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.pos_emb accel operator node, storage data in cache45 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (kvcache ? (0 + ((token - 1) * 64)) : (0 + (last_token * 64))));
  CSB_Write(device, 195, (kvcache ? (392136704 + ((token - 1) * 64)) : (392136704 + (last_token * 64))));
  CSB_Write(device, 196, 262144);
  CSB_Write(device, 197, 65536);
  CSB_Write(device, 198, (kvcache ? (401573888 + ((token - 1) * 64)) : (401573888 + (last_token * 64))));
  CSB_Write(device, 199, 262144);
  CSB_Write(device, 200, 65536);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 203, 34);
  CSB_Write(device, 204, 65536);
  CSB_Write(device, 205, 0);
  CSB_Write(device, 206, 0);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
#ifdef PRINT_STEP
printf("step135!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step136 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_afterTRP accel operator node, storage data in cache46 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 409962496);
  CSB_Write(device, 195, (kvcache ? (401573888 + ((token - 1) * 64)) : (401573888 + (last_token * 64))));
  CSB_Write(device, 196, 262144);
  CSB_Write(device, 197, 65536);
  CSB_Write(device, 198, (kvcache ? (410486784 + ((token - 1) * 64)) : (410486784 + (last_token * 64))));
  CSB_Write(device, 199, 262144);
  CSB_Write(device, 200, 65536);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, token);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 11688);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 2);
#ifdef PRINT_STEP
printf("step136!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterTRP run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step137 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.softmax accel operator node, storage data in cache47 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (1 - kvcache));
  CSB_Write(device, 195, (kvcache ? (410486784 + ((token - 1) * 64)) : (410486784 + (last_token * 64))));
  CSB_Write(device, 196, 262144);
  CSB_Write(device, 197, 65536);
  CSB_Write(device, 198, (kvcache ? (418875392 + ((token - 1) * 64)) : (418875392 + (last_token * 64))));
  CSB_Write(device, 199, 262144);
  CSB_Write(device, 200, 65536);
  CSB_Write(device, 201, (((token + 32) - 1) / 32));
  CSB_Write(device, 202, 32);
  CSB_Write(device, 203, token);
  CSB_Write(device, 204, (kvcache ? 1 : (((((token - last_token) + 1) - 1) / 1) * 1)));
  CSB_Write(device, 205, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 206, last_token);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 8);
#ifdef PRINT_STEP
printf("step137!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.softmax run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step138 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_afterF2W accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 401049600);
  CSB_Write(device, 195, (kvcache ? (418875392 + ((token - 1) * 64)) : (418875392 + (last_token * 64))));
  CSB_Write(device, 196, 262144);
  CSB_Write(device, 197, 65536);
  CSB_Write(device, 198, 1158907904);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, (((token + 32) - 1) / 32));
  CSB_Write(device, 202, token);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 4);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 1);
#ifdef PRINT_STEP
printf("step138!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterF2W run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step139 (HANDLE& device, int kvcache, int token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 1158907904);
  CSB_Write(device, 11, 36467200);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 997689344);
  CSB_Write(device, 14, 7);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 2204672);
  CSB_Write(device, 27, 989300736);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("step139!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step140 (HANDLE& device, int kvcache, int token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 2221056);
  CSB_Write(device, 195, 997689344);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : ((1 * token) - 0))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : ((1 * token) - 0))));
  CSB_Write(device, 198, 989300736);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : ((1 * token) - 0))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : ((1 * token) - 0))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : ((1 * token) - 0)));
  CSB_Write(device, 204, (kvcache ? 1 : ((1 * token) - 0)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_STEP
printf("step140!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step141 (HANDLE& device, int kvcache, int token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 989300736);
  CSB_Write(device, 11, 37641472);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 1158907904);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 2292224);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("step141!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step142 (HANDLE& device, int kvcache, int token) {
// accel.hbm.activate accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 32768);
  CSB_Write(device, 195, 1158907904);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 198, 1025738752);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 201, 428);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 204, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 205, 428);
  CSB_Write(device, 206, 13696);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 16);
#ifdef PRINT_STEP
printf("step142!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.activate run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step143 (HANDLE& device, int kvcache, int token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 989300736);
  CSB_Write(device, 11, 36737536);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 1158907904);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 2);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 2237440);
  CSB_Write(device, 27, 1025738752);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("step143!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step144 (HANDLE& device, int kvcache, int token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 13696);
  CSB_Write(device, 3, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 128);
  CSB_Write(device, 8, 128);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 1158907904);
  CSB_Write(device, 11, 38545408);
  CSB_Write(device, 12, 56576);
  CSB_Write(device, 13, 989300736);
  CSB_Write(device, 14, 31);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 2347008);
  CSB_Write(device, 27, 997689344);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("step144!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step145 (HANDLE& device, int kvcache, int token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 2363392);
  CSB_Write(device, 195, 989300736);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : ((1 * token) - 0))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : ((1 * token) - 0))));
  CSB_Write(device, 198, 997689344);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : ((1 * token) - 0))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : ((1 * token) - 0))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : ((1 * token) - 0)));
  CSB_Write(device, 204, (kvcache ? 1 : ((1 * token) - 0)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_STEP
printf("step145!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step146 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in cache48 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 997689344);
  CSB_Write(device, 11, 39450624);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, (kvcache ? (427264000 + ((token - 1) * 64)) : (427264000 + (last_token * 64))));
  CSB_Write(device, 14, 8);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 2379776);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, 65536);
  CSB_Write(device, 32, 65536);
  CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("step146!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step147 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.pos_emb accel operator node, storage data in cache49 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (kvcache ? (0 + ((token - 1) * 64)) : (0 + (last_token * 64))));
  CSB_Write(device, 195, (kvcache ? (427264000 + ((token - 1) * 64)) : (427264000 + (last_token * 64))));
  CSB_Write(device, 196, 262144);
  CSB_Write(device, 197, 65536);
  CSB_Write(device, 198, (kvcache ? (436701184 + ((token - 1) * 64)) : (436701184 + (last_token * 64))));
  CSB_Write(device, 199, 262144);
  CSB_Write(device, 200, 65536);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 203, 34);
  CSB_Write(device, 204, 65536);
  CSB_Write(device, 205, 0);
  CSB_Write(device, 206, 0);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
#ifdef PRINT_STEP
printf("step147!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step148 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_afterTRP accel operator node, storage data in cache50 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 445089792);
  CSB_Write(device, 195, (kvcache ? (436701184 + ((token - 1) * 64)) : (436701184 + (last_token * 64))));
  CSB_Write(device, 196, 262144);
  CSB_Write(device, 197, 65536);
  CSB_Write(device, 198, (kvcache ? (445614080 + ((token - 1) * 64)) : (445614080 + (last_token * 64))));
  CSB_Write(device, 199, 262144);
  CSB_Write(device, 200, 65536);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, token);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 11688);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 2);
#ifdef PRINT_STEP
printf("step148!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterTRP run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step149 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.softmax accel operator node, storage data in cache51 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (1 - kvcache));
  CSB_Write(device, 195, (kvcache ? (445614080 + ((token - 1) * 64)) : (445614080 + (last_token * 64))));
  CSB_Write(device, 196, 262144);
  CSB_Write(device, 197, 65536);
  CSB_Write(device, 198, (kvcache ? (454002688 + ((token - 1) * 64)) : (454002688 + (last_token * 64))));
  CSB_Write(device, 199, 262144);
  CSB_Write(device, 200, 65536);
  CSB_Write(device, 201, (((token + 32) - 1) / 32));
  CSB_Write(device, 202, 32);
  CSB_Write(device, 203, token);
  CSB_Write(device, 204, (kvcache ? 1 : (((((token - last_token) + 1) - 1) / 1) * 1)));
  CSB_Write(device, 205, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 206, last_token);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 8);
#ifdef PRINT_STEP
printf("step149!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.softmax run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step150 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_afterF2W accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 436176896);
  CSB_Write(device, 195, (kvcache ? (454002688 + ((token - 1) * 64)) : (454002688 + (last_token * 64))));
  CSB_Write(device, 196, 262144);
  CSB_Write(device, 197, 65536);
  CSB_Write(device, 198, 997689344);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, (((token + 32) - 1) / 32));
  CSB_Write(device, 202, token);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 4);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 1);
#ifdef PRINT_STEP
printf("step150!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterF2W run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step151 (HANDLE& device, int kvcache, int token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 997689344);
  CSB_Write(device, 11, 39754752);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 1158907904);
  CSB_Write(device, 14, 7);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 2398208);
  CSB_Write(device, 27, 989300736);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("step151!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step152 (HANDLE& device, int kvcache, int token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 2414592);
  CSB_Write(device, 195, 1158907904);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : ((1 * token) - 0))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : ((1 * token) - 0))));
  CSB_Write(device, 198, 989300736);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : ((1 * token) - 0))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : ((1 * token) - 0))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : ((1 * token) - 0)));
  CSB_Write(device, 204, (kvcache ? 1 : ((1 * token) - 0)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_STEP
printf("step152!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step153 (HANDLE& device, int kvcache, int token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 989300736);
  CSB_Write(device, 11, 40929024);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 997689344);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 2485760);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("step153!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step154 (HANDLE& device, int kvcache, int token) {
// accel.hbm.activate accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 32768);
  CSB_Write(device, 195, 997689344);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 198, 1025738752);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 201, 428);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 204, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 205, 428);
  CSB_Write(device, 206, 13696);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 16);
#ifdef PRINT_STEP
printf("step154!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.activate run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step155 (HANDLE& device, int kvcache, int token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 989300736);
  CSB_Write(device, 11, 40025088);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 997689344);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 2);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 2430976);
  CSB_Write(device, 27, 1025738752);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("step155!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step156 (HANDLE& device, int kvcache, int token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 13696);
  CSB_Write(device, 3, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 128);
  CSB_Write(device, 8, 128);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 997689344);
  CSB_Write(device, 11, 41832960);
  CSB_Write(device, 12, 56576);
  CSB_Write(device, 13, 989300736);
  CSB_Write(device, 14, 31);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 2540544);
  CSB_Write(device, 27, 1158907904);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("step156!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step157 (HANDLE& device, int kvcache, int token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 2556928);
  CSB_Write(device, 195, 989300736);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : ((1 * token) - 0))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : ((1 * token) - 0))));
  CSB_Write(device, 198, 1158907904);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : ((1 * token) - 0))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : ((1 * token) - 0))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : ((1 * token) - 0)));
  CSB_Write(device, 204, (kvcache ? 1 : ((1 * token) - 0)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_STEP
printf("step157!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step158 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in cache52 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 1158907904);
  CSB_Write(device, 11, 42738176);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, (kvcache ? (462391296 + ((token - 1) * 64)) : (462391296 + (last_token * 64))));
  CSB_Write(device, 14, 8);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 2573312);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, 65536);
  CSB_Write(device, 32, 65536);
  CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("step158!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step159 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.pos_emb accel operator node, storage data in cache53 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (kvcache ? (0 + ((token - 1) * 64)) : (0 + (last_token * 64))));
  CSB_Write(device, 195, (kvcache ? (462391296 + ((token - 1) * 64)) : (462391296 + (last_token * 64))));
  CSB_Write(device, 196, 262144);
  CSB_Write(device, 197, 65536);
  CSB_Write(device, 198, (kvcache ? (471828480 + ((token - 1) * 64)) : (471828480 + (last_token * 64))));
  CSB_Write(device, 199, 262144);
  CSB_Write(device, 200, 65536);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 203, 34);
  CSB_Write(device, 204, 65536);
  CSB_Write(device, 205, 0);
  CSB_Write(device, 206, 0);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
#ifdef PRINT_STEP
printf("step159!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step160 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_afterTRP accel operator node, storage data in cache54 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 480217088);
  CSB_Write(device, 195, (kvcache ? (471828480 + ((token - 1) * 64)) : (471828480 + (last_token * 64))));
  CSB_Write(device, 196, 262144);
  CSB_Write(device, 197, 65536);
  CSB_Write(device, 198, (kvcache ? (480741376 + ((token - 1) * 64)) : (480741376 + (last_token * 64))));
  CSB_Write(device, 199, 262144);
  CSB_Write(device, 200, 65536);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, token);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 11688);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 2);
#ifdef PRINT_STEP
printf("step160!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterTRP run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step161 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.softmax accel operator node, storage data in cache55 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (1 - kvcache));
  CSB_Write(device, 195, (kvcache ? (480741376 + ((token - 1) * 64)) : (480741376 + (last_token * 64))));
  CSB_Write(device, 196, 262144);
  CSB_Write(device, 197, 65536);
  CSB_Write(device, 198, (kvcache ? (489129984 + ((token - 1) * 64)) : (489129984 + (last_token * 64))));
  CSB_Write(device, 199, 262144);
  CSB_Write(device, 200, 65536);
  CSB_Write(device, 201, (((token + 32) - 1) / 32));
  CSB_Write(device, 202, 32);
  CSB_Write(device, 203, token);
  CSB_Write(device, 204, (kvcache ? 1 : (((((token - last_token) + 1) - 1) / 1) * 1)));
  CSB_Write(device, 205, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 206, last_token);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 8);
#ifdef PRINT_STEP
printf("step161!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.softmax run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step162 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_afterF2W accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 471304192);
  CSB_Write(device, 195, (kvcache ? (489129984 + ((token - 1) * 64)) : (489129984 + (last_token * 64))));
  CSB_Write(device, 196, 262144);
  CSB_Write(device, 197, 65536);
  CSB_Write(device, 198, 1158907904);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, (((token + 32) - 1) / 32));
  CSB_Write(device, 202, token);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 4);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 1);
#ifdef PRINT_STEP
printf("step162!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterF2W run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step163 (HANDLE& device, int kvcache, int token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 1158907904);
  CSB_Write(device, 11, 43042304);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 997689344);
  CSB_Write(device, 14, 7);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 2591744);
  CSB_Write(device, 27, 989300736);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("step163!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step164 (HANDLE& device, int kvcache, int token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 2608128);
  CSB_Write(device, 195, 997689344);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : ((1 * token) - 0))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : ((1 * token) - 0))));
  CSB_Write(device, 198, 989300736);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : ((1 * token) - 0))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : ((1 * token) - 0))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : ((1 * token) - 0)));
  CSB_Write(device, 204, (kvcache ? 1 : ((1 * token) - 0)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_STEP
printf("step164!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step165 (HANDLE& device, int kvcache, int token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 989300736);
  CSB_Write(device, 11, 44216576);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 1158907904);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 2679296);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("step165!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step166 (HANDLE& device, int kvcache, int token) {
// accel.hbm.activate accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 32768);
  CSB_Write(device, 195, 1158907904);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 198, 1025738752);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 201, 428);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 204, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 205, 428);
  CSB_Write(device, 206, 13696);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 16);
#ifdef PRINT_STEP
printf("step166!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.activate run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step167 (HANDLE& device, int kvcache, int token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 989300736);
  CSB_Write(device, 11, 43312640);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 1158907904);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 2);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 2624512);
  CSB_Write(device, 27, 1025738752);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("step167!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step168 (HANDLE& device, int kvcache, int token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 13696);
  CSB_Write(device, 3, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 128);
  CSB_Write(device, 8, 128);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 1158907904);
  CSB_Write(device, 11, 45120512);
  CSB_Write(device, 12, 56576);
  CSB_Write(device, 13, 989300736);
  CSB_Write(device, 14, 31);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 2734080);
  CSB_Write(device, 27, 997689344);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("step168!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step169 (HANDLE& device, int kvcache, int token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 2750464);
  CSB_Write(device, 195, 989300736);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : ((1 * token) - 0))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : ((1 * token) - 0))));
  CSB_Write(device, 198, 997689344);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : ((1 * token) - 0))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : ((1 * token) - 0))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : ((1 * token) - 0)));
  CSB_Write(device, 204, (kvcache ? 1 : ((1 * token) - 0)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_STEP
printf("step169!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step170 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in cache56 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 997689344);
  CSB_Write(device, 11, 46025728);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, (kvcache ? (497518592 + ((token - 1) * 64)) : (497518592 + (last_token * 64))));
  CSB_Write(device, 14, 8);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 2766848);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, 65536);
  CSB_Write(device, 32, 65536);
  CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("step170!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step171 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.pos_emb accel operator node, storage data in cache57 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (kvcache ? (0 + ((token - 1) * 64)) : (0 + (last_token * 64))));
  CSB_Write(device, 195, (kvcache ? (497518592 + ((token - 1) * 64)) : (497518592 + (last_token * 64))));
  CSB_Write(device, 196, 262144);
  CSB_Write(device, 197, 65536);
  CSB_Write(device, 198, (kvcache ? (506955776 + ((token - 1) * 64)) : (506955776 + (last_token * 64))));
  CSB_Write(device, 199, 262144);
  CSB_Write(device, 200, 65536);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 203, 34);
  CSB_Write(device, 204, 65536);
  CSB_Write(device, 205, 0);
  CSB_Write(device, 206, 0);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
#ifdef PRINT_STEP
printf("step171!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step172 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_afterTRP accel operator node, storage data in cache58 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 515344384);
  CSB_Write(device, 195, (kvcache ? (506955776 + ((token - 1) * 64)) : (506955776 + (last_token * 64))));
  CSB_Write(device, 196, 262144);
  CSB_Write(device, 197, 65536);
  CSB_Write(device, 198, (kvcache ? (515868672 + ((token - 1) * 64)) : (515868672 + (last_token * 64))));
  CSB_Write(device, 199, 262144);
  CSB_Write(device, 200, 65536);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, token);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 11688);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 2);
#ifdef PRINT_STEP
printf("step172!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterTRP run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step173 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.softmax accel operator node, storage data in cache59 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (1 - kvcache));
  CSB_Write(device, 195, (kvcache ? (515868672 + ((token - 1) * 64)) : (515868672 + (last_token * 64))));
  CSB_Write(device, 196, 262144);
  CSB_Write(device, 197, 65536);
  CSB_Write(device, 198, (kvcache ? (524257280 + ((token - 1) * 64)) : (524257280 + (last_token * 64))));
  CSB_Write(device, 199, 262144);
  CSB_Write(device, 200, 65536);
  CSB_Write(device, 201, (((token + 32) - 1) / 32));
  CSB_Write(device, 202, 32);
  CSB_Write(device, 203, token);
  CSB_Write(device, 204, (kvcache ? 1 : (((((token - last_token) + 1) - 1) / 1) * 1)));
  CSB_Write(device, 205, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 206, last_token);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 8);
#ifdef PRINT_STEP
printf("step173!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.softmax run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step174 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_afterF2W accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 506431488);
  CSB_Write(device, 195, (kvcache ? (524257280 + ((token - 1) * 64)) : (524257280 + (last_token * 64))));
  CSB_Write(device, 196, 262144);
  CSB_Write(device, 197, 65536);
  CSB_Write(device, 198, 997689344);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, (((token + 32) - 1) / 32));
  CSB_Write(device, 202, token);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 4);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 1);
#ifdef PRINT_STEP
printf("step174!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterF2W run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step175 (HANDLE& device, int kvcache, int token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 997689344);
  CSB_Write(device, 11, 46329856);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 1158907904);
  CSB_Write(device, 14, 7);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 2785280);
  CSB_Write(device, 27, 989300736);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("step175!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step176 (HANDLE& device, int kvcache, int token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 2801664);
  CSB_Write(device, 195, 1158907904);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : ((1 * token) - 0))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : ((1 * token) - 0))));
  CSB_Write(device, 198, 989300736);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : ((1 * token) - 0))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : ((1 * token) - 0))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : ((1 * token) - 0)));
  CSB_Write(device, 204, (kvcache ? 1 : ((1 * token) - 0)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_STEP
printf("step176!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step177 (HANDLE& device, int kvcache, int token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 989300736);
  CSB_Write(device, 11, 47504128);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 997689344);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 2872832);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("step177!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step178 (HANDLE& device, int kvcache, int token) {
// accel.hbm.activate accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 32768);
  CSB_Write(device, 195, 997689344);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 198, 1025738752);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 201, 428);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 204, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 205, 428);
  CSB_Write(device, 206, 13696);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 16);
#ifdef PRINT_STEP
printf("step178!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.activate run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step179 (HANDLE& device, int kvcache, int token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 989300736);
  CSB_Write(device, 11, 46600192);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 997689344);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 2);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 2818048);
  CSB_Write(device, 27, 1025738752);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("step179!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step180 (HANDLE& device, int kvcache, int token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 13696);
  CSB_Write(device, 3, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 128);
  CSB_Write(device, 8, 128);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 997689344);
  CSB_Write(device, 11, 48408064);
  CSB_Write(device, 12, 56576);
  CSB_Write(device, 13, 989300736);
  CSB_Write(device, 14, 31);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 2927616);
  CSB_Write(device, 27, 1158907904);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("step180!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step181 (HANDLE& device, int kvcache, int token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 2944000);
  CSB_Write(device, 195, 989300736);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : ((1 * token) - 0))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : ((1 * token) - 0))));
  CSB_Write(device, 198, 1158907904);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : ((1 * token) - 0))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : ((1 * token) - 0))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : ((1 * token) - 0)));
  CSB_Write(device, 204, (kvcache ? 1 : ((1 * token) - 0)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_STEP
printf("step181!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step182 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in cache60 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 1158907904);
  CSB_Write(device, 11, 49313280);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, (kvcache ? (532645888 + ((token - 1) * 64)) : (532645888 + (last_token * 64))));
  CSB_Write(device, 14, 8);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 2960384);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, 65536);
  CSB_Write(device, 32, 65536);
  CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("step182!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step183 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.pos_emb accel operator node, storage data in cache61 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (kvcache ? (0 + ((token - 1) * 64)) : (0 + (last_token * 64))));
  CSB_Write(device, 195, (kvcache ? (532645888 + ((token - 1) * 64)) : (532645888 + (last_token * 64))));
  CSB_Write(device, 196, 262144);
  CSB_Write(device, 197, 65536);
  CSB_Write(device, 198, (kvcache ? (542083072 + ((token - 1) * 64)) : (542083072 + (last_token * 64))));
  CSB_Write(device, 199, 262144);
  CSB_Write(device, 200, 65536);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 203, 34);
  CSB_Write(device, 204, 65536);
  CSB_Write(device, 205, 0);
  CSB_Write(device, 206, 0);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
#ifdef PRINT_STEP
printf("step183!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step184 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_afterTRP accel operator node, storage data in cache62 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 550471680);
  CSB_Write(device, 195, (kvcache ? (542083072 + ((token - 1) * 64)) : (542083072 + (last_token * 64))));
  CSB_Write(device, 196, 262144);
  CSB_Write(device, 197, 65536);
  CSB_Write(device, 198, (kvcache ? (550995968 + ((token - 1) * 64)) : (550995968 + (last_token * 64))));
  CSB_Write(device, 199, 262144);
  CSB_Write(device, 200, 65536);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, token);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 11688);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 2);
#ifdef PRINT_STEP
printf("step184!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterTRP run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step185 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.softmax accel operator node, storage data in cache63 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (1 - kvcache));
  CSB_Write(device, 195, (kvcache ? (550995968 + ((token - 1) * 64)) : (550995968 + (last_token * 64))));
  CSB_Write(device, 196, 262144);
  CSB_Write(device, 197, 65536);
  CSB_Write(device, 198, (kvcache ? (559384576 + ((token - 1) * 64)) : (559384576 + (last_token * 64))));
  CSB_Write(device, 199, 262144);
  CSB_Write(device, 200, 65536);
  CSB_Write(device, 201, (((token + 32) - 1) / 32));
  CSB_Write(device, 202, 32);
  CSB_Write(device, 203, token);
  CSB_Write(device, 204, (kvcache ? 1 : (((((token - last_token) + 1) - 1) / 1) * 1)));
  CSB_Write(device, 205, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 206, last_token);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 8);
#ifdef PRINT_STEP
printf("step185!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.softmax run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step186 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_afterF2W accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 541558784);
  CSB_Write(device, 195, (kvcache ? (559384576 + ((token - 1) * 64)) : (559384576 + (last_token * 64))));
  CSB_Write(device, 196, 262144);
  CSB_Write(device, 197, 65536);
  CSB_Write(device, 198, 1158907904);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, (((token + 32) - 1) / 32));
  CSB_Write(device, 202, token);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 4);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 1);
#ifdef PRINT_STEP
printf("step186!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterF2W run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step187 (HANDLE& device, int kvcache, int token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 1158907904);
  CSB_Write(device, 11, 49617408);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 997689344);
  CSB_Write(device, 14, 7);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 2978816);
  CSB_Write(device, 27, 989300736);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("step187!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step188 (HANDLE& device, int kvcache, int token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 2995200);
  CSB_Write(device, 195, 997689344);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : ((1 * token) - 0))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : ((1 * token) - 0))));
  CSB_Write(device, 198, 989300736);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : ((1 * token) - 0))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : ((1 * token) - 0))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : ((1 * token) - 0)));
  CSB_Write(device, 204, (kvcache ? 1 : ((1 * token) - 0)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_STEP
printf("step188!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step189 (HANDLE& device, int kvcache, int token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 989300736);
  CSB_Write(device, 11, 50791680);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 1158907904);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 3066368);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("step189!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step190 (HANDLE& device, int kvcache, int token) {
// accel.hbm.activate accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 32768);
  CSB_Write(device, 195, 1158907904);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 198, 1025738752);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 201, 428);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 204, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 205, 428);
  CSB_Write(device, 206, 13696);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 16);
#ifdef PRINT_STEP
printf("step190!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.activate run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step191 (HANDLE& device, int kvcache, int token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 989300736);
  CSB_Write(device, 11, 49887744);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 1158907904);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 2);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 3011584);
  CSB_Write(device, 27, 1025738752);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("step191!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step192 (HANDLE& device, int kvcache, int token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 13696);
  CSB_Write(device, 3, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 128);
  CSB_Write(device, 8, 128);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 1158907904);
  CSB_Write(device, 11, 51695616);
  CSB_Write(device, 12, 56576);
  CSB_Write(device, 13, 989300736);
  CSB_Write(device, 14, 31);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 3121152);
  CSB_Write(device, 27, 997689344);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("step192!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step193 (HANDLE& device, int kvcache, int token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 3137536);
  CSB_Write(device, 195, 989300736);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : ((1 * token) - 0))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : ((1 * token) - 0))));
  CSB_Write(device, 198, 997689344);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : ((1 * token) - 0))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : ((1 * token) - 0))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : ((1 * token) - 0)));
  CSB_Write(device, 204, (kvcache ? 1 : ((1 * token) - 0)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_STEP
printf("step193!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step194 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in cache64 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 997689344);
  CSB_Write(device, 11, 52600832);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, (kvcache ? (567773184 + ((token - 1) * 64)) : (567773184 + (last_token * 64))));
  CSB_Write(device, 14, 8);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 3153920);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, 65536);
  CSB_Write(device, 32, 65536);
  CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("step194!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step195 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.pos_emb accel operator node, storage data in cache65 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (kvcache ? (0 + ((token - 1) * 64)) : (0 + (last_token * 64))));
  CSB_Write(device, 195, (kvcache ? (567773184 + ((token - 1) * 64)) : (567773184 + (last_token * 64))));
  CSB_Write(device, 196, 262144);
  CSB_Write(device, 197, 65536);
  CSB_Write(device, 198, (kvcache ? (577210368 + ((token - 1) * 64)) : (577210368 + (last_token * 64))));
  CSB_Write(device, 199, 262144);
  CSB_Write(device, 200, 65536);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 203, 34);
  CSB_Write(device, 204, 65536);
  CSB_Write(device, 205, 0);
  CSB_Write(device, 206, 0);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
#ifdef PRINT_STEP
printf("step195!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step196 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_afterTRP accel operator node, storage data in cache66 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 585598976);
  CSB_Write(device, 195, (kvcache ? (577210368 + ((token - 1) * 64)) : (577210368 + (last_token * 64))));
  CSB_Write(device, 196, 262144);
  CSB_Write(device, 197, 65536);
  CSB_Write(device, 198, (kvcache ? (586123264 + ((token - 1) * 64)) : (586123264 + (last_token * 64))));
  CSB_Write(device, 199, 262144);
  CSB_Write(device, 200, 65536);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, token);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 11688);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 2);
#ifdef PRINT_STEP
printf("step196!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterTRP run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step197 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.softmax accel operator node, storage data in cache67 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (1 - kvcache));
  CSB_Write(device, 195, (kvcache ? (586123264 + ((token - 1) * 64)) : (586123264 + (last_token * 64))));
  CSB_Write(device, 196, 262144);
  CSB_Write(device, 197, 65536);
  CSB_Write(device, 198, (kvcache ? (594511872 + ((token - 1) * 64)) : (594511872 + (last_token * 64))));
  CSB_Write(device, 199, 262144);
  CSB_Write(device, 200, 65536);
  CSB_Write(device, 201, (((token + 32) - 1) / 32));
  CSB_Write(device, 202, 32);
  CSB_Write(device, 203, token);
  CSB_Write(device, 204, (kvcache ? 1 : (((((token - last_token) + 1) - 1) / 1) * 1)));
  CSB_Write(device, 205, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 206, last_token);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 8);
#ifdef PRINT_STEP
printf("step197!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.softmax run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step198 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_afterF2W accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 576686080);
  CSB_Write(device, 195, (kvcache ? (594511872 + ((token - 1) * 64)) : (594511872 + (last_token * 64))));
  CSB_Write(device, 196, 262144);
  CSB_Write(device, 197, 65536);
  CSB_Write(device, 198, 997689344);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, (((token + 32) - 1) / 32));
  CSB_Write(device, 202, token);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 4);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 1);
#ifdef PRINT_STEP
printf("step198!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterF2W run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step199 (HANDLE& device, int kvcache, int token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 997689344);
  CSB_Write(device, 11, 52904960);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 1158907904);
  CSB_Write(device, 14, 7);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 3172352);
  CSB_Write(device, 27, 989300736);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("step199!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step200 (HANDLE& device, int kvcache, int token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 3188736);
  CSB_Write(device, 195, 1158907904);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : ((1 * token) - 0))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : ((1 * token) - 0))));
  CSB_Write(device, 198, 989300736);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : ((1 * token) - 0))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : ((1 * token) - 0))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : ((1 * token) - 0)));
  CSB_Write(device, 204, (kvcache ? 1 : ((1 * token) - 0)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_STEP
printf("step200!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step201 (HANDLE& device, int kvcache, int token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 989300736);
  CSB_Write(device, 11, 54079232);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 997689344);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 3259904);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("step201!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step202 (HANDLE& device, int kvcache, int token) {
// accel.hbm.activate accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 32768);
  CSB_Write(device, 195, 997689344);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 198, 1025738752);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 201, 428);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 204, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 205, 428);
  CSB_Write(device, 206, 13696);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 16);
#ifdef PRINT_STEP
printf("step202!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.activate run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step203 (HANDLE& device, int kvcache, int token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 989300736);
  CSB_Write(device, 11, 53175296);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 997689344);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 2);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 3205120);
  CSB_Write(device, 27, 1025738752);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("step203!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step204 (HANDLE& device, int kvcache, int token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 13696);
  CSB_Write(device, 3, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 128);
  CSB_Write(device, 8, 128);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 997689344);
  CSB_Write(device, 11, 54983168);
  CSB_Write(device, 12, 56576);
  CSB_Write(device, 13, 989300736);
  CSB_Write(device, 14, 31);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 3314688);
  CSB_Write(device, 27, 1158907904);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("step204!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step205 (HANDLE& device, int kvcache, int token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 3331072);
  CSB_Write(device, 195, 989300736);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : ((1 * token) - 0))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : ((1 * token) - 0))));
  CSB_Write(device, 198, 1158907904);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : ((1 * token) - 0))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : ((1 * token) - 0))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : ((1 * token) - 0)));
  CSB_Write(device, 204, (kvcache ? 1 : ((1 * token) - 0)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_STEP
printf("step205!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step206 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in cache68 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 1158907904);
  CSB_Write(device, 11, 55888384);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, (kvcache ? (602900480 + ((token - 1) * 64)) : (602900480 + (last_token * 64))));
  CSB_Write(device, 14, 8);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 3347456);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, 65536);
  CSB_Write(device, 32, 65536);
  CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("step206!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step207 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.pos_emb accel operator node, storage data in cache69 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (kvcache ? (0 + ((token - 1) * 64)) : (0 + (last_token * 64))));
  CSB_Write(device, 195, (kvcache ? (602900480 + ((token - 1) * 64)) : (602900480 + (last_token * 64))));
  CSB_Write(device, 196, 262144);
  CSB_Write(device, 197, 65536);
  CSB_Write(device, 198, (kvcache ? (612337664 + ((token - 1) * 64)) : (612337664 + (last_token * 64))));
  CSB_Write(device, 199, 262144);
  CSB_Write(device, 200, 65536);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 203, 34);
  CSB_Write(device, 204, 65536);
  CSB_Write(device, 205, 0);
  CSB_Write(device, 206, 0);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
#ifdef PRINT_STEP
printf("step207!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step208 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_afterTRP accel operator node, storage data in cache70 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 620726272);
  CSB_Write(device, 195, (kvcache ? (612337664 + ((token - 1) * 64)) : (612337664 + (last_token * 64))));
  CSB_Write(device, 196, 262144);
  CSB_Write(device, 197, 65536);
  CSB_Write(device, 198, (kvcache ? (621250560 + ((token - 1) * 64)) : (621250560 + (last_token * 64))));
  CSB_Write(device, 199, 262144);
  CSB_Write(device, 200, 65536);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, token);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 11688);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 2);
#ifdef PRINT_STEP
printf("step208!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterTRP run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step209 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.softmax accel operator node, storage data in cache71 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (1 - kvcache));
  CSB_Write(device, 195, (kvcache ? (621250560 + ((token - 1) * 64)) : (621250560 + (last_token * 64))));
  CSB_Write(device, 196, 262144);
  CSB_Write(device, 197, 65536);
  CSB_Write(device, 198, (kvcache ? (629639168 + ((token - 1) * 64)) : (629639168 + (last_token * 64))));
  CSB_Write(device, 199, 262144);
  CSB_Write(device, 200, 65536);
  CSB_Write(device, 201, (((token + 32) - 1) / 32));
  CSB_Write(device, 202, 32);
  CSB_Write(device, 203, token);
  CSB_Write(device, 204, (kvcache ? 1 : (((((token - last_token) + 1) - 1) / 1) * 1)));
  CSB_Write(device, 205, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 206, last_token);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 8);
#ifdef PRINT_STEP
printf("step209!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.softmax run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step210 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_afterF2W accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 611813376);
  CSB_Write(device, 195, (kvcache ? (629639168 + ((token - 1) * 64)) : (629639168 + (last_token * 64))));
  CSB_Write(device, 196, 262144);
  CSB_Write(device, 197, 65536);
  CSB_Write(device, 198, 1158907904);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, (((token + 32) - 1) / 32));
  CSB_Write(device, 202, token);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 4);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 1);
#ifdef PRINT_STEP
printf("step210!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterF2W run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step211 (HANDLE& device, int kvcache, int token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 1158907904);
  CSB_Write(device, 11, 56192512);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 997689344);
  CSB_Write(device, 14, 7);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 3365888);
  CSB_Write(device, 27, 989300736);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("step211!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step212 (HANDLE& device, int kvcache, int token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 3382272);
  CSB_Write(device, 195, 997689344);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : ((1 * token) - 0))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : ((1 * token) - 0))));
  CSB_Write(device, 198, 989300736);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : ((1 * token) - 0))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : ((1 * token) - 0))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : ((1 * token) - 0)));
  CSB_Write(device, 204, (kvcache ? 1 : ((1 * token) - 0)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_STEP
printf("step212!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step213 (HANDLE& device, int kvcache, int token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 989300736);
  CSB_Write(device, 11, 57366784);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 1158907904);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 3453440);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("step213!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step214 (HANDLE& device, int kvcache, int token) {
// accel.hbm.activate accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 32768);
  CSB_Write(device, 195, 1158907904);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 198, 1025738752);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 201, 428);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 204, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 205, 428);
  CSB_Write(device, 206, 13696);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 16);
#ifdef PRINT_STEP
printf("step214!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.activate run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step215 (HANDLE& device, int kvcache, int token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 989300736);
  CSB_Write(device, 11, 56462848);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 1158907904);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 2);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 3398656);
  CSB_Write(device, 27, 1025738752);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("step215!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step216 (HANDLE& device, int kvcache, int token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 13696);
  CSB_Write(device, 3, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 128);
  CSB_Write(device, 8, 128);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 1158907904);
  CSB_Write(device, 11, 58270720);
  CSB_Write(device, 12, 56576);
  CSB_Write(device, 13, 989300736);
  CSB_Write(device, 14, 31);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 3508224);
  CSB_Write(device, 27, 997689344);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("step216!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step217 (HANDLE& device, int kvcache, int token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 3524608);
  CSB_Write(device, 195, 989300736);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : ((1 * token) - 0))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : ((1 * token) - 0))));
  CSB_Write(device, 198, 997689344);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : ((1 * token) - 0))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : ((1 * token) - 0))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : ((1 * token) - 0)));
  CSB_Write(device, 204, (kvcache ? 1 : ((1 * token) - 0)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_STEP
printf("step217!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step218 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in cache72 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 997689344);
  CSB_Write(device, 11, 59175936);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, (kvcache ? (638027776 + ((token - 1) * 64)) : (638027776 + (last_token * 64))));
  CSB_Write(device, 14, 8);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 3540992);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, 65536);
  CSB_Write(device, 32, 65536);
  CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("step218!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step219 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.pos_emb accel operator node, storage data in cache73 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (kvcache ? (0 + ((token - 1) * 64)) : (0 + (last_token * 64))));
  CSB_Write(device, 195, (kvcache ? (638027776 + ((token - 1) * 64)) : (638027776 + (last_token * 64))));
  CSB_Write(device, 196, 262144);
  CSB_Write(device, 197, 65536);
  CSB_Write(device, 198, (kvcache ? (647464960 + ((token - 1) * 64)) : (647464960 + (last_token * 64))));
  CSB_Write(device, 199, 262144);
  CSB_Write(device, 200, 65536);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 203, 34);
  CSB_Write(device, 204, 65536);
  CSB_Write(device, 205, 0);
  CSB_Write(device, 206, 0);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
#ifdef PRINT_STEP
printf("step219!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step220 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_afterTRP accel operator node, storage data in cache74 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 655853568);
  CSB_Write(device, 195, (kvcache ? (647464960 + ((token - 1) * 64)) : (647464960 + (last_token * 64))));
  CSB_Write(device, 196, 262144);
  CSB_Write(device, 197, 65536);
  CSB_Write(device, 198, (kvcache ? (656377856 + ((token - 1) * 64)) : (656377856 + (last_token * 64))));
  CSB_Write(device, 199, 262144);
  CSB_Write(device, 200, 65536);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, token);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 11688);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 2);
#ifdef PRINT_STEP
printf("step220!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterTRP run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step221 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.softmax accel operator node, storage data in cache75 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (1 - kvcache));
  CSB_Write(device, 195, (kvcache ? (656377856 + ((token - 1) * 64)) : (656377856 + (last_token * 64))));
  CSB_Write(device, 196, 262144);
  CSB_Write(device, 197, 65536);
  CSB_Write(device, 198, (kvcache ? (664766464 + ((token - 1) * 64)) : (664766464 + (last_token * 64))));
  CSB_Write(device, 199, 262144);
  CSB_Write(device, 200, 65536);
  CSB_Write(device, 201, (((token + 32) - 1) / 32));
  CSB_Write(device, 202, 32);
  CSB_Write(device, 203, token);
  CSB_Write(device, 204, (kvcache ? 1 : (((((token - last_token) + 1) - 1) / 1) * 1)));
  CSB_Write(device, 205, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 206, last_token);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 8);
#ifdef PRINT_STEP
printf("step221!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.softmax run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step222 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_afterF2W accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 646940672);
  CSB_Write(device, 195, (kvcache ? (664766464 + ((token - 1) * 64)) : (664766464 + (last_token * 64))));
  CSB_Write(device, 196, 262144);
  CSB_Write(device, 197, 65536);
  CSB_Write(device, 198, 997689344);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, (((token + 32) - 1) / 32));
  CSB_Write(device, 202, token);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 4);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 1);
#ifdef PRINT_STEP
printf("step222!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterF2W run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step223 (HANDLE& device, int kvcache, int token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 997689344);
  CSB_Write(device, 11, 59480064);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 1158907904);
  CSB_Write(device, 14, 7);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 3559424);
  CSB_Write(device, 27, 989300736);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("step223!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step224 (HANDLE& device, int kvcache, int token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 3575808);
  CSB_Write(device, 195, 1158907904);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : ((1 * token) - 0))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : ((1 * token) - 0))));
  CSB_Write(device, 198, 989300736);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : ((1 * token) - 0))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : ((1 * token) - 0))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : ((1 * token) - 0)));
  CSB_Write(device, 204, (kvcache ? 1 : ((1 * token) - 0)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_STEP
printf("step224!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step225 (HANDLE& device, int kvcache, int token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 989300736);
  CSB_Write(device, 11, 60654336);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 997689344);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 3646976);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("step225!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step226 (HANDLE& device, int kvcache, int token) {
// accel.hbm.activate accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 32768);
  CSB_Write(device, 195, 997689344);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 198, 1025738752);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 201, 428);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 204, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 205, 428);
  CSB_Write(device, 206, 13696);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 16);
#ifdef PRINT_STEP
printf("step226!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.activate run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step227 (HANDLE& device, int kvcache, int token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 989300736);
  CSB_Write(device, 11, 59750400);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 997689344);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 2);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 3592192);
  CSB_Write(device, 27, 1025738752);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("step227!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step228 (HANDLE& device, int kvcache, int token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 13696);
  CSB_Write(device, 3, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 128);
  CSB_Write(device, 8, 128);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 997689344);
  CSB_Write(device, 11, 61558272);
  CSB_Write(device, 12, 56576);
  CSB_Write(device, 13, 989300736);
  CSB_Write(device, 14, 31);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 3701760);
  CSB_Write(device, 27, 1158907904);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("step228!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step229 (HANDLE& device, int kvcache, int token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 3718144);
  CSB_Write(device, 195, 989300736);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : ((1 * token) - 0))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : ((1 * token) - 0))));
  CSB_Write(device, 198, 1158907904);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : ((1 * token) - 0))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : ((1 * token) - 0))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : ((1 * token) - 0)));
  CSB_Write(device, 204, (kvcache ? 1 : ((1 * token) - 0)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_STEP
printf("step229!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step230 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in cache76 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 1158907904);
  CSB_Write(device, 11, 62463488);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, (kvcache ? (673155072 + ((token - 1) * 64)) : (673155072 + (last_token * 64))));
  CSB_Write(device, 14, 8);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 3734528);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, 65536);
  CSB_Write(device, 32, 65536);
  CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("step230!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step231 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.pos_emb accel operator node, storage data in cache77 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (kvcache ? (0 + ((token - 1) * 64)) : (0 + (last_token * 64))));
  CSB_Write(device, 195, (kvcache ? (673155072 + ((token - 1) * 64)) : (673155072 + (last_token * 64))));
  CSB_Write(device, 196, 262144);
  CSB_Write(device, 197, 65536);
  CSB_Write(device, 198, (kvcache ? (682592256 + ((token - 1) * 64)) : (682592256 + (last_token * 64))));
  CSB_Write(device, 199, 262144);
  CSB_Write(device, 200, 65536);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 203, 34);
  CSB_Write(device, 204, 65536);
  CSB_Write(device, 205, 0);
  CSB_Write(device, 206, 0);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
#ifdef PRINT_STEP
printf("step231!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step232 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_afterTRP accel operator node, storage data in cache78 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 690980864);
  CSB_Write(device, 195, (kvcache ? (682592256 + ((token - 1) * 64)) : (682592256 + (last_token * 64))));
  CSB_Write(device, 196, 262144);
  CSB_Write(device, 197, 65536);
  CSB_Write(device, 198, (kvcache ? (691505152 + ((token - 1) * 64)) : (691505152 + (last_token * 64))));
  CSB_Write(device, 199, 262144);
  CSB_Write(device, 200, 65536);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, token);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 11688);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 2);
#ifdef PRINT_STEP
printf("step232!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterTRP run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step233 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.softmax accel operator node, storage data in cache79 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (1 - kvcache));
  CSB_Write(device, 195, (kvcache ? (691505152 + ((token - 1) * 64)) : (691505152 + (last_token * 64))));
  CSB_Write(device, 196, 262144);
  CSB_Write(device, 197, 65536);
  CSB_Write(device, 198, (kvcache ? (699893760 + ((token - 1) * 64)) : (699893760 + (last_token * 64))));
  CSB_Write(device, 199, 262144);
  CSB_Write(device, 200, 65536);
  CSB_Write(device, 201, (((token + 32) - 1) / 32));
  CSB_Write(device, 202, 32);
  CSB_Write(device, 203, token);
  CSB_Write(device, 204, (kvcache ? 1 : (((((token - last_token) + 1) - 1) / 1) * 1)));
  CSB_Write(device, 205, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 206, last_token);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 8);
#ifdef PRINT_STEP
printf("step233!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.softmax run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step234 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_afterF2W accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 682067968);
  CSB_Write(device, 195, (kvcache ? (699893760 + ((token - 1) * 64)) : (699893760 + (last_token * 64))));
  CSB_Write(device, 196, 262144);
  CSB_Write(device, 197, 65536);
  CSB_Write(device, 198, 1158907904);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, (((token + 32) - 1) / 32));
  CSB_Write(device, 202, token);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 4);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 1);
#ifdef PRINT_STEP
printf("step234!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterF2W run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step235 (HANDLE& device, int kvcache, int token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 1158907904);
  CSB_Write(device, 11, 62767616);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 997689344);
  CSB_Write(device, 14, 7);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 3752960);
  CSB_Write(device, 27, 989300736);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("step235!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step236 (HANDLE& device, int kvcache, int token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 3769344);
  CSB_Write(device, 195, 997689344);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : ((1 * token) - 0))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : ((1 * token) - 0))));
  CSB_Write(device, 198, 989300736);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : ((1 * token) - 0))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : ((1 * token) - 0))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : ((1 * token) - 0)));
  CSB_Write(device, 204, (kvcache ? 1 : ((1 * token) - 0)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_STEP
printf("step236!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step237 (HANDLE& device, int kvcache, int token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 989300736);
  CSB_Write(device, 11, 63941888);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 1158907904);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 3840512);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("step237!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step238 (HANDLE& device, int kvcache, int token) {
// accel.hbm.activate accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 32768);
  CSB_Write(device, 195, 1158907904);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 198, 1025738752);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 201, 428);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 204, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 205, 428);
  CSB_Write(device, 206, 13696);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 16);
#ifdef PRINT_STEP
printf("step238!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.activate run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step239 (HANDLE& device, int kvcache, int token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 989300736);
  CSB_Write(device, 11, 63037952);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 1158907904);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 2);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 3785728);
  CSB_Write(device, 27, 1025738752);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("step239!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step240 (HANDLE& device, int kvcache, int token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 13696);
  CSB_Write(device, 3, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 128);
  CSB_Write(device, 8, 128);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 1158907904);
  CSB_Write(device, 11, 64845824);
  CSB_Write(device, 12, 56576);
  CSB_Write(device, 13, 989300736);
  CSB_Write(device, 14, 31);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 3895296);
  CSB_Write(device, 27, 997689344);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("step240!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step241 (HANDLE& device, int kvcache, int token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 3911680);
  CSB_Write(device, 195, 989300736);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : ((1 * token) - 0))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : ((1 * token) - 0))));
  CSB_Write(device, 198, 997689344);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : ((1 * token) - 0))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : ((1 * token) - 0))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : ((1 * token) - 0)));
  CSB_Write(device, 204, (kvcache ? 1 : ((1 * token) - 0)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_STEP
printf("step241!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step242 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in cache80 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 997689344);
  CSB_Write(device, 11, 65751040);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, (kvcache ? (708282368 + ((token - 1) * 64)) : (708282368 + (last_token * 64))));
  CSB_Write(device, 14, 8);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 3928064);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, 65536);
  CSB_Write(device, 32, 65536);
  CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("step242!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step243 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.pos_emb accel operator node, storage data in cache81 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (kvcache ? (0 + ((token - 1) * 64)) : (0 + (last_token * 64))));
  CSB_Write(device, 195, (kvcache ? (708282368 + ((token - 1) * 64)) : (708282368 + (last_token * 64))));
  CSB_Write(device, 196, 262144);
  CSB_Write(device, 197, 65536);
  CSB_Write(device, 198, (kvcache ? (717719552 + ((token - 1) * 64)) : (717719552 + (last_token * 64))));
  CSB_Write(device, 199, 262144);
  CSB_Write(device, 200, 65536);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 203, 34);
  CSB_Write(device, 204, 65536);
  CSB_Write(device, 205, 0);
  CSB_Write(device, 206, 0);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
#ifdef PRINT_STEP
printf("step243!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step244 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_afterTRP accel operator node, storage data in cache82 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 726108160);
  CSB_Write(device, 195, (kvcache ? (717719552 + ((token - 1) * 64)) : (717719552 + (last_token * 64))));
  CSB_Write(device, 196, 262144);
  CSB_Write(device, 197, 65536);
  CSB_Write(device, 198, (kvcache ? (726632448 + ((token - 1) * 64)) : (726632448 + (last_token * 64))));
  CSB_Write(device, 199, 262144);
  CSB_Write(device, 200, 65536);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, token);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 11688);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 2);
#ifdef PRINT_STEP
printf("step244!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterTRP run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step245 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.softmax accel operator node, storage data in cache83 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (1 - kvcache));
  CSB_Write(device, 195, (kvcache ? (726632448 + ((token - 1) * 64)) : (726632448 + (last_token * 64))));
  CSB_Write(device, 196, 262144);
  CSB_Write(device, 197, 65536);
  CSB_Write(device, 198, (kvcache ? (735021056 + ((token - 1) * 64)) : (735021056 + (last_token * 64))));
  CSB_Write(device, 199, 262144);
  CSB_Write(device, 200, 65536);
  CSB_Write(device, 201, (((token + 32) - 1) / 32));
  CSB_Write(device, 202, 32);
  CSB_Write(device, 203, token);
  CSB_Write(device, 204, (kvcache ? 1 : (((((token - last_token) + 1) - 1) / 1) * 1)));
  CSB_Write(device, 205, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 206, last_token);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 8);
#ifdef PRINT_STEP
printf("step245!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.softmax run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step246 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_afterF2W accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 717195264);
  CSB_Write(device, 195, (kvcache ? (735021056 + ((token - 1) * 64)) : (735021056 + (last_token * 64))));
  CSB_Write(device, 196, 262144);
  CSB_Write(device, 197, 65536);
  CSB_Write(device, 198, 997689344);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, (((token + 32) - 1) / 32));
  CSB_Write(device, 202, token);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 4);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 1);
#ifdef PRINT_STEP
printf("step246!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterF2W run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step247 (HANDLE& device, int kvcache, int token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 997689344);
  CSB_Write(device, 11, 66055168);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 1158907904);
  CSB_Write(device, 14, 7);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 3946496);
  CSB_Write(device, 27, 989300736);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("step247!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step248 (HANDLE& device, int kvcache, int token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 3962880);
  CSB_Write(device, 195, 1158907904);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : ((1 * token) - 0))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : ((1 * token) - 0))));
  CSB_Write(device, 198, 989300736);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : ((1 * token) - 0))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : ((1 * token) - 0))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : ((1 * token) - 0)));
  CSB_Write(device, 204, (kvcache ? 1 : ((1 * token) - 0)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_STEP
printf("step248!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step249 (HANDLE& device, int kvcache, int token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 989300736);
  CSB_Write(device, 11, 67229440);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 997689344);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 4034048);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("step249!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step250 (HANDLE& device, int kvcache, int token) {
// accel.hbm.activate accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 32768);
  CSB_Write(device, 195, 997689344);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 198, 1025738752);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 201, 428);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 204, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 205, 428);
  CSB_Write(device, 206, 13696);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 16);
#ifdef PRINT_STEP
printf("step250!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.activate run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step251 (HANDLE& device, int kvcache, int token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 989300736);
  CSB_Write(device, 11, 66325504);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 997689344);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 2);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 3979264);
  CSB_Write(device, 27, 1025738752);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("step251!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step252 (HANDLE& device, int kvcache, int token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 13696);
  CSB_Write(device, 3, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 128);
  CSB_Write(device, 8, 128);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 997689344);
  CSB_Write(device, 11, 68133376);
  CSB_Write(device, 12, 56576);
  CSB_Write(device, 13, 989300736);
  CSB_Write(device, 14, 31);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 4088832);
  CSB_Write(device, 27, 1158907904);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("step252!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step253 (HANDLE& device, int kvcache, int token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 4105216);
  CSB_Write(device, 195, 989300736);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : ((1 * token) - 0))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : ((1 * token) - 0))));
  CSB_Write(device, 198, 1158907904);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : ((1 * token) - 0))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : ((1 * token) - 0))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : ((1 * token) - 0)));
  CSB_Write(device, 204, (kvcache ? 1 : ((1 * token) - 0)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_STEP
printf("step253!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step254 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in cache84 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 1158907904);
  CSB_Write(device, 11, 69038592);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, (kvcache ? (743409664 + ((token - 1) * 64)) : (743409664 + (last_token * 64))));
  CSB_Write(device, 14, 8);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 4121600);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, 65536);
  CSB_Write(device, 32, 65536);
  CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("step254!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step255 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.pos_emb accel operator node, storage data in cache85 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (kvcache ? (0 + ((token - 1) * 64)) : (0 + (last_token * 64))));
  CSB_Write(device, 195, (kvcache ? (743409664 + ((token - 1) * 64)) : (743409664 + (last_token * 64))));
  CSB_Write(device, 196, 262144);
  CSB_Write(device, 197, 65536);
  CSB_Write(device, 198, (kvcache ? (752846848 + ((token - 1) * 64)) : (752846848 + (last_token * 64))));
  CSB_Write(device, 199, 262144);
  CSB_Write(device, 200, 65536);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 203, 34);
  CSB_Write(device, 204, 65536);
  CSB_Write(device, 205, 0);
  CSB_Write(device, 206, 0);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
#ifdef PRINT_STEP
printf("step255!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step256 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_afterTRP accel operator node, storage data in cache86 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 761235456);
  CSB_Write(device, 195, (kvcache ? (752846848 + ((token - 1) * 64)) : (752846848 + (last_token * 64))));
  CSB_Write(device, 196, 262144);
  CSB_Write(device, 197, 65536);
  CSB_Write(device, 198, (kvcache ? (761759744 + ((token - 1) * 64)) : (761759744 + (last_token * 64))));
  CSB_Write(device, 199, 262144);
  CSB_Write(device, 200, 65536);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, token);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 11688);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 2);
#ifdef PRINT_STEP
printf("step256!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterTRP run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step257 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.softmax accel operator node, storage data in cache87 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (1 - kvcache));
  CSB_Write(device, 195, (kvcache ? (761759744 + ((token - 1) * 64)) : (761759744 + (last_token * 64))));
  CSB_Write(device, 196, 262144);
  CSB_Write(device, 197, 65536);
  CSB_Write(device, 198, (kvcache ? (770148352 + ((token - 1) * 64)) : (770148352 + (last_token * 64))));
  CSB_Write(device, 199, 262144);
  CSB_Write(device, 200, 65536);
  CSB_Write(device, 201, (((token + 32) - 1) / 32));
  CSB_Write(device, 202, 32);
  CSB_Write(device, 203, token);
  CSB_Write(device, 204, (kvcache ? 1 : (((((token - last_token) + 1) - 1) / 1) * 1)));
  CSB_Write(device, 205, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 206, last_token);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 8);
#ifdef PRINT_STEP
printf("step257!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.softmax run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step258 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_afterF2W accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 752322560);
  CSB_Write(device, 195, (kvcache ? (770148352 + ((token - 1) * 64)) : (770148352 + (last_token * 64))));
  CSB_Write(device, 196, 262144);
  CSB_Write(device, 197, 65536);
  CSB_Write(device, 198, 1158907904);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, (((token + 32) - 1) / 32));
  CSB_Write(device, 202, token);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 4);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 1);
#ifdef PRINT_STEP
printf("step258!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterF2W run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step259 (HANDLE& device, int kvcache, int token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 1158907904);
  CSB_Write(device, 11, 69342720);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 997689344);
  CSB_Write(device, 14, 7);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 4140032);
  CSB_Write(device, 27, 989300736);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("step259!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step260 (HANDLE& device, int kvcache, int token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 4156416);
  CSB_Write(device, 195, 997689344);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : ((1 * token) - 0))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : ((1 * token) - 0))));
  CSB_Write(device, 198, 989300736);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : ((1 * token) - 0))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : ((1 * token) - 0))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : ((1 * token) - 0)));
  CSB_Write(device, 204, (kvcache ? 1 : ((1 * token) - 0)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_STEP
printf("step260!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step261 (HANDLE& device, int kvcache, int token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 989300736);
  CSB_Write(device, 11, 70516992);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 1158907904);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 4227584);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("step261!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step262 (HANDLE& device, int kvcache, int token) {
// accel.hbm.activate accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 32768);
  CSB_Write(device, 195, 1158907904);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 198, 1025738752);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 201, 428);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 204, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 205, 428);
  CSB_Write(device, 206, 13696);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 16);
#ifdef PRINT_STEP
printf("step262!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.activate run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step263 (HANDLE& device, int kvcache, int token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 989300736);
  CSB_Write(device, 11, 69613056);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 1158907904);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 2);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 4172800);
  CSB_Write(device, 27, 1025738752);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("step263!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step264 (HANDLE& device, int kvcache, int token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 13696);
  CSB_Write(device, 3, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 128);
  CSB_Write(device, 8, 128);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 1158907904);
  CSB_Write(device, 11, 71420928);
  CSB_Write(device, 12, 56576);
  CSB_Write(device, 13, 989300736);
  CSB_Write(device, 14, 31);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 4282368);
  CSB_Write(device, 27, 997689344);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("step264!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step265 (HANDLE& device, int kvcache, int token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 4298752);
  CSB_Write(device, 195, 989300736);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : ((1 * token) - 0))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : ((1 * token) - 0))));
  CSB_Write(device, 198, 997689344);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : ((1 * token) - 0))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : ((1 * token) - 0))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : ((1 * token) - 0)));
  CSB_Write(device, 204, (kvcache ? 1 : ((1 * token) - 0)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_STEP
printf("step265!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step266 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in cache88 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 997689344);
  CSB_Write(device, 11, 72326144);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, (kvcache ? (778536960 + ((token - 1) * 64)) : (778536960 + (last_token * 64))));
  CSB_Write(device, 14, 8);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 4315136);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, 65536);
  CSB_Write(device, 32, 65536);
  CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("step266!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step267 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.pos_emb accel operator node, storage data in cache89 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (kvcache ? (0 + ((token - 1) * 64)) : (0 + (last_token * 64))));
  CSB_Write(device, 195, (kvcache ? (778536960 + ((token - 1) * 64)) : (778536960 + (last_token * 64))));
  CSB_Write(device, 196, 262144);
  CSB_Write(device, 197, 65536);
  CSB_Write(device, 198, (kvcache ? (787974144 + ((token - 1) * 64)) : (787974144 + (last_token * 64))));
  CSB_Write(device, 199, 262144);
  CSB_Write(device, 200, 65536);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 203, 34);
  CSB_Write(device, 204, 65536);
  CSB_Write(device, 205, 0);
  CSB_Write(device, 206, 0);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
#ifdef PRINT_STEP
printf("step267!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step268 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_afterTRP accel operator node, storage data in cache90 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 796362752);
  CSB_Write(device, 195, (kvcache ? (787974144 + ((token - 1) * 64)) : (787974144 + (last_token * 64))));
  CSB_Write(device, 196, 262144);
  CSB_Write(device, 197, 65536);
  CSB_Write(device, 198, (kvcache ? (796887040 + ((token - 1) * 64)) : (796887040 + (last_token * 64))));
  CSB_Write(device, 199, 262144);
  CSB_Write(device, 200, 65536);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, token);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 11688);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 2);
#ifdef PRINT_STEP
printf("step268!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterTRP run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step269 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.softmax accel operator node, storage data in cache91 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (1 - kvcache));
  CSB_Write(device, 195, (kvcache ? (796887040 + ((token - 1) * 64)) : (796887040 + (last_token * 64))));
  CSB_Write(device, 196, 262144);
  CSB_Write(device, 197, 65536);
  CSB_Write(device, 198, (kvcache ? (805275648 + ((token - 1) * 64)) : (805275648 + (last_token * 64))));
  CSB_Write(device, 199, 262144);
  CSB_Write(device, 200, 65536);
  CSB_Write(device, 201, (((token + 32) - 1) / 32));
  CSB_Write(device, 202, 32);
  CSB_Write(device, 203, token);
  CSB_Write(device, 204, (kvcache ? 1 : (((((token - last_token) + 1) - 1) / 1) * 1)));
  CSB_Write(device, 205, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 206, last_token);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 8);
#ifdef PRINT_STEP
printf("step269!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.softmax run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step270 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_afterF2W accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 787449856);
  CSB_Write(device, 195, (kvcache ? (805275648 + ((token - 1) * 64)) : (805275648 + (last_token * 64))));
  CSB_Write(device, 196, 262144);
  CSB_Write(device, 197, 65536);
  CSB_Write(device, 198, 997689344);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, (((token + 32) - 1) / 32));
  CSB_Write(device, 202, token);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 4);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 1);
#ifdef PRINT_STEP
printf("step270!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterF2W run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step271 (HANDLE& device, int kvcache, int token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 997689344);
  CSB_Write(device, 11, 72630272);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 1158907904);
  CSB_Write(device, 14, 7);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 4333568);
  CSB_Write(device, 27, 989300736);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("step271!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step272 (HANDLE& device, int kvcache, int token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 4349952);
  CSB_Write(device, 195, 1158907904);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : ((1 * token) - 0))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : ((1 * token) - 0))));
  CSB_Write(device, 198, 989300736);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : ((1 * token) - 0))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : ((1 * token) - 0))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : ((1 * token) - 0)));
  CSB_Write(device, 204, (kvcache ? 1 : ((1 * token) - 0)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_STEP
printf("step272!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step273 (HANDLE& device, int kvcache, int token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 989300736);
  CSB_Write(device, 11, 73804544);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 997689344);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 4421120);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("step273!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step274 (HANDLE& device, int kvcache, int token) {
// accel.hbm.activate accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 32768);
  CSB_Write(device, 195, 997689344);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 198, 1025738752);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 201, 428);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 204, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 205, 428);
  CSB_Write(device, 206, 13696);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 16);
#ifdef PRINT_STEP
printf("step274!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.activate run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step275 (HANDLE& device, int kvcache, int token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 989300736);
  CSB_Write(device, 11, 72900608);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 997689344);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 2);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 4366336);
  CSB_Write(device, 27, 1025738752);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("step275!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step276 (HANDLE& device, int kvcache, int token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 13696);
  CSB_Write(device, 3, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 128);
  CSB_Write(device, 8, 128);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 997689344);
  CSB_Write(device, 11, 74708480);
  CSB_Write(device, 12, 56576);
  CSB_Write(device, 13, 989300736);
  CSB_Write(device, 14, 31);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 4475904);
  CSB_Write(device, 27, 1158907904);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("step276!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step277 (HANDLE& device, int kvcache, int token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 4492288);
  CSB_Write(device, 195, 989300736);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : ((1 * token) - 0))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : ((1 * token) - 0))));
  CSB_Write(device, 198, 1158907904);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : ((1 * token) - 0))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : ((1 * token) - 0))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : ((1 * token) - 0)));
  CSB_Write(device, 204, (kvcache ? 1 : ((1 * token) - 0)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_STEP
printf("step277!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step278 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in cache92 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 1158907904);
  CSB_Write(device, 11, 75613696);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, (kvcache ? (813664256 + ((token - 1) * 64)) : (813664256 + (last_token * 64))));
  CSB_Write(device, 14, 8);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 4508672);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, 65536);
  CSB_Write(device, 32, 65536);
  CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("step278!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step279 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.pos_emb accel operator node, storage data in cache93 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (kvcache ? (0 + ((token - 1) * 64)) : (0 + (last_token * 64))));
  CSB_Write(device, 195, (kvcache ? (813664256 + ((token - 1) * 64)) : (813664256 + (last_token * 64))));
  CSB_Write(device, 196, 262144);
  CSB_Write(device, 197, 65536);
  CSB_Write(device, 198, (kvcache ? (823101440 + ((token - 1) * 64)) : (823101440 + (last_token * 64))));
  CSB_Write(device, 199, 262144);
  CSB_Write(device, 200, 65536);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 203, 34);
  CSB_Write(device, 204, 65536);
  CSB_Write(device, 205, 0);
  CSB_Write(device, 206, 0);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
#ifdef PRINT_STEP
printf("step279!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step280 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_afterTRP accel operator node, storage data in cache94 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 831490048);
  CSB_Write(device, 195, (kvcache ? (823101440 + ((token - 1) * 64)) : (823101440 + (last_token * 64))));
  CSB_Write(device, 196, 262144);
  CSB_Write(device, 197, 65536);
  CSB_Write(device, 198, (kvcache ? (832014336 + ((token - 1) * 64)) : (832014336 + (last_token * 64))));
  CSB_Write(device, 199, 262144);
  CSB_Write(device, 200, 65536);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, token);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 11688);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 2);
#ifdef PRINT_STEP
printf("step280!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterTRP run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step281 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.softmax accel operator node, storage data in cache95 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (1 - kvcache));
  CSB_Write(device, 195, (kvcache ? (832014336 + ((token - 1) * 64)) : (832014336 + (last_token * 64))));
  CSB_Write(device, 196, 262144);
  CSB_Write(device, 197, 65536);
  CSB_Write(device, 198, (kvcache ? (840402944 + ((token - 1) * 64)) : (840402944 + (last_token * 64))));
  CSB_Write(device, 199, 262144);
  CSB_Write(device, 200, 65536);
  CSB_Write(device, 201, (((token + 32) - 1) / 32));
  CSB_Write(device, 202, 32);
  CSB_Write(device, 203, token);
  CSB_Write(device, 204, (kvcache ? 1 : (((((token - last_token) + 1) - 1) / 1) * 1)));
  CSB_Write(device, 205, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 206, last_token);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 8);
#ifdef PRINT_STEP
printf("step281!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.softmax run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step282 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_afterF2W accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 822577152);
  CSB_Write(device, 195, (kvcache ? (840402944 + ((token - 1) * 64)) : (840402944 + (last_token * 64))));
  CSB_Write(device, 196, 262144);
  CSB_Write(device, 197, 65536);
  CSB_Write(device, 198, 1158907904);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, (((token + 32) - 1) / 32));
  CSB_Write(device, 202, token);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 4);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 1);
#ifdef PRINT_STEP
printf("step282!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterF2W run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step283 (HANDLE& device, int kvcache, int token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 1158907904);
  CSB_Write(device, 11, 75917824);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 997689344);
  CSB_Write(device, 14, 7);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 4527104);
  CSB_Write(device, 27, 989300736);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("step283!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step284 (HANDLE& device, int kvcache, int token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 4543488);
  CSB_Write(device, 195, 997689344);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : ((1 * token) - 0))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : ((1 * token) - 0))));
  CSB_Write(device, 198, 989300736);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : ((1 * token) - 0))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : ((1 * token) - 0))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : ((1 * token) - 0)));
  CSB_Write(device, 204, (kvcache ? 1 : ((1 * token) - 0)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_STEP
printf("step284!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step285 (HANDLE& device, int kvcache, int token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 989300736);
  CSB_Write(device, 11, 77092096);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 1158907904);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 4614656);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("step285!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step286 (HANDLE& device, int kvcache, int token) {
// accel.hbm.activate accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 32768);
  CSB_Write(device, 195, 1158907904);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 198, 1025738752);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 201, 428);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 204, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 205, 428);
  CSB_Write(device, 206, 13696);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 16);
#ifdef PRINT_STEP
printf("step286!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.activate run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step287 (HANDLE& device, int kvcache, int token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 989300736);
  CSB_Write(device, 11, 76188160);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 1158907904);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 2);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 4559872);
  CSB_Write(device, 27, 1025738752);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("step287!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step288 (HANDLE& device, int kvcache, int token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 13696);
  CSB_Write(device, 3, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 128);
  CSB_Write(device, 8, 128);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 1158907904);
  CSB_Write(device, 11, 77996032);
  CSB_Write(device, 12, 56576);
  CSB_Write(device, 13, 989300736);
  CSB_Write(device, 14, 31);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 4669440);
  CSB_Write(device, 27, 997689344);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("step288!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step289 (HANDLE& device, int kvcache, int token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 4685824);
  CSB_Write(device, 195, 989300736);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : ((1 * token) - 0))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : ((1 * token) - 0))));
  CSB_Write(device, 198, 997689344);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : ((1 * token) - 0))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : ((1 * token) - 0))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : ((1 * token) - 0)));
  CSB_Write(device, 204, (kvcache ? 1 : ((1 * token) - 0)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_STEP
printf("step289!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step290 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in cache96 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 997689344);
  CSB_Write(device, 11, 78901248);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, (kvcache ? (848791552 + ((token - 1) * 64)) : (848791552 + (last_token * 64))));
  CSB_Write(device, 14, 8);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 4702208);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, 65536);
  CSB_Write(device, 32, 65536);
  CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("step290!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step291 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.pos_emb accel operator node, storage data in cache97 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (kvcache ? (0 + ((token - 1) * 64)) : (0 + (last_token * 64))));
  CSB_Write(device, 195, (kvcache ? (848791552 + ((token - 1) * 64)) : (848791552 + (last_token * 64))));
  CSB_Write(device, 196, 262144);
  CSB_Write(device, 197, 65536);
  CSB_Write(device, 198, (kvcache ? (858228736 + ((token - 1) * 64)) : (858228736 + (last_token * 64))));
  CSB_Write(device, 199, 262144);
  CSB_Write(device, 200, 65536);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 203, 34);
  CSB_Write(device, 204, 65536);
  CSB_Write(device, 205, 0);
  CSB_Write(device, 206, 0);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
#ifdef PRINT_STEP
printf("step291!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step292 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_afterTRP accel operator node, storage data in cache98 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 866617344);
  CSB_Write(device, 195, (kvcache ? (858228736 + ((token - 1) * 64)) : (858228736 + (last_token * 64))));
  CSB_Write(device, 196, 262144);
  CSB_Write(device, 197, 65536);
  CSB_Write(device, 198, (kvcache ? (867141632 + ((token - 1) * 64)) : (867141632 + (last_token * 64))));
  CSB_Write(device, 199, 262144);
  CSB_Write(device, 200, 65536);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, token);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 11688);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 2);
#ifdef PRINT_STEP
printf("step292!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterTRP run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step293 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.softmax accel operator node, storage data in cache99 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (1 - kvcache));
  CSB_Write(device, 195, (kvcache ? (867141632 + ((token - 1) * 64)) : (867141632 + (last_token * 64))));
  CSB_Write(device, 196, 262144);
  CSB_Write(device, 197, 65536);
  CSB_Write(device, 198, (kvcache ? (875530240 + ((token - 1) * 64)) : (875530240 + (last_token * 64))));
  CSB_Write(device, 199, 262144);
  CSB_Write(device, 200, 65536);
  CSB_Write(device, 201, (((token + 32) - 1) / 32));
  CSB_Write(device, 202, 32);
  CSB_Write(device, 203, token);
  CSB_Write(device, 204, (kvcache ? 1 : (((((token - last_token) + 1) - 1) / 1) * 1)));
  CSB_Write(device, 205, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 206, last_token);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 8);
#ifdef PRINT_STEP
printf("step293!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.softmax run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step294 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_afterF2W accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 857704448);
  CSB_Write(device, 195, (kvcache ? (875530240 + ((token - 1) * 64)) : (875530240 + (last_token * 64))));
  CSB_Write(device, 196, 262144);
  CSB_Write(device, 197, 65536);
  CSB_Write(device, 198, 997689344);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, (((token + 32) - 1) / 32));
  CSB_Write(device, 202, token);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 4);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 1);
#ifdef PRINT_STEP
printf("step294!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterF2W run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step295 (HANDLE& device, int kvcache, int token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 997689344);
  CSB_Write(device, 11, 79205376);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 1158907904);
  CSB_Write(device, 14, 7);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 4720640);
  CSB_Write(device, 27, 989300736);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("step295!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step296 (HANDLE& device, int kvcache, int token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 4737024);
  CSB_Write(device, 195, 1158907904);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : ((1 * token) - 0))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : ((1 * token) - 0))));
  CSB_Write(device, 198, 989300736);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : ((1 * token) - 0))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : ((1 * token) - 0))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : ((1 * token) - 0)));
  CSB_Write(device, 204, (kvcache ? 1 : ((1 * token) - 0)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_STEP
printf("step296!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step297 (HANDLE& device, int kvcache, int token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 989300736);
  CSB_Write(device, 11, 80379648);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 997689344);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 4808192);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("step297!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step298 (HANDLE& device, int kvcache, int token) {
// accel.hbm.activate accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 32768);
  CSB_Write(device, 195, 997689344);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 198, 1025738752);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 201, 428);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 204, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 205, 428);
  CSB_Write(device, 206, 13696);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 16);
#ifdef PRINT_STEP
printf("step298!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.activate run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step299 (HANDLE& device, int kvcache, int token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 989300736);
  CSB_Write(device, 11, 79475712);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 997689344);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 2);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 4753408);
  CSB_Write(device, 27, 1025738752);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("step299!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step300 (HANDLE& device, int kvcache, int token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 13696);
  CSB_Write(device, 3, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 128);
  CSB_Write(device, 8, 128);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 997689344);
  CSB_Write(device, 11, 81283584);
  CSB_Write(device, 12, 56576);
  CSB_Write(device, 13, 989300736);
  CSB_Write(device, 14, 31);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 4862976);
  CSB_Write(device, 27, 1158907904);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("step300!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step301 (HANDLE& device, int kvcache, int token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 4879360);
  CSB_Write(device, 195, 989300736);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : ((1 * token) - 0))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : ((1 * token) - 0))));
  CSB_Write(device, 198, 1158907904);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : ((1 * token) - 0))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : ((1 * token) - 0))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : ((1 * token) - 0)));
  CSB_Write(device, 204, (kvcache ? 1 : ((1 * token) - 0)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_STEP
printf("step301!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step302 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in cache100 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 1158907904);
  CSB_Write(device, 11, 82188800);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, (kvcache ? (883918848 + ((token - 1) * 64)) : (883918848 + (last_token * 64))));
  CSB_Write(device, 14, 8);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 4895744);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, 65536);
  CSB_Write(device, 32, 65536);
  CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("step302!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step303 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.pos_emb accel operator node, storage data in cache101 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (kvcache ? (0 + ((token - 1) * 64)) : (0 + (last_token * 64))));
  CSB_Write(device, 195, (kvcache ? (883918848 + ((token - 1) * 64)) : (883918848 + (last_token * 64))));
  CSB_Write(device, 196, 262144);
  CSB_Write(device, 197, 65536);
  CSB_Write(device, 198, (kvcache ? (893356032 + ((token - 1) * 64)) : (893356032 + (last_token * 64))));
  CSB_Write(device, 199, 262144);
  CSB_Write(device, 200, 65536);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 203, 34);
  CSB_Write(device, 204, 65536);
  CSB_Write(device, 205, 0);
  CSB_Write(device, 206, 0);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
#ifdef PRINT_STEP
printf("step303!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step304 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_afterTRP accel operator node, storage data in cache102 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 901744640);
  CSB_Write(device, 195, (kvcache ? (893356032 + ((token - 1) * 64)) : (893356032 + (last_token * 64))));
  CSB_Write(device, 196, 262144);
  CSB_Write(device, 197, 65536);
  CSB_Write(device, 198, (kvcache ? (902268928 + ((token - 1) * 64)) : (902268928 + (last_token * 64))));
  CSB_Write(device, 199, 262144);
  CSB_Write(device, 200, 65536);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, token);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 11688);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 2);
#ifdef PRINT_STEP
printf("step304!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterTRP run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step305 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.softmax accel operator node, storage data in cache103 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (1 - kvcache));
  CSB_Write(device, 195, (kvcache ? (902268928 + ((token - 1) * 64)) : (902268928 + (last_token * 64))));
  CSB_Write(device, 196, 262144);
  CSB_Write(device, 197, 65536);
  CSB_Write(device, 198, (kvcache ? (910657536 + ((token - 1) * 64)) : (910657536 + (last_token * 64))));
  CSB_Write(device, 199, 262144);
  CSB_Write(device, 200, 65536);
  CSB_Write(device, 201, (((token + 32) - 1) / 32));
  CSB_Write(device, 202, 32);
  CSB_Write(device, 203, token);
  CSB_Write(device, 204, (kvcache ? 1 : (((((token - last_token) + 1) - 1) / 1) * 1)));
  CSB_Write(device, 205, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 206, last_token);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 8);
#ifdef PRINT_STEP
printf("step305!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.softmax run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step306 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_afterF2W accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 892831744);
  CSB_Write(device, 195, (kvcache ? (910657536 + ((token - 1) * 64)) : (910657536 + (last_token * 64))));
  CSB_Write(device, 196, 262144);
  CSB_Write(device, 197, 65536);
  CSB_Write(device, 198, 1158907904);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, (((token + 32) - 1) / 32));
  CSB_Write(device, 202, token);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 4);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 1);
#ifdef PRINT_STEP
printf("step306!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterF2W run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step307 (HANDLE& device, int kvcache, int token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 1158907904);
  CSB_Write(device, 11, 82492928);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 997689344);
  CSB_Write(device, 14, 7);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 4914176);
  CSB_Write(device, 27, 989300736);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("step307!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step308 (HANDLE& device, int kvcache, int token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 4930560);
  CSB_Write(device, 195, 997689344);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : ((1 * token) - 0))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : ((1 * token) - 0))));
  CSB_Write(device, 198, 989300736);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : ((1 * token) - 0))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : ((1 * token) - 0))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : ((1 * token) - 0)));
  CSB_Write(device, 204, (kvcache ? 1 : ((1 * token) - 0)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_STEP
printf("step308!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step309 (HANDLE& device, int kvcache, int token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 989300736);
  CSB_Write(device, 11, 83667200);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 1158907904);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 5001728);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("step309!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step310 (HANDLE& device, int kvcache, int token) {
// accel.hbm.activate accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 32768);
  CSB_Write(device, 195, 1158907904);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 198, 1025738752);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 201, 428);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 204, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 205, 428);
  CSB_Write(device, 206, 13696);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 16);
#ifdef PRINT_STEP
printf("step310!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.activate run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step311 (HANDLE& device, int kvcache, int token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 989300736);
  CSB_Write(device, 11, 82763264);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 1158907904);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 2);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 4946944);
  CSB_Write(device, 27, 1025738752);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("step311!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step312 (HANDLE& device, int kvcache, int token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 13696);
  CSB_Write(device, 3, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 128);
  CSB_Write(device, 8, 128);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 1158907904);
  CSB_Write(device, 11, 84571136);
  CSB_Write(device, 12, 56576);
  CSB_Write(device, 13, 989300736);
  CSB_Write(device, 14, 31);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 5056512);
  CSB_Write(device, 27, 997689344);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("step312!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step313 (HANDLE& device, int kvcache, int token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 5072896);
  CSB_Write(device, 195, 989300736);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : ((1 * token) - 0))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : ((1 * token) - 0))));
  CSB_Write(device, 198, 997689344);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : ((1 * token) - 0))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : ((1 * token) - 0))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : ((1 * token) - 0)));
  CSB_Write(device, 204, (kvcache ? 1 : ((1 * token) - 0)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_STEP
printf("step313!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step314 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in cache104 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 997689344);
  CSB_Write(device, 11, 85476352);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, (kvcache ? (919046144 + ((token - 1) * 64)) : (919046144 + (last_token * 64))));
  CSB_Write(device, 14, 8);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 5089280);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, 65536);
  CSB_Write(device, 32, 65536);
  CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("step314!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step315 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.pos_emb accel operator node, storage data in cache105 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (kvcache ? (0 + ((token - 1) * 64)) : (0 + (last_token * 64))));
  CSB_Write(device, 195, (kvcache ? (919046144 + ((token - 1) * 64)) : (919046144 + (last_token * 64))));
  CSB_Write(device, 196, 262144);
  CSB_Write(device, 197, 65536);
  CSB_Write(device, 198, (kvcache ? (928483328 + ((token - 1) * 64)) : (928483328 + (last_token * 64))));
  CSB_Write(device, 199, 262144);
  CSB_Write(device, 200, 65536);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 203, 34);
  CSB_Write(device, 204, 65536);
  CSB_Write(device, 205, 0);
  CSB_Write(device, 206, 0);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
#ifdef PRINT_STEP
printf("step315!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step316 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_afterTRP accel operator node, storage data in cache106 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 936871936);
  CSB_Write(device, 195, (kvcache ? (928483328 + ((token - 1) * 64)) : (928483328 + (last_token * 64))));
  CSB_Write(device, 196, 262144);
  CSB_Write(device, 197, 65536);
  CSB_Write(device, 198, (kvcache ? (937396224 + ((token - 1) * 64)) : (937396224 + (last_token * 64))));
  CSB_Write(device, 199, 262144);
  CSB_Write(device, 200, 65536);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, token);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 11688);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 2);
#ifdef PRINT_STEP
printf("step316!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterTRP run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step317 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.softmax accel operator node, storage data in cache107 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (1 - kvcache));
  CSB_Write(device, 195, (kvcache ? (937396224 + ((token - 1) * 64)) : (937396224 + (last_token * 64))));
  CSB_Write(device, 196, 262144);
  CSB_Write(device, 197, 65536);
  CSB_Write(device, 198, (kvcache ? (945784832 + ((token - 1) * 64)) : (945784832 + (last_token * 64))));
  CSB_Write(device, 199, 262144);
  CSB_Write(device, 200, 65536);
  CSB_Write(device, 201, (((token + 32) - 1) / 32));
  CSB_Write(device, 202, 32);
  CSB_Write(device, 203, token);
  CSB_Write(device, 204, (kvcache ? 1 : (((((token - last_token) + 1) - 1) / 1) * 1)));
  CSB_Write(device, 205, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 206, last_token);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 8);
#ifdef PRINT_STEP
printf("step317!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.softmax run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step318 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_afterF2W accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 927959040);
  CSB_Write(device, 195, (kvcache ? (945784832 + ((token - 1) * 64)) : (945784832 + (last_token * 64))));
  CSB_Write(device, 196, 262144);
  CSB_Write(device, 197, 65536);
  CSB_Write(device, 198, 997689344);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, (((token + 32) - 1) / 32));
  CSB_Write(device, 202, token);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 4);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 1);
#ifdef PRINT_STEP
printf("step318!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterF2W run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step319 (HANDLE& device, int kvcache, int token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 997689344);
  CSB_Write(device, 11, 85780480);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 1158907904);
  CSB_Write(device, 14, 7);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 5107712);
  CSB_Write(device, 27, 989300736);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("step319!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step320 (HANDLE& device, int kvcache, int token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 5124096);
  CSB_Write(device, 195, 1158907904);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : ((1 * token) - 0))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : ((1 * token) - 0))));
  CSB_Write(device, 198, 989300736);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : ((1 * token) - 0))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : ((1 * token) - 0))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : ((1 * token) - 0)));
  CSB_Write(device, 204, (kvcache ? 1 : ((1 * token) - 0)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_STEP
printf("step320!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step321 (HANDLE& device, int kvcache, int token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 989300736);
  CSB_Write(device, 11, 86954752);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 997689344);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 5195264);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("step321!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step322 (HANDLE& device, int kvcache, int token) {
// accel.hbm.activate accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 32768);
  CSB_Write(device, 195, 997689344);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 198, 1025738752);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 201, 428);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 204, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 205, 428);
  CSB_Write(device, 206, 13696);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 16);
#ifdef PRINT_STEP
printf("step322!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.activate run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step323 (HANDLE& device, int kvcache, int token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 989300736);
  CSB_Write(device, 11, 86050816);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 997689344);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 2);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 5140480);
  CSB_Write(device, 27, 1025738752);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("step323!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step324 (HANDLE& device, int kvcache, int token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 13696);
  CSB_Write(device, 3, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 128);
  CSB_Write(device, 8, 128);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 997689344);
  CSB_Write(device, 11, 87858688);
  CSB_Write(device, 12, 56576);
  CSB_Write(device, 13, 989300736);
  CSB_Write(device, 14, 31);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 5250048);
  CSB_Write(device, 27, 1158907904);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("step324!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step325 (HANDLE& device, int kvcache, int token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 5266432);
  CSB_Write(device, 195, 989300736);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : ((1 * token) - 0))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : ((1 * token) - 0))));
  CSB_Write(device, 198, 1158907904);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : ((1 * token) - 0))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : ((1 * token) - 0))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : ((1 * token) - 0)));
  CSB_Write(device, 204, (kvcache ? 1 : ((1 * token) - 0)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_STEP
printf("step325!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step326 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in cache108 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 1158907904);
  CSB_Write(device, 11, 88763904);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, (kvcache ? (954173440 + ((token - 1) * 64)) : (954173440 + (last_token * 64))));
  CSB_Write(device, 14, 8);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 5282816);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, 65536);
  CSB_Write(device, 32, 65536);
  CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("step326!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step327 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.pos_emb accel operator node, storage data in cache109 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (kvcache ? (0 + ((token - 1) * 64)) : (0 + (last_token * 64))));
  CSB_Write(device, 195, (kvcache ? (954173440 + ((token - 1) * 64)) : (954173440 + (last_token * 64))));
  CSB_Write(device, 196, 262144);
  CSB_Write(device, 197, 65536);
  CSB_Write(device, 198, (kvcache ? (963610624 + ((token - 1) * 64)) : (963610624 + (last_token * 64))));
  CSB_Write(device, 199, 262144);
  CSB_Write(device, 200, 65536);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 203, 34);
  CSB_Write(device, 204, 65536);
  CSB_Write(device, 205, 0);
  CSB_Write(device, 206, 0);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
#ifdef PRINT_STEP
printf("step327!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step328 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_afterTRP accel operator node, storage data in cache110 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 971999232);
  CSB_Write(device, 195, (kvcache ? (963610624 + ((token - 1) * 64)) : (963610624 + (last_token * 64))));
  CSB_Write(device, 196, 262144);
  CSB_Write(device, 197, 65536);
  CSB_Write(device, 198, (kvcache ? (972523520 + ((token - 1) * 64)) : (972523520 + (last_token * 64))));
  CSB_Write(device, 199, 262144);
  CSB_Write(device, 200, 65536);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, token);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 11688);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 2);
#ifdef PRINT_STEP
printf("step328!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterTRP run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step329 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.softmax accel operator node, storage data in cache111 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (1 - kvcache));
  CSB_Write(device, 195, (kvcache ? (972523520 + ((token - 1) * 64)) : (972523520 + (last_token * 64))));
  CSB_Write(device, 196, 262144);
  CSB_Write(device, 197, 65536);
  CSB_Write(device, 198, (kvcache ? (980912128 + ((token - 1) * 64)) : (980912128 + (last_token * 64))));
  CSB_Write(device, 199, 262144);
  CSB_Write(device, 200, 65536);
  CSB_Write(device, 201, (((token + 32) - 1) / 32));
  CSB_Write(device, 202, 32);
  CSB_Write(device, 203, token);
  CSB_Write(device, 204, (kvcache ? 1 : (((((token - last_token) + 1) - 1) / 1) * 1)));
  CSB_Write(device, 205, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 206, last_token);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 8);
#ifdef PRINT_STEP
printf("step329!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.softmax run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step330 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_afterF2W accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 963086336);
  CSB_Write(device, 195, (kvcache ? (980912128 + ((token - 1) * 64)) : (980912128 + (last_token * 64))));
  CSB_Write(device, 196, 262144);
  CSB_Write(device, 197, 65536);
  CSB_Write(device, 198, 1158907904);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, (((token + 32) - 1) / 32));
  CSB_Write(device, 202, token);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 4);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 1);
#ifdef PRINT_STEP
printf("step330!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterF2W run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step331 (HANDLE& device, int kvcache, int token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 1158907904);
  CSB_Write(device, 11, 89068032);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 997689344);
  CSB_Write(device, 14, 7);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 5301248);
  CSB_Write(device, 27, 989300736);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("step331!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step332 (HANDLE& device, int kvcache, int token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 5317632);
  CSB_Write(device, 195, 997689344);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : ((1 * token) - 0))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : ((1 * token) - 0))));
  CSB_Write(device, 198, 989300736);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : ((1 * token) - 0))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : ((1 * token) - 0))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : ((1 * token) - 0)));
  CSB_Write(device, 204, (kvcache ? 1 : ((1 * token) - 0)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_STEP
printf("step332!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step333 (HANDLE& device, int kvcache, int token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 989300736);
  CSB_Write(device, 11, 90242304);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 1158907904);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 5388800);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("step333!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step334 (HANDLE& device, int kvcache, int token) {
// accel.hbm.activate accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 32768);
  CSB_Write(device, 195, 1158907904);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 198, 1025738752);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 201, 428);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 204, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 205, 428);
  CSB_Write(device, 206, 13696);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 16);
#ifdef PRINT_STEP
printf("step334!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.activate run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step335 (HANDLE& device, int kvcache, int token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 989300736);
  CSB_Write(device, 11, 89338368);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 1158907904);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 2);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 5334016);
  CSB_Write(device, 27, 1025738752);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("step335!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step336 (HANDLE& device, int kvcache, int token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 13696);
  CSB_Write(device, 3, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - 0)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 128);
  CSB_Write(device, 8, 128);
  CSB_Write(device, 9, (kvcache ? 1 : token));
  CSB_Write(device, 10, 1158907904);
  CSB_Write(device, 11, 91146240);
  CSB_Write(device, 12, 56576);
  CSB_Write(device, 13, 989300736);
  CSB_Write(device, 14, 31);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 5443584);
  CSB_Write(device, 27, 997689344);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - 0))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - 0))));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("step336!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step337 (HANDLE& device, int kvcache, int token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 5459968);
  CSB_Write(device, 195, ((kvcache ? 0 : 1) ? (989300736 + (((1 * token) - 1) * 64)) : 989300736));
  CSB_Write(device, 196, ((kvcache ? 0 : 1) ? ((64 * (1 * token)) * 1) : 64));
  CSB_Write(device, 197, ((kvcache ? 0 : 1) ? (64 * (1 * token)) : 64));
  CSB_Write(device, 198, 997689344);
  CSB_Write(device, 199, 64);
  CSB_Write(device, 200, 64);
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, 1);
  CSB_Write(device, 204, 1);
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_STEP
printf("step337!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step338 (HANDLE& device) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 1);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 1);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, 1);
  CSB_Write(device, 10, 997689344);
  CSB_Write(device, 11, 92051456);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 1158907904);
  CSB_Write(device, 14, 126);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 5476352);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 64);
  CSB_Write(device, 30, 64);
  CSB_Write(device, 31, 64);
  CSB_Write(device, 32, 64);
  CSB_Write(device, 60, 1025738752);
  CSB_Write(device, 33, 2847);
#ifdef PRINT_STEP
printf("step338!\n");
#endif
  while(CSB_Read(device, 61) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}


void chatglm_dynamic_control_1024_0430_1443(HANDLE& device, int token, int kvcache, int last_token) {
  step1(device, kvcache, token);
  step2(device, kvcache, token, last_token);
  step3(device, kvcache, token, last_token);
  step4(device, kvcache, token, last_token);
  step5(device, kvcache, token, last_token);
  step6(device, kvcache, token, last_token);
  step7(device, kvcache, token);
  step8(device, kvcache, token);
  step9(device, kvcache, token);
  step10(device, kvcache, token);
  step11(device, kvcache, token);
  step12(device, kvcache, token);
  step13(device, kvcache, token);
  step14(device, kvcache, token, last_token);
  step15(device, kvcache, token, last_token);
  step16(device, kvcache, token, last_token);
  step17(device, kvcache, token, last_token);
  step18(device, kvcache, token, last_token);
  step19(device, kvcache, token);
  step20(device, kvcache, token);
  step21(device, kvcache, token);
  step22(device, kvcache, token);
  step23(device, kvcache, token);
  step24(device, kvcache, token);
  step25(device, kvcache, token);
  step26(device, kvcache, token, last_token);
  step27(device, kvcache, token, last_token);
  step28(device, kvcache, token, last_token);
  step29(device, kvcache, token, last_token);
  step30(device, kvcache, token, last_token);
  step31(device, kvcache, token);
  step32(device, kvcache, token);
  step33(device, kvcache, token);
  step34(device, kvcache, token);
  step35(device, kvcache, token);
  step36(device, kvcache, token);
  step37(device, kvcache, token);
  step38(device, kvcache, token, last_token);
  step39(device, kvcache, token, last_token);
  step40(device, kvcache, token, last_token);
  step41(device, kvcache, token, last_token);
  step42(device, kvcache, token, last_token);
  step43(device, kvcache, token);
  step44(device, kvcache, token);
  step45(device, kvcache, token);
  step46(device, kvcache, token);
  step47(device, kvcache, token);
  step48(device, kvcache, token);
  step49(device, kvcache, token);
  step50(device, kvcache, token, last_token);
  step51(device, kvcache, token, last_token);
  step52(device, kvcache, token, last_token);
  step53(device, kvcache, token, last_token);
  step54(device, kvcache, token, last_token);
  step55(device, kvcache, token);
  step56(device, kvcache, token);
  step57(device, kvcache, token);
  step58(device, kvcache, token);
  step59(device, kvcache, token);
  step60(device, kvcache, token);
  step61(device, kvcache, token);
  step62(device, kvcache, token, last_token);
  step63(device, kvcache, token, last_token);
  step64(device, kvcache, token, last_token);
  step65(device, kvcache, token, last_token);
  step66(device, kvcache, token, last_token);
  step67(device, kvcache, token);
  step68(device, kvcache, token);
  step69(device, kvcache, token);
  step70(device, kvcache, token);
  step71(device, kvcache, token);
  step72(device, kvcache, token);
  step73(device, kvcache, token);
  step74(device, kvcache, token, last_token);
  step75(device, kvcache, token, last_token);
  step76(device, kvcache, token, last_token);
  step77(device, kvcache, token, last_token);
  step78(device, kvcache, token, last_token);
  step79(device, kvcache, token);
  step80(device, kvcache, token);
  step81(device, kvcache, token);
  step82(device, kvcache, token);
  step83(device, kvcache, token);
  step84(device, kvcache, token);
  step85(device, kvcache, token);
  step86(device, kvcache, token, last_token);
  step87(device, kvcache, token, last_token);
  step88(device, kvcache, token, last_token);
  step89(device, kvcache, token, last_token);
  step90(device, kvcache, token, last_token);
  step91(device, kvcache, token);
  step92(device, kvcache, token);
  step93(device, kvcache, token);
  step94(device, kvcache, token);
  step95(device, kvcache, token);
  step96(device, kvcache, token);
  step97(device, kvcache, token);
  step98(device, kvcache, token, last_token);
  step99(device, kvcache, token, last_token);
  step100(device, kvcache, token, last_token);
  step101(device, kvcache, token, last_token);
  step102(device, kvcache, token, last_token);
  step103(device, kvcache, token);
  step104(device, kvcache, token);
  step105(device, kvcache, token);
  step106(device, kvcache, token);
  step107(device, kvcache, token);
  step108(device, kvcache, token);
  step109(device, kvcache, token);
  step110(device, kvcache, token, last_token);
  step111(device, kvcache, token, last_token);
  step112(device, kvcache, token, last_token);
  step113(device, kvcache, token, last_token);
  step114(device, kvcache, token, last_token);
  step115(device, kvcache, token);
  step116(device, kvcache, token);
  step117(device, kvcache, token);
  step118(device, kvcache, token);
  step119(device, kvcache, token);
  step120(device, kvcache, token);
  step121(device, kvcache, token);
  step122(device, kvcache, token, last_token);
  step123(device, kvcache, token, last_token);
  step124(device, kvcache, token, last_token);
  step125(device, kvcache, token, last_token);
  step126(device, kvcache, token, last_token);
  step127(device, kvcache, token);
  step128(device, kvcache, token);
  step129(device, kvcache, token);
  step130(device, kvcache, token);
  step131(device, kvcache, token);
  step132(device, kvcache, token);
  step133(device, kvcache, token);
  step134(device, kvcache, token, last_token);
  step135(device, kvcache, token, last_token);
  step136(device, kvcache, token, last_token);
  step137(device, kvcache, token, last_token);
  step138(device, kvcache, token, last_token);
  step139(device, kvcache, token);
  step140(device, kvcache, token);
  step141(device, kvcache, token);
  step142(device, kvcache, token);
  step143(device, kvcache, token);
  step144(device, kvcache, token);
  step145(device, kvcache, token);
  step146(device, kvcache, token, last_token);
  step147(device, kvcache, token, last_token);
  step148(device, kvcache, token, last_token);
  step149(device, kvcache, token, last_token);
  step150(device, kvcache, token, last_token);
  step151(device, kvcache, token);
  step152(device, kvcache, token);
  step153(device, kvcache, token);
  step154(device, kvcache, token);
  step155(device, kvcache, token);
  step156(device, kvcache, token);
  step157(device, kvcache, token);
  step158(device, kvcache, token, last_token);
  step159(device, kvcache, token, last_token);
  step160(device, kvcache, token, last_token);
  step161(device, kvcache, token, last_token);
  step162(device, kvcache, token, last_token);
  step163(device, kvcache, token);
  step164(device, kvcache, token);
  step165(device, kvcache, token);
  step166(device, kvcache, token);
  step167(device, kvcache, token);
  step168(device, kvcache, token);
  step169(device, kvcache, token);
  step170(device, kvcache, token, last_token);
  step171(device, kvcache, token, last_token);
  step172(device, kvcache, token, last_token);
  step173(device, kvcache, token, last_token);
  step174(device, kvcache, token, last_token);
  step175(device, kvcache, token);
  step176(device, kvcache, token);
  step177(device, kvcache, token);
  step178(device, kvcache, token);
  step179(device, kvcache, token);
  step180(device, kvcache, token);
  step181(device, kvcache, token);
  step182(device, kvcache, token, last_token);
  step183(device, kvcache, token, last_token);
  step184(device, kvcache, token, last_token);
  step185(device, kvcache, token, last_token);
  step186(device, kvcache, token, last_token);
  step187(device, kvcache, token);
  step188(device, kvcache, token);
  step189(device, kvcache, token);
  step190(device, kvcache, token);
  step191(device, kvcache, token);
  step192(device, kvcache, token);
  step193(device, kvcache, token);
  step194(device, kvcache, token, last_token);
  step195(device, kvcache, token, last_token);
  step196(device, kvcache, token, last_token);
  step197(device, kvcache, token, last_token);
  step198(device, kvcache, token, last_token);
  step199(device, kvcache, token);
  step200(device, kvcache, token);
  step201(device, kvcache, token);
  step202(device, kvcache, token);
  step203(device, kvcache, token);
  step204(device, kvcache, token);
  step205(device, kvcache, token);
  step206(device, kvcache, token, last_token);
  step207(device, kvcache, token, last_token);
  step208(device, kvcache, token, last_token);
  step209(device, kvcache, token, last_token);
  step210(device, kvcache, token, last_token);
  step211(device, kvcache, token);
  step212(device, kvcache, token);
  step213(device, kvcache, token);
  step214(device, kvcache, token);
  step215(device, kvcache, token);
  step216(device, kvcache, token);
  step217(device, kvcache, token);
  step218(device, kvcache, token, last_token);
  step219(device, kvcache, token, last_token);
  step220(device, kvcache, token, last_token);
  step221(device, kvcache, token, last_token);
  step222(device, kvcache, token, last_token);
  step223(device, kvcache, token);
  step224(device, kvcache, token);
  step225(device, kvcache, token);
  step226(device, kvcache, token);
  step227(device, kvcache, token);
  step228(device, kvcache, token);
  step229(device, kvcache, token);
  step230(device, kvcache, token, last_token);
  step231(device, kvcache, token, last_token);
  step232(device, kvcache, token, last_token);
  step233(device, kvcache, token, last_token);
  step234(device, kvcache, token, last_token);
  step235(device, kvcache, token);
  step236(device, kvcache, token);
  step237(device, kvcache, token);
  step238(device, kvcache, token);
  step239(device, kvcache, token);
  step240(device, kvcache, token);
  step241(device, kvcache, token);
  step242(device, kvcache, token, last_token);
  step243(device, kvcache, token, last_token);
  step244(device, kvcache, token, last_token);
  step245(device, kvcache, token, last_token);
  step246(device, kvcache, token, last_token);
  step247(device, kvcache, token);
  step248(device, kvcache, token);
  step249(device, kvcache, token);
  step250(device, kvcache, token);
  step251(device, kvcache, token);
  step252(device, kvcache, token);
  step253(device, kvcache, token);
  step254(device, kvcache, token, last_token);
  step255(device, kvcache, token, last_token);
  step256(device, kvcache, token, last_token);
  step257(device, kvcache, token, last_token);
  step258(device, kvcache, token, last_token);
  step259(device, kvcache, token);
  step260(device, kvcache, token);
  step261(device, kvcache, token);
  step262(device, kvcache, token);
  step263(device, kvcache, token);
  step264(device, kvcache, token);
  step265(device, kvcache, token);
  step266(device, kvcache, token, last_token);
  step267(device, kvcache, token, last_token);
  step268(device, kvcache, token, last_token);
  step269(device, kvcache, token, last_token);
  step270(device, kvcache, token, last_token);
  step271(device, kvcache, token);
  step272(device, kvcache, token);
  step273(device, kvcache, token);
  step274(device, kvcache, token);
  step275(device, kvcache, token);
  step276(device, kvcache, token);
  step277(device, kvcache, token);
  step278(device, kvcache, token, last_token);
  step279(device, kvcache, token, last_token);
  step280(device, kvcache, token, last_token);
  step281(device, kvcache, token, last_token);
  step282(device, kvcache, token, last_token);
  step283(device, kvcache, token);
  step284(device, kvcache, token);
  step285(device, kvcache, token);
  step286(device, kvcache, token);
  step287(device, kvcache, token);
  step288(device, kvcache, token);
  step289(device, kvcache, token);
  step290(device, kvcache, token, last_token);
  step291(device, kvcache, token, last_token);
  step292(device, kvcache, token, last_token);
  step293(device, kvcache, token, last_token);
  step294(device, kvcache, token, last_token);
  step295(device, kvcache, token);
  step296(device, kvcache, token);
  step297(device, kvcache, token);
  step298(device, kvcache, token);
  step299(device, kvcache, token);
  step300(device, kvcache, token);
  step301(device, kvcache, token);
  step302(device, kvcache, token, last_token);
  step303(device, kvcache, token, last_token);
  step304(device, kvcache, token, last_token);
  step305(device, kvcache, token, last_token);
  step306(device, kvcache, token, last_token);
  step307(device, kvcache, token);
  step308(device, kvcache, token);
  step309(device, kvcache, token);
  step310(device, kvcache, token);
  step311(device, kvcache, token);
  step312(device, kvcache, token);
  step313(device, kvcache, token);
  step314(device, kvcache, token, last_token);
  step315(device, kvcache, token, last_token);
  step316(device, kvcache, token, last_token);
  step317(device, kvcache, token, last_token);
  step318(device, kvcache, token, last_token);
  step319(device, kvcache, token);
  step320(device, kvcache, token);
  step321(device, kvcache, token);
  step322(device, kvcache, token);
  step323(device, kvcache, token);
  step324(device, kvcache, token);
  step325(device, kvcache, token);
  step326(device, kvcache, token, last_token);
  step327(device, kvcache, token, last_token);
  step328(device, kvcache, token, last_token);
  step329(device, kvcache, token, last_token);
  step330(device, kvcache, token, last_token);
  step331(device, kvcache, token);
  step332(device, kvcache, token);
  step333(device, kvcache, token);
  step334(device, kvcache, token);
  step335(device, kvcache, token);
  step336(device, kvcache, token);
  step337(device, kvcache, token);
  step338(device);
}
