// generated by codegen c++ test ops head at 2024-04-18 19:38:22
// global storage define
static uint8_t* global0 = (uint8_t*)0x200000000; // storage size: 32768 B
static uint8_t* global1 = (uint8_t*)0x200008000; // storage size: 8192 B
// weight storage define
static uint8_t* weight0 = (uint8_t*)0x20000a000; // storage size: 16384 B
static uint8_t* weight1 = (uint8_t*)0x20000e000; // storage size: 18432 B
static uint8_t* weight2 = (uint8_t*)0x200012800; // storage size: 16384 B
static uint8_t* weight3 = (uint8_t*)0x200016800; // storage size: 16384 B
static uint8_t* weight4 = (uint8_t*)0x20001a800; // storage size: 54784 B
static uint8_t* weight5 = (uint8_t*)0x200027e00; // storage size: 54784 B
static uint8_t* weight6 = (uint8_t*)0x200035400; // storage size: 16384 B
static uint8_t* weight7 = (uint8_t*)0x200039400; // storage size: 16384 B
static uint8_t* weight8 = (uint8_t*)0x20003d400; // storage size: 18432 B
static uint8_t* weight9 = (uint8_t*)0x200041c00; // storage size: 16384 B
static uint8_t* weight10 = (uint8_t*)0x200045c00; // storage size: 16384 B
static uint8_t* weight11 = (uint8_t*)0x200049c00; // storage size: 54784 B
static uint8_t* weight12 = (uint8_t*)0x200057200; // storage size: 54784 B
static uint8_t* weight13 = (uint8_t*)0x200064800; // storage size: 16384 B
static uint8_t* weight14 = (uint8_t*)0x200068800; // storage size: 16384 B
static uint8_t* weight15 = (uint8_t*)0x20006c800; // storage size: 18432 B
static uint8_t* weight16 = (uint8_t*)0x200071000; // storage size: 16384 B
static uint8_t* weight17 = (uint8_t*)0x200075000; // storage size: 16384 B
static uint8_t* weight18 = (uint8_t*)0x200079000; // storage size: 54784 B
static uint8_t* weight19 = (uint8_t*)0x200086600; // storage size: 54784 B
static uint8_t* weight20 = (uint8_t*)0x200093c00; // storage size: 16384 B
static uint8_t* weight21 = (uint8_t*)0x200097c00; // storage size: 16384 B
static uint8_t* weight22 = (uint8_t*)0x20009bc00; // storage size: 18432 B
static uint8_t* weight23 = (uint8_t*)0x2000a0400; // storage size: 16384 B
static uint8_t* weight24 = (uint8_t*)0x2000a4400; // storage size: 16384 B
static uint8_t* weight25 = (uint8_t*)0x2000a8400; // storage size: 54784 B
static uint8_t* weight26 = (uint8_t*)0x2000b5a00; // storage size: 54784 B
static uint8_t* weight27 = (uint8_t*)0x2000c3000; // storage size: 16384 B
static uint8_t* weight28 = (uint8_t*)0x2000c7000; // storage size: 16384 B
static uint8_t* weight29 = (uint8_t*)0x2000cb000; // storage size: 18432 B
static uint8_t* weight30 = (uint8_t*)0x2000cf800; // storage size: 16384 B
static uint8_t* weight31 = (uint8_t*)0x2000d3800; // storage size: 16384 B
static uint8_t* weight32 = (uint8_t*)0x2000d7800; // storage size: 54784 B
static uint8_t* weight33 = (uint8_t*)0x2000e4e00; // storage size: 54784 B
static uint8_t* weight34 = (uint8_t*)0x2000f2400; // storage size: 16384 B
static uint8_t* weight35 = (uint8_t*)0x2000f6400; // storage size: 16384 B
static uint8_t* weight36 = (uint8_t*)0x2000fa400; // storage size: 18432 B
static uint8_t* weight37 = (uint8_t*)0x2000fec00; // storage size: 16384 B
static uint8_t* weight38 = (uint8_t*)0x200102c00; // storage size: 16384 B
static uint8_t* weight39 = (uint8_t*)0x200106c00; // storage size: 54784 B
static uint8_t* weight40 = (uint8_t*)0x200114200; // storage size: 54784 B
static uint8_t* weight41 = (uint8_t*)0x200121800; // storage size: 16384 B
static uint8_t* weight42 = (uint8_t*)0x200125800; // storage size: 16384 B
static uint8_t* weight43 = (uint8_t*)0x200129800; // storage size: 18432 B
static uint8_t* weight44 = (uint8_t*)0x20012e000; // storage size: 16384 B
static uint8_t* weight45 = (uint8_t*)0x200132000; // storage size: 16384 B
static uint8_t* weight46 = (uint8_t*)0x200136000; // storage size: 54784 B
static uint8_t* weight47 = (uint8_t*)0x200143600; // storage size: 54784 B
static uint8_t* weight48 = (uint8_t*)0x200150c00; // storage size: 16384 B
static uint8_t* weight49 = (uint8_t*)0x200154c00; // storage size: 16384 B
static uint8_t* weight50 = (uint8_t*)0x200158c00; // storage size: 18432 B
static uint8_t* weight51 = (uint8_t*)0x20015d400; // storage size: 16384 B
static uint8_t* weight52 = (uint8_t*)0x200161400; // storage size: 16384 B
static uint8_t* weight53 = (uint8_t*)0x200165400; // storage size: 54784 B
static uint8_t* weight54 = (uint8_t*)0x200172a00; // storage size: 54784 B
static uint8_t* weight55 = (uint8_t*)0x200180000; // storage size: 16384 B
static uint8_t* weight56 = (uint8_t*)0x200184000; // storage size: 16384 B
static uint8_t* weight57 = (uint8_t*)0x200188000; // storage size: 18432 B
static uint8_t* weight58 = (uint8_t*)0x20018c800; // storage size: 16384 B
static uint8_t* weight59 = (uint8_t*)0x200190800; // storage size: 16384 B
static uint8_t* weight60 = (uint8_t*)0x200194800; // storage size: 54784 B
static uint8_t* weight61 = (uint8_t*)0x2001a1e00; // storage size: 54784 B
static uint8_t* weight62 = (uint8_t*)0x2001af400; // storage size: 16384 B
static uint8_t* weight63 = (uint8_t*)0x2001b3400; // storage size: 16384 B
static uint8_t* weight64 = (uint8_t*)0x2001b7400; // storage size: 18432 B
static uint8_t* weight65 = (uint8_t*)0x2001bbc00; // storage size: 16384 B
static uint8_t* weight66 = (uint8_t*)0x2001bfc00; // storage size: 16384 B
static uint8_t* weight67 = (uint8_t*)0x2001c3c00; // storage size: 54784 B
static uint8_t* weight68 = (uint8_t*)0x2001d1200; // storage size: 54784 B
static uint8_t* weight69 = (uint8_t*)0x2001de800; // storage size: 16384 B
static uint8_t* weight70 = (uint8_t*)0x2001e2800; // storage size: 16384 B
static uint8_t* weight71 = (uint8_t*)0x2001e6800; // storage size: 18432 B
static uint8_t* weight72 = (uint8_t*)0x2001eb000; // storage size: 16384 B
static uint8_t* weight73 = (uint8_t*)0x2001ef000; // storage size: 16384 B
static uint8_t* weight74 = (uint8_t*)0x2001f3000; // storage size: 54784 B
static uint8_t* weight75 = (uint8_t*)0x200200600; // storage size: 54784 B
static uint8_t* weight76 = (uint8_t*)0x20020dc00; // storage size: 16384 B
static uint8_t* weight77 = (uint8_t*)0x200211c00; // storage size: 16384 B
static uint8_t* weight78 = (uint8_t*)0x200215c00; // storage size: 18432 B
static uint8_t* weight79 = (uint8_t*)0x20021a400; // storage size: 16384 B
static uint8_t* weight80 = (uint8_t*)0x20021e400; // storage size: 16384 B
static uint8_t* weight81 = (uint8_t*)0x200222400; // storage size: 54784 B
static uint8_t* weight82 = (uint8_t*)0x20022fa00; // storage size: 54784 B
static uint8_t* weight83 = (uint8_t*)0x20023d000; // storage size: 16384 B
static uint8_t* weight84 = (uint8_t*)0x200241000; // storage size: 16384 B
static uint8_t* weight85 = (uint8_t*)0x200245000; // storage size: 18432 B
static uint8_t* weight86 = (uint8_t*)0x200249800; // storage size: 16384 B
static uint8_t* weight87 = (uint8_t*)0x20024d800; // storage size: 16384 B
static uint8_t* weight88 = (uint8_t*)0x200251800; // storage size: 54784 B
static uint8_t* weight89 = (uint8_t*)0x20025ee00; // storage size: 54784 B
static uint8_t* weight90 = (uint8_t*)0x20026c400; // storage size: 16384 B
static uint8_t* weight91 = (uint8_t*)0x200270400; // storage size: 16384 B
static uint8_t* weight92 = (uint8_t*)0x200274400; // storage size: 18432 B
static uint8_t* weight93 = (uint8_t*)0x200278c00; // storage size: 16384 B
static uint8_t* weight94 = (uint8_t*)0x20027cc00; // storage size: 16384 B
static uint8_t* weight95 = (uint8_t*)0x200280c00; // storage size: 54784 B
static uint8_t* weight96 = (uint8_t*)0x20028e200; // storage size: 54784 B
static uint8_t* weight97 = (uint8_t*)0x20029b800; // storage size: 16384 B
static uint8_t* weight98 = (uint8_t*)0x20029f800; // storage size: 16384 B
static uint8_t* weight99 = (uint8_t*)0x2002a3800; // storage size: 18432 B
static uint8_t* weight100 = (uint8_t*)0x2002a8000; // storage size: 16384 B
static uint8_t* weight101 = (uint8_t*)0x2002ac000; // storage size: 16384 B
static uint8_t* weight102 = (uint8_t*)0x2002b0000; // storage size: 54784 B
static uint8_t* weight103 = (uint8_t*)0x2002bd600; // storage size: 54784 B
static uint8_t* weight104 = (uint8_t*)0x2002cac00; // storage size: 16384 B
static uint8_t* weight105 = (uint8_t*)0x2002cec00; // storage size: 16384 B
static uint8_t* weight106 = (uint8_t*)0x2002d2c00; // storage size: 18432 B
static uint8_t* weight107 = (uint8_t*)0x2002d7400; // storage size: 16384 B
static uint8_t* weight108 = (uint8_t*)0x2002db400; // storage size: 16384 B
static uint8_t* weight109 = (uint8_t*)0x2002df400; // storage size: 54784 B
static uint8_t* weight110 = (uint8_t*)0x2002eca00; // storage size: 54784 B
static uint8_t* weight111 = (uint8_t*)0x2002fa000; // storage size: 16384 B
static uint8_t* weight112 = (uint8_t*)0x2002fe000; // storage size: 16384 B
static uint8_t* weight113 = (uint8_t*)0x200302000; // storage size: 18432 B
static uint8_t* weight114 = (uint8_t*)0x200306800; // storage size: 16384 B
static uint8_t* weight115 = (uint8_t*)0x20030a800; // storage size: 16384 B
static uint8_t* weight116 = (uint8_t*)0x20030e800; // storage size: 54784 B
static uint8_t* weight117 = (uint8_t*)0x20031be00; // storage size: 54784 B
static uint8_t* weight118 = (uint8_t*)0x200329400; // storage size: 16384 B
static uint8_t* weight119 = (uint8_t*)0x20032d400; // storage size: 16384 B
static uint8_t* weight120 = (uint8_t*)0x200331400; // storage size: 18432 B
static uint8_t* weight121 = (uint8_t*)0x200335c00; // storage size: 16384 B
static uint8_t* weight122 = (uint8_t*)0x200339c00; // storage size: 16384 B
static uint8_t* weight123 = (uint8_t*)0x20033dc00; // storage size: 54784 B
static uint8_t* weight124 = (uint8_t*)0x20034b200; // storage size: 54784 B
static uint8_t* weight125 = (uint8_t*)0x200358800; // storage size: 16384 B
static uint8_t* weight126 = (uint8_t*)0x20035c800; // storage size: 16384 B
static uint8_t* weight127 = (uint8_t*)0x200360800; // storage size: 18432 B
static uint8_t* weight128 = (uint8_t*)0x200365000; // storage size: 16384 B
static uint8_t* weight129 = (uint8_t*)0x200369000; // storage size: 16384 B
static uint8_t* weight130 = (uint8_t*)0x20036d000; // storage size: 54784 B
static uint8_t* weight131 = (uint8_t*)0x20037a600; // storage size: 54784 B
static uint8_t* weight132 = (uint8_t*)0x200387c00; // storage size: 16384 B
static uint8_t* weight133 = (uint8_t*)0x20038bc00; // storage size: 16384 B
static uint8_t* weight134 = (uint8_t*)0x20038fc00; // storage size: 18432 B
static uint8_t* weight135 = (uint8_t*)0x200394400; // storage size: 16384 B
static uint8_t* weight136 = (uint8_t*)0x200398400; // storage size: 16384 B
static uint8_t* weight137 = (uint8_t*)0x20039c400; // storage size: 54784 B
static uint8_t* weight138 = (uint8_t*)0x2003a9a00; // storage size: 54784 B
static uint8_t* weight139 = (uint8_t*)0x2003b7000; // storage size: 16384 B
static uint8_t* weight140 = (uint8_t*)0x2003bb000; // storage size: 16384 B
static uint8_t* weight141 = (uint8_t*)0x2003bf000; // storage size: 18432 B
static uint8_t* weight142 = (uint8_t*)0x2003c3800; // storage size: 16384 B
static uint8_t* weight143 = (uint8_t*)0x2003c7800; // storage size: 16384 B
static uint8_t* weight144 = (uint8_t*)0x2003cb800; // storage size: 54784 B
static uint8_t* weight145 = (uint8_t*)0x2003d8e00; // storage size: 54784 B
static uint8_t* weight146 = (uint8_t*)0x2003e6400; // storage size: 16384 B
static uint8_t* weight147 = (uint8_t*)0x2003ea400; // storage size: 16384 B
static uint8_t* weight148 = (uint8_t*)0x2003ee400; // storage size: 18432 B
static uint8_t* weight149 = (uint8_t*)0x2003f2c00; // storage size: 16384 B
static uint8_t* weight150 = (uint8_t*)0x2003f6c00; // storage size: 16384 B
static uint8_t* weight151 = (uint8_t*)0x2003fac00; // storage size: 54784 B
static uint8_t* weight152 = (uint8_t*)0x200408200; // storage size: 54784 B
static uint8_t* weight153 = (uint8_t*)0x200415800; // storage size: 16384 B
static uint8_t* weight154 = (uint8_t*)0x200419800; // storage size: 16384 B
static uint8_t* weight155 = (uint8_t*)0x20041d800; // storage size: 18432 B
static uint8_t* weight156 = (uint8_t*)0x200422000; // storage size: 16384 B
static uint8_t* weight157 = (uint8_t*)0x200426000; // storage size: 16384 B
static uint8_t* weight158 = (uint8_t*)0x20042a000; // storage size: 54784 B
static uint8_t* weight159 = (uint8_t*)0x200437600; // storage size: 54784 B
static uint8_t* weight160 = (uint8_t*)0x200444c00; // storage size: 16384 B
static uint8_t* weight161 = (uint8_t*)0x200448c00; // storage size: 16384 B
static uint8_t* weight162 = (uint8_t*)0x20044cc00; // storage size: 18432 B
static uint8_t* weight163 = (uint8_t*)0x200451400; // storage size: 16384 B
static uint8_t* weight164 = (uint8_t*)0x200455400; // storage size: 16384 B
static uint8_t* weight165 = (uint8_t*)0x200459400; // storage size: 54784 B
static uint8_t* weight166 = (uint8_t*)0x200466a00; // storage size: 54784 B
static uint8_t* weight167 = (uint8_t*)0x200474000; // storage size: 16384 B
static uint8_t* weight168 = (uint8_t*)0x200478000; // storage size: 16384 B
static uint8_t* weight169 = (uint8_t*)0x20047c000; // storage size: 18432 B
static uint8_t* weight170 = (uint8_t*)0x200480800; // storage size: 16384 B
static uint8_t* weight171 = (uint8_t*)0x200484800; // storage size: 16384 B
static uint8_t* weight172 = (uint8_t*)0x200488800; // storage size: 54784 B
static uint8_t* weight173 = (uint8_t*)0x200495e00; // storage size: 54784 B
static uint8_t* weight174 = (uint8_t*)0x2004a3400; // storage size: 16384 B
static uint8_t* weight175 = (uint8_t*)0x2004a7400; // storage size: 16384 B
static uint8_t* weight176 = (uint8_t*)0x2004ab400; // storage size: 18432 B
static uint8_t* weight177 = (uint8_t*)0x2004afc00; // storage size: 16384 B
static uint8_t* weight178 = (uint8_t*)0x2004b3c00; // storage size: 16384 B
static uint8_t* weight179 = (uint8_t*)0x2004b7c00; // storage size: 54784 B
static uint8_t* weight180 = (uint8_t*)0x2004c5200; // storage size: 54784 B
static uint8_t* weight181 = (uint8_t*)0x2004d2800; // storage size: 16384 B
static uint8_t* weight182 = (uint8_t*)0x2004d6800; // storage size: 16384 B
static uint8_t* weight183 = (uint8_t*)0x2004da800; // storage size: 18432 B
static uint8_t* weight184 = (uint8_t*)0x2004df000; // storage size: 16384 B
static uint8_t* weight185 = (uint8_t*)0x2004e3000; // storage size: 16384 B
static uint8_t* weight186 = (uint8_t*)0x2004e7000; // storage size: 54784 B
static uint8_t* weight187 = (uint8_t*)0x2004f4600; // storage size: 54784 B
static uint8_t* weight188 = (uint8_t*)0x200501c00; // storage size: 16384 B
static uint8_t* weight189 = (uint8_t*)0x200505c00; // storage size: 16384 B
static uint8_t* weight190 = (uint8_t*)0x200509c00; // storage size: 18432 B
static uint8_t* weight191 = (uint8_t*)0x20050e400; // storage size: 16384 B
static uint8_t* weight192 = (uint8_t*)0x200512400; // storage size: 16384 B
static uint8_t* weight193 = (uint8_t*)0x200516400; // storage size: 54784 B
static uint8_t* weight194 = (uint8_t*)0x200523a00; // storage size: 54784 B
static uint8_t* weight195 = (uint8_t*)0x200531000; // storage size: 16384 B
static uint8_t* weight196 = (uint8_t*)0x200535000; // storage size: 16384 B
static uint8_t* weight197 = (uint8_t*)0x200539000; // storage size: 260096 B
static uint8_t* weight198 = (uint8_t*)0x200578800; // storage size: 16646144 B
// cache storage define
static uint8_t* cache0 = (uint8_t*)0x201558800; // storage size: 1179648 B
static uint8_t* cache1 = (uint8_t*)0x201678800; // storage size: 1114112 B
static uint8_t* cache2 = (uint8_t*)0x201788800; // storage size: 1048576 B
static uint8_t* cache3 = (uint8_t*)0x201888800; // storage size: 1048576 B
static uint8_t* cache4 = (uint8_t*)0x201988800; // storage size: 1179648 B
static uint8_t* cache5 = (uint8_t*)0x201aa8800; // storage size: 1114112 B
static uint8_t* cache6 = (uint8_t*)0x201bb8800; // storage size: 1048576 B
static uint8_t* cache7 = (uint8_t*)0x201cb8800; // storage size: 1048576 B
static uint8_t* cache8 = (uint8_t*)0x201db8800; // storage size: 1179648 B
static uint8_t* cache9 = (uint8_t*)0x201ed8800; // storage size: 1114112 B
static uint8_t* cache10 = (uint8_t*)0x201fe8800; // storage size: 1048576 B
static uint8_t* cache11 = (uint8_t*)0x2020e8800; // storage size: 1048576 B
static uint8_t* cache12 = (uint8_t*)0x2021e8800; // storage size: 1179648 B
static uint8_t* cache13 = (uint8_t*)0x202308800; // storage size: 1114112 B
static uint8_t* cache14 = (uint8_t*)0x202418800; // storage size: 1048576 B
static uint8_t* cache15 = (uint8_t*)0x202518800; // storage size: 1048576 B
static uint8_t* cache16 = (uint8_t*)0x202618800; // storage size: 1179648 B
static uint8_t* cache17 = (uint8_t*)0x202738800; // storage size: 1114112 B
static uint8_t* cache18 = (uint8_t*)0x202848800; // storage size: 1048576 B
static uint8_t* cache19 = (uint8_t*)0x202948800; // storage size: 1048576 B
static uint8_t* cache20 = (uint8_t*)0x202a48800; // storage size: 1179648 B
static uint8_t* cache21 = (uint8_t*)0x202b68800; // storage size: 1114112 B
static uint8_t* cache22 = (uint8_t*)0x202c78800; // storage size: 1048576 B
static uint8_t* cache23 = (uint8_t*)0x202d78800; // storage size: 1048576 B
static uint8_t* cache24 = (uint8_t*)0x202e78800; // storage size: 1179648 B
static uint8_t* cache25 = (uint8_t*)0x202f98800; // storage size: 1114112 B
static uint8_t* cache26 = (uint8_t*)0x2030a8800; // storage size: 1048576 B
static uint8_t* cache27 = (uint8_t*)0x2031a8800; // storage size: 1048576 B
static uint8_t* cache28 = (uint8_t*)0x2032a8800; // storage size: 1179648 B
static uint8_t* cache29 = (uint8_t*)0x2033c8800; // storage size: 1114112 B
static uint8_t* cache30 = (uint8_t*)0x2034d8800; // storage size: 1048576 B
static uint8_t* cache31 = (uint8_t*)0x2035d8800; // storage size: 1048576 B
static uint8_t* cache32 = (uint8_t*)0x2036d8800; // storage size: 1179648 B
static uint8_t* cache33 = (uint8_t*)0x2037f8800; // storage size: 1114112 B
static uint8_t* cache34 = (uint8_t*)0x203908800; // storage size: 1048576 B
static uint8_t* cache35 = (uint8_t*)0x203a08800; // storage size: 1048576 B
static uint8_t* cache36 = (uint8_t*)0x203b08800; // storage size: 1179648 B
static uint8_t* cache37 = (uint8_t*)0x203c28800; // storage size: 1114112 B
static uint8_t* cache38 = (uint8_t*)0x203d38800; // storage size: 1048576 B
static uint8_t* cache39 = (uint8_t*)0x203e38800; // storage size: 1048576 B
static uint8_t* cache40 = (uint8_t*)0x203f38800; // storage size: 1179648 B
static uint8_t* cache41 = (uint8_t*)0x204058800; // storage size: 1114112 B
static uint8_t* cache42 = (uint8_t*)0x204168800; // storage size: 1048576 B
static uint8_t* cache43 = (uint8_t*)0x204268800; // storage size: 1048576 B
static uint8_t* cache44 = (uint8_t*)0x204368800; // storage size: 1179648 B
static uint8_t* cache45 = (uint8_t*)0x204488800; // storage size: 1114112 B
static uint8_t* cache46 = (uint8_t*)0x204598800; // storage size: 1048576 B
static uint8_t* cache47 = (uint8_t*)0x204698800; // storage size: 1048576 B
static uint8_t* cache48 = (uint8_t*)0x204798800; // storage size: 1179648 B
static uint8_t* cache49 = (uint8_t*)0x2048b8800; // storage size: 1114112 B
static uint8_t* cache50 = (uint8_t*)0x2049c8800; // storage size: 1048576 B
static uint8_t* cache51 = (uint8_t*)0x204ac8800; // storage size: 1048576 B
static uint8_t* cache52 = (uint8_t*)0x204bc8800; // storage size: 1179648 B
static uint8_t* cache53 = (uint8_t*)0x204ce8800; // storage size: 1114112 B
static uint8_t* cache54 = (uint8_t*)0x204df8800; // storage size: 1048576 B
static uint8_t* cache55 = (uint8_t*)0x204ef8800; // storage size: 1048576 B
static uint8_t* cache56 = (uint8_t*)0x204ff8800; // storage size: 1179648 B
static uint8_t* cache57 = (uint8_t*)0x205118800; // storage size: 1114112 B
static uint8_t* cache58 = (uint8_t*)0x205228800; // storage size: 1048576 B
static uint8_t* cache59 = (uint8_t*)0x205328800; // storage size: 1048576 B
static uint8_t* cache60 = (uint8_t*)0x205428800; // storage size: 1179648 B
static uint8_t* cache61 = (uint8_t*)0x205548800; // storage size: 1114112 B
static uint8_t* cache62 = (uint8_t*)0x205658800; // storage size: 1048576 B
static uint8_t* cache63 = (uint8_t*)0x205758800; // storage size: 1048576 B
static uint8_t* cache64 = (uint8_t*)0x205858800; // storage size: 1179648 B
static uint8_t* cache65 = (uint8_t*)0x205978800; // storage size: 1114112 B
static uint8_t* cache66 = (uint8_t*)0x205a88800; // storage size: 1048576 B
static uint8_t* cache67 = (uint8_t*)0x205b88800; // storage size: 1048576 B
static uint8_t* cache68 = (uint8_t*)0x205c88800; // storage size: 1179648 B
static uint8_t* cache69 = (uint8_t*)0x205da8800; // storage size: 1114112 B
static uint8_t* cache70 = (uint8_t*)0x205eb8800; // storage size: 1048576 B
static uint8_t* cache71 = (uint8_t*)0x205fb8800; // storage size: 1048576 B
static uint8_t* cache72 = (uint8_t*)0x2060b8800; // storage size: 1179648 B
static uint8_t* cache73 = (uint8_t*)0x2061d8800; // storage size: 1114112 B
static uint8_t* cache74 = (uint8_t*)0x2062e8800; // storage size: 1048576 B
static uint8_t* cache75 = (uint8_t*)0x2063e8800; // storage size: 1048576 B
static uint8_t* cache76 = (uint8_t*)0x2064e8800; // storage size: 1179648 B
static uint8_t* cache77 = (uint8_t*)0x206608800; // storage size: 1114112 B
static uint8_t* cache78 = (uint8_t*)0x206718800; // storage size: 1048576 B
static uint8_t* cache79 = (uint8_t*)0x206818800; // storage size: 1048576 B
static uint8_t* cache80 = (uint8_t*)0x206918800; // storage size: 1179648 B
static uint8_t* cache81 = (uint8_t*)0x206a38800; // storage size: 1114112 B
static uint8_t* cache82 = (uint8_t*)0x206b48800; // storage size: 1048576 B
static uint8_t* cache83 = (uint8_t*)0x206c48800; // storage size: 1048576 B
static uint8_t* cache84 = (uint8_t*)0x206d48800; // storage size: 1179648 B
static uint8_t* cache85 = (uint8_t*)0x206e68800; // storage size: 1114112 B
static uint8_t* cache86 = (uint8_t*)0x206f78800; // storage size: 1048576 B
static uint8_t* cache87 = (uint8_t*)0x207078800; // storage size: 1048576 B
static uint8_t* cache88 = (uint8_t*)0x207178800; // storage size: 1179648 B
static uint8_t* cache89 = (uint8_t*)0x207298800; // storage size: 1114112 B
static uint8_t* cache90 = (uint8_t*)0x2073a8800; // storage size: 1048576 B
static uint8_t* cache91 = (uint8_t*)0x2074a8800; // storage size: 1048576 B
static uint8_t* cache92 = (uint8_t*)0x2075a8800; // storage size: 1179648 B
static uint8_t* cache93 = (uint8_t*)0x2076c8800; // storage size: 1114112 B
static uint8_t* cache94 = (uint8_t*)0x2077d8800; // storage size: 1048576 B
static uint8_t* cache95 = (uint8_t*)0x2078d8800; // storage size: 1048576 B
static uint8_t* cache96 = (uint8_t*)0x2079d8800; // storage size: 1179648 B
static uint8_t* cache97 = (uint8_t*)0x207af8800; // storage size: 1114112 B
static uint8_t* cache98 = (uint8_t*)0x207c08800; // storage size: 1048576 B
static uint8_t* cache99 = (uint8_t*)0x207d08800; // storage size: 1048576 B
static uint8_t* cache100 = (uint8_t*)0x207e08800; // storage size: 1179648 B
static uint8_t* cache101 = (uint8_t*)0x207f28800; // storage size: 1114112 B
static uint8_t* cache102 = (uint8_t*)0x208038800; // storage size: 1048576 B
static uint8_t* cache103 = (uint8_t*)0x208138800; // storage size: 1048576 B
static uint8_t* cache104 = (uint8_t*)0x208238800; // storage size: 1179648 B
static uint8_t* cache105 = (uint8_t*)0x208358800; // storage size: 1114112 B
static uint8_t* cache106 = (uint8_t*)0x208468800; // storage size: 1048576 B
static uint8_t* cache107 = (uint8_t*)0x208568800; // storage size: 1048576 B
static uint8_t* cache108 = (uint8_t*)0x208668800; // storage size: 1179648 B
static uint8_t* cache109 = (uint8_t*)0x208788800; // storage size: 1114112 B
static uint8_t* cache110 = (uint8_t*)0x208898800; // storage size: 1048576 B
static uint8_t* cache111 = (uint8_t*)0x208998800; // storage size: 1048576 B
// runtime storage define
static uint8_t* runtime0 = (uint8_t*)0x208a98800; // storage size: 1048576 B
static uint8_t* runtime1 = (uint8_t*)0x208b98800; // storage size: 3506176 B
static uint8_t* runtime2 = (uint8_t*)0x208ef0800; // storage size: 3506176 B
static uint8_t* runtime3 = (uint8_t*)0x209248800; // storage size: 3506176 B
// hbm storage define
static uint8_t* hbm0 = (uint8_t*)0x000000000; // storage size: 304128 B
static uint8_t* hbm1 = (uint8_t*)0x00004a400; // storage size: 270336 B
static uint8_t* hbm2 = (uint8_t*)0x00008c400; // storage size: 903936 B
static uint8_t* hbm3 = (uint8_t*)0x000168f00; // storage size: 903936 B
static uint8_t* hbm4 = (uint8_t*)0x000245a00; // storage size: 905216 B
static uint8_t* hbm5 = (uint8_t*)0x000322a00; // storage size: 304128 B
static uint8_t* hbm6 = (uint8_t*)0x00036ce00; // storage size: 270336 B
static uint8_t* hbm7 = (uint8_t*)0x0003aee00; // storage size: 903936 B
static uint8_t* hbm8 = (uint8_t*)0x00048b900; // storage size: 903936 B
static uint8_t* hbm9 = (uint8_t*)0x000568400; // storage size: 905216 B
static uint8_t* hbm10 = (uint8_t*)0x000645400; // storage size: 304128 B
static uint8_t* hbm11 = (uint8_t*)0x00068f800; // storage size: 270336 B
static uint8_t* hbm12 = (uint8_t*)0x0006d1800; // storage size: 903936 B
static uint8_t* hbm13 = (uint8_t*)0x0007ae300; // storage size: 903936 B
static uint8_t* hbm14 = (uint8_t*)0x00088ae00; // storage size: 905216 B
static uint8_t* hbm15 = (uint8_t*)0x000967e00; // storage size: 304128 B
static uint8_t* hbm16 = (uint8_t*)0x0009b2200; // storage size: 270336 B
static uint8_t* hbm17 = (uint8_t*)0x0009f4200; // storage size: 903936 B
static uint8_t* hbm18 = (uint8_t*)0x000ad0d00; // storage size: 903936 B
static uint8_t* hbm19 = (uint8_t*)0x000bad800; // storage size: 905216 B
static uint8_t* hbm20 = (uint8_t*)0x000c8a800; // storage size: 304128 B
static uint8_t* hbm21 = (uint8_t*)0x000cd4c00; // storage size: 270336 B
static uint8_t* hbm22 = (uint8_t*)0x000d16c00; // storage size: 903936 B
static uint8_t* hbm23 = (uint8_t*)0x000df3700; // storage size: 903936 B
static uint8_t* hbm24 = (uint8_t*)0x000ed0200; // storage size: 905216 B
static uint8_t* hbm25 = (uint8_t*)0x000fad200; // storage size: 304128 B
static uint8_t* hbm26 = (uint8_t*)0x000ff7600; // storage size: 270336 B
static uint8_t* hbm27 = (uint8_t*)0x001039600; // storage size: 903936 B
static uint8_t* hbm28 = (uint8_t*)0x001116100; // storage size: 903936 B
static uint8_t* hbm29 = (uint8_t*)0x0011f2c00; // storage size: 905216 B
static uint8_t* hbm30 = (uint8_t*)0x0012cfc00; // storage size: 304128 B
static uint8_t* hbm31 = (uint8_t*)0x00131a000; // storage size: 270336 B
static uint8_t* hbm32 = (uint8_t*)0x00135c000; // storage size: 903936 B
static uint8_t* hbm33 = (uint8_t*)0x001438b00; // storage size: 903936 B
static uint8_t* hbm34 = (uint8_t*)0x001515600; // storage size: 905216 B
static uint8_t* hbm35 = (uint8_t*)0x0015f2600; // storage size: 304128 B
static uint8_t* hbm36 = (uint8_t*)0x00163ca00; // storage size: 270336 B
static uint8_t* hbm37 = (uint8_t*)0x00167ea00; // storage size: 903936 B
static uint8_t* hbm38 = (uint8_t*)0x00175b500; // storage size: 903936 B
static uint8_t* hbm39 = (uint8_t*)0x001838000; // storage size: 905216 B
static uint8_t* hbm40 = (uint8_t*)0x001915000; // storage size: 304128 B
static uint8_t* hbm41 = (uint8_t*)0x00195f400; // storage size: 270336 B
static uint8_t* hbm42 = (uint8_t*)0x0019a1400; // storage size: 903936 B
static uint8_t* hbm43 = (uint8_t*)0x001a7df00; // storage size: 903936 B
static uint8_t* hbm44 = (uint8_t*)0x001b5aa00; // storage size: 905216 B
static uint8_t* hbm45 = (uint8_t*)0x001c37a00; // storage size: 304128 B
static uint8_t* hbm46 = (uint8_t*)0x001c81e00; // storage size: 270336 B
static uint8_t* hbm47 = (uint8_t*)0x001cc3e00; // storage size: 903936 B
static uint8_t* hbm48 = (uint8_t*)0x001da0900; // storage size: 903936 B
static uint8_t* hbm49 = (uint8_t*)0x001e7d400; // storage size: 905216 B
static uint8_t* hbm50 = (uint8_t*)0x001f5a400; // storage size: 304128 B
static uint8_t* hbm51 = (uint8_t*)0x001fa4800; // storage size: 270336 B
static uint8_t* hbm52 = (uint8_t*)0x001fe6800; // storage size: 903936 B
static uint8_t* hbm53 = (uint8_t*)0x0020c3300; // storage size: 903936 B
static uint8_t* hbm54 = (uint8_t*)0x00219fe00; // storage size: 905216 B
static uint8_t* hbm55 = (uint8_t*)0x00227ce00; // storage size: 304128 B
static uint8_t* hbm56 = (uint8_t*)0x0022c7200; // storage size: 270336 B
static uint8_t* hbm57 = (uint8_t*)0x002309200; // storage size: 903936 B
static uint8_t* hbm58 = (uint8_t*)0x0023e5d00; // storage size: 903936 B
static uint8_t* hbm59 = (uint8_t*)0x0024c2800; // storage size: 905216 B
static uint8_t* hbm60 = (uint8_t*)0x00259f800; // storage size: 304128 B
static uint8_t* hbm61 = (uint8_t*)0x0025e9c00; // storage size: 270336 B
static uint8_t* hbm62 = (uint8_t*)0x00262bc00; // storage size: 903936 B
static uint8_t* hbm63 = (uint8_t*)0x002708700; // storage size: 903936 B
static uint8_t* hbm64 = (uint8_t*)0x0027e5200; // storage size: 905216 B
static uint8_t* hbm65 = (uint8_t*)0x0028c2200; // storage size: 304128 B
static uint8_t* hbm66 = (uint8_t*)0x00290c600; // storage size: 270336 B
static uint8_t* hbm67 = (uint8_t*)0x00294e600; // storage size: 903936 B
static uint8_t* hbm68 = (uint8_t*)0x002a2b100; // storage size: 903936 B
static uint8_t* hbm69 = (uint8_t*)0x002b07c00; // storage size: 905216 B
static uint8_t* hbm70 = (uint8_t*)0x002be4c00; // storage size: 304128 B
static uint8_t* hbm71 = (uint8_t*)0x002c2f000; // storage size: 270336 B
static uint8_t* hbm72 = (uint8_t*)0x002c71000; // storage size: 903936 B
static uint8_t* hbm73 = (uint8_t*)0x002d4db00; // storage size: 903936 B
static uint8_t* hbm74 = (uint8_t*)0x002e2a600; // storage size: 905216 B
static uint8_t* hbm75 = (uint8_t*)0x002f07600; // storage size: 304128 B
static uint8_t* hbm76 = (uint8_t*)0x002f51a00; // storage size: 270336 B
static uint8_t* hbm77 = (uint8_t*)0x002f93a00; // storage size: 903936 B
static uint8_t* hbm78 = (uint8_t*)0x003070500; // storage size: 903936 B
static uint8_t* hbm79 = (uint8_t*)0x00314d000; // storage size: 905216 B
static uint8_t* hbm80 = (uint8_t*)0x00322a000; // storage size: 304128 B
static uint8_t* hbm81 = (uint8_t*)0x003274400; // storage size: 270336 B
static uint8_t* hbm82 = (uint8_t*)0x0032b6400; // storage size: 903936 B
static uint8_t* hbm83 = (uint8_t*)0x003392f00; // storage size: 903936 B
static uint8_t* hbm84 = (uint8_t*)0x00346fa00; // storage size: 905216 B
static uint8_t* hbm85 = (uint8_t*)0x00354ca00; // storage size: 304128 B
static uint8_t* hbm86 = (uint8_t*)0x003596e00; // storage size: 270336 B
static uint8_t* hbm87 = (uint8_t*)0x0035d8e00; // storage size: 903936 B
static uint8_t* hbm88 = (uint8_t*)0x0036b5900; // storage size: 903936 B
static uint8_t* hbm89 = (uint8_t*)0x003792400; // storage size: 905216 B
static uint8_t* hbm90 = (uint8_t*)0x00386f400; // storage size: 304128 B
static uint8_t* hbm91 = (uint8_t*)0x0038b9800; // storage size: 270336 B
static uint8_t* hbm92 = (uint8_t*)0x0038fb800; // storage size: 903936 B
static uint8_t* hbm93 = (uint8_t*)0x0039d8300; // storage size: 903936 B
static uint8_t* hbm94 = (uint8_t*)0x003ab4e00; // storage size: 905216 B
static uint8_t* hbm95 = (uint8_t*)0x003b91e00; // storage size: 304128 B
static uint8_t* hbm96 = (uint8_t*)0x003bdc200; // storage size: 270336 B
static uint8_t* hbm97 = (uint8_t*)0x003c1e200; // storage size: 903936 B
static uint8_t* hbm98 = (uint8_t*)0x003cfad00; // storage size: 903936 B
static uint8_t* hbm99 = (uint8_t*)0x003dd7800; // storage size: 905216 B
static uint8_t* hbm100 = (uint8_t*)0x003eb4800; // storage size: 304128 B
static uint8_t* hbm101 = (uint8_t*)0x003efec00; // storage size: 270336 B
static uint8_t* hbm102 = (uint8_t*)0x003f40c00; // storage size: 903936 B
static uint8_t* hbm103 = (uint8_t*)0x00401d700; // storage size: 903936 B
static uint8_t* hbm104 = (uint8_t*)0x0040fa200; // storage size: 905216 B
static uint8_t* hbm105 = (uint8_t*)0x0041d7200; // storage size: 304128 B
static uint8_t* hbm106 = (uint8_t*)0x004221600; // storage size: 270336 B
static uint8_t* hbm107 = (uint8_t*)0x004263600; // storage size: 903936 B
static uint8_t* hbm108 = (uint8_t*)0x004340100; // storage size: 903936 B
static uint8_t* hbm109 = (uint8_t*)0x00441cc00; // storage size: 905216 B
static uint8_t* hbm110 = (uint8_t*)0x0044f9c00; // storage size: 304128 B
static uint8_t* hbm111 = (uint8_t*)0x004544000; // storage size: 270336 B
static uint8_t* hbm112 = (uint8_t*)0x004586000; // storage size: 903936 B
static uint8_t* hbm113 = (uint8_t*)0x004662b00; // storage size: 903936 B
static uint8_t* hbm114 = (uint8_t*)0x00473f600; // storage size: 905216 B
static uint8_t* hbm115 = (uint8_t*)0x00481c600; // storage size: 304128 B
static uint8_t* hbm116 = (uint8_t*)0x004866a00; // storage size: 270336 B
static uint8_t* hbm117 = (uint8_t*)0x0048a8a00; // storage size: 903936 B
static uint8_t* hbm118 = (uint8_t*)0x004985500; // storage size: 903936 B
static uint8_t* hbm119 = (uint8_t*)0x004a62000; // storage size: 905216 B
static uint8_t* hbm120 = (uint8_t*)0x004b3f000; // storage size: 304128 B
static uint8_t* hbm121 = (uint8_t*)0x004b89400; // storage size: 270336 B
static uint8_t* hbm122 = (uint8_t*)0x004bcb400; // storage size: 903936 B
static uint8_t* hbm123 = (uint8_t*)0x004ca7f00; // storage size: 903936 B
static uint8_t* hbm124 = (uint8_t*)0x004d84a00; // storage size: 905216 B
static uint8_t* hbm125 = (uint8_t*)0x004e61a00; // storage size: 304128 B
static uint8_t* hbm126 = (uint8_t*)0x004eabe00; // storage size: 270336 B
static uint8_t* hbm127 = (uint8_t*)0x004eede00; // storage size: 903936 B
static uint8_t* hbm128 = (uint8_t*)0x004fca900; // storage size: 903936 B
static uint8_t* hbm129 = (uint8_t*)0x0050a7400; // storage size: 905216 B
static uint8_t* hbm130 = (uint8_t*)0x005184400; // storage size: 304128 B
static uint8_t* hbm131 = (uint8_t*)0x0051ce800; // storage size: 270336 B
static uint8_t* hbm132 = (uint8_t*)0x005210800; // storage size: 903936 B
static uint8_t* hbm133 = (uint8_t*)0x0052ed300; // storage size: 903936 B
static uint8_t* hbm134 = (uint8_t*)0x0053c9e00; // storage size: 905216 B
static uint8_t* hbm135 = (uint8_t*)0x0054a6e00; // storage size: 304128 B
static uint8_t* hbm136 = (uint8_t*)0x0054f1200; // storage size: 270336 B
static uint8_t* hbm137 = (uint8_t*)0x005533200; // storage size: 903936 B
static uint8_t* hbm138 = (uint8_t*)0x00560fd00; // storage size: 903936 B
static uint8_t* hbm139 = (uint8_t*)0x0056ec800; // storage size: 905216 B
static uint8_t* hbm140 = (uint8_t*)0x0057c9800; // storage size: 4291584 B

// get input ptr
uint64_t data = 0x208a98800; // 145328128

// get output ptr
uint64_t output = 0x208a98800; // 145328128

// get weight ddr ptr
uint64_t BLOCK00_ln_k_bias = 0x20000a000; // 40960
uint64_t BLOCK00_qkv_bn_bias = 0x20000e000; // 57344
uint64_t pos_emb = 0x200000000; // 0
uint64_t BLOCK00_atten_bn = 0x200012800; // 75776
uint64_t BLOCK00_post_k_bias = 0x200016800; // 92160
uint64_t BLOCK00_h_to_4h_bn_1 = 0x20001a800; // 108544
uint64_t BLOCK00_h_to_4h_bn_0 = 0x200027e00; // 163328
uint64_t silu_act = 0x200008000; // 32768
uint64_t BLOCK00_dense_4h_to_h_bn = 0x200035400; // 218112
uint64_t BLOCK01_ln_k_bias = 0x200039400; // 234496
uint64_t BLOCK01_qkv_bn_bias = 0x20003d400; // 250880
uint64_t BLOCK01_atten_bn = 0x200041c00; // 269312
uint64_t BLOCK01_post_k_bias = 0x200045c00; // 285696
uint64_t BLOCK01_h_to_4h_bn_1 = 0x200049c00; // 302080
uint64_t BLOCK01_h_to_4h_bn_0 = 0x200057200; // 356864
uint64_t BLOCK01_dense_4h_to_h_bn = 0x200064800; // 411648
uint64_t BLOCK02_ln_k_bias = 0x200068800; // 428032
uint64_t BLOCK02_qkv_bn_bias = 0x20006c800; // 444416
uint64_t BLOCK02_atten_bn = 0x200071000; // 462848
uint64_t BLOCK02_post_k_bias = 0x200075000; // 479232
uint64_t BLOCK02_h_to_4h_bn_1 = 0x200079000; // 495616
uint64_t BLOCK02_h_to_4h_bn_0 = 0x200086600; // 550400
uint64_t BLOCK02_dense_4h_to_h_bn = 0x200093c00; // 605184
uint64_t BLOCK03_ln_k_bias = 0x200097c00; // 621568
uint64_t BLOCK03_qkv_bn_bias = 0x20009bc00; // 637952
uint64_t BLOCK03_atten_bn = 0x2000a0400; // 656384
uint64_t BLOCK03_post_k_bias = 0x2000a4400; // 672768
uint64_t BLOCK03_h_to_4h_bn_1 = 0x2000a8400; // 689152
uint64_t BLOCK03_h_to_4h_bn_0 = 0x2000b5a00; // 743936
uint64_t BLOCK03_dense_4h_to_h_bn = 0x2000c3000; // 798720
uint64_t BLOCK04_ln_k_bias = 0x2000c7000; // 815104
uint64_t BLOCK04_qkv_bn_bias = 0x2000cb000; // 831488
uint64_t BLOCK04_atten_bn = 0x2000cf800; // 849920
uint64_t BLOCK04_post_k_bias = 0x2000d3800; // 866304
uint64_t BLOCK04_h_to_4h_bn_1 = 0x2000d7800; // 882688
uint64_t BLOCK04_h_to_4h_bn_0 = 0x2000e4e00; // 937472
uint64_t BLOCK04_dense_4h_to_h_bn = 0x2000f2400; // 992256
uint64_t BLOCK05_ln_k_bias = 0x2000f6400; // 1008640
uint64_t BLOCK05_qkv_bn_bias = 0x2000fa400; // 1025024
uint64_t BLOCK05_atten_bn = 0x2000fec00; // 1043456
uint64_t BLOCK05_post_k_bias = 0x200102c00; // 1059840
uint64_t BLOCK05_h_to_4h_bn_1 = 0x200106c00; // 1076224
uint64_t BLOCK05_h_to_4h_bn_0 = 0x200114200; // 1131008
uint64_t BLOCK05_dense_4h_to_h_bn = 0x200121800; // 1185792
uint64_t BLOCK06_ln_k_bias = 0x200125800; // 1202176
uint64_t BLOCK06_qkv_bn_bias = 0x200129800; // 1218560
uint64_t BLOCK06_atten_bn = 0x20012e000; // 1236992
uint64_t BLOCK06_post_k_bias = 0x200132000; // 1253376
uint64_t BLOCK06_h_to_4h_bn_1 = 0x200136000; // 1269760
uint64_t BLOCK06_h_to_4h_bn_0 = 0x200143600; // 1324544
uint64_t BLOCK06_dense_4h_to_h_bn = 0x200150c00; // 1379328
uint64_t BLOCK07_ln_k_bias = 0x200154c00; // 1395712
uint64_t BLOCK07_qkv_bn_bias = 0x200158c00; // 1412096
uint64_t BLOCK07_atten_bn = 0x20015d400; // 1430528
uint64_t BLOCK07_post_k_bias = 0x200161400; // 1446912
uint64_t BLOCK07_h_to_4h_bn_1 = 0x200165400; // 1463296
uint64_t BLOCK07_h_to_4h_bn_0 = 0x200172a00; // 1518080
uint64_t BLOCK07_dense_4h_to_h_bn = 0x200180000; // 1572864
uint64_t BLOCK08_ln_k_bias = 0x200184000; // 1589248
uint64_t BLOCK08_qkv_bn_bias = 0x200188000; // 1605632
uint64_t BLOCK08_atten_bn = 0x20018c800; // 1624064
uint64_t BLOCK08_post_k_bias = 0x200190800; // 1640448
uint64_t BLOCK08_h_to_4h_bn_1 = 0x200194800; // 1656832
uint64_t BLOCK08_h_to_4h_bn_0 = 0x2001a1e00; // 1711616
uint64_t BLOCK08_dense_4h_to_h_bn = 0x2001af400; // 1766400
uint64_t BLOCK09_ln_k_bias = 0x2001b3400; // 1782784
uint64_t BLOCK09_qkv_bn_bias = 0x2001b7400; // 1799168
uint64_t BLOCK09_atten_bn = 0x2001bbc00; // 1817600
uint64_t BLOCK09_post_k_bias = 0x2001bfc00; // 1833984
uint64_t BLOCK09_h_to_4h_bn_1 = 0x2001c3c00; // 1850368
uint64_t BLOCK09_h_to_4h_bn_0 = 0x2001d1200; // 1905152
uint64_t BLOCK09_dense_4h_to_h_bn = 0x2001de800; // 1959936
uint64_t BLOCK10_ln_k_bias = 0x2001e2800; // 1976320
uint64_t BLOCK10_qkv_bn_bias = 0x2001e6800; // 1992704
uint64_t BLOCK10_atten_bn = 0x2001eb000; // 2011136
uint64_t BLOCK10_post_k_bias = 0x2001ef000; // 2027520
uint64_t BLOCK10_h_to_4h_bn_1 = 0x2001f3000; // 2043904
uint64_t BLOCK10_h_to_4h_bn_0 = 0x200200600; // 2098688
uint64_t BLOCK10_dense_4h_to_h_bn = 0x20020dc00; // 2153472
uint64_t BLOCK11_ln_k_bias = 0x200211c00; // 2169856
uint64_t BLOCK11_qkv_bn_bias = 0x200215c00; // 2186240
uint64_t BLOCK11_atten_bn = 0x20021a400; // 2204672
uint64_t BLOCK11_post_k_bias = 0x20021e400; // 2221056
uint64_t BLOCK11_h_to_4h_bn_1 = 0x200222400; // 2237440
uint64_t BLOCK11_h_to_4h_bn_0 = 0x20022fa00; // 2292224
uint64_t BLOCK11_dense_4h_to_h_bn = 0x20023d000; // 2347008
uint64_t BLOCK12_ln_k_bias = 0x200241000; // 2363392
uint64_t BLOCK12_qkv_bn_bias = 0x200245000; // 2379776
uint64_t BLOCK12_atten_bn = 0x200249800; // 2398208
uint64_t BLOCK12_post_k_bias = 0x20024d800; // 2414592
uint64_t BLOCK12_h_to_4h_bn_1 = 0x200251800; // 2430976
uint64_t BLOCK12_h_to_4h_bn_0 = 0x20025ee00; // 2485760
uint64_t BLOCK12_dense_4h_to_h_bn = 0x20026c400; // 2540544
uint64_t BLOCK13_ln_k_bias = 0x200270400; // 2556928
uint64_t BLOCK13_qkv_bn_bias = 0x200274400; // 2573312
uint64_t BLOCK13_atten_bn = 0x200278c00; // 2591744
uint64_t BLOCK13_post_k_bias = 0x20027cc00; // 2608128
uint64_t BLOCK13_h_to_4h_bn_1 = 0x200280c00; // 2624512
uint64_t BLOCK13_h_to_4h_bn_0 = 0x20028e200; // 2679296
uint64_t BLOCK13_dense_4h_to_h_bn = 0x20029b800; // 2734080
uint64_t BLOCK14_ln_k_bias = 0x20029f800; // 2750464
uint64_t BLOCK14_qkv_bn_bias = 0x2002a3800; // 2766848
uint64_t BLOCK14_atten_bn = 0x2002a8000; // 2785280
uint64_t BLOCK14_post_k_bias = 0x2002ac000; // 2801664
uint64_t BLOCK14_h_to_4h_bn_1 = 0x2002b0000; // 2818048
uint64_t BLOCK14_h_to_4h_bn_0 = 0x2002bd600; // 2872832
uint64_t BLOCK14_dense_4h_to_h_bn = 0x2002cac00; // 2927616
uint64_t BLOCK15_ln_k_bias = 0x2002cec00; // 2944000
uint64_t BLOCK15_qkv_bn_bias = 0x2002d2c00; // 2960384
uint64_t BLOCK15_atten_bn = 0x2002d7400; // 2978816
uint64_t BLOCK15_post_k_bias = 0x2002db400; // 2995200
uint64_t BLOCK15_h_to_4h_bn_1 = 0x2002df400; // 3011584
uint64_t BLOCK15_h_to_4h_bn_0 = 0x2002eca00; // 3066368
uint64_t BLOCK15_dense_4h_to_h_bn = 0x2002fa000; // 3121152
uint64_t BLOCK16_ln_k_bias = 0x2002fe000; // 3137536
uint64_t BLOCK16_qkv_bn_bias = 0x200302000; // 3153920
uint64_t BLOCK16_atten_bn = 0x200306800; // 3172352
uint64_t BLOCK16_post_k_bias = 0x20030a800; // 3188736
uint64_t BLOCK16_h_to_4h_bn_1 = 0x20030e800; // 3205120
uint64_t BLOCK16_h_to_4h_bn_0 = 0x20031be00; // 3259904
uint64_t BLOCK16_dense_4h_to_h_bn = 0x200329400; // 3314688
uint64_t BLOCK17_ln_k_bias = 0x20032d400; // 3331072
uint64_t BLOCK17_qkv_bn_bias = 0x200331400; // 3347456
uint64_t BLOCK17_atten_bn = 0x200335c00; // 3365888
uint64_t BLOCK17_post_k_bias = 0x200339c00; // 3382272
uint64_t BLOCK17_h_to_4h_bn_1 = 0x20033dc00; // 3398656
uint64_t BLOCK17_h_to_4h_bn_0 = 0x20034b200; // 3453440
uint64_t BLOCK17_dense_4h_to_h_bn = 0x200358800; // 3508224
uint64_t BLOCK18_ln_k_bias = 0x20035c800; // 3524608
uint64_t BLOCK18_qkv_bn_bias = 0x200360800; // 3540992
uint64_t BLOCK18_atten_bn = 0x200365000; // 3559424
uint64_t BLOCK18_post_k_bias = 0x200369000; // 3575808
uint64_t BLOCK18_h_to_4h_bn_1 = 0x20036d000; // 3592192
uint64_t BLOCK18_h_to_4h_bn_0 = 0x20037a600; // 3646976
uint64_t BLOCK18_dense_4h_to_h_bn = 0x200387c00; // 3701760
uint64_t BLOCK19_ln_k_bias = 0x20038bc00; // 3718144
uint64_t BLOCK19_qkv_bn_bias = 0x20038fc00; // 3734528
uint64_t BLOCK19_atten_bn = 0x200394400; // 3752960
uint64_t BLOCK19_post_k_bias = 0x200398400; // 3769344
uint64_t BLOCK19_h_to_4h_bn_1 = 0x20039c400; // 3785728
uint64_t BLOCK19_h_to_4h_bn_0 = 0x2003a9a00; // 3840512
uint64_t BLOCK19_dense_4h_to_h_bn = 0x2003b7000; // 3895296
uint64_t BLOCK20_ln_k_bias = 0x2003bb000; // 3911680
uint64_t BLOCK20_qkv_bn_bias = 0x2003bf000; // 3928064
uint64_t BLOCK20_atten_bn = 0x2003c3800; // 3946496
uint64_t BLOCK20_post_k_bias = 0x2003c7800; // 3962880
uint64_t BLOCK20_h_to_4h_bn_1 = 0x2003cb800; // 3979264
uint64_t BLOCK20_h_to_4h_bn_0 = 0x2003d8e00; // 4034048
uint64_t BLOCK20_dense_4h_to_h_bn = 0x2003e6400; // 4088832
uint64_t BLOCK21_ln_k_bias = 0x2003ea400; // 4105216
uint64_t BLOCK21_qkv_bn_bias = 0x2003ee400; // 4121600
uint64_t BLOCK21_atten_bn = 0x2003f2c00; // 4140032
uint64_t BLOCK21_post_k_bias = 0x2003f6c00; // 4156416
uint64_t BLOCK21_h_to_4h_bn_1 = 0x2003fac00; // 4172800
uint64_t BLOCK21_h_to_4h_bn_0 = 0x200408200; // 4227584
uint64_t BLOCK21_dense_4h_to_h_bn = 0x200415800; // 4282368
uint64_t BLOCK22_ln_k_bias = 0x200419800; // 4298752
uint64_t BLOCK22_qkv_bn_bias = 0x20041d800; // 4315136
uint64_t BLOCK22_atten_bn = 0x200422000; // 4333568
uint64_t BLOCK22_post_k_bias = 0x200426000; // 4349952
uint64_t BLOCK22_h_to_4h_bn_1 = 0x20042a000; // 4366336
uint64_t BLOCK22_h_to_4h_bn_0 = 0x200437600; // 4421120
uint64_t BLOCK22_dense_4h_to_h_bn = 0x200444c00; // 4475904
uint64_t BLOCK23_ln_k_bias = 0x200448c00; // 4492288
uint64_t BLOCK23_qkv_bn_bias = 0x20044cc00; // 4508672
uint64_t BLOCK23_atten_bn = 0x200451400; // 4527104
uint64_t BLOCK23_post_k_bias = 0x200455400; // 4543488
uint64_t BLOCK23_h_to_4h_bn_1 = 0x200459400; // 4559872
uint64_t BLOCK23_h_to_4h_bn_0 = 0x200466a00; // 4614656
uint64_t BLOCK23_dense_4h_to_h_bn = 0x200474000; // 4669440
uint64_t BLOCK24_ln_k_bias = 0x200478000; // 4685824
uint64_t BLOCK24_qkv_bn_bias = 0x20047c000; // 4702208
uint64_t BLOCK24_atten_bn = 0x200480800; // 4720640
uint64_t BLOCK24_post_k_bias = 0x200484800; // 4737024
uint64_t BLOCK24_h_to_4h_bn_1 = 0x200488800; // 4753408
uint64_t BLOCK24_h_to_4h_bn_0 = 0x200495e00; // 4808192
uint64_t BLOCK24_dense_4h_to_h_bn = 0x2004a3400; // 4862976
uint64_t BLOCK25_ln_k_bias = 0x2004a7400; // 4879360
uint64_t BLOCK25_qkv_bn_bias = 0x2004ab400; // 4895744
uint64_t BLOCK25_atten_bn = 0x2004afc00; // 4914176
uint64_t BLOCK25_post_k_bias = 0x2004b3c00; // 4930560
uint64_t BLOCK25_h_to_4h_bn_1 = 0x2004b7c00; // 4946944
uint64_t BLOCK25_h_to_4h_bn_0 = 0x2004c5200; // 5001728
uint64_t BLOCK25_dense_4h_to_h_bn = 0x2004d2800; // 5056512
uint64_t BLOCK26_ln_k_bias = 0x2004d6800; // 5072896
uint64_t BLOCK26_qkv_bn_bias = 0x2004da800; // 5089280
uint64_t BLOCK26_atten_bn = 0x2004df000; // 5107712
uint64_t BLOCK26_post_k_bias = 0x2004e3000; // 5124096
uint64_t BLOCK26_h_to_4h_bn_1 = 0x2004e7000; // 5140480
uint64_t BLOCK26_h_to_4h_bn_0 = 0x2004f4600; // 5195264
uint64_t BLOCK26_dense_4h_to_h_bn = 0x200501c00; // 5250048
uint64_t BLOCK27_ln_k_bias = 0x200505c00; // 5266432
uint64_t BLOCK27_qkv_bn_bias = 0x200509c00; // 5282816
uint64_t BLOCK27_atten_bn = 0x20050e400; // 5301248
uint64_t BLOCK27_post_k_bias = 0x200512400; // 5317632
uint64_t BLOCK27_h_to_4h_bn_1 = 0x200516400; // 5334016
uint64_t BLOCK27_h_to_4h_bn_0 = 0x200523a00; // 5388800
uint64_t BLOCK27_dense_4h_to_h_bn = 0x200531000; // 5443584
uint64_t Final_LN_k_bias = 0x200535000; // 5459968
uint64_t Output_Layer_bn = 0x200539000; // 5476352
uint64_t Output_Layer_res = 0x200578800; // 5736448

// get weight hbm ptr
uint64_t BLOCK00_qkv_weight = 0x000000000; // 0
uint64_t BLOCK00_atten_weight = 0x00004a400; // 304128
uint64_t BLOCK00_h_to_4h_wt_1 = 0x00008c400; // 574464
uint64_t BLOCK00_h_to_4h_wt_0 = 0x000168f00; // 1478400
uint64_t BLOCK00_dense_4h_to_h_wt = 0x000245a00; // 2382336
uint64_t BLOCK01_qkv_weight = 0x000322a00; // 3287552
uint64_t BLOCK01_atten_weight = 0x00036ce00; // 3591680
uint64_t BLOCK01_h_to_4h_wt_1 = 0x0003aee00; // 3862016
uint64_t BLOCK01_h_to_4h_wt_0 = 0x00048b900; // 4765952
uint64_t BLOCK01_dense_4h_to_h_wt = 0x000568400; // 5669888
uint64_t BLOCK02_qkv_weight = 0x000645400; // 6575104
uint64_t BLOCK02_atten_weight = 0x00068f800; // 6879232
uint64_t BLOCK02_h_to_4h_wt_1 = 0x0006d1800; // 7149568
uint64_t BLOCK02_h_to_4h_wt_0 = 0x0007ae300; // 8053504
uint64_t BLOCK02_dense_4h_to_h_wt = 0x00088ae00; // 8957440
uint64_t BLOCK03_qkv_weight = 0x000967e00; // 9862656
uint64_t BLOCK03_atten_weight = 0x0009b2200; // 10166784
uint64_t BLOCK03_h_to_4h_wt_1 = 0x0009f4200; // 10437120
uint64_t BLOCK03_h_to_4h_wt_0 = 0x000ad0d00; // 11341056
uint64_t BLOCK03_dense_4h_to_h_wt = 0x000bad800; // 12244992
uint64_t BLOCK04_qkv_weight = 0x000c8a800; // 13150208
uint64_t BLOCK04_atten_weight = 0x000cd4c00; // 13454336
uint64_t BLOCK04_h_to_4h_wt_1 = 0x000d16c00; // 13724672
uint64_t BLOCK04_h_to_4h_wt_0 = 0x000df3700; // 14628608
uint64_t BLOCK04_dense_4h_to_h_wt = 0x000ed0200; // 15532544
uint64_t BLOCK05_qkv_weight = 0x000fad200; // 16437760
uint64_t BLOCK05_atten_weight = 0x000ff7600; // 16741888
uint64_t BLOCK05_h_to_4h_wt_1 = 0x001039600; // 17012224
uint64_t BLOCK05_h_to_4h_wt_0 = 0x001116100; // 17916160
uint64_t BLOCK05_dense_4h_to_h_wt = 0x0011f2c00; // 18820096
uint64_t BLOCK06_qkv_weight = 0x0012cfc00; // 19725312
uint64_t BLOCK06_atten_weight = 0x00131a000; // 20029440
uint64_t BLOCK06_h_to_4h_wt_1 = 0x00135c000; // 20299776
uint64_t BLOCK06_h_to_4h_wt_0 = 0x001438b00; // 21203712
uint64_t BLOCK06_dense_4h_to_h_wt = 0x001515600; // 22107648
uint64_t BLOCK07_qkv_weight = 0x0015f2600; // 23012864
uint64_t BLOCK07_atten_weight = 0x00163ca00; // 23316992
uint64_t BLOCK07_h_to_4h_wt_1 = 0x00167ea00; // 23587328
uint64_t BLOCK07_h_to_4h_wt_0 = 0x00175b500; // 24491264
uint64_t BLOCK07_dense_4h_to_h_wt = 0x001838000; // 25395200
uint64_t BLOCK08_qkv_weight = 0x001915000; // 26300416
uint64_t BLOCK08_atten_weight = 0x00195f400; // 26604544
uint64_t BLOCK08_h_to_4h_wt_1 = 0x0019a1400; // 26874880
uint64_t BLOCK08_h_to_4h_wt_0 = 0x001a7df00; // 27778816
uint64_t BLOCK08_dense_4h_to_h_wt = 0x001b5aa00; // 28682752
uint64_t BLOCK09_qkv_weight = 0x001c37a00; // 29587968
uint64_t BLOCK09_atten_weight = 0x001c81e00; // 29892096
uint64_t BLOCK09_h_to_4h_wt_1 = 0x001cc3e00; // 30162432
uint64_t BLOCK09_h_to_4h_wt_0 = 0x001da0900; // 31066368
uint64_t BLOCK09_dense_4h_to_h_wt = 0x001e7d400; // 31970304
uint64_t BLOCK10_qkv_weight = 0x001f5a400; // 32875520
uint64_t BLOCK10_atten_weight = 0x001fa4800; // 33179648
uint64_t BLOCK10_h_to_4h_wt_1 = 0x001fe6800; // 33449984
uint64_t BLOCK10_h_to_4h_wt_0 = 0x0020c3300; // 34353920
uint64_t BLOCK10_dense_4h_to_h_wt = 0x00219fe00; // 35257856
uint64_t BLOCK11_qkv_weight = 0x00227ce00; // 36163072
uint64_t BLOCK11_atten_weight = 0x0022c7200; // 36467200
uint64_t BLOCK11_h_to_4h_wt_1 = 0x002309200; // 36737536
uint64_t BLOCK11_h_to_4h_wt_0 = 0x0023e5d00; // 37641472
uint64_t BLOCK11_dense_4h_to_h_wt = 0x0024c2800; // 38545408
uint64_t BLOCK12_qkv_weight = 0x00259f800; // 39450624
uint64_t BLOCK12_atten_weight = 0x0025e9c00; // 39754752
uint64_t BLOCK12_h_to_4h_wt_1 = 0x00262bc00; // 40025088
uint64_t BLOCK12_h_to_4h_wt_0 = 0x002708700; // 40929024
uint64_t BLOCK12_dense_4h_to_h_wt = 0x0027e5200; // 41832960
uint64_t BLOCK13_qkv_weight = 0x0028c2200; // 42738176
uint64_t BLOCK13_atten_weight = 0x00290c600; // 43042304
uint64_t BLOCK13_h_to_4h_wt_1 = 0x00294e600; // 43312640
uint64_t BLOCK13_h_to_4h_wt_0 = 0x002a2b100; // 44216576
uint64_t BLOCK13_dense_4h_to_h_wt = 0x002b07c00; // 45120512
uint64_t BLOCK14_qkv_weight = 0x002be4c00; // 46025728
uint64_t BLOCK14_atten_weight = 0x002c2f000; // 46329856
uint64_t BLOCK14_h_to_4h_wt_1 = 0x002c71000; // 46600192
uint64_t BLOCK14_h_to_4h_wt_0 = 0x002d4db00; // 47504128
uint64_t BLOCK14_dense_4h_to_h_wt = 0x002e2a600; // 48408064
uint64_t BLOCK15_qkv_weight = 0x002f07600; // 49313280
uint64_t BLOCK15_atten_weight = 0x002f51a00; // 49617408
uint64_t BLOCK15_h_to_4h_wt_1 = 0x002f93a00; // 49887744
uint64_t BLOCK15_h_to_4h_wt_0 = 0x003070500; // 50791680
uint64_t BLOCK15_dense_4h_to_h_wt = 0x00314d000; // 51695616
uint64_t BLOCK16_qkv_weight = 0x00322a000; // 52600832
uint64_t BLOCK16_atten_weight = 0x003274400; // 52904960
uint64_t BLOCK16_h_to_4h_wt_1 = 0x0032b6400; // 53175296
uint64_t BLOCK16_h_to_4h_wt_0 = 0x003392f00; // 54079232
uint64_t BLOCK16_dense_4h_to_h_wt = 0x00346fa00; // 54983168
uint64_t BLOCK17_qkv_weight = 0x00354ca00; // 55888384
uint64_t BLOCK17_atten_weight = 0x003596e00; // 56192512
uint64_t BLOCK17_h_to_4h_wt_1 = 0x0035d8e00; // 56462848
uint64_t BLOCK17_h_to_4h_wt_0 = 0x0036b5900; // 57366784
uint64_t BLOCK17_dense_4h_to_h_wt = 0x003792400; // 58270720
uint64_t BLOCK18_qkv_weight = 0x00386f400; // 59175936
uint64_t BLOCK18_atten_weight = 0x0038b9800; // 59480064
uint64_t BLOCK18_h_to_4h_wt_1 = 0x0038fb800; // 59750400
uint64_t BLOCK18_h_to_4h_wt_0 = 0x0039d8300; // 60654336
uint64_t BLOCK18_dense_4h_to_h_wt = 0x003ab4e00; // 61558272
uint64_t BLOCK19_qkv_weight = 0x003b91e00; // 62463488
uint64_t BLOCK19_atten_weight = 0x003bdc200; // 62767616
uint64_t BLOCK19_h_to_4h_wt_1 = 0x003c1e200; // 63037952
uint64_t BLOCK19_h_to_4h_wt_0 = 0x003cfad00; // 63941888
uint64_t BLOCK19_dense_4h_to_h_wt = 0x003dd7800; // 64845824
uint64_t BLOCK20_qkv_weight = 0x003eb4800; // 65751040
uint64_t BLOCK20_atten_weight = 0x003efec00; // 66055168
uint64_t BLOCK20_h_to_4h_wt_1 = 0x003f40c00; // 66325504
uint64_t BLOCK20_h_to_4h_wt_0 = 0x00401d700; // 67229440
uint64_t BLOCK20_dense_4h_to_h_wt = 0x0040fa200; // 68133376
uint64_t BLOCK21_qkv_weight = 0x0041d7200; // 69038592
uint64_t BLOCK21_atten_weight = 0x004221600; // 69342720
uint64_t BLOCK21_h_to_4h_wt_1 = 0x004263600; // 69613056
uint64_t BLOCK21_h_to_4h_wt_0 = 0x004340100; // 70516992
uint64_t BLOCK21_dense_4h_to_h_wt = 0x00441cc00; // 71420928
uint64_t BLOCK22_qkv_weight = 0x0044f9c00; // 72326144
uint64_t BLOCK22_atten_weight = 0x004544000; // 72630272
uint64_t BLOCK22_h_to_4h_wt_1 = 0x004586000; // 72900608
uint64_t BLOCK22_h_to_4h_wt_0 = 0x004662b00; // 73804544
uint64_t BLOCK22_dense_4h_to_h_wt = 0x00473f600; // 74708480
uint64_t BLOCK23_qkv_weight = 0x00481c600; // 75613696
uint64_t BLOCK23_atten_weight = 0x004866a00; // 75917824
uint64_t BLOCK23_h_to_4h_wt_1 = 0x0048a8a00; // 76188160
uint64_t BLOCK23_h_to_4h_wt_0 = 0x004985500; // 77092096
uint64_t BLOCK23_dense_4h_to_h_wt = 0x004a62000; // 77996032
uint64_t BLOCK24_qkv_weight = 0x004b3f000; // 78901248
uint64_t BLOCK24_atten_weight = 0x004b89400; // 79205376
uint64_t BLOCK24_h_to_4h_wt_1 = 0x004bcb400; // 79475712
uint64_t BLOCK24_h_to_4h_wt_0 = 0x004ca7f00; // 80379648
uint64_t BLOCK24_dense_4h_to_h_wt = 0x004d84a00; // 81283584
uint64_t BLOCK25_qkv_weight = 0x004e61a00; // 82188800
uint64_t BLOCK25_atten_weight = 0x004eabe00; // 82492928
uint64_t BLOCK25_h_to_4h_wt_1 = 0x004eede00; // 82763264
uint64_t BLOCK25_h_to_4h_wt_0 = 0x004fca900; // 83667200
uint64_t BLOCK25_dense_4h_to_h_wt = 0x0050a7400; // 84571136
uint64_t BLOCK26_qkv_weight = 0x005184400; // 85476352
uint64_t BLOCK26_atten_weight = 0x0051ce800; // 85780480
uint64_t BLOCK26_h_to_4h_wt_1 = 0x005210800; // 86050816
uint64_t BLOCK26_h_to_4h_wt_0 = 0x0052ed300; // 86954752
uint64_t BLOCK26_dense_4h_to_h_wt = 0x0053c9e00; // 87858688
uint64_t BLOCK27_qkv_weight = 0x0054a6e00; // 88763904
uint64_t BLOCK27_atten_weight = 0x0054f1200; // 89068032
uint64_t BLOCK27_h_to_4h_wt_1 = 0x005533200; // 89338368
uint64_t BLOCK27_h_to_4h_wt_0 = 0x00560fd00; // 90242304
uint64_t BLOCK27_dense_4h_to_h_wt = 0x0056ec800; // 91146240
uint64_t Output_Layer_wt = 0x0057c9800; // 92051456

// mod init
void test_step1 (HANDLE& device) {
// accel.hbm.layer_norm accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 40960);
  CSB_Write(device, 195, 145328128);
  CSB_Write(device, 196, 1216);
  CSB_Write(device, 197, 1216);
  CSB_Write(device, 198, 146376704);
  CSB_Write(device, 199, 1216);
  CSB_Write(device, 200, 1216);
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, 19);
  CSB_Write(device, 204, 19);
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step2 (HANDLE& device) {
// accel.hbm.mvm_bn accel operator node, storage data in cache0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 19);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 19);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, 19);
  CSB_Write(device, 10, 146376704);
  CSB_Write(device, 11, 0);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 22382592);
  CSB_Write(device, 14, 8);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 57344);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 1216);
  CSB_Write(device, 30, 1216);
  CSB_Write(device, 31, 8192);
  CSB_Write(device, 32, 8192);
  CSB_Write(device, 33, 799);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step3 (HANDLE& device) {
// accel.hbm.pos_emb accel operator node, storage data in cache1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 0);
  CSB_Write(device, 195, 22382592);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 23562240);
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, 19);
  CSB_Write(device, 203, 34);
  CSB_Write(device, 204, 8192);
  CSB_Write(device, 205, 0);
  CSB_Write(device, 206, 0);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step4 (HANDLE& device) {
// accel.hbm.mvm_afterTRP accel operator node, storage data in cache2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 24610816);
  CSB_Write(device, 195, 23562240);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 24676352);
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, 19);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, 19);
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 11688);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 2);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterTRP run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step5 (HANDLE& device) {
// accel.hbm.softmax accel operator node, storage data in cache3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 1);
  CSB_Write(device, 195, 24676352);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 25724928);
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 1);
  CSB_Write(device, 202, 32);
  CSB_Write(device, 203, 19);
  CSB_Write(device, 204, 19);
  CSB_Write(device, 205, 19);
  CSB_Write(device, 206, 0);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 8);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.softmax run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step6 (HANDLE& device) {
// accel.hbm.mvm_afterF2W accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 23496704);
  CSB_Write(device, 195, 25724928);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 146376704);
  CSB_Write(device, 199, 4864);
  CSB_Write(device, 200, 1216);
  CSB_Write(device, 201, 1);
  CSB_Write(device, 202, 19);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, 19);
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 4);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 1);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterF2W run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step7 (HANDLE& device) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 19);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 19);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, 19);
  CSB_Write(device, 10, 146376704);
  CSB_Write(device, 11, 304128);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 149882880);
  CSB_Write(device, 14, 7);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 75776);
  CSB_Write(device, 27, 145328128);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 1216);
  CSB_Write(device, 30, 1216);
  CSB_Write(device, 31, 1216);
  CSB_Write(device, 32, 1216);
  CSB_Write(device, 33, 1823);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step8 (HANDLE& device) {
// accel.hbm.layer_norm accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 92160);
  CSB_Write(device, 195, 149882880);
  CSB_Write(device, 196, 1216);
  CSB_Write(device, 197, 1216);
  CSB_Write(device, 198, 145328128);
  CSB_Write(device, 199, 1216);
  CSB_Write(device, 200, 1216);
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, 19);
  CSB_Write(device, 204, 19);
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 1);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step9 (HANDLE& device) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 19);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 19);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, 19);
  CSB_Write(device, 10, 145328128);
  CSB_Write(device, 11, 1478400);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 146376704);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 163328);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 1216);
  CSB_Write(device, 30, 1216);
  CSB_Write(device, 31, 1216);
  CSB_Write(device, 32, 1216);
  CSB_Write(device, 33, 799);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step10 (HANDLE& device) {
// accel.hbm.activate accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 32768);
  CSB_Write(device, 195, 146376704);
  CSB_Write(device, 196, 1216);
  CSB_Write(device, 197, 1216);
  CSB_Write(device, 198, 153389056);
  CSB_Write(device, 199, 1216);
  CSB_Write(device, 200, 1216);
  CSB_Write(device, 201, 428);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, 19);
  CSB_Write(device, 204, 19);
  CSB_Write(device, 205, 428);
  CSB_Write(device, 206, 13696);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 16);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.activate run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step11 (HANDLE& device) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 19);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 19);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, 19);
  CSB_Write(device, 10, 145328128);
  CSB_Write(device, 11, 574464);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 146376704);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 2);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 108544);
  CSB_Write(device, 27, 153389056);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 1216);
  CSB_Write(device, 30, 1216);
  CSB_Write(device, 31, 1216);
  CSB_Write(device, 32, 1216);
  CSB_Write(device, 33, 1823);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step12 (HANDLE& device) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 13696);
  CSB_Write(device, 3, 19);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 19);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 128);
  CSB_Write(device, 8, 128);
  CSB_Write(device, 9, 19);
  CSB_Write(device, 10, 146376704);
  CSB_Write(device, 11, 2382336);
  CSB_Write(device, 12, 56576);
  CSB_Write(device, 13, 145328128);
  CSB_Write(device, 14, 31);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 218112);
  CSB_Write(device, 27, 149882880);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 1216);
  CSB_Write(device, 30, 1216);
  CSB_Write(device, 31, 1216);
  CSB_Write(device, 32, 1216);
  CSB_Write(device, 33, 1823);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step13 (HANDLE& device) {
// accel.hbm.layer_norm accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 234496);
  CSB_Write(device, 195, 145328128);
  CSB_Write(device, 196, 1216);
  CSB_Write(device, 197, 1216);
  CSB_Write(device, 198, 149882880);
  CSB_Write(device, 199, 1216);
  CSB_Write(device, 200, 1216);
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, 19);
  CSB_Write(device, 204, 19);
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step14 (HANDLE& device) {
// accel.hbm.mvm_bn accel operator node, storage data in cache4 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 19);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 19);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, 19);
  CSB_Write(device, 10, 149882880);
  CSB_Write(device, 11, 3287552);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 26773504);
  CSB_Write(device, 14, 8);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 250880);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 1216);
  CSB_Write(device, 30, 1216);
  CSB_Write(device, 31, 8192);
  CSB_Write(device, 32, 8192);
  CSB_Write(device, 33, 799);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step15 (HANDLE& device) {
// accel.hbm.pos_emb accel operator node, storage data in cache5 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 0);
  CSB_Write(device, 195, 26773504);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 27953152);
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, 19);
  CSB_Write(device, 203, 34);
  CSB_Write(device, 204, 8192);
  CSB_Write(device, 205, 0);
  CSB_Write(device, 206, 0);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step16 (HANDLE& device) {
// accel.hbm.mvm_afterTRP accel operator node, storage data in cache6 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 29001728);
  CSB_Write(device, 195, 27953152);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 29067264);
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, 19);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, 19);
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 11688);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 2);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterTRP run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step17 (HANDLE& device) {
// accel.hbm.softmax accel operator node, storage data in cache7 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 1);
  CSB_Write(device, 195, 29067264);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 30115840);
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 1);
  CSB_Write(device, 202, 32);
  CSB_Write(device, 203, 19);
  CSB_Write(device, 204, 19);
  CSB_Write(device, 205, 19);
  CSB_Write(device, 206, 0);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 8);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.softmax run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step18 (HANDLE& device) {
// accel.hbm.mvm_afterF2W accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 27887616);
  CSB_Write(device, 195, 30115840);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 149882880);
  CSB_Write(device, 199, 4864);
  CSB_Write(device, 200, 1216);
  CSB_Write(device, 201, 1);
  CSB_Write(device, 202, 19);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, 19);
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 4);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 1);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterF2W run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step19 (HANDLE& device) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 19);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 19);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, 19);
  CSB_Write(device, 10, 149882880);
  CSB_Write(device, 11, 3591680);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 146376704);
  CSB_Write(device, 14, 7);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 269312);
  CSB_Write(device, 27, 145328128);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 1216);
  CSB_Write(device, 30, 1216);
  CSB_Write(device, 31, 1216);
  CSB_Write(device, 32, 1216);
  CSB_Write(device, 33, 1823);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step20 (HANDLE& device) {
// accel.hbm.layer_norm accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 285696);
  CSB_Write(device, 195, 146376704);
  CSB_Write(device, 196, 1216);
  CSB_Write(device, 197, 1216);
  CSB_Write(device, 198, 145328128);
  CSB_Write(device, 199, 1216);
  CSB_Write(device, 200, 1216);
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, 19);
  CSB_Write(device, 204, 19);
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 1);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step21 (HANDLE& device) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 19);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 19);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, 19);
  CSB_Write(device, 10, 145328128);
  CSB_Write(device, 11, 4765952);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 153389056);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 356864);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 1216);
  CSB_Write(device, 30, 1216);
  CSB_Write(device, 31, 1216);
  CSB_Write(device, 32, 1216);
  CSB_Write(device, 33, 799);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step22 (HANDLE& device) {
// accel.hbm.activate accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 32768);
  CSB_Write(device, 195, 153389056);
  CSB_Write(device, 196, 1216);
  CSB_Write(device, 197, 1216);
  CSB_Write(device, 198, 149882880);
  CSB_Write(device, 199, 1216);
  CSB_Write(device, 200, 1216);
  CSB_Write(device, 201, 428);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, 19);
  CSB_Write(device, 204, 19);
  CSB_Write(device, 205, 428);
  CSB_Write(device, 206, 13696);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 16);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.activate run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step23 (HANDLE& device) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 19);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 19);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, 19);
  CSB_Write(device, 10, 145328128);
  CSB_Write(device, 11, 3862016);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 153389056);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 2);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 302080);
  CSB_Write(device, 27, 149882880);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 1216);
  CSB_Write(device, 30, 1216);
  CSB_Write(device, 31, 1216);
  CSB_Write(device, 32, 1216);
  CSB_Write(device, 33, 1823);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step24 (HANDLE& device) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 13696);
  CSB_Write(device, 3, 19);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 19);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 128);
  CSB_Write(device, 8, 128);
  CSB_Write(device, 9, 19);
  CSB_Write(device, 10, 153389056);
  CSB_Write(device, 11, 5669888);
  CSB_Write(device, 12, 56576);
  CSB_Write(device, 13, 145328128);
  CSB_Write(device, 14, 31);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 411648);
  CSB_Write(device, 27, 146376704);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 1216);
  CSB_Write(device, 30, 1216);
  CSB_Write(device, 31, 1216);
  CSB_Write(device, 32, 1216);
  CSB_Write(device, 33, 1823);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step25 (HANDLE& device) {
// accel.hbm.layer_norm accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 428032);
  CSB_Write(device, 195, 145328128);
  CSB_Write(device, 196, 1216);
  CSB_Write(device, 197, 1216);
  CSB_Write(device, 198, 146376704);
  CSB_Write(device, 199, 1216);
  CSB_Write(device, 200, 1216);
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, 19);
  CSB_Write(device, 204, 19);
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step26 (HANDLE& device) {
// accel.hbm.mvm_bn accel operator node, storage data in cache8 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 19);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 19);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, 19);
  CSB_Write(device, 10, 146376704);
  CSB_Write(device, 11, 6575104);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 31164416);
  CSB_Write(device, 14, 8);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 444416);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 1216);
  CSB_Write(device, 30, 1216);
  CSB_Write(device, 31, 8192);
  CSB_Write(device, 32, 8192);
  CSB_Write(device, 33, 799);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step27 (HANDLE& device) {
// accel.hbm.pos_emb accel operator node, storage data in cache9 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 0);
  CSB_Write(device, 195, 31164416);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 32344064);
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, 19);
  CSB_Write(device, 203, 34);
  CSB_Write(device, 204, 8192);
  CSB_Write(device, 205, 0);
  CSB_Write(device, 206, 0);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step28 (HANDLE& device) {
// accel.hbm.mvm_afterTRP accel operator node, storage data in cache10 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 33392640);
  CSB_Write(device, 195, 32344064);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 33458176);
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, 19);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, 19);
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 11688);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 2);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterTRP run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step29 (HANDLE& device) {
// accel.hbm.softmax accel operator node, storage data in cache11 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 1);
  CSB_Write(device, 195, 33458176);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 34506752);
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 1);
  CSB_Write(device, 202, 32);
  CSB_Write(device, 203, 19);
  CSB_Write(device, 204, 19);
  CSB_Write(device, 205, 19);
  CSB_Write(device, 206, 0);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 8);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.softmax run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step30 (HANDLE& device) {
// accel.hbm.mvm_afterF2W accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 32278528);
  CSB_Write(device, 195, 34506752);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 146376704);
  CSB_Write(device, 199, 4864);
  CSB_Write(device, 200, 1216);
  CSB_Write(device, 201, 1);
  CSB_Write(device, 202, 19);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, 19);
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 4);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 1);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterF2W run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step31 (HANDLE& device) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 19);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 19);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, 19);
  CSB_Write(device, 10, 146376704);
  CSB_Write(device, 11, 6879232);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 153389056);
  CSB_Write(device, 14, 7);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 462848);
  CSB_Write(device, 27, 145328128);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 1216);
  CSB_Write(device, 30, 1216);
  CSB_Write(device, 31, 1216);
  CSB_Write(device, 32, 1216);
  CSB_Write(device, 33, 1823);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step32 (HANDLE& device) {
// accel.hbm.layer_norm accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 479232);
  CSB_Write(device, 195, 153389056);
  CSB_Write(device, 196, 1216);
  CSB_Write(device, 197, 1216);
  CSB_Write(device, 198, 145328128);
  CSB_Write(device, 199, 1216);
  CSB_Write(device, 200, 1216);
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, 19);
  CSB_Write(device, 204, 19);
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 1);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step33 (HANDLE& device) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 19);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 19);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, 19);
  CSB_Write(device, 10, 145328128);
  CSB_Write(device, 11, 8053504);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 146376704);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 550400);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 1216);
  CSB_Write(device, 30, 1216);
  CSB_Write(device, 31, 1216);
  CSB_Write(device, 32, 1216);
  CSB_Write(device, 33, 799);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step34 (HANDLE& device) {
// accel.hbm.activate accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 32768);
  CSB_Write(device, 195, 146376704);
  CSB_Write(device, 196, 1216);
  CSB_Write(device, 197, 1216);
  CSB_Write(device, 198, 149882880);
  CSB_Write(device, 199, 1216);
  CSB_Write(device, 200, 1216);
  CSB_Write(device, 201, 428);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, 19);
  CSB_Write(device, 204, 19);
  CSB_Write(device, 205, 428);
  CSB_Write(device, 206, 13696);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 16);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.activate run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step35 (HANDLE& device) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 19);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 19);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, 19);
  CSB_Write(device, 10, 145328128);
  CSB_Write(device, 11, 7149568);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 146376704);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 2);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 495616);
  CSB_Write(device, 27, 149882880);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 1216);
  CSB_Write(device, 30, 1216);
  CSB_Write(device, 31, 1216);
  CSB_Write(device, 32, 1216);
  CSB_Write(device, 33, 1823);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step36 (HANDLE& device) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 13696);
  CSB_Write(device, 3, 19);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 19);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 128);
  CSB_Write(device, 8, 128);
  CSB_Write(device, 9, 19);
  CSB_Write(device, 10, 146376704);
  CSB_Write(device, 11, 8957440);
  CSB_Write(device, 12, 56576);
  CSB_Write(device, 13, 145328128);
  CSB_Write(device, 14, 31);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 605184);
  CSB_Write(device, 27, 153389056);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 1216);
  CSB_Write(device, 30, 1216);
  CSB_Write(device, 31, 1216);
  CSB_Write(device, 32, 1216);
  CSB_Write(device, 33, 1823);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step37 (HANDLE& device) {
// accel.hbm.layer_norm accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 621568);
  CSB_Write(device, 195, 145328128);
  CSB_Write(device, 196, 1216);
  CSB_Write(device, 197, 1216);
  CSB_Write(device, 198, 153389056);
  CSB_Write(device, 199, 1216);
  CSB_Write(device, 200, 1216);
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, 19);
  CSB_Write(device, 204, 19);
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step38 (HANDLE& device) {
// accel.hbm.mvm_bn accel operator node, storage data in cache12 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 19);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 19);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, 19);
  CSB_Write(device, 10, 153389056);
  CSB_Write(device, 11, 9862656);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 35555328);
  CSB_Write(device, 14, 8);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 637952);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 1216);
  CSB_Write(device, 30, 1216);
  CSB_Write(device, 31, 8192);
  CSB_Write(device, 32, 8192);
  CSB_Write(device, 33, 799);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step39 (HANDLE& device) {
// accel.hbm.pos_emb accel operator node, storage data in cache13 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 0);
  CSB_Write(device, 195, 35555328);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 36734976);
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, 19);
  CSB_Write(device, 203, 34);
  CSB_Write(device, 204, 8192);
  CSB_Write(device, 205, 0);
  CSB_Write(device, 206, 0);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step40 (HANDLE& device) {
// accel.hbm.mvm_afterTRP accel operator node, storage data in cache14 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 37783552);
  CSB_Write(device, 195, 36734976);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 37849088);
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, 19);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, 19);
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 11688);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 2);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterTRP run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step41 (HANDLE& device) {
// accel.hbm.softmax accel operator node, storage data in cache15 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 1);
  CSB_Write(device, 195, 37849088);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 38897664);
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 1);
  CSB_Write(device, 202, 32);
  CSB_Write(device, 203, 19);
  CSB_Write(device, 204, 19);
  CSB_Write(device, 205, 19);
  CSB_Write(device, 206, 0);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 8);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.softmax run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step42 (HANDLE& device) {
// accel.hbm.mvm_afterF2W accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 36669440);
  CSB_Write(device, 195, 38897664);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 153389056);
  CSB_Write(device, 199, 4864);
  CSB_Write(device, 200, 1216);
  CSB_Write(device, 201, 1);
  CSB_Write(device, 202, 19);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, 19);
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 4);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 1);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterF2W run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step43 (HANDLE& device) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 19);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 19);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, 19);
  CSB_Write(device, 10, 153389056);
  CSB_Write(device, 11, 10166784);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 146376704);
  CSB_Write(device, 14, 7);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 656384);
  CSB_Write(device, 27, 145328128);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 1216);
  CSB_Write(device, 30, 1216);
  CSB_Write(device, 31, 1216);
  CSB_Write(device, 32, 1216);
  CSB_Write(device, 33, 1823);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step44 (HANDLE& device) {
// accel.hbm.layer_norm accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 672768);
  CSB_Write(device, 195, 146376704);
  CSB_Write(device, 196, 1216);
  CSB_Write(device, 197, 1216);
  CSB_Write(device, 198, 145328128);
  CSB_Write(device, 199, 1216);
  CSB_Write(device, 200, 1216);
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, 19);
  CSB_Write(device, 204, 19);
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 1);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step45 (HANDLE& device) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 19);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 19);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, 19);
  CSB_Write(device, 10, 145328128);
  CSB_Write(device, 11, 11341056);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 153389056);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 743936);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 1216);
  CSB_Write(device, 30, 1216);
  CSB_Write(device, 31, 1216);
  CSB_Write(device, 32, 1216);
  CSB_Write(device, 33, 799);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step46 (HANDLE& device) {
// accel.hbm.activate accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 32768);
  CSB_Write(device, 195, 153389056);
  CSB_Write(device, 196, 1216);
  CSB_Write(device, 197, 1216);
  CSB_Write(device, 198, 149882880);
  CSB_Write(device, 199, 1216);
  CSB_Write(device, 200, 1216);
  CSB_Write(device, 201, 428);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, 19);
  CSB_Write(device, 204, 19);
  CSB_Write(device, 205, 428);
  CSB_Write(device, 206, 13696);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 16);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.activate run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step47 (HANDLE& device) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 19);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 19);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, 19);
  CSB_Write(device, 10, 145328128);
  CSB_Write(device, 11, 10437120);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 153389056);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 2);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 689152);
  CSB_Write(device, 27, 149882880);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 1216);
  CSB_Write(device, 30, 1216);
  CSB_Write(device, 31, 1216);
  CSB_Write(device, 32, 1216);
  CSB_Write(device, 33, 1823);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step48 (HANDLE& device) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 13696);
  CSB_Write(device, 3, 19);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 19);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 128);
  CSB_Write(device, 8, 128);
  CSB_Write(device, 9, 19);
  CSB_Write(device, 10, 153389056);
  CSB_Write(device, 11, 12244992);
  CSB_Write(device, 12, 56576);
  CSB_Write(device, 13, 145328128);
  CSB_Write(device, 14, 31);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 798720);
  CSB_Write(device, 27, 146376704);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 1216);
  CSB_Write(device, 30, 1216);
  CSB_Write(device, 31, 1216);
  CSB_Write(device, 32, 1216);
  CSB_Write(device, 33, 1823);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step49 (HANDLE& device) {
// accel.hbm.layer_norm accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 815104);
  CSB_Write(device, 195, 145328128);
  CSB_Write(device, 196, 1216);
  CSB_Write(device, 197, 1216);
  CSB_Write(device, 198, 146376704);
  CSB_Write(device, 199, 1216);
  CSB_Write(device, 200, 1216);
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, 19);
  CSB_Write(device, 204, 19);
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step50 (HANDLE& device) {
// accel.hbm.mvm_bn accel operator node, storage data in cache16 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 19);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 19);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, 19);
  CSB_Write(device, 10, 146376704);
  CSB_Write(device, 11, 13150208);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 39946240);
  CSB_Write(device, 14, 8);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 831488);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 1216);
  CSB_Write(device, 30, 1216);
  CSB_Write(device, 31, 8192);
  CSB_Write(device, 32, 8192);
  CSB_Write(device, 33, 799);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step51 (HANDLE& device) {
// accel.hbm.pos_emb accel operator node, storage data in cache17 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 0);
  CSB_Write(device, 195, 39946240);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 41125888);
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, 19);
  CSB_Write(device, 203, 34);
  CSB_Write(device, 204, 8192);
  CSB_Write(device, 205, 0);
  CSB_Write(device, 206, 0);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step52 (HANDLE& device) {
// accel.hbm.mvm_afterTRP accel operator node, storage data in cache18 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 42174464);
  CSB_Write(device, 195, 41125888);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 42240000);
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, 19);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, 19);
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 11688);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 2);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterTRP run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step53 (HANDLE& device) {
// accel.hbm.softmax accel operator node, storage data in cache19 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 1);
  CSB_Write(device, 195, 42240000);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 43288576);
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 1);
  CSB_Write(device, 202, 32);
  CSB_Write(device, 203, 19);
  CSB_Write(device, 204, 19);
  CSB_Write(device, 205, 19);
  CSB_Write(device, 206, 0);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 8);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.softmax run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step54 (HANDLE& device) {
// accel.hbm.mvm_afterF2W accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 41060352);
  CSB_Write(device, 195, 43288576);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 146376704);
  CSB_Write(device, 199, 4864);
  CSB_Write(device, 200, 1216);
  CSB_Write(device, 201, 1);
  CSB_Write(device, 202, 19);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, 19);
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 4);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 1);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterF2W run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step55 (HANDLE& device) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 19);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 19);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, 19);
  CSB_Write(device, 10, 146376704);
  CSB_Write(device, 11, 13454336);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 153389056);
  CSB_Write(device, 14, 7);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 849920);
  CSB_Write(device, 27, 145328128);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 1216);
  CSB_Write(device, 30, 1216);
  CSB_Write(device, 31, 1216);
  CSB_Write(device, 32, 1216);
  CSB_Write(device, 33, 1823);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step56 (HANDLE& device) {
// accel.hbm.layer_norm accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 866304);
  CSB_Write(device, 195, 153389056);
  CSB_Write(device, 196, 1216);
  CSB_Write(device, 197, 1216);
  CSB_Write(device, 198, 145328128);
  CSB_Write(device, 199, 1216);
  CSB_Write(device, 200, 1216);
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, 19);
  CSB_Write(device, 204, 19);
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 1);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step57 (HANDLE& device) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 19);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 19);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, 19);
  CSB_Write(device, 10, 145328128);
  CSB_Write(device, 11, 14628608);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 146376704);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 937472);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 1216);
  CSB_Write(device, 30, 1216);
  CSB_Write(device, 31, 1216);
  CSB_Write(device, 32, 1216);
  CSB_Write(device, 33, 799);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step58 (HANDLE& device) {
// accel.hbm.activate accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 32768);
  CSB_Write(device, 195, 146376704);
  CSB_Write(device, 196, 1216);
  CSB_Write(device, 197, 1216);
  CSB_Write(device, 198, 149882880);
  CSB_Write(device, 199, 1216);
  CSB_Write(device, 200, 1216);
  CSB_Write(device, 201, 428);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, 19);
  CSB_Write(device, 204, 19);
  CSB_Write(device, 205, 428);
  CSB_Write(device, 206, 13696);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 16);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.activate run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step59 (HANDLE& device) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 19);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 19);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, 19);
  CSB_Write(device, 10, 145328128);
  CSB_Write(device, 11, 13724672);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 146376704);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 2);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 882688);
  CSB_Write(device, 27, 149882880);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 1216);
  CSB_Write(device, 30, 1216);
  CSB_Write(device, 31, 1216);
  CSB_Write(device, 32, 1216);
  CSB_Write(device, 33, 1823);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step60 (HANDLE& device) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 13696);
  CSB_Write(device, 3, 19);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 19);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 128);
  CSB_Write(device, 8, 128);
  CSB_Write(device, 9, 19);
  CSB_Write(device, 10, 146376704);
  CSB_Write(device, 11, 15532544);
  CSB_Write(device, 12, 56576);
  CSB_Write(device, 13, 145328128);
  CSB_Write(device, 14, 31);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 992256);
  CSB_Write(device, 27, 153389056);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 1216);
  CSB_Write(device, 30, 1216);
  CSB_Write(device, 31, 1216);
  CSB_Write(device, 32, 1216);
  CSB_Write(device, 33, 1823);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step61 (HANDLE& device) {
// accel.hbm.layer_norm accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 1008640);
  CSB_Write(device, 195, 145328128);
  CSB_Write(device, 196, 1216);
  CSB_Write(device, 197, 1216);
  CSB_Write(device, 198, 153389056);
  CSB_Write(device, 199, 1216);
  CSB_Write(device, 200, 1216);
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, 19);
  CSB_Write(device, 204, 19);
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step62 (HANDLE& device) {
// accel.hbm.mvm_bn accel operator node, storage data in cache20 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 19);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 19);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, 19);
  CSB_Write(device, 10, 153389056);
  CSB_Write(device, 11, 16437760);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 44337152);
  CSB_Write(device, 14, 8);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 1025024);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 1216);
  CSB_Write(device, 30, 1216);
  CSB_Write(device, 31, 8192);
  CSB_Write(device, 32, 8192);
  CSB_Write(device, 33, 799);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step63 (HANDLE& device) {
// accel.hbm.pos_emb accel operator node, storage data in cache21 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 0);
  CSB_Write(device, 195, 44337152);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 45516800);
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, 19);
  CSB_Write(device, 203, 34);
  CSB_Write(device, 204, 8192);
  CSB_Write(device, 205, 0);
  CSB_Write(device, 206, 0);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step64 (HANDLE& device) {
// accel.hbm.mvm_afterTRP accel operator node, storage data in cache22 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 46565376);
  CSB_Write(device, 195, 45516800);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 46630912);
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, 19);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, 19);
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 11688);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 2);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterTRP run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step65 (HANDLE& device) {
// accel.hbm.softmax accel operator node, storage data in cache23 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 1);
  CSB_Write(device, 195, 46630912);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 47679488);
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 1);
  CSB_Write(device, 202, 32);
  CSB_Write(device, 203, 19);
  CSB_Write(device, 204, 19);
  CSB_Write(device, 205, 19);
  CSB_Write(device, 206, 0);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 8);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.softmax run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step66 (HANDLE& device) {
// accel.hbm.mvm_afterF2W accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 45451264);
  CSB_Write(device, 195, 47679488);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 153389056);
  CSB_Write(device, 199, 4864);
  CSB_Write(device, 200, 1216);
  CSB_Write(device, 201, 1);
  CSB_Write(device, 202, 19);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, 19);
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 4);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 1);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterF2W run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step67 (HANDLE& device) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 19);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 19);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, 19);
  CSB_Write(device, 10, 153389056);
  CSB_Write(device, 11, 16741888);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 146376704);
  CSB_Write(device, 14, 7);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 1043456);
  CSB_Write(device, 27, 145328128);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 1216);
  CSB_Write(device, 30, 1216);
  CSB_Write(device, 31, 1216);
  CSB_Write(device, 32, 1216);
  CSB_Write(device, 33, 1823);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step68 (HANDLE& device) {
// accel.hbm.layer_norm accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 1059840);
  CSB_Write(device, 195, 146376704);
  CSB_Write(device, 196, 1216);
  CSB_Write(device, 197, 1216);
  CSB_Write(device, 198, 145328128);
  CSB_Write(device, 199, 1216);
  CSB_Write(device, 200, 1216);
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, 19);
  CSB_Write(device, 204, 19);
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 1);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step69 (HANDLE& device) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 19);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 19);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, 19);
  CSB_Write(device, 10, 145328128);
  CSB_Write(device, 11, 17916160);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 153389056);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 1131008);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 1216);
  CSB_Write(device, 30, 1216);
  CSB_Write(device, 31, 1216);
  CSB_Write(device, 32, 1216);
  CSB_Write(device, 33, 799);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step70 (HANDLE& device) {
// accel.hbm.activate accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 32768);
  CSB_Write(device, 195, 153389056);
  CSB_Write(device, 196, 1216);
  CSB_Write(device, 197, 1216);
  CSB_Write(device, 198, 149882880);
  CSB_Write(device, 199, 1216);
  CSB_Write(device, 200, 1216);
  CSB_Write(device, 201, 428);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, 19);
  CSB_Write(device, 204, 19);
  CSB_Write(device, 205, 428);
  CSB_Write(device, 206, 13696);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 16);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.activate run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step71 (HANDLE& device) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 19);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 19);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, 19);
  CSB_Write(device, 10, 145328128);
  CSB_Write(device, 11, 17012224);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 153389056);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 2);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 1076224);
  CSB_Write(device, 27, 149882880);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 1216);
  CSB_Write(device, 30, 1216);
  CSB_Write(device, 31, 1216);
  CSB_Write(device, 32, 1216);
  CSB_Write(device, 33, 1823);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step72 (HANDLE& device) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 13696);
  CSB_Write(device, 3, 19);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 19);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 128);
  CSB_Write(device, 8, 128);
  CSB_Write(device, 9, 19);
  CSB_Write(device, 10, 153389056);
  CSB_Write(device, 11, 18820096);
  CSB_Write(device, 12, 56576);
  CSB_Write(device, 13, 145328128);
  CSB_Write(device, 14, 31);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 1185792);
  CSB_Write(device, 27, 146376704);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 1216);
  CSB_Write(device, 30, 1216);
  CSB_Write(device, 31, 1216);
  CSB_Write(device, 32, 1216);
  CSB_Write(device, 33, 1823);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step73 (HANDLE& device) {
// accel.hbm.layer_norm accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 1202176);
  CSB_Write(device, 195, 145328128);
  CSB_Write(device, 196, 1216);
  CSB_Write(device, 197, 1216);
  CSB_Write(device, 198, 146376704);
  CSB_Write(device, 199, 1216);
  CSB_Write(device, 200, 1216);
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, 19);
  CSB_Write(device, 204, 19);
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step74 (HANDLE& device) {
// accel.hbm.mvm_bn accel operator node, storage data in cache24 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 19);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 19);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, 19);
  CSB_Write(device, 10, 146376704);
  CSB_Write(device, 11, 19725312);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 48728064);
  CSB_Write(device, 14, 8);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 1218560);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 1216);
  CSB_Write(device, 30, 1216);
  CSB_Write(device, 31, 8192);
  CSB_Write(device, 32, 8192);
  CSB_Write(device, 33, 799);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step75 (HANDLE& device) {
// accel.hbm.pos_emb accel operator node, storage data in cache25 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 0);
  CSB_Write(device, 195, 48728064);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 49907712);
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, 19);
  CSB_Write(device, 203, 34);
  CSB_Write(device, 204, 8192);
  CSB_Write(device, 205, 0);
  CSB_Write(device, 206, 0);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step76 (HANDLE& device) {
// accel.hbm.mvm_afterTRP accel operator node, storage data in cache26 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 50956288);
  CSB_Write(device, 195, 49907712);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 51021824);
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, 19);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, 19);
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 11688);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 2);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterTRP run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step77 (HANDLE& device) {
// accel.hbm.softmax accel operator node, storage data in cache27 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 1);
  CSB_Write(device, 195, 51021824);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 52070400);
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 1);
  CSB_Write(device, 202, 32);
  CSB_Write(device, 203, 19);
  CSB_Write(device, 204, 19);
  CSB_Write(device, 205, 19);
  CSB_Write(device, 206, 0);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 8);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.softmax run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step78 (HANDLE& device) {
// accel.hbm.mvm_afterF2W accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 49842176);
  CSB_Write(device, 195, 52070400);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 146376704);
  CSB_Write(device, 199, 4864);
  CSB_Write(device, 200, 1216);
  CSB_Write(device, 201, 1);
  CSB_Write(device, 202, 19);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, 19);
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 4);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 1);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterF2W run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step79 (HANDLE& device) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 19);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 19);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, 19);
  CSB_Write(device, 10, 146376704);
  CSB_Write(device, 11, 20029440);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 153389056);
  CSB_Write(device, 14, 7);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 1236992);
  CSB_Write(device, 27, 145328128);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 1216);
  CSB_Write(device, 30, 1216);
  CSB_Write(device, 31, 1216);
  CSB_Write(device, 32, 1216);
  CSB_Write(device, 33, 1823);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step80 (HANDLE& device) {
// accel.hbm.layer_norm accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 1253376);
  CSB_Write(device, 195, 153389056);
  CSB_Write(device, 196, 1216);
  CSB_Write(device, 197, 1216);
  CSB_Write(device, 198, 145328128);
  CSB_Write(device, 199, 1216);
  CSB_Write(device, 200, 1216);
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, 19);
  CSB_Write(device, 204, 19);
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 1);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step81 (HANDLE& device) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 19);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 19);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, 19);
  CSB_Write(device, 10, 145328128);
  CSB_Write(device, 11, 21203712);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 146376704);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 1324544);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 1216);
  CSB_Write(device, 30, 1216);
  CSB_Write(device, 31, 1216);
  CSB_Write(device, 32, 1216);
  CSB_Write(device, 33, 799);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step82 (HANDLE& device) {
// accel.hbm.activate accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 32768);
  CSB_Write(device, 195, 146376704);
  CSB_Write(device, 196, 1216);
  CSB_Write(device, 197, 1216);
  CSB_Write(device, 198, 149882880);
  CSB_Write(device, 199, 1216);
  CSB_Write(device, 200, 1216);
  CSB_Write(device, 201, 428);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, 19);
  CSB_Write(device, 204, 19);
  CSB_Write(device, 205, 428);
  CSB_Write(device, 206, 13696);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 16);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.activate run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step83 (HANDLE& device) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 19);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 19);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, 19);
  CSB_Write(device, 10, 145328128);
  CSB_Write(device, 11, 20299776);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 146376704);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 2);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 1269760);
  CSB_Write(device, 27, 149882880);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 1216);
  CSB_Write(device, 30, 1216);
  CSB_Write(device, 31, 1216);
  CSB_Write(device, 32, 1216);
  CSB_Write(device, 33, 1823);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step84 (HANDLE& device) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 13696);
  CSB_Write(device, 3, 19);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 19);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 128);
  CSB_Write(device, 8, 128);
  CSB_Write(device, 9, 19);
  CSB_Write(device, 10, 146376704);
  CSB_Write(device, 11, 22107648);
  CSB_Write(device, 12, 56576);
  CSB_Write(device, 13, 145328128);
  CSB_Write(device, 14, 31);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 1379328);
  CSB_Write(device, 27, 153389056);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 1216);
  CSB_Write(device, 30, 1216);
  CSB_Write(device, 31, 1216);
  CSB_Write(device, 32, 1216);
  CSB_Write(device, 33, 1823);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step85 (HANDLE& device) {
// accel.hbm.layer_norm accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 1395712);
  CSB_Write(device, 195, 145328128);
  CSB_Write(device, 196, 1216);
  CSB_Write(device, 197, 1216);
  CSB_Write(device, 198, 153389056);
  CSB_Write(device, 199, 1216);
  CSB_Write(device, 200, 1216);
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, 19);
  CSB_Write(device, 204, 19);
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step86 (HANDLE& device) {
// accel.hbm.mvm_bn accel operator node, storage data in cache28 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 19);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 19);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, 19);
  CSB_Write(device, 10, 153389056);
  CSB_Write(device, 11, 23012864);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 53118976);
  CSB_Write(device, 14, 8);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 1412096);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 1216);
  CSB_Write(device, 30, 1216);
  CSB_Write(device, 31, 8192);
  CSB_Write(device, 32, 8192);
  CSB_Write(device, 33, 799);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step87 (HANDLE& device) {
// accel.hbm.pos_emb accel operator node, storage data in cache29 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 0);
  CSB_Write(device, 195, 53118976);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 54298624);
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, 19);
  CSB_Write(device, 203, 34);
  CSB_Write(device, 204, 8192);
  CSB_Write(device, 205, 0);
  CSB_Write(device, 206, 0);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step88 (HANDLE& device) {
// accel.hbm.mvm_afterTRP accel operator node, storage data in cache30 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 55347200);
  CSB_Write(device, 195, 54298624);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 55412736);
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, 19);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, 19);
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 11688);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 2);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterTRP run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step89 (HANDLE& device) {
// accel.hbm.softmax accel operator node, storage data in cache31 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 1);
  CSB_Write(device, 195, 55412736);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 56461312);
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 1);
  CSB_Write(device, 202, 32);
  CSB_Write(device, 203, 19);
  CSB_Write(device, 204, 19);
  CSB_Write(device, 205, 19);
  CSB_Write(device, 206, 0);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 8);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.softmax run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step90 (HANDLE& device) {
// accel.hbm.mvm_afterF2W accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 54233088);
  CSB_Write(device, 195, 56461312);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 153389056);
  CSB_Write(device, 199, 4864);
  CSB_Write(device, 200, 1216);
  CSB_Write(device, 201, 1);
  CSB_Write(device, 202, 19);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, 19);
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 4);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 1);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterF2W run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step91 (HANDLE& device) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 19);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 19);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, 19);
  CSB_Write(device, 10, 153389056);
  CSB_Write(device, 11, 23316992);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 146376704);
  CSB_Write(device, 14, 7);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 1430528);
  CSB_Write(device, 27, 145328128);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 1216);
  CSB_Write(device, 30, 1216);
  CSB_Write(device, 31, 1216);
  CSB_Write(device, 32, 1216);
  CSB_Write(device, 33, 1823);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step92 (HANDLE& device) {
// accel.hbm.layer_norm accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 1446912);
  CSB_Write(device, 195, 146376704);
  CSB_Write(device, 196, 1216);
  CSB_Write(device, 197, 1216);
  CSB_Write(device, 198, 145328128);
  CSB_Write(device, 199, 1216);
  CSB_Write(device, 200, 1216);
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, 19);
  CSB_Write(device, 204, 19);
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 1);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step93 (HANDLE& device) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 19);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 19);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, 19);
  CSB_Write(device, 10, 145328128);
  CSB_Write(device, 11, 24491264);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 153389056);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 1518080);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 1216);
  CSB_Write(device, 30, 1216);
  CSB_Write(device, 31, 1216);
  CSB_Write(device, 32, 1216);
  CSB_Write(device, 33, 799);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step94 (HANDLE& device) {
// accel.hbm.activate accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 32768);
  CSB_Write(device, 195, 153389056);
  CSB_Write(device, 196, 1216);
  CSB_Write(device, 197, 1216);
  CSB_Write(device, 198, 149882880);
  CSB_Write(device, 199, 1216);
  CSB_Write(device, 200, 1216);
  CSB_Write(device, 201, 428);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, 19);
  CSB_Write(device, 204, 19);
  CSB_Write(device, 205, 428);
  CSB_Write(device, 206, 13696);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 16);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.activate run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step95 (HANDLE& device) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 19);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 19);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, 19);
  CSB_Write(device, 10, 145328128);
  CSB_Write(device, 11, 23587328);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 153389056);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 2);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 1463296);
  CSB_Write(device, 27, 149882880);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 1216);
  CSB_Write(device, 30, 1216);
  CSB_Write(device, 31, 1216);
  CSB_Write(device, 32, 1216);
  CSB_Write(device, 33, 1823);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step96 (HANDLE& device) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 13696);
  CSB_Write(device, 3, 19);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 19);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 128);
  CSB_Write(device, 8, 128);
  CSB_Write(device, 9, 19);
  CSB_Write(device, 10, 153389056);
  CSB_Write(device, 11, 25395200);
  CSB_Write(device, 12, 56576);
  CSB_Write(device, 13, 145328128);
  CSB_Write(device, 14, 31);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 1572864);
  CSB_Write(device, 27, 146376704);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 1216);
  CSB_Write(device, 30, 1216);
  CSB_Write(device, 31, 1216);
  CSB_Write(device, 32, 1216);
  CSB_Write(device, 33, 1823);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step97 (HANDLE& device) {
// accel.hbm.layer_norm accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 1589248);
  CSB_Write(device, 195, 145328128);
  CSB_Write(device, 196, 1216);
  CSB_Write(device, 197, 1216);
  CSB_Write(device, 198, 146376704);
  CSB_Write(device, 199, 1216);
  CSB_Write(device, 200, 1216);
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, 19);
  CSB_Write(device, 204, 19);
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step98 (HANDLE& device) {
// accel.hbm.mvm_bn accel operator node, storage data in cache32 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 19);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 19);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, 19);
  CSB_Write(device, 10, 146376704);
  CSB_Write(device, 11, 26300416);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 57509888);
  CSB_Write(device, 14, 8);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 1605632);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 1216);
  CSB_Write(device, 30, 1216);
  CSB_Write(device, 31, 8192);
  CSB_Write(device, 32, 8192);
  CSB_Write(device, 33, 799);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step99 (HANDLE& device) {
// accel.hbm.pos_emb accel operator node, storage data in cache33 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 0);
  CSB_Write(device, 195, 57509888);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 58689536);
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, 19);
  CSB_Write(device, 203, 34);
  CSB_Write(device, 204, 8192);
  CSB_Write(device, 205, 0);
  CSB_Write(device, 206, 0);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step100 (HANDLE& device) {
// accel.hbm.mvm_afterTRP accel operator node, storage data in cache34 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 59738112);
  CSB_Write(device, 195, 58689536);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 59803648);
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, 19);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, 19);
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 11688);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 2);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterTRP run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step101 (HANDLE& device) {
// accel.hbm.softmax accel operator node, storage data in cache35 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 1);
  CSB_Write(device, 195, 59803648);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 60852224);
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 1);
  CSB_Write(device, 202, 32);
  CSB_Write(device, 203, 19);
  CSB_Write(device, 204, 19);
  CSB_Write(device, 205, 19);
  CSB_Write(device, 206, 0);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 8);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.softmax run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step102 (HANDLE& device) {
// accel.hbm.mvm_afterF2W accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 58624000);
  CSB_Write(device, 195, 60852224);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 146376704);
  CSB_Write(device, 199, 4864);
  CSB_Write(device, 200, 1216);
  CSB_Write(device, 201, 1);
  CSB_Write(device, 202, 19);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, 19);
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 4);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 1);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterF2W run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step103 (HANDLE& device) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 19);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 19);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, 19);
  CSB_Write(device, 10, 146376704);
  CSB_Write(device, 11, 26604544);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 153389056);
  CSB_Write(device, 14, 7);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 1624064);
  CSB_Write(device, 27, 145328128);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 1216);
  CSB_Write(device, 30, 1216);
  CSB_Write(device, 31, 1216);
  CSB_Write(device, 32, 1216);
  CSB_Write(device, 33, 1823);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step104 (HANDLE& device) {
// accel.hbm.layer_norm accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 1640448);
  CSB_Write(device, 195, 153389056);
  CSB_Write(device, 196, 1216);
  CSB_Write(device, 197, 1216);
  CSB_Write(device, 198, 145328128);
  CSB_Write(device, 199, 1216);
  CSB_Write(device, 200, 1216);
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, 19);
  CSB_Write(device, 204, 19);
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 1);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step105 (HANDLE& device) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 19);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 19);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, 19);
  CSB_Write(device, 10, 145328128);
  CSB_Write(device, 11, 27778816);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 146376704);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 1711616);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 1216);
  CSB_Write(device, 30, 1216);
  CSB_Write(device, 31, 1216);
  CSB_Write(device, 32, 1216);
  CSB_Write(device, 33, 799);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step106 (HANDLE& device) {
// accel.hbm.activate accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 32768);
  CSB_Write(device, 195, 146376704);
  CSB_Write(device, 196, 1216);
  CSB_Write(device, 197, 1216);
  CSB_Write(device, 198, 149882880);
  CSB_Write(device, 199, 1216);
  CSB_Write(device, 200, 1216);
  CSB_Write(device, 201, 428);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, 19);
  CSB_Write(device, 204, 19);
  CSB_Write(device, 205, 428);
  CSB_Write(device, 206, 13696);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 16);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.activate run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step107 (HANDLE& device) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 19);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 19);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, 19);
  CSB_Write(device, 10, 145328128);
  CSB_Write(device, 11, 26874880);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 146376704);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 2);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 1656832);
  CSB_Write(device, 27, 149882880);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 1216);
  CSB_Write(device, 30, 1216);
  CSB_Write(device, 31, 1216);
  CSB_Write(device, 32, 1216);
  CSB_Write(device, 33, 1823);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step108 (HANDLE& device) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 13696);
  CSB_Write(device, 3, 19);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 19);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 128);
  CSB_Write(device, 8, 128);
  CSB_Write(device, 9, 19);
  CSB_Write(device, 10, 146376704);
  CSB_Write(device, 11, 28682752);
  CSB_Write(device, 12, 56576);
  CSB_Write(device, 13, 145328128);
  CSB_Write(device, 14, 31);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 1766400);
  CSB_Write(device, 27, 153389056);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 1216);
  CSB_Write(device, 30, 1216);
  CSB_Write(device, 31, 1216);
  CSB_Write(device, 32, 1216);
  CSB_Write(device, 33, 1823);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step109 (HANDLE& device) {
// accel.hbm.layer_norm accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 1782784);
  CSB_Write(device, 195, 145328128);
  CSB_Write(device, 196, 1216);
  CSB_Write(device, 197, 1216);
  CSB_Write(device, 198, 153389056);
  CSB_Write(device, 199, 1216);
  CSB_Write(device, 200, 1216);
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, 19);
  CSB_Write(device, 204, 19);
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step110 (HANDLE& device) {
// accel.hbm.mvm_bn accel operator node, storage data in cache36 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 19);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 19);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, 19);
  CSB_Write(device, 10, 153389056);
  CSB_Write(device, 11, 29587968);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 61900800);
  CSB_Write(device, 14, 8);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 1799168);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 1216);
  CSB_Write(device, 30, 1216);
  CSB_Write(device, 31, 8192);
  CSB_Write(device, 32, 8192);
  CSB_Write(device, 33, 799);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step111 (HANDLE& device) {
// accel.hbm.pos_emb accel operator node, storage data in cache37 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 0);
  CSB_Write(device, 195, 61900800);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 63080448);
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, 19);
  CSB_Write(device, 203, 34);
  CSB_Write(device, 204, 8192);
  CSB_Write(device, 205, 0);
  CSB_Write(device, 206, 0);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step112 (HANDLE& device) {
// accel.hbm.mvm_afterTRP accel operator node, storage data in cache38 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 64129024);
  CSB_Write(device, 195, 63080448);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 64194560);
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, 19);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, 19);
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 11688);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 2);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterTRP run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step113 (HANDLE& device) {
// accel.hbm.softmax accel operator node, storage data in cache39 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 1);
  CSB_Write(device, 195, 64194560);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 65243136);
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 1);
  CSB_Write(device, 202, 32);
  CSB_Write(device, 203, 19);
  CSB_Write(device, 204, 19);
  CSB_Write(device, 205, 19);
  CSB_Write(device, 206, 0);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 8);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.softmax run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step114 (HANDLE& device) {
// accel.hbm.mvm_afterF2W accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 63014912);
  CSB_Write(device, 195, 65243136);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 153389056);
  CSB_Write(device, 199, 4864);
  CSB_Write(device, 200, 1216);
  CSB_Write(device, 201, 1);
  CSB_Write(device, 202, 19);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, 19);
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 4);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 1);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterF2W run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step115 (HANDLE& device) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 19);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 19);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, 19);
  CSB_Write(device, 10, 153389056);
  CSB_Write(device, 11, 29892096);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 146376704);
  CSB_Write(device, 14, 7);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 1817600);
  CSB_Write(device, 27, 145328128);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 1216);
  CSB_Write(device, 30, 1216);
  CSB_Write(device, 31, 1216);
  CSB_Write(device, 32, 1216);
  CSB_Write(device, 33, 1823);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step116 (HANDLE& device) {
// accel.hbm.layer_norm accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 1833984);
  CSB_Write(device, 195, 146376704);
  CSB_Write(device, 196, 1216);
  CSB_Write(device, 197, 1216);
  CSB_Write(device, 198, 145328128);
  CSB_Write(device, 199, 1216);
  CSB_Write(device, 200, 1216);
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, 19);
  CSB_Write(device, 204, 19);
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 1);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step117 (HANDLE& device) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 19);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 19);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, 19);
  CSB_Write(device, 10, 145328128);
  CSB_Write(device, 11, 31066368);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 153389056);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 1905152);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 1216);
  CSB_Write(device, 30, 1216);
  CSB_Write(device, 31, 1216);
  CSB_Write(device, 32, 1216);
  CSB_Write(device, 33, 799);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step118 (HANDLE& device) {
// accel.hbm.activate accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 32768);
  CSB_Write(device, 195, 153389056);
  CSB_Write(device, 196, 1216);
  CSB_Write(device, 197, 1216);
  CSB_Write(device, 198, 149882880);
  CSB_Write(device, 199, 1216);
  CSB_Write(device, 200, 1216);
  CSB_Write(device, 201, 428);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, 19);
  CSB_Write(device, 204, 19);
  CSB_Write(device, 205, 428);
  CSB_Write(device, 206, 13696);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 16);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.activate run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step119 (HANDLE& device) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 19);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 19);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, 19);
  CSB_Write(device, 10, 145328128);
  CSB_Write(device, 11, 30162432);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 153389056);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 2);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 1850368);
  CSB_Write(device, 27, 149882880);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 1216);
  CSB_Write(device, 30, 1216);
  CSB_Write(device, 31, 1216);
  CSB_Write(device, 32, 1216);
  CSB_Write(device, 33, 1823);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step120 (HANDLE& device) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 13696);
  CSB_Write(device, 3, 19);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 19);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 128);
  CSB_Write(device, 8, 128);
  CSB_Write(device, 9, 19);
  CSB_Write(device, 10, 153389056);
  CSB_Write(device, 11, 31970304);
  CSB_Write(device, 12, 56576);
  CSB_Write(device, 13, 145328128);
  CSB_Write(device, 14, 31);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 1959936);
  CSB_Write(device, 27, 146376704);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 1216);
  CSB_Write(device, 30, 1216);
  CSB_Write(device, 31, 1216);
  CSB_Write(device, 32, 1216);
  CSB_Write(device, 33, 1823);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step121 (HANDLE& device) {
// accel.hbm.layer_norm accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 1976320);
  CSB_Write(device, 195, 145328128);
  CSB_Write(device, 196, 1216);
  CSB_Write(device, 197, 1216);
  CSB_Write(device, 198, 146376704);
  CSB_Write(device, 199, 1216);
  CSB_Write(device, 200, 1216);
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, 19);
  CSB_Write(device, 204, 19);
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step122 (HANDLE& device) {
// accel.hbm.mvm_bn accel operator node, storage data in cache40 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 19);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 19);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, 19);
  CSB_Write(device, 10, 146376704);
  CSB_Write(device, 11, 32875520);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 66291712);
  CSB_Write(device, 14, 8);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 1992704);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 1216);
  CSB_Write(device, 30, 1216);
  CSB_Write(device, 31, 8192);
  CSB_Write(device, 32, 8192);
  CSB_Write(device, 33, 799);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step123 (HANDLE& device) {
// accel.hbm.pos_emb accel operator node, storage data in cache41 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 0);
  CSB_Write(device, 195, 66291712);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 67471360);
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, 19);
  CSB_Write(device, 203, 34);
  CSB_Write(device, 204, 8192);
  CSB_Write(device, 205, 0);
  CSB_Write(device, 206, 0);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step124 (HANDLE& device) {
// accel.hbm.mvm_afterTRP accel operator node, storage data in cache42 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 68519936);
  CSB_Write(device, 195, 67471360);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 68585472);
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, 19);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, 19);
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 11688);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 2);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterTRP run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step125 (HANDLE& device) {
// accel.hbm.softmax accel operator node, storage data in cache43 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 1);
  CSB_Write(device, 195, 68585472);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 69634048);
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 1);
  CSB_Write(device, 202, 32);
  CSB_Write(device, 203, 19);
  CSB_Write(device, 204, 19);
  CSB_Write(device, 205, 19);
  CSB_Write(device, 206, 0);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 8);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.softmax run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step126 (HANDLE& device) {
// accel.hbm.mvm_afterF2W accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 67405824);
  CSB_Write(device, 195, 69634048);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 146376704);
  CSB_Write(device, 199, 4864);
  CSB_Write(device, 200, 1216);
  CSB_Write(device, 201, 1);
  CSB_Write(device, 202, 19);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, 19);
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 4);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 1);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterF2W run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step127 (HANDLE& device) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 19);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 19);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, 19);
  CSB_Write(device, 10, 146376704);
  CSB_Write(device, 11, 33179648);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 153389056);
  CSB_Write(device, 14, 7);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 2011136);
  CSB_Write(device, 27, 145328128);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 1216);
  CSB_Write(device, 30, 1216);
  CSB_Write(device, 31, 1216);
  CSB_Write(device, 32, 1216);
  CSB_Write(device, 33, 1823);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step128 (HANDLE& device) {
// accel.hbm.layer_norm accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 2027520);
  CSB_Write(device, 195, 153389056);
  CSB_Write(device, 196, 1216);
  CSB_Write(device, 197, 1216);
  CSB_Write(device, 198, 145328128);
  CSB_Write(device, 199, 1216);
  CSB_Write(device, 200, 1216);
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, 19);
  CSB_Write(device, 204, 19);
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 1);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step129 (HANDLE& device) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 19);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 19);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, 19);
  CSB_Write(device, 10, 145328128);
  CSB_Write(device, 11, 34353920);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 146376704);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 2098688);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 1216);
  CSB_Write(device, 30, 1216);
  CSB_Write(device, 31, 1216);
  CSB_Write(device, 32, 1216);
  CSB_Write(device, 33, 799);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step130 (HANDLE& device) {
// accel.hbm.activate accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 32768);
  CSB_Write(device, 195, 146376704);
  CSB_Write(device, 196, 1216);
  CSB_Write(device, 197, 1216);
  CSB_Write(device, 198, 149882880);
  CSB_Write(device, 199, 1216);
  CSB_Write(device, 200, 1216);
  CSB_Write(device, 201, 428);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, 19);
  CSB_Write(device, 204, 19);
  CSB_Write(device, 205, 428);
  CSB_Write(device, 206, 13696);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 16);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.activate run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step131 (HANDLE& device) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 19);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 19);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, 19);
  CSB_Write(device, 10, 145328128);
  CSB_Write(device, 11, 33449984);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 146376704);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 2);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 2043904);
  CSB_Write(device, 27, 149882880);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 1216);
  CSB_Write(device, 30, 1216);
  CSB_Write(device, 31, 1216);
  CSB_Write(device, 32, 1216);
  CSB_Write(device, 33, 1823);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step132 (HANDLE& device) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 13696);
  CSB_Write(device, 3, 19);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 19);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 128);
  CSB_Write(device, 8, 128);
  CSB_Write(device, 9, 19);
  CSB_Write(device, 10, 146376704);
  CSB_Write(device, 11, 35257856);
  CSB_Write(device, 12, 56576);
  CSB_Write(device, 13, 145328128);
  CSB_Write(device, 14, 31);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 2153472);
  CSB_Write(device, 27, 153389056);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 1216);
  CSB_Write(device, 30, 1216);
  CSB_Write(device, 31, 1216);
  CSB_Write(device, 32, 1216);
  CSB_Write(device, 33, 1823);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step133 (HANDLE& device) {
// accel.hbm.layer_norm accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 2169856);
  CSB_Write(device, 195, 145328128);
  CSB_Write(device, 196, 1216);
  CSB_Write(device, 197, 1216);
  CSB_Write(device, 198, 153389056);
  CSB_Write(device, 199, 1216);
  CSB_Write(device, 200, 1216);
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, 19);
  CSB_Write(device, 204, 19);
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step134 (HANDLE& device) {
// accel.hbm.mvm_bn accel operator node, storage data in cache44 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 19);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 19);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, 19);
  CSB_Write(device, 10, 153389056);
  CSB_Write(device, 11, 36163072);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 70682624);
  CSB_Write(device, 14, 8);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 2186240);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 1216);
  CSB_Write(device, 30, 1216);
  CSB_Write(device, 31, 8192);
  CSB_Write(device, 32, 8192);
  CSB_Write(device, 33, 799);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step135 (HANDLE& device) {
// accel.hbm.pos_emb accel operator node, storage data in cache45 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 0);
  CSB_Write(device, 195, 70682624);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 71862272);
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, 19);
  CSB_Write(device, 203, 34);
  CSB_Write(device, 204, 8192);
  CSB_Write(device, 205, 0);
  CSB_Write(device, 206, 0);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step136 (HANDLE& device) {
// accel.hbm.mvm_afterTRP accel operator node, storage data in cache46 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 72910848);
  CSB_Write(device, 195, 71862272);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 72976384);
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, 19);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, 19);
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 11688);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 2);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterTRP run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step137 (HANDLE& device) {
// accel.hbm.softmax accel operator node, storage data in cache47 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 1);
  CSB_Write(device, 195, 72976384);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 74024960);
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 1);
  CSB_Write(device, 202, 32);
  CSB_Write(device, 203, 19);
  CSB_Write(device, 204, 19);
  CSB_Write(device, 205, 19);
  CSB_Write(device, 206, 0);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 8);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.softmax run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step138 (HANDLE& device) {
// accel.hbm.mvm_afterF2W accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 71796736);
  CSB_Write(device, 195, 74024960);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 153389056);
  CSB_Write(device, 199, 4864);
  CSB_Write(device, 200, 1216);
  CSB_Write(device, 201, 1);
  CSB_Write(device, 202, 19);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, 19);
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 4);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 1);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterF2W run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step139 (HANDLE& device) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 19);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 19);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, 19);
  CSB_Write(device, 10, 153389056);
  CSB_Write(device, 11, 36467200);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 146376704);
  CSB_Write(device, 14, 7);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 2204672);
  CSB_Write(device, 27, 145328128);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 1216);
  CSB_Write(device, 30, 1216);
  CSB_Write(device, 31, 1216);
  CSB_Write(device, 32, 1216);
  CSB_Write(device, 33, 1823);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step140 (HANDLE& device) {
// accel.hbm.layer_norm accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 2221056);
  CSB_Write(device, 195, 146376704);
  CSB_Write(device, 196, 1216);
  CSB_Write(device, 197, 1216);
  CSB_Write(device, 198, 145328128);
  CSB_Write(device, 199, 1216);
  CSB_Write(device, 200, 1216);
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, 19);
  CSB_Write(device, 204, 19);
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 1);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step141 (HANDLE& device) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 19);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 19);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, 19);
  CSB_Write(device, 10, 145328128);
  CSB_Write(device, 11, 37641472);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 153389056);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 2292224);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 1216);
  CSB_Write(device, 30, 1216);
  CSB_Write(device, 31, 1216);
  CSB_Write(device, 32, 1216);
  CSB_Write(device, 33, 799);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step142 (HANDLE& device) {
// accel.hbm.activate accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 32768);
  CSB_Write(device, 195, 153389056);
  CSB_Write(device, 196, 1216);
  CSB_Write(device, 197, 1216);
  CSB_Write(device, 198, 149882880);
  CSB_Write(device, 199, 1216);
  CSB_Write(device, 200, 1216);
  CSB_Write(device, 201, 428);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, 19);
  CSB_Write(device, 204, 19);
  CSB_Write(device, 205, 428);
  CSB_Write(device, 206, 13696);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 16);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.activate run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step143 (HANDLE& device) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 19);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 19);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, 19);
  CSB_Write(device, 10, 145328128);
  CSB_Write(device, 11, 36737536);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 153389056);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 2);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 2237440);
  CSB_Write(device, 27, 149882880);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 1216);
  CSB_Write(device, 30, 1216);
  CSB_Write(device, 31, 1216);
  CSB_Write(device, 32, 1216);
  CSB_Write(device, 33, 1823);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step144 (HANDLE& device) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 13696);
  CSB_Write(device, 3, 19);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 19);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 128);
  CSB_Write(device, 8, 128);
  CSB_Write(device, 9, 19);
  CSB_Write(device, 10, 153389056);
  CSB_Write(device, 11, 38545408);
  CSB_Write(device, 12, 56576);
  CSB_Write(device, 13, 145328128);
  CSB_Write(device, 14, 31);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 2347008);
  CSB_Write(device, 27, 146376704);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 1216);
  CSB_Write(device, 30, 1216);
  CSB_Write(device, 31, 1216);
  CSB_Write(device, 32, 1216);
  CSB_Write(device, 33, 1823);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step145 (HANDLE& device) {
// accel.hbm.layer_norm accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 2363392);
  CSB_Write(device, 195, 145328128);
  CSB_Write(device, 196, 1216);
  CSB_Write(device, 197, 1216);
  CSB_Write(device, 198, 146376704);
  CSB_Write(device, 199, 1216);
  CSB_Write(device, 200, 1216);
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, 19);
  CSB_Write(device, 204, 19);
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step146 (HANDLE& device) {
// accel.hbm.mvm_bn accel operator node, storage data in cache48 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 19);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 19);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, 19);
  CSB_Write(device, 10, 146376704);
  CSB_Write(device, 11, 39450624);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 75073536);
  CSB_Write(device, 14, 8);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 2379776);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 1216);
  CSB_Write(device, 30, 1216);
  CSB_Write(device, 31, 8192);
  CSB_Write(device, 32, 8192);
  CSB_Write(device, 33, 799);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step147 (HANDLE& device) {
// accel.hbm.pos_emb accel operator node, storage data in cache49 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 0);
  CSB_Write(device, 195, 75073536);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 76253184);
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, 19);
  CSB_Write(device, 203, 34);
  CSB_Write(device, 204, 8192);
  CSB_Write(device, 205, 0);
  CSB_Write(device, 206, 0);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step148 (HANDLE& device) {
// accel.hbm.mvm_afterTRP accel operator node, storage data in cache50 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 77301760);
  CSB_Write(device, 195, 76253184);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 77367296);
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, 19);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, 19);
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 11688);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 2);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterTRP run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step149 (HANDLE& device) {
// accel.hbm.softmax accel operator node, storage data in cache51 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 1);
  CSB_Write(device, 195, 77367296);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 78415872);
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 1);
  CSB_Write(device, 202, 32);
  CSB_Write(device, 203, 19);
  CSB_Write(device, 204, 19);
  CSB_Write(device, 205, 19);
  CSB_Write(device, 206, 0);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 8);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.softmax run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step150 (HANDLE& device) {
// accel.hbm.mvm_afterF2W accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 76187648);
  CSB_Write(device, 195, 78415872);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 146376704);
  CSB_Write(device, 199, 4864);
  CSB_Write(device, 200, 1216);
  CSB_Write(device, 201, 1);
  CSB_Write(device, 202, 19);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, 19);
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 4);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 1);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterF2W run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step151 (HANDLE& device) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 19);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 19);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, 19);
  CSB_Write(device, 10, 146376704);
  CSB_Write(device, 11, 39754752);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 153389056);
  CSB_Write(device, 14, 7);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 2398208);
  CSB_Write(device, 27, 145328128);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 1216);
  CSB_Write(device, 30, 1216);
  CSB_Write(device, 31, 1216);
  CSB_Write(device, 32, 1216);
  CSB_Write(device, 33, 1823);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step152 (HANDLE& device) {
// accel.hbm.layer_norm accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 2414592);
  CSB_Write(device, 195, 153389056);
  CSB_Write(device, 196, 1216);
  CSB_Write(device, 197, 1216);
  CSB_Write(device, 198, 145328128);
  CSB_Write(device, 199, 1216);
  CSB_Write(device, 200, 1216);
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, 19);
  CSB_Write(device, 204, 19);
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 1);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step153 (HANDLE& device) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 19);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 19);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, 19);
  CSB_Write(device, 10, 145328128);
  CSB_Write(device, 11, 40929024);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 146376704);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 2485760);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 1216);
  CSB_Write(device, 30, 1216);
  CSB_Write(device, 31, 1216);
  CSB_Write(device, 32, 1216);
  CSB_Write(device, 33, 799);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step154 (HANDLE& device) {
// accel.hbm.activate accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 32768);
  CSB_Write(device, 195, 146376704);
  CSB_Write(device, 196, 1216);
  CSB_Write(device, 197, 1216);
  CSB_Write(device, 198, 149882880);
  CSB_Write(device, 199, 1216);
  CSB_Write(device, 200, 1216);
  CSB_Write(device, 201, 428);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, 19);
  CSB_Write(device, 204, 19);
  CSB_Write(device, 205, 428);
  CSB_Write(device, 206, 13696);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 16);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.activate run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step155 (HANDLE& device) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 19);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 19);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, 19);
  CSB_Write(device, 10, 145328128);
  CSB_Write(device, 11, 40025088);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 146376704);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 2);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 2430976);
  CSB_Write(device, 27, 149882880);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 1216);
  CSB_Write(device, 30, 1216);
  CSB_Write(device, 31, 1216);
  CSB_Write(device, 32, 1216);
  CSB_Write(device, 33, 1823);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step156 (HANDLE& device) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 13696);
  CSB_Write(device, 3, 19);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 19);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 128);
  CSB_Write(device, 8, 128);
  CSB_Write(device, 9, 19);
  CSB_Write(device, 10, 146376704);
  CSB_Write(device, 11, 41832960);
  CSB_Write(device, 12, 56576);
  CSB_Write(device, 13, 145328128);
  CSB_Write(device, 14, 31);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 2540544);
  CSB_Write(device, 27, 153389056);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 1216);
  CSB_Write(device, 30, 1216);
  CSB_Write(device, 31, 1216);
  CSB_Write(device, 32, 1216);
  CSB_Write(device, 33, 1823);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step157 (HANDLE& device) {
// accel.hbm.layer_norm accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 2556928);
  CSB_Write(device, 195, 145328128);
  CSB_Write(device, 196, 1216);
  CSB_Write(device, 197, 1216);
  CSB_Write(device, 198, 153389056);
  CSB_Write(device, 199, 1216);
  CSB_Write(device, 200, 1216);
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, 19);
  CSB_Write(device, 204, 19);
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step158 (HANDLE& device) {
// accel.hbm.mvm_bn accel operator node, storage data in cache52 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 19);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 19);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, 19);
  CSB_Write(device, 10, 153389056);
  CSB_Write(device, 11, 42738176);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 79464448);
  CSB_Write(device, 14, 8);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 2573312);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 1216);
  CSB_Write(device, 30, 1216);
  CSB_Write(device, 31, 8192);
  CSB_Write(device, 32, 8192);
  CSB_Write(device, 33, 799);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step159 (HANDLE& device) {
// accel.hbm.pos_emb accel operator node, storage data in cache53 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 0);
  CSB_Write(device, 195, 79464448);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 80644096);
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, 19);
  CSB_Write(device, 203, 34);
  CSB_Write(device, 204, 8192);
  CSB_Write(device, 205, 0);
  CSB_Write(device, 206, 0);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step160 (HANDLE& device) {
// accel.hbm.mvm_afterTRP accel operator node, storage data in cache54 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 81692672);
  CSB_Write(device, 195, 80644096);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 81758208);
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, 19);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, 19);
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 11688);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 2);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterTRP run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step161 (HANDLE& device) {
// accel.hbm.softmax accel operator node, storage data in cache55 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 1);
  CSB_Write(device, 195, 81758208);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 82806784);
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 1);
  CSB_Write(device, 202, 32);
  CSB_Write(device, 203, 19);
  CSB_Write(device, 204, 19);
  CSB_Write(device, 205, 19);
  CSB_Write(device, 206, 0);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 8);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.softmax run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step162 (HANDLE& device) {
// accel.hbm.mvm_afterF2W accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 80578560);
  CSB_Write(device, 195, 82806784);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 153389056);
  CSB_Write(device, 199, 4864);
  CSB_Write(device, 200, 1216);
  CSB_Write(device, 201, 1);
  CSB_Write(device, 202, 19);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, 19);
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 4);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 1);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterF2W run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step163 (HANDLE& device) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 19);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 19);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, 19);
  CSB_Write(device, 10, 153389056);
  CSB_Write(device, 11, 43042304);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 146376704);
  CSB_Write(device, 14, 7);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 2591744);
  CSB_Write(device, 27, 145328128);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 1216);
  CSB_Write(device, 30, 1216);
  CSB_Write(device, 31, 1216);
  CSB_Write(device, 32, 1216);
  CSB_Write(device, 33, 1823);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step164 (HANDLE& device) {
// accel.hbm.layer_norm accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 2608128);
  CSB_Write(device, 195, 146376704);
  CSB_Write(device, 196, 1216);
  CSB_Write(device, 197, 1216);
  CSB_Write(device, 198, 145328128);
  CSB_Write(device, 199, 1216);
  CSB_Write(device, 200, 1216);
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, 19);
  CSB_Write(device, 204, 19);
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 1);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step165 (HANDLE& device) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 19);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 19);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, 19);
  CSB_Write(device, 10, 145328128);
  CSB_Write(device, 11, 44216576);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 153389056);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 2679296);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 1216);
  CSB_Write(device, 30, 1216);
  CSB_Write(device, 31, 1216);
  CSB_Write(device, 32, 1216);
  CSB_Write(device, 33, 799);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step166 (HANDLE& device) {
// accel.hbm.activate accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 32768);
  CSB_Write(device, 195, 153389056);
  CSB_Write(device, 196, 1216);
  CSB_Write(device, 197, 1216);
  CSB_Write(device, 198, 149882880);
  CSB_Write(device, 199, 1216);
  CSB_Write(device, 200, 1216);
  CSB_Write(device, 201, 428);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, 19);
  CSB_Write(device, 204, 19);
  CSB_Write(device, 205, 428);
  CSB_Write(device, 206, 13696);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 16);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.activate run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step167 (HANDLE& device) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 19);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 19);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, 19);
  CSB_Write(device, 10, 145328128);
  CSB_Write(device, 11, 43312640);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 153389056);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 2);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 2624512);
  CSB_Write(device, 27, 149882880);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 1216);
  CSB_Write(device, 30, 1216);
  CSB_Write(device, 31, 1216);
  CSB_Write(device, 32, 1216);
  CSB_Write(device, 33, 1823);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step168 (HANDLE& device) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 13696);
  CSB_Write(device, 3, 19);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 19);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 128);
  CSB_Write(device, 8, 128);
  CSB_Write(device, 9, 19);
  CSB_Write(device, 10, 153389056);
  CSB_Write(device, 11, 45120512);
  CSB_Write(device, 12, 56576);
  CSB_Write(device, 13, 145328128);
  CSB_Write(device, 14, 31);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 2734080);
  CSB_Write(device, 27, 146376704);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 1216);
  CSB_Write(device, 30, 1216);
  CSB_Write(device, 31, 1216);
  CSB_Write(device, 32, 1216);
  CSB_Write(device, 33, 1823);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step169 (HANDLE& device) {
// accel.hbm.layer_norm accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 2750464);
  CSB_Write(device, 195, 145328128);
  CSB_Write(device, 196, 1216);
  CSB_Write(device, 197, 1216);
  CSB_Write(device, 198, 146376704);
  CSB_Write(device, 199, 1216);
  CSB_Write(device, 200, 1216);
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, 19);
  CSB_Write(device, 204, 19);
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step170 (HANDLE& device) {
// accel.hbm.mvm_bn accel operator node, storage data in cache56 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 19);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 19);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, 19);
  CSB_Write(device, 10, 146376704);
  CSB_Write(device, 11, 46025728);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 83855360);
  CSB_Write(device, 14, 8);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 2766848);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 1216);
  CSB_Write(device, 30, 1216);
  CSB_Write(device, 31, 8192);
  CSB_Write(device, 32, 8192);
  CSB_Write(device, 33, 799);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step171 (HANDLE& device) {
// accel.hbm.pos_emb accel operator node, storage data in cache57 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 0);
  CSB_Write(device, 195, 83855360);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 85035008);
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, 19);
  CSB_Write(device, 203, 34);
  CSB_Write(device, 204, 8192);
  CSB_Write(device, 205, 0);
  CSB_Write(device, 206, 0);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step172 (HANDLE& device) {
// accel.hbm.mvm_afterTRP accel operator node, storage data in cache58 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 86083584);
  CSB_Write(device, 195, 85035008);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 86149120);
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, 19);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, 19);
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 11688);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 2);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterTRP run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step173 (HANDLE& device) {
// accel.hbm.softmax accel operator node, storage data in cache59 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 1);
  CSB_Write(device, 195, 86149120);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 87197696);
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 1);
  CSB_Write(device, 202, 32);
  CSB_Write(device, 203, 19);
  CSB_Write(device, 204, 19);
  CSB_Write(device, 205, 19);
  CSB_Write(device, 206, 0);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 8);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.softmax run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step174 (HANDLE& device) {
// accel.hbm.mvm_afterF2W accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 84969472);
  CSB_Write(device, 195, 87197696);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 146376704);
  CSB_Write(device, 199, 4864);
  CSB_Write(device, 200, 1216);
  CSB_Write(device, 201, 1);
  CSB_Write(device, 202, 19);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, 19);
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 4);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 1);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterF2W run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step175 (HANDLE& device) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 19);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 19);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, 19);
  CSB_Write(device, 10, 146376704);
  CSB_Write(device, 11, 46329856);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 153389056);
  CSB_Write(device, 14, 7);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 2785280);
  CSB_Write(device, 27, 145328128);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 1216);
  CSB_Write(device, 30, 1216);
  CSB_Write(device, 31, 1216);
  CSB_Write(device, 32, 1216);
  CSB_Write(device, 33, 1823);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step176 (HANDLE& device) {
// accel.hbm.layer_norm accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 2801664);
  CSB_Write(device, 195, 153389056);
  CSB_Write(device, 196, 1216);
  CSB_Write(device, 197, 1216);
  CSB_Write(device, 198, 145328128);
  CSB_Write(device, 199, 1216);
  CSB_Write(device, 200, 1216);
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, 19);
  CSB_Write(device, 204, 19);
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 1);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step177 (HANDLE& device) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 19);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 19);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, 19);
  CSB_Write(device, 10, 145328128);
  CSB_Write(device, 11, 47504128);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 146376704);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 2872832);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 1216);
  CSB_Write(device, 30, 1216);
  CSB_Write(device, 31, 1216);
  CSB_Write(device, 32, 1216);
  CSB_Write(device, 33, 799);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step178 (HANDLE& device) {
// accel.hbm.activate accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 32768);
  CSB_Write(device, 195, 146376704);
  CSB_Write(device, 196, 1216);
  CSB_Write(device, 197, 1216);
  CSB_Write(device, 198, 149882880);
  CSB_Write(device, 199, 1216);
  CSB_Write(device, 200, 1216);
  CSB_Write(device, 201, 428);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, 19);
  CSB_Write(device, 204, 19);
  CSB_Write(device, 205, 428);
  CSB_Write(device, 206, 13696);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 16);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.activate run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step179 (HANDLE& device) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 19);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 19);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, 19);
  CSB_Write(device, 10, 145328128);
  CSB_Write(device, 11, 46600192);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 146376704);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 2);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 2818048);
  CSB_Write(device, 27, 149882880);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 1216);
  CSB_Write(device, 30, 1216);
  CSB_Write(device, 31, 1216);
  CSB_Write(device, 32, 1216);
  CSB_Write(device, 33, 1823);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step180 (HANDLE& device) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 13696);
  CSB_Write(device, 3, 19);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 19);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 128);
  CSB_Write(device, 8, 128);
  CSB_Write(device, 9, 19);
  CSB_Write(device, 10, 146376704);
  CSB_Write(device, 11, 48408064);
  CSB_Write(device, 12, 56576);
  CSB_Write(device, 13, 145328128);
  CSB_Write(device, 14, 31);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 2927616);
  CSB_Write(device, 27, 153389056);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 1216);
  CSB_Write(device, 30, 1216);
  CSB_Write(device, 31, 1216);
  CSB_Write(device, 32, 1216);
  CSB_Write(device, 33, 1823);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step181 (HANDLE& device) {
// accel.hbm.layer_norm accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 2944000);
  CSB_Write(device, 195, 145328128);
  CSB_Write(device, 196, 1216);
  CSB_Write(device, 197, 1216);
  CSB_Write(device, 198, 153389056);
  CSB_Write(device, 199, 1216);
  CSB_Write(device, 200, 1216);
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, 19);
  CSB_Write(device, 204, 19);
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step182 (HANDLE& device) {
// accel.hbm.mvm_bn accel operator node, storage data in cache60 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 19);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 19);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, 19);
  CSB_Write(device, 10, 153389056);
  CSB_Write(device, 11, 49313280);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 88246272);
  CSB_Write(device, 14, 8);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 2960384);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 1216);
  CSB_Write(device, 30, 1216);
  CSB_Write(device, 31, 8192);
  CSB_Write(device, 32, 8192);
  CSB_Write(device, 33, 799);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step183 (HANDLE& device) {
// accel.hbm.pos_emb accel operator node, storage data in cache61 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 0);
  CSB_Write(device, 195, 88246272);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 89425920);
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, 19);
  CSB_Write(device, 203, 34);
  CSB_Write(device, 204, 8192);
  CSB_Write(device, 205, 0);
  CSB_Write(device, 206, 0);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step184 (HANDLE& device) {
// accel.hbm.mvm_afterTRP accel operator node, storage data in cache62 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 90474496);
  CSB_Write(device, 195, 89425920);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 90540032);
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, 19);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, 19);
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 11688);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 2);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterTRP run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step185 (HANDLE& device) {
// accel.hbm.softmax accel operator node, storage data in cache63 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 1);
  CSB_Write(device, 195, 90540032);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 91588608);
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 1);
  CSB_Write(device, 202, 32);
  CSB_Write(device, 203, 19);
  CSB_Write(device, 204, 19);
  CSB_Write(device, 205, 19);
  CSB_Write(device, 206, 0);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 8);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.softmax run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step186 (HANDLE& device) {
// accel.hbm.mvm_afterF2W accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 89360384);
  CSB_Write(device, 195, 91588608);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 153389056);
  CSB_Write(device, 199, 4864);
  CSB_Write(device, 200, 1216);
  CSB_Write(device, 201, 1);
  CSB_Write(device, 202, 19);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, 19);
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 4);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 1);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterF2W run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step187 (HANDLE& device) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 19);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 19);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, 19);
  CSB_Write(device, 10, 153389056);
  CSB_Write(device, 11, 49617408);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 146376704);
  CSB_Write(device, 14, 7);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 2978816);
  CSB_Write(device, 27, 145328128);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 1216);
  CSB_Write(device, 30, 1216);
  CSB_Write(device, 31, 1216);
  CSB_Write(device, 32, 1216);
  CSB_Write(device, 33, 1823);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step188 (HANDLE& device) {
// accel.hbm.layer_norm accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 2995200);
  CSB_Write(device, 195, 146376704);
  CSB_Write(device, 196, 1216);
  CSB_Write(device, 197, 1216);
  CSB_Write(device, 198, 145328128);
  CSB_Write(device, 199, 1216);
  CSB_Write(device, 200, 1216);
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, 19);
  CSB_Write(device, 204, 19);
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 1);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step189 (HANDLE& device) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 19);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 19);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, 19);
  CSB_Write(device, 10, 145328128);
  CSB_Write(device, 11, 50791680);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 153389056);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 3066368);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 1216);
  CSB_Write(device, 30, 1216);
  CSB_Write(device, 31, 1216);
  CSB_Write(device, 32, 1216);
  CSB_Write(device, 33, 799);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step190 (HANDLE& device) {
// accel.hbm.activate accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 32768);
  CSB_Write(device, 195, 153389056);
  CSB_Write(device, 196, 1216);
  CSB_Write(device, 197, 1216);
  CSB_Write(device, 198, 149882880);
  CSB_Write(device, 199, 1216);
  CSB_Write(device, 200, 1216);
  CSB_Write(device, 201, 428);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, 19);
  CSB_Write(device, 204, 19);
  CSB_Write(device, 205, 428);
  CSB_Write(device, 206, 13696);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 16);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.activate run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step191 (HANDLE& device) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 19);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 19);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, 19);
  CSB_Write(device, 10, 145328128);
  CSB_Write(device, 11, 49887744);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 153389056);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 2);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 3011584);
  CSB_Write(device, 27, 149882880);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 1216);
  CSB_Write(device, 30, 1216);
  CSB_Write(device, 31, 1216);
  CSB_Write(device, 32, 1216);
  CSB_Write(device, 33, 1823);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step192 (HANDLE& device) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 13696);
  CSB_Write(device, 3, 19);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 19);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 128);
  CSB_Write(device, 8, 128);
  CSB_Write(device, 9, 19);
  CSB_Write(device, 10, 153389056);
  CSB_Write(device, 11, 51695616);
  CSB_Write(device, 12, 56576);
  CSB_Write(device, 13, 145328128);
  CSB_Write(device, 14, 31);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 3121152);
  CSB_Write(device, 27, 146376704);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 1216);
  CSB_Write(device, 30, 1216);
  CSB_Write(device, 31, 1216);
  CSB_Write(device, 32, 1216);
  CSB_Write(device, 33, 1823);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step193 (HANDLE& device) {
// accel.hbm.layer_norm accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 3137536);
  CSB_Write(device, 195, 145328128);
  CSB_Write(device, 196, 1216);
  CSB_Write(device, 197, 1216);
  CSB_Write(device, 198, 146376704);
  CSB_Write(device, 199, 1216);
  CSB_Write(device, 200, 1216);
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, 19);
  CSB_Write(device, 204, 19);
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step194 (HANDLE& device) {
// accel.hbm.mvm_bn accel operator node, storage data in cache64 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 19);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 19);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, 19);
  CSB_Write(device, 10, 146376704);
  CSB_Write(device, 11, 52600832);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 92637184);
  CSB_Write(device, 14, 8);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 3153920);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 1216);
  CSB_Write(device, 30, 1216);
  CSB_Write(device, 31, 8192);
  CSB_Write(device, 32, 8192);
  CSB_Write(device, 33, 799);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step195 (HANDLE& device) {
// accel.hbm.pos_emb accel operator node, storage data in cache65 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 0);
  CSB_Write(device, 195, 92637184);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 93816832);
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, 19);
  CSB_Write(device, 203, 34);
  CSB_Write(device, 204, 8192);
  CSB_Write(device, 205, 0);
  CSB_Write(device, 206, 0);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step196 (HANDLE& device) {
// accel.hbm.mvm_afterTRP accel operator node, storage data in cache66 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 94865408);
  CSB_Write(device, 195, 93816832);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 94930944);
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, 19);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, 19);
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 11688);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 2);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterTRP run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step197 (HANDLE& device) {
// accel.hbm.softmax accel operator node, storage data in cache67 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 1);
  CSB_Write(device, 195, 94930944);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 95979520);
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 1);
  CSB_Write(device, 202, 32);
  CSB_Write(device, 203, 19);
  CSB_Write(device, 204, 19);
  CSB_Write(device, 205, 19);
  CSB_Write(device, 206, 0);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 8);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.softmax run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step198 (HANDLE& device) {
// accel.hbm.mvm_afterF2W accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 93751296);
  CSB_Write(device, 195, 95979520);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 146376704);
  CSB_Write(device, 199, 4864);
  CSB_Write(device, 200, 1216);
  CSB_Write(device, 201, 1);
  CSB_Write(device, 202, 19);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, 19);
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 4);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 1);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterF2W run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step199 (HANDLE& device) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 19);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 19);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, 19);
  CSB_Write(device, 10, 146376704);
  CSB_Write(device, 11, 52904960);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 153389056);
  CSB_Write(device, 14, 7);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 3172352);
  CSB_Write(device, 27, 145328128);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 1216);
  CSB_Write(device, 30, 1216);
  CSB_Write(device, 31, 1216);
  CSB_Write(device, 32, 1216);
  CSB_Write(device, 33, 1823);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step200 (HANDLE& device) {
// accel.hbm.layer_norm accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 3188736);
  CSB_Write(device, 195, 153389056);
  CSB_Write(device, 196, 1216);
  CSB_Write(device, 197, 1216);
  CSB_Write(device, 198, 145328128);
  CSB_Write(device, 199, 1216);
  CSB_Write(device, 200, 1216);
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, 19);
  CSB_Write(device, 204, 19);
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 1);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step201 (HANDLE& device) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 19);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 19);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, 19);
  CSB_Write(device, 10, 145328128);
  CSB_Write(device, 11, 54079232);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 146376704);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 3259904);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 1216);
  CSB_Write(device, 30, 1216);
  CSB_Write(device, 31, 1216);
  CSB_Write(device, 32, 1216);
  CSB_Write(device, 33, 799);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step202 (HANDLE& device) {
// accel.hbm.activate accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 32768);
  CSB_Write(device, 195, 146376704);
  CSB_Write(device, 196, 1216);
  CSB_Write(device, 197, 1216);
  CSB_Write(device, 198, 149882880);
  CSB_Write(device, 199, 1216);
  CSB_Write(device, 200, 1216);
  CSB_Write(device, 201, 428);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, 19);
  CSB_Write(device, 204, 19);
  CSB_Write(device, 205, 428);
  CSB_Write(device, 206, 13696);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 16);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.activate run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step203 (HANDLE& device) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 19);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 19);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, 19);
  CSB_Write(device, 10, 145328128);
  CSB_Write(device, 11, 53175296);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 146376704);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 2);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 3205120);
  CSB_Write(device, 27, 149882880);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 1216);
  CSB_Write(device, 30, 1216);
  CSB_Write(device, 31, 1216);
  CSB_Write(device, 32, 1216);
  CSB_Write(device, 33, 1823);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step204 (HANDLE& device) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 13696);
  CSB_Write(device, 3, 19);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 19);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 128);
  CSB_Write(device, 8, 128);
  CSB_Write(device, 9, 19);
  CSB_Write(device, 10, 146376704);
  CSB_Write(device, 11, 54983168);
  CSB_Write(device, 12, 56576);
  CSB_Write(device, 13, 145328128);
  CSB_Write(device, 14, 31);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 3314688);
  CSB_Write(device, 27, 153389056);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 1216);
  CSB_Write(device, 30, 1216);
  CSB_Write(device, 31, 1216);
  CSB_Write(device, 32, 1216);
  CSB_Write(device, 33, 1823);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step205 (HANDLE& device) {
// accel.hbm.layer_norm accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 3331072);
  CSB_Write(device, 195, 145328128);
  CSB_Write(device, 196, 1216);
  CSB_Write(device, 197, 1216);
  CSB_Write(device, 198, 153389056);
  CSB_Write(device, 199, 1216);
  CSB_Write(device, 200, 1216);
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, 19);
  CSB_Write(device, 204, 19);
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step206 (HANDLE& device) {
// accel.hbm.mvm_bn accel operator node, storage data in cache68 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 19);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 19);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, 19);
  CSB_Write(device, 10, 153389056);
  CSB_Write(device, 11, 55888384);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 97028096);
  CSB_Write(device, 14, 8);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 3347456);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 1216);
  CSB_Write(device, 30, 1216);
  CSB_Write(device, 31, 8192);
  CSB_Write(device, 32, 8192);
  CSB_Write(device, 33, 799);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step207 (HANDLE& device) {
// accel.hbm.pos_emb accel operator node, storage data in cache69 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 0);
  CSB_Write(device, 195, 97028096);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 98207744);
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, 19);
  CSB_Write(device, 203, 34);
  CSB_Write(device, 204, 8192);
  CSB_Write(device, 205, 0);
  CSB_Write(device, 206, 0);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step208 (HANDLE& device) {
// accel.hbm.mvm_afterTRP accel operator node, storage data in cache70 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 99256320);
  CSB_Write(device, 195, 98207744);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 99321856);
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, 19);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, 19);
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 11688);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 2);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterTRP run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step209 (HANDLE& device) {
// accel.hbm.softmax accel operator node, storage data in cache71 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 1);
  CSB_Write(device, 195, 99321856);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 100370432);
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 1);
  CSB_Write(device, 202, 32);
  CSB_Write(device, 203, 19);
  CSB_Write(device, 204, 19);
  CSB_Write(device, 205, 19);
  CSB_Write(device, 206, 0);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 8);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.softmax run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step210 (HANDLE& device) {
// accel.hbm.mvm_afterF2W accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 98142208);
  CSB_Write(device, 195, 100370432);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 153389056);
  CSB_Write(device, 199, 4864);
  CSB_Write(device, 200, 1216);
  CSB_Write(device, 201, 1);
  CSB_Write(device, 202, 19);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, 19);
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 4);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 1);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterF2W run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step211 (HANDLE& device) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 19);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 19);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, 19);
  CSB_Write(device, 10, 153389056);
  CSB_Write(device, 11, 56192512);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 146376704);
  CSB_Write(device, 14, 7);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 3365888);
  CSB_Write(device, 27, 145328128);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 1216);
  CSB_Write(device, 30, 1216);
  CSB_Write(device, 31, 1216);
  CSB_Write(device, 32, 1216);
  CSB_Write(device, 33, 1823);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step212 (HANDLE& device) {
// accel.hbm.layer_norm accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 3382272);
  CSB_Write(device, 195, 146376704);
  CSB_Write(device, 196, 1216);
  CSB_Write(device, 197, 1216);
  CSB_Write(device, 198, 145328128);
  CSB_Write(device, 199, 1216);
  CSB_Write(device, 200, 1216);
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, 19);
  CSB_Write(device, 204, 19);
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 1);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step213 (HANDLE& device) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 19);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 19);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, 19);
  CSB_Write(device, 10, 145328128);
  CSB_Write(device, 11, 57366784);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 153389056);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 3453440);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 1216);
  CSB_Write(device, 30, 1216);
  CSB_Write(device, 31, 1216);
  CSB_Write(device, 32, 1216);
  CSB_Write(device, 33, 799);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step214 (HANDLE& device) {
// accel.hbm.activate accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 32768);
  CSB_Write(device, 195, 153389056);
  CSB_Write(device, 196, 1216);
  CSB_Write(device, 197, 1216);
  CSB_Write(device, 198, 149882880);
  CSB_Write(device, 199, 1216);
  CSB_Write(device, 200, 1216);
  CSB_Write(device, 201, 428);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, 19);
  CSB_Write(device, 204, 19);
  CSB_Write(device, 205, 428);
  CSB_Write(device, 206, 13696);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 16);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.activate run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step215 (HANDLE& device) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 19);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 19);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, 19);
  CSB_Write(device, 10, 145328128);
  CSB_Write(device, 11, 56462848);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 153389056);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 2);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 3398656);
  CSB_Write(device, 27, 149882880);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 1216);
  CSB_Write(device, 30, 1216);
  CSB_Write(device, 31, 1216);
  CSB_Write(device, 32, 1216);
  CSB_Write(device, 33, 1823);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step216 (HANDLE& device) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 13696);
  CSB_Write(device, 3, 19);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 19);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 128);
  CSB_Write(device, 8, 128);
  CSB_Write(device, 9, 19);
  CSB_Write(device, 10, 153389056);
  CSB_Write(device, 11, 58270720);
  CSB_Write(device, 12, 56576);
  CSB_Write(device, 13, 145328128);
  CSB_Write(device, 14, 31);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 3508224);
  CSB_Write(device, 27, 146376704);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 1216);
  CSB_Write(device, 30, 1216);
  CSB_Write(device, 31, 1216);
  CSB_Write(device, 32, 1216);
  CSB_Write(device, 33, 1823);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step217 (HANDLE& device) {
// accel.hbm.layer_norm accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 3524608);
  CSB_Write(device, 195, 145328128);
  CSB_Write(device, 196, 1216);
  CSB_Write(device, 197, 1216);
  CSB_Write(device, 198, 146376704);
  CSB_Write(device, 199, 1216);
  CSB_Write(device, 200, 1216);
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, 19);
  CSB_Write(device, 204, 19);
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step218 (HANDLE& device) {
// accel.hbm.mvm_bn accel operator node, storage data in cache72 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 19);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 19);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, 19);
  CSB_Write(device, 10, 146376704);
  CSB_Write(device, 11, 59175936);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 101419008);
  CSB_Write(device, 14, 8);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 3540992);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 1216);
  CSB_Write(device, 30, 1216);
  CSB_Write(device, 31, 8192);
  CSB_Write(device, 32, 8192);
  CSB_Write(device, 33, 799);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step219 (HANDLE& device) {
// accel.hbm.pos_emb accel operator node, storage data in cache73 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 0);
  CSB_Write(device, 195, 101419008);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 102598656);
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, 19);
  CSB_Write(device, 203, 34);
  CSB_Write(device, 204, 8192);
  CSB_Write(device, 205, 0);
  CSB_Write(device, 206, 0);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step220 (HANDLE& device) {
// accel.hbm.mvm_afterTRP accel operator node, storage data in cache74 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 103647232);
  CSB_Write(device, 195, 102598656);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 103712768);
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, 19);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, 19);
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 11688);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 2);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterTRP run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step221 (HANDLE& device) {
// accel.hbm.softmax accel operator node, storage data in cache75 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 1);
  CSB_Write(device, 195, 103712768);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 104761344);
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 1);
  CSB_Write(device, 202, 32);
  CSB_Write(device, 203, 19);
  CSB_Write(device, 204, 19);
  CSB_Write(device, 205, 19);
  CSB_Write(device, 206, 0);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 8);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.softmax run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step222 (HANDLE& device) {
// accel.hbm.mvm_afterF2W accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 102533120);
  CSB_Write(device, 195, 104761344);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 146376704);
  CSB_Write(device, 199, 4864);
  CSB_Write(device, 200, 1216);
  CSB_Write(device, 201, 1);
  CSB_Write(device, 202, 19);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, 19);
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 4);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 1);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterF2W run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step223 (HANDLE& device) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 19);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 19);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, 19);
  CSB_Write(device, 10, 146376704);
  CSB_Write(device, 11, 59480064);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 153389056);
  CSB_Write(device, 14, 7);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 3559424);
  CSB_Write(device, 27, 145328128);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 1216);
  CSB_Write(device, 30, 1216);
  CSB_Write(device, 31, 1216);
  CSB_Write(device, 32, 1216);
  CSB_Write(device, 33, 1823);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step224 (HANDLE& device) {
// accel.hbm.layer_norm accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 3575808);
  CSB_Write(device, 195, 153389056);
  CSB_Write(device, 196, 1216);
  CSB_Write(device, 197, 1216);
  CSB_Write(device, 198, 145328128);
  CSB_Write(device, 199, 1216);
  CSB_Write(device, 200, 1216);
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, 19);
  CSB_Write(device, 204, 19);
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 1);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step225 (HANDLE& device) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 19);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 19);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, 19);
  CSB_Write(device, 10, 145328128);
  CSB_Write(device, 11, 60654336);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 146376704);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 3646976);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 1216);
  CSB_Write(device, 30, 1216);
  CSB_Write(device, 31, 1216);
  CSB_Write(device, 32, 1216);
  CSB_Write(device, 33, 799);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step226 (HANDLE& device) {
// accel.hbm.activate accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 32768);
  CSB_Write(device, 195, 146376704);
  CSB_Write(device, 196, 1216);
  CSB_Write(device, 197, 1216);
  CSB_Write(device, 198, 149882880);
  CSB_Write(device, 199, 1216);
  CSB_Write(device, 200, 1216);
  CSB_Write(device, 201, 428);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, 19);
  CSB_Write(device, 204, 19);
  CSB_Write(device, 205, 428);
  CSB_Write(device, 206, 13696);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 16);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.activate run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step227 (HANDLE& device) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 19);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 19);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, 19);
  CSB_Write(device, 10, 145328128);
  CSB_Write(device, 11, 59750400);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 146376704);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 2);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 3592192);
  CSB_Write(device, 27, 149882880);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 1216);
  CSB_Write(device, 30, 1216);
  CSB_Write(device, 31, 1216);
  CSB_Write(device, 32, 1216);
  CSB_Write(device, 33, 1823);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step228 (HANDLE& device) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 13696);
  CSB_Write(device, 3, 19);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 19);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 128);
  CSB_Write(device, 8, 128);
  CSB_Write(device, 9, 19);
  CSB_Write(device, 10, 146376704);
  CSB_Write(device, 11, 61558272);
  CSB_Write(device, 12, 56576);
  CSB_Write(device, 13, 145328128);
  CSB_Write(device, 14, 31);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 3701760);
  CSB_Write(device, 27, 153389056);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 1216);
  CSB_Write(device, 30, 1216);
  CSB_Write(device, 31, 1216);
  CSB_Write(device, 32, 1216);
  CSB_Write(device, 33, 1823);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step229 (HANDLE& device) {
// accel.hbm.layer_norm accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 3718144);
  CSB_Write(device, 195, 145328128);
  CSB_Write(device, 196, 1216);
  CSB_Write(device, 197, 1216);
  CSB_Write(device, 198, 153389056);
  CSB_Write(device, 199, 1216);
  CSB_Write(device, 200, 1216);
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, 19);
  CSB_Write(device, 204, 19);
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step230 (HANDLE& device) {
// accel.hbm.mvm_bn accel operator node, storage data in cache76 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 19);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 19);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, 19);
  CSB_Write(device, 10, 153389056);
  CSB_Write(device, 11, 62463488);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 105809920);
  CSB_Write(device, 14, 8);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 3734528);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 1216);
  CSB_Write(device, 30, 1216);
  CSB_Write(device, 31, 8192);
  CSB_Write(device, 32, 8192);
  CSB_Write(device, 33, 799);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step231 (HANDLE& device) {
// accel.hbm.pos_emb accel operator node, storage data in cache77 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 0);
  CSB_Write(device, 195, 105809920);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 106989568);
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, 19);
  CSB_Write(device, 203, 34);
  CSB_Write(device, 204, 8192);
  CSB_Write(device, 205, 0);
  CSB_Write(device, 206, 0);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step232 (HANDLE& device) {
// accel.hbm.mvm_afterTRP accel operator node, storage data in cache78 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 108038144);
  CSB_Write(device, 195, 106989568);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 108103680);
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, 19);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, 19);
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 11688);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 2);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterTRP run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step233 (HANDLE& device) {
// accel.hbm.softmax accel operator node, storage data in cache79 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 1);
  CSB_Write(device, 195, 108103680);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 109152256);
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 1);
  CSB_Write(device, 202, 32);
  CSB_Write(device, 203, 19);
  CSB_Write(device, 204, 19);
  CSB_Write(device, 205, 19);
  CSB_Write(device, 206, 0);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 8);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.softmax run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step234 (HANDLE& device) {
// accel.hbm.mvm_afterF2W accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 106924032);
  CSB_Write(device, 195, 109152256);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 153389056);
  CSB_Write(device, 199, 4864);
  CSB_Write(device, 200, 1216);
  CSB_Write(device, 201, 1);
  CSB_Write(device, 202, 19);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, 19);
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 4);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 1);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterF2W run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step235 (HANDLE& device) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 19);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 19);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, 19);
  CSB_Write(device, 10, 153389056);
  CSB_Write(device, 11, 62767616);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 146376704);
  CSB_Write(device, 14, 7);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 3752960);
  CSB_Write(device, 27, 145328128);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 1216);
  CSB_Write(device, 30, 1216);
  CSB_Write(device, 31, 1216);
  CSB_Write(device, 32, 1216);
  CSB_Write(device, 33, 1823);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step236 (HANDLE& device) {
// accel.hbm.layer_norm accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 3769344);
  CSB_Write(device, 195, 146376704);
  CSB_Write(device, 196, 1216);
  CSB_Write(device, 197, 1216);
  CSB_Write(device, 198, 145328128);
  CSB_Write(device, 199, 1216);
  CSB_Write(device, 200, 1216);
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, 19);
  CSB_Write(device, 204, 19);
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 1);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step237 (HANDLE& device) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 19);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 19);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, 19);
  CSB_Write(device, 10, 145328128);
  CSB_Write(device, 11, 63941888);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 153389056);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 3840512);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 1216);
  CSB_Write(device, 30, 1216);
  CSB_Write(device, 31, 1216);
  CSB_Write(device, 32, 1216);
  CSB_Write(device, 33, 799);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step238 (HANDLE& device) {
// accel.hbm.activate accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 32768);
  CSB_Write(device, 195, 153389056);
  CSB_Write(device, 196, 1216);
  CSB_Write(device, 197, 1216);
  CSB_Write(device, 198, 149882880);
  CSB_Write(device, 199, 1216);
  CSB_Write(device, 200, 1216);
  CSB_Write(device, 201, 428);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, 19);
  CSB_Write(device, 204, 19);
  CSB_Write(device, 205, 428);
  CSB_Write(device, 206, 13696);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 16);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.activate run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step239 (HANDLE& device) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 19);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 19);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, 19);
  CSB_Write(device, 10, 145328128);
  CSB_Write(device, 11, 63037952);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 153389056);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 2);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 3785728);
  CSB_Write(device, 27, 149882880);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 1216);
  CSB_Write(device, 30, 1216);
  CSB_Write(device, 31, 1216);
  CSB_Write(device, 32, 1216);
  CSB_Write(device, 33, 1823);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step240 (HANDLE& device) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 13696);
  CSB_Write(device, 3, 19);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 19);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 128);
  CSB_Write(device, 8, 128);
  CSB_Write(device, 9, 19);
  CSB_Write(device, 10, 153389056);
  CSB_Write(device, 11, 64845824);
  CSB_Write(device, 12, 56576);
  CSB_Write(device, 13, 145328128);
  CSB_Write(device, 14, 31);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 3895296);
  CSB_Write(device, 27, 146376704);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 1216);
  CSB_Write(device, 30, 1216);
  CSB_Write(device, 31, 1216);
  CSB_Write(device, 32, 1216);
  CSB_Write(device, 33, 1823);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step241 (HANDLE& device) {
// accel.hbm.layer_norm accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 3911680);
  CSB_Write(device, 195, 145328128);
  CSB_Write(device, 196, 1216);
  CSB_Write(device, 197, 1216);
  CSB_Write(device, 198, 146376704);
  CSB_Write(device, 199, 1216);
  CSB_Write(device, 200, 1216);
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, 19);
  CSB_Write(device, 204, 19);
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step242 (HANDLE& device) {
// accel.hbm.mvm_bn accel operator node, storage data in cache80 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 19);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 19);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, 19);
  CSB_Write(device, 10, 146376704);
  CSB_Write(device, 11, 65751040);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 110200832);
  CSB_Write(device, 14, 8);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 3928064);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 1216);
  CSB_Write(device, 30, 1216);
  CSB_Write(device, 31, 8192);
  CSB_Write(device, 32, 8192);
  CSB_Write(device, 33, 799);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step243 (HANDLE& device) {
// accel.hbm.pos_emb accel operator node, storage data in cache81 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 0);
  CSB_Write(device, 195, 110200832);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 111380480);
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, 19);
  CSB_Write(device, 203, 34);
  CSB_Write(device, 204, 8192);
  CSB_Write(device, 205, 0);
  CSB_Write(device, 206, 0);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step244 (HANDLE& device) {
// accel.hbm.mvm_afterTRP accel operator node, storage data in cache82 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 112429056);
  CSB_Write(device, 195, 111380480);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 112494592);
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, 19);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, 19);
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 11688);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 2);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterTRP run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step245 (HANDLE& device) {
// accel.hbm.softmax accel operator node, storage data in cache83 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 1);
  CSB_Write(device, 195, 112494592);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 113543168);
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 1);
  CSB_Write(device, 202, 32);
  CSB_Write(device, 203, 19);
  CSB_Write(device, 204, 19);
  CSB_Write(device, 205, 19);
  CSB_Write(device, 206, 0);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 8);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.softmax run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step246 (HANDLE& device) {
// accel.hbm.mvm_afterF2W accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 111314944);
  CSB_Write(device, 195, 113543168);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 146376704);
  CSB_Write(device, 199, 4864);
  CSB_Write(device, 200, 1216);
  CSB_Write(device, 201, 1);
  CSB_Write(device, 202, 19);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, 19);
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 4);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 1);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterF2W run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step247 (HANDLE& device) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 19);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 19);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, 19);
  CSB_Write(device, 10, 146376704);
  CSB_Write(device, 11, 66055168);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 153389056);
  CSB_Write(device, 14, 7);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 3946496);
  CSB_Write(device, 27, 145328128);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 1216);
  CSB_Write(device, 30, 1216);
  CSB_Write(device, 31, 1216);
  CSB_Write(device, 32, 1216);
  CSB_Write(device, 33, 1823);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step248 (HANDLE& device) {
// accel.hbm.layer_norm accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 3962880);
  CSB_Write(device, 195, 153389056);
  CSB_Write(device, 196, 1216);
  CSB_Write(device, 197, 1216);
  CSB_Write(device, 198, 145328128);
  CSB_Write(device, 199, 1216);
  CSB_Write(device, 200, 1216);
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, 19);
  CSB_Write(device, 204, 19);
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 1);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step249 (HANDLE& device) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 19);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 19);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, 19);
  CSB_Write(device, 10, 145328128);
  CSB_Write(device, 11, 67229440);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 146376704);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 4034048);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 1216);
  CSB_Write(device, 30, 1216);
  CSB_Write(device, 31, 1216);
  CSB_Write(device, 32, 1216);
  CSB_Write(device, 33, 799);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step250 (HANDLE& device) {
// accel.hbm.activate accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 32768);
  CSB_Write(device, 195, 146376704);
  CSB_Write(device, 196, 1216);
  CSB_Write(device, 197, 1216);
  CSB_Write(device, 198, 149882880);
  CSB_Write(device, 199, 1216);
  CSB_Write(device, 200, 1216);
  CSB_Write(device, 201, 428);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, 19);
  CSB_Write(device, 204, 19);
  CSB_Write(device, 205, 428);
  CSB_Write(device, 206, 13696);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 16);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.activate run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step251 (HANDLE& device) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 19);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 19);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, 19);
  CSB_Write(device, 10, 145328128);
  CSB_Write(device, 11, 66325504);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 146376704);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 2);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 3979264);
  CSB_Write(device, 27, 149882880);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 1216);
  CSB_Write(device, 30, 1216);
  CSB_Write(device, 31, 1216);
  CSB_Write(device, 32, 1216);
  CSB_Write(device, 33, 1823);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step252 (HANDLE& device) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 13696);
  CSB_Write(device, 3, 19);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 19);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 128);
  CSB_Write(device, 8, 128);
  CSB_Write(device, 9, 19);
  CSB_Write(device, 10, 146376704);
  CSB_Write(device, 11, 68133376);
  CSB_Write(device, 12, 56576);
  CSB_Write(device, 13, 145328128);
  CSB_Write(device, 14, 31);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 4088832);
  CSB_Write(device, 27, 153389056);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 1216);
  CSB_Write(device, 30, 1216);
  CSB_Write(device, 31, 1216);
  CSB_Write(device, 32, 1216);
  CSB_Write(device, 33, 1823);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step253 (HANDLE& device) {
// accel.hbm.layer_norm accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 4105216);
  CSB_Write(device, 195, 145328128);
  CSB_Write(device, 196, 1216);
  CSB_Write(device, 197, 1216);
  CSB_Write(device, 198, 153389056);
  CSB_Write(device, 199, 1216);
  CSB_Write(device, 200, 1216);
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, 19);
  CSB_Write(device, 204, 19);
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step254 (HANDLE& device) {
// accel.hbm.mvm_bn accel operator node, storage data in cache84 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 19);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 19);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, 19);
  CSB_Write(device, 10, 153389056);
  CSB_Write(device, 11, 69038592);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 114591744);
  CSB_Write(device, 14, 8);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 4121600);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 1216);
  CSB_Write(device, 30, 1216);
  CSB_Write(device, 31, 8192);
  CSB_Write(device, 32, 8192);
  CSB_Write(device, 33, 799);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step255 (HANDLE& device) {
// accel.hbm.pos_emb accel operator node, storage data in cache85 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 0);
  CSB_Write(device, 195, 114591744);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 115771392);
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, 19);
  CSB_Write(device, 203, 34);
  CSB_Write(device, 204, 8192);
  CSB_Write(device, 205, 0);
  CSB_Write(device, 206, 0);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step256 (HANDLE& device) {
// accel.hbm.mvm_afterTRP accel operator node, storage data in cache86 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 116819968);
  CSB_Write(device, 195, 115771392);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 116885504);
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, 19);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, 19);
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 11688);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 2);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterTRP run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step257 (HANDLE& device) {
// accel.hbm.softmax accel operator node, storage data in cache87 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 1);
  CSB_Write(device, 195, 116885504);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 117934080);
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 1);
  CSB_Write(device, 202, 32);
  CSB_Write(device, 203, 19);
  CSB_Write(device, 204, 19);
  CSB_Write(device, 205, 19);
  CSB_Write(device, 206, 0);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 8);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.softmax run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step258 (HANDLE& device) {
// accel.hbm.mvm_afterF2W accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 115705856);
  CSB_Write(device, 195, 117934080);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 153389056);
  CSB_Write(device, 199, 4864);
  CSB_Write(device, 200, 1216);
  CSB_Write(device, 201, 1);
  CSB_Write(device, 202, 19);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, 19);
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 4);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 1);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterF2W run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step259 (HANDLE& device) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 19);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 19);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, 19);
  CSB_Write(device, 10, 153389056);
  CSB_Write(device, 11, 69342720);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 146376704);
  CSB_Write(device, 14, 7);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 4140032);
  CSB_Write(device, 27, 145328128);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 1216);
  CSB_Write(device, 30, 1216);
  CSB_Write(device, 31, 1216);
  CSB_Write(device, 32, 1216);
  CSB_Write(device, 33, 1823);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step260 (HANDLE& device) {
// accel.hbm.layer_norm accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 4156416);
  CSB_Write(device, 195, 146376704);
  CSB_Write(device, 196, 1216);
  CSB_Write(device, 197, 1216);
  CSB_Write(device, 198, 145328128);
  CSB_Write(device, 199, 1216);
  CSB_Write(device, 200, 1216);
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, 19);
  CSB_Write(device, 204, 19);
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 1);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step261 (HANDLE& device) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 19);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 19);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, 19);
  CSB_Write(device, 10, 145328128);
  CSB_Write(device, 11, 70516992);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 153389056);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 4227584);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 1216);
  CSB_Write(device, 30, 1216);
  CSB_Write(device, 31, 1216);
  CSB_Write(device, 32, 1216);
  CSB_Write(device, 33, 799);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step262 (HANDLE& device) {
// accel.hbm.activate accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 32768);
  CSB_Write(device, 195, 153389056);
  CSB_Write(device, 196, 1216);
  CSB_Write(device, 197, 1216);
  CSB_Write(device, 198, 149882880);
  CSB_Write(device, 199, 1216);
  CSB_Write(device, 200, 1216);
  CSB_Write(device, 201, 428);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, 19);
  CSB_Write(device, 204, 19);
  CSB_Write(device, 205, 428);
  CSB_Write(device, 206, 13696);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 16);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.activate run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step263 (HANDLE& device) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 19);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 19);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, 19);
  CSB_Write(device, 10, 145328128);
  CSB_Write(device, 11, 69613056);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 153389056);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 2);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 4172800);
  CSB_Write(device, 27, 149882880);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 1216);
  CSB_Write(device, 30, 1216);
  CSB_Write(device, 31, 1216);
  CSB_Write(device, 32, 1216);
  CSB_Write(device, 33, 1823);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step264 (HANDLE& device) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 13696);
  CSB_Write(device, 3, 19);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 19);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 128);
  CSB_Write(device, 8, 128);
  CSB_Write(device, 9, 19);
  CSB_Write(device, 10, 153389056);
  CSB_Write(device, 11, 71420928);
  CSB_Write(device, 12, 56576);
  CSB_Write(device, 13, 145328128);
  CSB_Write(device, 14, 31);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 4282368);
  CSB_Write(device, 27, 146376704);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 1216);
  CSB_Write(device, 30, 1216);
  CSB_Write(device, 31, 1216);
  CSB_Write(device, 32, 1216);
  CSB_Write(device, 33, 1823);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step265 (HANDLE& device) {
// accel.hbm.layer_norm accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 4298752);
  CSB_Write(device, 195, 145328128);
  CSB_Write(device, 196, 1216);
  CSB_Write(device, 197, 1216);
  CSB_Write(device, 198, 146376704);
  CSB_Write(device, 199, 1216);
  CSB_Write(device, 200, 1216);
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, 19);
  CSB_Write(device, 204, 19);
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step266 (HANDLE& device) {
// accel.hbm.mvm_bn accel operator node, storage data in cache88 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 19);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 19);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, 19);
  CSB_Write(device, 10, 146376704);
  CSB_Write(device, 11, 72326144);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 118982656);
  CSB_Write(device, 14, 8);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 4315136);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 1216);
  CSB_Write(device, 30, 1216);
  CSB_Write(device, 31, 8192);
  CSB_Write(device, 32, 8192);
  CSB_Write(device, 33, 799);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step267 (HANDLE& device) {
// accel.hbm.pos_emb accel operator node, storage data in cache89 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 0);
  CSB_Write(device, 195, 118982656);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 120162304);
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, 19);
  CSB_Write(device, 203, 34);
  CSB_Write(device, 204, 8192);
  CSB_Write(device, 205, 0);
  CSB_Write(device, 206, 0);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step268 (HANDLE& device) {
// accel.hbm.mvm_afterTRP accel operator node, storage data in cache90 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 121210880);
  CSB_Write(device, 195, 120162304);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 121276416);
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, 19);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, 19);
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 11688);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 2);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterTRP run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step269 (HANDLE& device) {
// accel.hbm.softmax accel operator node, storage data in cache91 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 1);
  CSB_Write(device, 195, 121276416);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 122324992);
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 1);
  CSB_Write(device, 202, 32);
  CSB_Write(device, 203, 19);
  CSB_Write(device, 204, 19);
  CSB_Write(device, 205, 19);
  CSB_Write(device, 206, 0);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 8);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.softmax run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step270 (HANDLE& device) {
// accel.hbm.mvm_afterF2W accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 120096768);
  CSB_Write(device, 195, 122324992);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 146376704);
  CSB_Write(device, 199, 4864);
  CSB_Write(device, 200, 1216);
  CSB_Write(device, 201, 1);
  CSB_Write(device, 202, 19);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, 19);
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 4);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 1);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterF2W run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step271 (HANDLE& device) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 19);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 19);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, 19);
  CSB_Write(device, 10, 146376704);
  CSB_Write(device, 11, 72630272);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 153389056);
  CSB_Write(device, 14, 7);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 4333568);
  CSB_Write(device, 27, 145328128);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 1216);
  CSB_Write(device, 30, 1216);
  CSB_Write(device, 31, 1216);
  CSB_Write(device, 32, 1216);
  CSB_Write(device, 33, 1823);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step272 (HANDLE& device) {
// accel.hbm.layer_norm accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 4349952);
  CSB_Write(device, 195, 153389056);
  CSB_Write(device, 196, 1216);
  CSB_Write(device, 197, 1216);
  CSB_Write(device, 198, 145328128);
  CSB_Write(device, 199, 1216);
  CSB_Write(device, 200, 1216);
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, 19);
  CSB_Write(device, 204, 19);
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 1);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step273 (HANDLE& device) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 19);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 19);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, 19);
  CSB_Write(device, 10, 145328128);
  CSB_Write(device, 11, 73804544);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 146376704);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 4421120);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 1216);
  CSB_Write(device, 30, 1216);
  CSB_Write(device, 31, 1216);
  CSB_Write(device, 32, 1216);
  CSB_Write(device, 33, 799);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step274 (HANDLE& device) {
// accel.hbm.activate accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 32768);
  CSB_Write(device, 195, 146376704);
  CSB_Write(device, 196, 1216);
  CSB_Write(device, 197, 1216);
  CSB_Write(device, 198, 149882880);
  CSB_Write(device, 199, 1216);
  CSB_Write(device, 200, 1216);
  CSB_Write(device, 201, 428);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, 19);
  CSB_Write(device, 204, 19);
  CSB_Write(device, 205, 428);
  CSB_Write(device, 206, 13696);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 16);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.activate run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step275 (HANDLE& device) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 19);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 19);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, 19);
  CSB_Write(device, 10, 145328128);
  CSB_Write(device, 11, 72900608);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 146376704);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 2);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 4366336);
  CSB_Write(device, 27, 149882880);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 1216);
  CSB_Write(device, 30, 1216);
  CSB_Write(device, 31, 1216);
  CSB_Write(device, 32, 1216);
  CSB_Write(device, 33, 1823);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step276 (HANDLE& device) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 13696);
  CSB_Write(device, 3, 19);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 19);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 128);
  CSB_Write(device, 8, 128);
  CSB_Write(device, 9, 19);
  CSB_Write(device, 10, 146376704);
  CSB_Write(device, 11, 74708480);
  CSB_Write(device, 12, 56576);
  CSB_Write(device, 13, 145328128);
  CSB_Write(device, 14, 31);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 4475904);
  CSB_Write(device, 27, 153389056);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 1216);
  CSB_Write(device, 30, 1216);
  CSB_Write(device, 31, 1216);
  CSB_Write(device, 32, 1216);
  CSB_Write(device, 33, 1823);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step277 (HANDLE& device) {
// accel.hbm.layer_norm accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 4492288);
  CSB_Write(device, 195, 145328128);
  CSB_Write(device, 196, 1216);
  CSB_Write(device, 197, 1216);
  CSB_Write(device, 198, 153389056);
  CSB_Write(device, 199, 1216);
  CSB_Write(device, 200, 1216);
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, 19);
  CSB_Write(device, 204, 19);
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step278 (HANDLE& device) {
// accel.hbm.mvm_bn accel operator node, storage data in cache92 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 19);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 19);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, 19);
  CSB_Write(device, 10, 153389056);
  CSB_Write(device, 11, 75613696);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 123373568);
  CSB_Write(device, 14, 8);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 4508672);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 1216);
  CSB_Write(device, 30, 1216);
  CSB_Write(device, 31, 8192);
  CSB_Write(device, 32, 8192);
  CSB_Write(device, 33, 799);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step279 (HANDLE& device) {
// accel.hbm.pos_emb accel operator node, storage data in cache93 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 0);
  CSB_Write(device, 195, 123373568);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 124553216);
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, 19);
  CSB_Write(device, 203, 34);
  CSB_Write(device, 204, 8192);
  CSB_Write(device, 205, 0);
  CSB_Write(device, 206, 0);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step280 (HANDLE& device) {
// accel.hbm.mvm_afterTRP accel operator node, storage data in cache94 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 125601792);
  CSB_Write(device, 195, 124553216);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 125667328);
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, 19);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, 19);
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 11688);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 2);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterTRP run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step281 (HANDLE& device) {
// accel.hbm.softmax accel operator node, storage data in cache95 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 1);
  CSB_Write(device, 195, 125667328);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 126715904);
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 1);
  CSB_Write(device, 202, 32);
  CSB_Write(device, 203, 19);
  CSB_Write(device, 204, 19);
  CSB_Write(device, 205, 19);
  CSB_Write(device, 206, 0);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 8);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.softmax run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step282 (HANDLE& device) {
// accel.hbm.mvm_afterF2W accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 124487680);
  CSB_Write(device, 195, 126715904);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 153389056);
  CSB_Write(device, 199, 4864);
  CSB_Write(device, 200, 1216);
  CSB_Write(device, 201, 1);
  CSB_Write(device, 202, 19);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, 19);
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 4);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 1);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterF2W run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step283 (HANDLE& device) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 19);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 19);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, 19);
  CSB_Write(device, 10, 153389056);
  CSB_Write(device, 11, 75917824);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 146376704);
  CSB_Write(device, 14, 7);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 4527104);
  CSB_Write(device, 27, 145328128);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 1216);
  CSB_Write(device, 30, 1216);
  CSB_Write(device, 31, 1216);
  CSB_Write(device, 32, 1216);
  CSB_Write(device, 33, 1823);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step284 (HANDLE& device) {
// accel.hbm.layer_norm accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 4543488);
  CSB_Write(device, 195, 146376704);
  CSB_Write(device, 196, 1216);
  CSB_Write(device, 197, 1216);
  CSB_Write(device, 198, 145328128);
  CSB_Write(device, 199, 1216);
  CSB_Write(device, 200, 1216);
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, 19);
  CSB_Write(device, 204, 19);
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 1);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step285 (HANDLE& device) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 19);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 19);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, 19);
  CSB_Write(device, 10, 145328128);
  CSB_Write(device, 11, 77092096);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 153389056);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 4614656);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 1216);
  CSB_Write(device, 30, 1216);
  CSB_Write(device, 31, 1216);
  CSB_Write(device, 32, 1216);
  CSB_Write(device, 33, 799);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step286 (HANDLE& device) {
// accel.hbm.activate accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 32768);
  CSB_Write(device, 195, 153389056);
  CSB_Write(device, 196, 1216);
  CSB_Write(device, 197, 1216);
  CSB_Write(device, 198, 149882880);
  CSB_Write(device, 199, 1216);
  CSB_Write(device, 200, 1216);
  CSB_Write(device, 201, 428);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, 19);
  CSB_Write(device, 204, 19);
  CSB_Write(device, 205, 428);
  CSB_Write(device, 206, 13696);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 16);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.activate run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step287 (HANDLE& device) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 19);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 19);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, 19);
  CSB_Write(device, 10, 145328128);
  CSB_Write(device, 11, 76188160);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 153389056);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 2);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 4559872);
  CSB_Write(device, 27, 149882880);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 1216);
  CSB_Write(device, 30, 1216);
  CSB_Write(device, 31, 1216);
  CSB_Write(device, 32, 1216);
  CSB_Write(device, 33, 1823);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step288 (HANDLE& device) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 13696);
  CSB_Write(device, 3, 19);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 19);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 128);
  CSB_Write(device, 8, 128);
  CSB_Write(device, 9, 19);
  CSB_Write(device, 10, 153389056);
  CSB_Write(device, 11, 77996032);
  CSB_Write(device, 12, 56576);
  CSB_Write(device, 13, 145328128);
  CSB_Write(device, 14, 31);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 4669440);
  CSB_Write(device, 27, 146376704);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 1216);
  CSB_Write(device, 30, 1216);
  CSB_Write(device, 31, 1216);
  CSB_Write(device, 32, 1216);
  CSB_Write(device, 33, 1823);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step289 (HANDLE& device) {
// accel.hbm.layer_norm accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 4685824);
  CSB_Write(device, 195, 145328128);
  CSB_Write(device, 196, 1216);
  CSB_Write(device, 197, 1216);
  CSB_Write(device, 198, 146376704);
  CSB_Write(device, 199, 1216);
  CSB_Write(device, 200, 1216);
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, 19);
  CSB_Write(device, 204, 19);
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step290 (HANDLE& device) {
// accel.hbm.mvm_bn accel operator node, storage data in cache96 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 19);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 19);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, 19);
  CSB_Write(device, 10, 146376704);
  CSB_Write(device, 11, 78901248);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 127764480);
  CSB_Write(device, 14, 8);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 4702208);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 1216);
  CSB_Write(device, 30, 1216);
  CSB_Write(device, 31, 8192);
  CSB_Write(device, 32, 8192);
  CSB_Write(device, 33, 799);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step291 (HANDLE& device) {
// accel.hbm.pos_emb accel operator node, storage data in cache97 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 0);
  CSB_Write(device, 195, 127764480);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 128944128);
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, 19);
  CSB_Write(device, 203, 34);
  CSB_Write(device, 204, 8192);
  CSB_Write(device, 205, 0);
  CSB_Write(device, 206, 0);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step292 (HANDLE& device) {
// accel.hbm.mvm_afterTRP accel operator node, storage data in cache98 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 129992704);
  CSB_Write(device, 195, 128944128);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 130058240);
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, 19);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, 19);
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 11688);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 2);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterTRP run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step293 (HANDLE& device) {
// accel.hbm.softmax accel operator node, storage data in cache99 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 1);
  CSB_Write(device, 195, 130058240);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 131106816);
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 1);
  CSB_Write(device, 202, 32);
  CSB_Write(device, 203, 19);
  CSB_Write(device, 204, 19);
  CSB_Write(device, 205, 19);
  CSB_Write(device, 206, 0);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 8);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.softmax run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step294 (HANDLE& device) {
// accel.hbm.mvm_afterF2W accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 128878592);
  CSB_Write(device, 195, 131106816);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 146376704);
  CSB_Write(device, 199, 4864);
  CSB_Write(device, 200, 1216);
  CSB_Write(device, 201, 1);
  CSB_Write(device, 202, 19);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, 19);
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 4);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 1);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterF2W run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step295 (HANDLE& device) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 19);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 19);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, 19);
  CSB_Write(device, 10, 146376704);
  CSB_Write(device, 11, 79205376);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 153389056);
  CSB_Write(device, 14, 7);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 4720640);
  CSB_Write(device, 27, 145328128);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 1216);
  CSB_Write(device, 30, 1216);
  CSB_Write(device, 31, 1216);
  CSB_Write(device, 32, 1216);
  CSB_Write(device, 33, 1823);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step296 (HANDLE& device) {
// accel.hbm.layer_norm accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 4737024);
  CSB_Write(device, 195, 153389056);
  CSB_Write(device, 196, 1216);
  CSB_Write(device, 197, 1216);
  CSB_Write(device, 198, 145328128);
  CSB_Write(device, 199, 1216);
  CSB_Write(device, 200, 1216);
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, 19);
  CSB_Write(device, 204, 19);
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 1);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step297 (HANDLE& device) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 19);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 19);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, 19);
  CSB_Write(device, 10, 145328128);
  CSB_Write(device, 11, 80379648);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 146376704);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 4808192);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 1216);
  CSB_Write(device, 30, 1216);
  CSB_Write(device, 31, 1216);
  CSB_Write(device, 32, 1216);
  CSB_Write(device, 33, 799);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step298 (HANDLE& device) {
// accel.hbm.activate accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 32768);
  CSB_Write(device, 195, 146376704);
  CSB_Write(device, 196, 1216);
  CSB_Write(device, 197, 1216);
  CSB_Write(device, 198, 149882880);
  CSB_Write(device, 199, 1216);
  CSB_Write(device, 200, 1216);
  CSB_Write(device, 201, 428);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, 19);
  CSB_Write(device, 204, 19);
  CSB_Write(device, 205, 428);
  CSB_Write(device, 206, 13696);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 16);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.activate run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step299 (HANDLE& device) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 19);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 19);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, 19);
  CSB_Write(device, 10, 145328128);
  CSB_Write(device, 11, 79475712);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 146376704);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 2);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 4753408);
  CSB_Write(device, 27, 149882880);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 1216);
  CSB_Write(device, 30, 1216);
  CSB_Write(device, 31, 1216);
  CSB_Write(device, 32, 1216);
  CSB_Write(device, 33, 1823);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step300 (HANDLE& device) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 13696);
  CSB_Write(device, 3, 19);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 19);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 128);
  CSB_Write(device, 8, 128);
  CSB_Write(device, 9, 19);
  CSB_Write(device, 10, 146376704);
  CSB_Write(device, 11, 81283584);
  CSB_Write(device, 12, 56576);
  CSB_Write(device, 13, 145328128);
  CSB_Write(device, 14, 31);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 4862976);
  CSB_Write(device, 27, 153389056);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 1216);
  CSB_Write(device, 30, 1216);
  CSB_Write(device, 31, 1216);
  CSB_Write(device, 32, 1216);
  CSB_Write(device, 33, 1823);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step301 (HANDLE& device) {
// accel.hbm.layer_norm accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 4879360);
  CSB_Write(device, 195, 145328128);
  CSB_Write(device, 196, 1216);
  CSB_Write(device, 197, 1216);
  CSB_Write(device, 198, 153389056);
  CSB_Write(device, 199, 1216);
  CSB_Write(device, 200, 1216);
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, 19);
  CSB_Write(device, 204, 19);
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step302 (HANDLE& device) {
// accel.hbm.mvm_bn accel operator node, storage data in cache100 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 19);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 19);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, 19);
  CSB_Write(device, 10, 153389056);
  CSB_Write(device, 11, 82188800);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 132155392);
  CSB_Write(device, 14, 8);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 4895744);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 1216);
  CSB_Write(device, 30, 1216);
  CSB_Write(device, 31, 8192);
  CSB_Write(device, 32, 8192);
  CSB_Write(device, 33, 799);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step303 (HANDLE& device) {
// accel.hbm.pos_emb accel operator node, storage data in cache101 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 0);
  CSB_Write(device, 195, 132155392);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 133335040);
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, 19);
  CSB_Write(device, 203, 34);
  CSB_Write(device, 204, 8192);
  CSB_Write(device, 205, 0);
  CSB_Write(device, 206, 0);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step304 (HANDLE& device) {
// accel.hbm.mvm_afterTRP accel operator node, storage data in cache102 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 134383616);
  CSB_Write(device, 195, 133335040);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 134449152);
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, 19);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, 19);
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 11688);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 2);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterTRP run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step305 (HANDLE& device) {
// accel.hbm.softmax accel operator node, storage data in cache103 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 1);
  CSB_Write(device, 195, 134449152);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 135497728);
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 1);
  CSB_Write(device, 202, 32);
  CSB_Write(device, 203, 19);
  CSB_Write(device, 204, 19);
  CSB_Write(device, 205, 19);
  CSB_Write(device, 206, 0);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 8);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.softmax run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step306 (HANDLE& device) {
// accel.hbm.mvm_afterF2W accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 133269504);
  CSB_Write(device, 195, 135497728);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 153389056);
  CSB_Write(device, 199, 4864);
  CSB_Write(device, 200, 1216);
  CSB_Write(device, 201, 1);
  CSB_Write(device, 202, 19);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, 19);
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 4);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 1);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterF2W run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step307 (HANDLE& device) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 19);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 19);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, 19);
  CSB_Write(device, 10, 153389056);
  CSB_Write(device, 11, 82492928);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 146376704);
  CSB_Write(device, 14, 7);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 4914176);
  CSB_Write(device, 27, 145328128);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 1216);
  CSB_Write(device, 30, 1216);
  CSB_Write(device, 31, 1216);
  CSB_Write(device, 32, 1216);
  CSB_Write(device, 33, 1823);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step308 (HANDLE& device) {
// accel.hbm.layer_norm accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 4930560);
  CSB_Write(device, 195, 146376704);
  CSB_Write(device, 196, 1216);
  CSB_Write(device, 197, 1216);
  CSB_Write(device, 198, 145328128);
  CSB_Write(device, 199, 1216);
  CSB_Write(device, 200, 1216);
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, 19);
  CSB_Write(device, 204, 19);
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 1);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step309 (HANDLE& device) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 19);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 19);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, 19);
  CSB_Write(device, 10, 145328128);
  CSB_Write(device, 11, 83667200);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 153389056);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 5001728);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 1216);
  CSB_Write(device, 30, 1216);
  CSB_Write(device, 31, 1216);
  CSB_Write(device, 32, 1216);
  CSB_Write(device, 33, 799);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step310 (HANDLE& device) {
// accel.hbm.activate accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 32768);
  CSB_Write(device, 195, 153389056);
  CSB_Write(device, 196, 1216);
  CSB_Write(device, 197, 1216);
  CSB_Write(device, 198, 149882880);
  CSB_Write(device, 199, 1216);
  CSB_Write(device, 200, 1216);
  CSB_Write(device, 201, 428);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, 19);
  CSB_Write(device, 204, 19);
  CSB_Write(device, 205, 428);
  CSB_Write(device, 206, 13696);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 16);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.activate run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step311 (HANDLE& device) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 19);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 19);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, 19);
  CSB_Write(device, 10, 145328128);
  CSB_Write(device, 11, 82763264);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 153389056);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 2);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 4946944);
  CSB_Write(device, 27, 149882880);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 1216);
  CSB_Write(device, 30, 1216);
  CSB_Write(device, 31, 1216);
  CSB_Write(device, 32, 1216);
  CSB_Write(device, 33, 1823);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step312 (HANDLE& device) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 13696);
  CSB_Write(device, 3, 19);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 19);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 128);
  CSB_Write(device, 8, 128);
  CSB_Write(device, 9, 19);
  CSB_Write(device, 10, 153389056);
  CSB_Write(device, 11, 84571136);
  CSB_Write(device, 12, 56576);
  CSB_Write(device, 13, 145328128);
  CSB_Write(device, 14, 31);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 5056512);
  CSB_Write(device, 27, 146376704);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 1216);
  CSB_Write(device, 30, 1216);
  CSB_Write(device, 31, 1216);
  CSB_Write(device, 32, 1216);
  CSB_Write(device, 33, 1823);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step313 (HANDLE& device) {
// accel.hbm.layer_norm accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 5072896);
  CSB_Write(device, 195, 145328128);
  CSB_Write(device, 196, 1216);
  CSB_Write(device, 197, 1216);
  CSB_Write(device, 198, 146376704);
  CSB_Write(device, 199, 1216);
  CSB_Write(device, 200, 1216);
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, 19);
  CSB_Write(device, 204, 19);
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step314 (HANDLE& device) {
// accel.hbm.mvm_bn accel operator node, storage data in cache104 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 19);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 19);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, 19);
  CSB_Write(device, 10, 146376704);
  CSB_Write(device, 11, 85476352);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 136546304);
  CSB_Write(device, 14, 8);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 5089280);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 1216);
  CSB_Write(device, 30, 1216);
  CSB_Write(device, 31, 8192);
  CSB_Write(device, 32, 8192);
  CSB_Write(device, 33, 799);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step315 (HANDLE& device) {
// accel.hbm.pos_emb accel operator node, storage data in cache105 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 0);
  CSB_Write(device, 195, 136546304);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 137725952);
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, 19);
  CSB_Write(device, 203, 34);
  CSB_Write(device, 204, 8192);
  CSB_Write(device, 205, 0);
  CSB_Write(device, 206, 0);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step316 (HANDLE& device) {
// accel.hbm.mvm_afterTRP accel operator node, storage data in cache106 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 138774528);
  CSB_Write(device, 195, 137725952);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 138840064);
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, 19);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, 19);
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 11688);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 2);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterTRP run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step317 (HANDLE& device) {
// accel.hbm.softmax accel operator node, storage data in cache107 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 1);
  CSB_Write(device, 195, 138840064);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 139888640);
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 1);
  CSB_Write(device, 202, 32);
  CSB_Write(device, 203, 19);
  CSB_Write(device, 204, 19);
  CSB_Write(device, 205, 19);
  CSB_Write(device, 206, 0);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 8);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.softmax run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step318 (HANDLE& device) {
// accel.hbm.mvm_afterF2W accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 137660416);
  CSB_Write(device, 195, 139888640);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 146376704);
  CSB_Write(device, 199, 4864);
  CSB_Write(device, 200, 1216);
  CSB_Write(device, 201, 1);
  CSB_Write(device, 202, 19);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, 19);
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 4);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 1);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterF2W run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step319 (HANDLE& device) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 19);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 19);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, 19);
  CSB_Write(device, 10, 146376704);
  CSB_Write(device, 11, 85780480);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 153389056);
  CSB_Write(device, 14, 7);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 5107712);
  CSB_Write(device, 27, 145328128);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 1216);
  CSB_Write(device, 30, 1216);
  CSB_Write(device, 31, 1216);
  CSB_Write(device, 32, 1216);
  CSB_Write(device, 33, 1823);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step320 (HANDLE& device) {
// accel.hbm.layer_norm accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 5124096);
  CSB_Write(device, 195, 153389056);
  CSB_Write(device, 196, 1216);
  CSB_Write(device, 197, 1216);
  CSB_Write(device, 198, 145328128);
  CSB_Write(device, 199, 1216);
  CSB_Write(device, 200, 1216);
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, 19);
  CSB_Write(device, 204, 19);
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 1);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step321 (HANDLE& device) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 19);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 19);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, 19);
  CSB_Write(device, 10, 145328128);
  CSB_Write(device, 11, 86954752);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 146376704);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 5195264);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 1216);
  CSB_Write(device, 30, 1216);
  CSB_Write(device, 31, 1216);
  CSB_Write(device, 32, 1216);
  CSB_Write(device, 33, 799);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step322 (HANDLE& device) {
// accel.hbm.activate accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 32768);
  CSB_Write(device, 195, 146376704);
  CSB_Write(device, 196, 1216);
  CSB_Write(device, 197, 1216);
  CSB_Write(device, 198, 149882880);
  CSB_Write(device, 199, 1216);
  CSB_Write(device, 200, 1216);
  CSB_Write(device, 201, 428);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, 19);
  CSB_Write(device, 204, 19);
  CSB_Write(device, 205, 428);
  CSB_Write(device, 206, 13696);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 16);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.activate run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step323 (HANDLE& device) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 19);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 19);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, 19);
  CSB_Write(device, 10, 145328128);
  CSB_Write(device, 11, 86050816);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 146376704);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 2);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 5140480);
  CSB_Write(device, 27, 149882880);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 1216);
  CSB_Write(device, 30, 1216);
  CSB_Write(device, 31, 1216);
  CSB_Write(device, 32, 1216);
  CSB_Write(device, 33, 1823);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step324 (HANDLE& device) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 13696);
  CSB_Write(device, 3, 19);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 19);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 128);
  CSB_Write(device, 8, 128);
  CSB_Write(device, 9, 19);
  CSB_Write(device, 10, 146376704);
  CSB_Write(device, 11, 87858688);
  CSB_Write(device, 12, 56576);
  CSB_Write(device, 13, 145328128);
  CSB_Write(device, 14, 31);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 5250048);
  CSB_Write(device, 27, 153389056);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 1216);
  CSB_Write(device, 30, 1216);
  CSB_Write(device, 31, 1216);
  CSB_Write(device, 32, 1216);
  CSB_Write(device, 33, 1823);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step325 (HANDLE& device) {
// accel.hbm.layer_norm accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 5266432);
  CSB_Write(device, 195, 145328128);
  CSB_Write(device, 196, 1216);
  CSB_Write(device, 197, 1216);
  CSB_Write(device, 198, 153389056);
  CSB_Write(device, 199, 1216);
  CSB_Write(device, 200, 1216);
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, 19);
  CSB_Write(device, 204, 19);
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step326 (HANDLE& device) {
// accel.hbm.mvm_bn accel operator node, storage data in cache108 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 19);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 19);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, 19);
  CSB_Write(device, 10, 153389056);
  CSB_Write(device, 11, 88763904);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 140937216);
  CSB_Write(device, 14, 8);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 5282816);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 1216);
  CSB_Write(device, 30, 1216);
  CSB_Write(device, 31, 8192);
  CSB_Write(device, 32, 8192);
  CSB_Write(device, 33, 799);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step327 (HANDLE& device) {
// accel.hbm.pos_emb accel operator node, storage data in cache109 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 0);
  CSB_Write(device, 195, 140937216);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 142116864);
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, 19);
  CSB_Write(device, 203, 34);
  CSB_Write(device, 204, 8192);
  CSB_Write(device, 205, 0);
  CSB_Write(device, 206, 0);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step328 (HANDLE& device) {
// accel.hbm.mvm_afterTRP accel operator node, storage data in cache110 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 143165440);
  CSB_Write(device, 195, 142116864);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 143230976);
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, 19);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, 19);
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 11688);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 2);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterTRP run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step329 (HANDLE& device) {
// accel.hbm.softmax accel operator node, storage data in cache111 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 1);
  CSB_Write(device, 195, 143230976);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 144279552);
  CSB_Write(device, 199, 32768);
  CSB_Write(device, 200, 8192);
  CSB_Write(device, 201, 1);
  CSB_Write(device, 202, 32);
  CSB_Write(device, 203, 19);
  CSB_Write(device, 204, 19);
  CSB_Write(device, 205, 19);
  CSB_Write(device, 206, 0);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 8);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.softmax run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step330 (HANDLE& device) {
// accel.hbm.mvm_afterF2W accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 142051328);
  CSB_Write(device, 195, 144279552);
  CSB_Write(device, 196, 32768);
  CSB_Write(device, 197, 8192);
  CSB_Write(device, 198, 153389056);
  CSB_Write(device, 199, 4864);
  CSB_Write(device, 200, 1216);
  CSB_Write(device, 201, 1);
  CSB_Write(device, 202, 19);
  CSB_Write(device, 203, 2);
  CSB_Write(device, 204, 19);
  CSB_Write(device, 205, 32);
  CSB_Write(device, 206, 15);
  CSB_Write(device, 207, 4);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 1);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterF2W run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step331 (HANDLE& device) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 19);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 19);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, 19);
  CSB_Write(device, 10, 153389056);
  CSB_Write(device, 11, 89068032);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 146376704);
  CSB_Write(device, 14, 7);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 5301248);
  CSB_Write(device, 27, 145328128);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 1216);
  CSB_Write(device, 30, 1216);
  CSB_Write(device, 31, 1216);
  CSB_Write(device, 32, 1216);
  CSB_Write(device, 33, 1823);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step332 (HANDLE& device) {
// accel.hbm.layer_norm accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 5317632);
  CSB_Write(device, 195, 146376704);
  CSB_Write(device, 196, 1216);
  CSB_Write(device, 197, 1216);
  CSB_Write(device, 198, 145328128);
  CSB_Write(device, 199, 1216);
  CSB_Write(device, 200, 1216);
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, 19);
  CSB_Write(device, 204, 19);
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 1);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step333 (HANDLE& device) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 19);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 19);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, 19);
  CSB_Write(device, 10, 145328128);
  CSB_Write(device, 11, 90242304);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 153389056);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 5388800);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 1216);
  CSB_Write(device, 30, 1216);
  CSB_Write(device, 31, 1216);
  CSB_Write(device, 32, 1216);
  CSB_Write(device, 33, 799);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step334 (HANDLE& device) {
// accel.hbm.activate accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 32768);
  CSB_Write(device, 195, 153389056);
  CSB_Write(device, 196, 1216);
  CSB_Write(device, 197, 1216);
  CSB_Write(device, 198, 149882880);
  CSB_Write(device, 199, 1216);
  CSB_Write(device, 200, 1216);
  CSB_Write(device, 201, 428);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, 19);
  CSB_Write(device, 204, 19);
  CSB_Write(device, 205, 428);
  CSB_Write(device, 206, 13696);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 16);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.activate run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step335 (HANDLE& device) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 19);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 19);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, 19);
  CSB_Write(device, 10, 145328128);
  CSB_Write(device, 11, 89338368);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 153389056);
  CSB_Write(device, 14, 26);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 2);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 5334016);
  CSB_Write(device, 27, 149882880);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 1216);
  CSB_Write(device, 30, 1216);
  CSB_Write(device, 31, 1216);
  CSB_Write(device, 32, 1216);
  CSB_Write(device, 33, 1823);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step336 (HANDLE& device) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 13696);
  CSB_Write(device, 3, 19);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 19);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 128);
  CSB_Write(device, 8, 128);
  CSB_Write(device, 9, 19);
  CSB_Write(device, 10, 153389056);
  CSB_Write(device, 11, 91146240);
  CSB_Write(device, 12, 56576);
  CSB_Write(device, 13, 145328128);
  CSB_Write(device, 14, 31);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 5443584);
  CSB_Write(device, 27, 146376704);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 1216);
  CSB_Write(device, 30, 1216);
  CSB_Write(device, 31, 1216);
  CSB_Write(device, 32, 1216);
  CSB_Write(device, 33, 1823);
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step337 (HANDLE& device) {
// accel.hbm.layer_norm accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 5459968);
  CSB_Write(device, 195, 145328128);
  CSB_Write(device, 196, 1216);
  CSB_Write(device, 197, 1216);
  CSB_Write(device, 198, 146376704);
  CSB_Write(device, 199, 1216);
  CSB_Write(device, 200, 1216);
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, 19);
  CSB_Write(device, 204, 19);
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void test_step338 (HANDLE& device) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 19);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 19);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 512);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, 19);
  CSB_Write(device, 10, 146376704);
  CSB_Write(device, 11, 92051456);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 153389056);
  CSB_Write(device, 14, 126);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 5476352);
  CSB_Write(device, 27, 5736448);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 1216);
  CSB_Write(device, 30, 1216);
  CSB_Write(device, 31, 1216);
  CSB_Write(device, 32, 1216);
  CSB_Write(device, 60, 145328128);
  CSB_Write(device, 33, 3871);
  while(CSB_Read(device, 61) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}


void chatglm_without_kvcache_block_28_0418_1938(HANDLE& device) {
  test_step1(device);
  test_step2(device);
  test_step3(device);
  test_step4(device);
  test_step5(device);
  test_step6(device);
  test_step7(device);
  test_step8(device);
  test_step9(device);
  test_step10(device);
  test_step11(device);
  test_step12(device);
  test_step13(device);
  test_step14(device);
  test_step15(device);
  test_step16(device);
  test_step17(device);
  test_step18(device);
  test_step19(device);
  test_step20(device);
  test_step21(device);
  test_step22(device);
  test_step23(device);
  test_step24(device);
  test_step25(device);
  test_step26(device);
  test_step27(device);
  test_step28(device);
  test_step29(device);
  test_step30(device);
  test_step31(device);
  test_step32(device);
  test_step33(device);
  test_step34(device);
  test_step35(device);
  test_step36(device);
  test_step37(device);
  test_step38(device);
  test_step39(device);
  test_step40(device);
  test_step41(device);
  test_step42(device);
  test_step43(device);
  test_step44(device);
  test_step45(device);
  test_step46(device);
  test_step47(device);
  test_step48(device);
  test_step49(device);
  test_step50(device);
  test_step51(device);
  test_step52(device);
  test_step53(device);
  test_step54(device);
  test_step55(device);
  test_step56(device);
  test_step57(device);
  test_step58(device);
  test_step59(device);
  test_step60(device);
  test_step61(device);
  test_step62(device);
  test_step63(device);
  test_step64(device);
  test_step65(device);
  test_step66(device);
  test_step67(device);
  test_step68(device);
  test_step69(device);
  test_step70(device);
  test_step71(device);
  test_step72(device);
  test_step73(device);
  test_step74(device);
  test_step75(device);
  test_step76(device);
  test_step77(device);
  test_step78(device);
  test_step79(device);
  test_step80(device);
  test_step81(device);
  test_step82(device);
  test_step83(device);
  test_step84(device);
  test_step85(device);
  test_step86(device);
  test_step87(device);
  test_step88(device);
  test_step89(device);
  test_step90(device);
  test_step91(device);
  test_step92(device);
  test_step93(device);
  test_step94(device);
  test_step95(device);
  test_step96(device);
  test_step97(device);
  test_step98(device);
  test_step99(device);
  test_step100(device);
  test_step101(device);
  test_step102(device);
  test_step103(device);
  test_step104(device);
  test_step105(device);
  test_step106(device);
  test_step107(device);
  test_step108(device);
  test_step109(device);
  test_step110(device);
  test_step111(device);
  test_step112(device);
  test_step113(device);
  test_step114(device);
  test_step115(device);
  test_step116(device);
  test_step117(device);
  test_step118(device);
  test_step119(device);
  test_step120(device);
  test_step121(device);
  test_step122(device);
  test_step123(device);
  test_step124(device);
  test_step125(device);
  test_step126(device);
  test_step127(device);
  test_step128(device);
  test_step129(device);
  test_step130(device);
  test_step131(device);
  test_step132(device);
  test_step133(device);
  test_step134(device);
  test_step135(device);
  test_step136(device);
  test_step137(device);
  test_step138(device);
  test_step139(device);
  test_step140(device);
  test_step141(device);
  test_step142(device);
  test_step143(device);
  test_step144(device);
  test_step145(device);
  test_step146(device);
  test_step147(device);
  test_step148(device);
  test_step149(device);
  test_step150(device);
  test_step151(device);
  test_step152(device);
  test_step153(device);
  test_step154(device);
  test_step155(device);
  test_step156(device);
  test_step157(device);
  test_step158(device);
  test_step159(device);
  test_step160(device);
  test_step161(device);
  test_step162(device);
  test_step163(device);
  test_step164(device);
  test_step165(device);
  test_step166(device);
  test_step167(device);
  test_step168(device);
  test_step169(device);
  test_step170(device);
  test_step171(device);
  test_step172(device);
  test_step173(device);
  test_step174(device);
  test_step175(device);
  test_step176(device);
  test_step177(device);
  test_step178(device);
  test_step179(device);
  test_step180(device);
  test_step181(device);
  test_step182(device);
  test_step183(device);
  test_step184(device);
  test_step185(device);
  test_step186(device);
  test_step187(device);
  test_step188(device);
  test_step189(device);
  test_step190(device);
  test_step191(device);
  test_step192(device);
  test_step193(device);
  test_step194(device);
  test_step195(device);
  test_step196(device);
  test_step197(device);
  test_step198(device);
  test_step199(device);
  test_step200(device);
  test_step201(device);
  test_step202(device);
  test_step203(device);
  test_step204(device);
  test_step205(device);
  test_step206(device);
  test_step207(device);
  test_step208(device);
  test_step209(device);
  test_step210(device);
  test_step211(device);
  test_step212(device);
  test_step213(device);
  test_step214(device);
  test_step215(device);
  test_step216(device);
  test_step217(device);
  test_step218(device);
  test_step219(device);
  test_step220(device);
  test_step221(device);
  test_step222(device);
  test_step223(device);
  test_step224(device);
  test_step225(device);
  test_step226(device);
  test_step227(device);
  test_step228(device);
  test_step229(device);
  test_step230(device);
  test_step231(device);
  test_step232(device);
  test_step233(device);
  test_step234(device);
  test_step235(device);
  test_step236(device);
  test_step237(device);
  test_step238(device);
  test_step239(device);
  test_step240(device);
  test_step241(device);
  test_step242(device);
  test_step243(device);
  test_step244(device);
  test_step245(device);
  test_step246(device);
  test_step247(device);
  test_step248(device);
  test_step249(device);
  test_step250(device);
  test_step251(device);
  test_step252(device);
  test_step253(device);
  test_step254(device);
  test_step255(device);
  test_step256(device);
  test_step257(device);
  test_step258(device);
  test_step259(device);
  test_step260(device);
  test_step261(device);
  test_step262(device);
  test_step263(device);
  test_step264(device);
  test_step265(device);
  test_step266(device);
  test_step267(device);
  test_step268(device);
  test_step269(device);
  test_step270(device);
  test_step271(device);
  test_step272(device);
  test_step273(device);
  test_step274(device);
  test_step275(device);
  test_step276(device);
  test_step277(device);
  test_step278(device);
  test_step279(device);
  test_step280(device);
  test_step281(device);
  test_step282(device);
  test_step283(device);
  test_step284(device);
  test_step285(device);
  test_step286(device);
  test_step287(device);
  test_step288(device);
  test_step289(device);
  test_step290(device);
  test_step291(device);
  test_step292(device);
  test_step293(device);
  test_step294(device);
  test_step295(device);
  test_step296(device);
  test_step297(device);
  test_step298(device);
  test_step299(device);
  test_step300(device);
  test_step301(device);
  test_step302(device);
  test_step303(device);
  test_step304(device);
  test_step305(device);
  test_step306(device);
  test_step307(device);
  test_step308(device);
  test_step309(device);
  test_step310(device);
  test_step311(device);
  test_step312(device);
  test_step313(device);
  test_step314(device);
  test_step315(device);
  test_step316(device);
  test_step317(device);
  test_step318(device);
  test_step319(device);
  test_step320(device);
  test_step321(device);
  test_step322(device);
  test_step323(device);
  test_step324(device);
  test_step325(device);
  test_step326(device);
  test_step327(device);
  test_step328(device);
  test_step329(device);
  test_step330(device);
  test_step331(device);
  test_step332(device);
  test_step333(device);
  test_step334(device);
  test_step335(device);
  test_step336(device);
  test_step337(device);
  test_step338(device);
}
