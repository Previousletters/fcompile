// generated by codegen c++ test ops head at 2024-07-19 22:17:48
// global storage define
uint64_t global0 = 0x200000000; // storage size: 524288 B
uint64_t global1 = 0x200080000; // storage size: 8192 B
// weight storage define
uint64_t weight0 = 0x200082000; // storage size: 16384 B
uint64_t weight1 = 0x200086000; // storage size: 16384 B
uint64_t weight2 = 0x20008a000; // storage size: 1024 B
uint64_t weight3 = 0x20008a400; // storage size: 1024 B
uint64_t weight4 = 0x20008a800; // storage size: 16384 B
uint64_t weight5 = 0x20008e800; // storage size: 16384 B
uint64_t weight6 = 0x200092800; // storage size: 54784 B
uint64_t weight7 = 0x20009fe00; // storage size: 54784 B
uint64_t weight8 = 0x2000ad400; // storage size: 16384 B
uint64_t weight9 = 0x2000b1400; // storage size: 16384 B
uint64_t weight10 = 0x2000b5400; // storage size: 16384 B
uint64_t weight11 = 0x2000b9400; // storage size: 1024 B
uint64_t weight12 = 0x2000b9800; // storage size: 1024 B
uint64_t weight13 = 0x2000b9c00; // storage size: 16384 B
uint64_t weight14 = 0x2000bdc00; // storage size: 16384 B
uint64_t weight15 = 0x2000c1c00; // storage size: 54784 B
uint64_t weight16 = 0x2000cf200; // storage size: 54784 B
uint64_t weight17 = 0x2000dc800; // storage size: 16384 B
uint64_t weight18 = 0x2000e0800; // storage size: 16384 B
uint64_t weight19 = 0x2000e4800; // storage size: 16384 B
uint64_t weight20 = 0x2000e8800; // storage size: 1024 B
uint64_t weight21 = 0x2000e8c00; // storage size: 1024 B
uint64_t weight22 = 0x2000e9000; // storage size: 16384 B
uint64_t weight23 = 0x2000ed000; // storage size: 16384 B
uint64_t weight24 = 0x2000f1000; // storage size: 54784 B
uint64_t weight25 = 0x2000fe600; // storage size: 54784 B
uint64_t weight26 = 0x20010bc00; // storage size: 16384 B
uint64_t weight27 = 0x20010fc00; // storage size: 16384 B
uint64_t weight28 = 0x200113c00; // storage size: 16384 B
uint64_t weight29 = 0x200117c00; // storage size: 1024 B
uint64_t weight30 = 0x200118000; // storage size: 1024 B
uint64_t weight31 = 0x200118400; // storage size: 16384 B
uint64_t weight32 = 0x20011c400; // storage size: 16384 B
uint64_t weight33 = 0x200120400; // storage size: 54784 B
uint64_t weight34 = 0x20012da00; // storage size: 54784 B
uint64_t weight35 = 0x20013b000; // storage size: 16384 B
uint64_t weight36 = 0x20013f000; // storage size: 16384 B
uint64_t weight37 = 0x200143000; // storage size: 16384 B
uint64_t weight38 = 0x200147000; // storage size: 1024 B
uint64_t weight39 = 0x200147400; // storage size: 1024 B
uint64_t weight40 = 0x200147800; // storage size: 16384 B
uint64_t weight41 = 0x20014b800; // storage size: 16384 B
uint64_t weight42 = 0x20014f800; // storage size: 54784 B
uint64_t weight43 = 0x20015ce00; // storage size: 54784 B
uint64_t weight44 = 0x20016a400; // storage size: 16384 B
uint64_t weight45 = 0x20016e400; // storage size: 16384 B
uint64_t weight46 = 0x200172400; // storage size: 16384 B
uint64_t weight47 = 0x200176400; // storage size: 1024 B
uint64_t weight48 = 0x200176800; // storage size: 1024 B
uint64_t weight49 = 0x200176c00; // storage size: 16384 B
uint64_t weight50 = 0x20017ac00; // storage size: 16384 B
uint64_t weight51 = 0x20017ec00; // storage size: 54784 B
uint64_t weight52 = 0x20018c200; // storage size: 54784 B
uint64_t weight53 = 0x200199800; // storage size: 16384 B
uint64_t weight54 = 0x20019d800; // storage size: 16384 B
uint64_t weight55 = 0x2001a1800; // storage size: 16384 B
uint64_t weight56 = 0x2001a5800; // storage size: 1024 B
uint64_t weight57 = 0x2001a5c00; // storage size: 1024 B
uint64_t weight58 = 0x2001a6000; // storage size: 16384 B
uint64_t weight59 = 0x2001aa000; // storage size: 16384 B
uint64_t weight60 = 0x2001ae000; // storage size: 54784 B
uint64_t weight61 = 0x2001bb600; // storage size: 54784 B
uint64_t weight62 = 0x2001c8c00; // storage size: 16384 B
uint64_t weight63 = 0x2001ccc00; // storage size: 16384 B
uint64_t weight64 = 0x2001d0c00; // storage size: 16384 B
uint64_t weight65 = 0x2001d4c00; // storage size: 1024 B
uint64_t weight66 = 0x2001d5000; // storage size: 1024 B
uint64_t weight67 = 0x2001d5400; // storage size: 16384 B
uint64_t weight68 = 0x2001d9400; // storage size: 16384 B
uint64_t weight69 = 0x2001dd400; // storage size: 54784 B
uint64_t weight70 = 0x2001eaa00; // storage size: 54784 B
uint64_t weight71 = 0x2001f8000; // storage size: 16384 B
uint64_t weight72 = 0x2001fc000; // storage size: 16384 B
uint64_t weight73 = 0x200200000; // storage size: 16384 B
uint64_t weight74 = 0x200204000; // storage size: 1024 B
uint64_t weight75 = 0x200204400; // storage size: 1024 B
uint64_t weight76 = 0x200204800; // storage size: 16384 B
uint64_t weight77 = 0x200208800; // storage size: 16384 B
uint64_t weight78 = 0x20020c800; // storage size: 54784 B
uint64_t weight79 = 0x200219e00; // storage size: 54784 B
uint64_t weight80 = 0x200227400; // storage size: 16384 B
uint64_t weight81 = 0x20022b400; // storage size: 16384 B
uint64_t weight82 = 0x20022f400; // storage size: 16384 B
uint64_t weight83 = 0x200233400; // storage size: 1024 B
uint64_t weight84 = 0x200233800; // storage size: 1024 B
uint64_t weight85 = 0x200233c00; // storage size: 16384 B
uint64_t weight86 = 0x200237c00; // storage size: 16384 B
uint64_t weight87 = 0x20023bc00; // storage size: 54784 B
uint64_t weight88 = 0x200249200; // storage size: 54784 B
uint64_t weight89 = 0x200256800; // storage size: 16384 B
uint64_t weight90 = 0x20025a800; // storage size: 16384 B
uint64_t weight91 = 0x20025e800; // storage size: 16384 B
uint64_t weight92 = 0x200262800; // storage size: 1024 B
uint64_t weight93 = 0x200262c00; // storage size: 1024 B
uint64_t weight94 = 0x200263000; // storage size: 16384 B
uint64_t weight95 = 0x200267000; // storage size: 16384 B
uint64_t weight96 = 0x20026b000; // storage size: 54784 B
uint64_t weight97 = 0x200278600; // storage size: 54784 B
uint64_t weight98 = 0x200285c00; // storage size: 16384 B
uint64_t weight99 = 0x200289c00; // storage size: 16384 B
uint64_t weight100 = 0x20028dc00; // storage size: 16384 B
uint64_t weight101 = 0x200291c00; // storage size: 1024 B
uint64_t weight102 = 0x200292000; // storage size: 1024 B
uint64_t weight103 = 0x200292400; // storage size: 16384 B
uint64_t weight104 = 0x200296400; // storage size: 16384 B
uint64_t weight105 = 0x20029a400; // storage size: 54784 B
uint64_t weight106 = 0x2002a7a00; // storage size: 54784 B
uint64_t weight107 = 0x2002b5000; // storage size: 16384 B
uint64_t weight108 = 0x2002b9000; // storage size: 16384 B
uint64_t weight109 = 0x2002bd000; // storage size: 16384 B
uint64_t weight110 = 0x2002c1000; // storage size: 1024 B
uint64_t weight111 = 0x2002c1400; // storage size: 1024 B
uint64_t weight112 = 0x2002c1800; // storage size: 16384 B
uint64_t weight113 = 0x2002c5800; // storage size: 16384 B
uint64_t weight114 = 0x2002c9800; // storage size: 54784 B
uint64_t weight115 = 0x2002d6e00; // storage size: 54784 B
uint64_t weight116 = 0x2002e4400; // storage size: 16384 B
uint64_t weight117 = 0x2002e8400; // storage size: 16384 B
uint64_t weight118 = 0x2002ec400; // storage size: 16384 B
uint64_t weight119 = 0x2002f0400; // storage size: 1024 B
uint64_t weight120 = 0x2002f0800; // storage size: 1024 B
uint64_t weight121 = 0x2002f0c00; // storage size: 16384 B
uint64_t weight122 = 0x2002f4c00; // storage size: 16384 B
uint64_t weight123 = 0x2002f8c00; // storage size: 54784 B
uint64_t weight124 = 0x200306200; // storage size: 54784 B
uint64_t weight125 = 0x200313800; // storage size: 16384 B
uint64_t weight126 = 0x200317800; // storage size: 16384 B
uint64_t weight127 = 0x20031b800; // storage size: 16384 B
uint64_t weight128 = 0x20031f800; // storage size: 1024 B
uint64_t weight129 = 0x20031fc00; // storage size: 1024 B
uint64_t weight130 = 0x200320000; // storage size: 16384 B
uint64_t weight131 = 0x200324000; // storage size: 16384 B
uint64_t weight132 = 0x200328000; // storage size: 54784 B
uint64_t weight133 = 0x200335600; // storage size: 54784 B
uint64_t weight134 = 0x200342c00; // storage size: 16384 B
uint64_t weight135 = 0x200346c00; // storage size: 16384 B
uint64_t weight136 = 0x20034ac00; // storage size: 16384 B
uint64_t weight137 = 0x20034ec00; // storage size: 1024 B
uint64_t weight138 = 0x20034f000; // storage size: 1024 B
uint64_t weight139 = 0x20034f400; // storage size: 16384 B
uint64_t weight140 = 0x200353400; // storage size: 16384 B
uint64_t weight141 = 0x200357400; // storage size: 54784 B
uint64_t weight142 = 0x200364a00; // storage size: 54784 B
uint64_t weight143 = 0x200372000; // storage size: 16384 B
uint64_t weight144 = 0x200376000; // storage size: 16384 B
uint64_t weight145 = 0x20037a000; // storage size: 16384 B
uint64_t weight146 = 0x20037e000; // storage size: 1024 B
uint64_t weight147 = 0x20037e400; // storage size: 1024 B
uint64_t weight148 = 0x20037e800; // storage size: 16384 B
uint64_t weight149 = 0x200382800; // storage size: 16384 B
uint64_t weight150 = 0x200386800; // storage size: 54784 B
uint64_t weight151 = 0x200393e00; // storage size: 54784 B
uint64_t weight152 = 0x2003a1400; // storage size: 16384 B
uint64_t weight153 = 0x2003a5400; // storage size: 16384 B
uint64_t weight154 = 0x2003a9400; // storage size: 16384 B
uint64_t weight155 = 0x2003ad400; // storage size: 1024 B
uint64_t weight156 = 0x2003ad800; // storage size: 1024 B
uint64_t weight157 = 0x2003adc00; // storage size: 16384 B
uint64_t weight158 = 0x2003b1c00; // storage size: 16384 B
uint64_t weight159 = 0x2003b5c00; // storage size: 54784 B
uint64_t weight160 = 0x2003c3200; // storage size: 54784 B
uint64_t weight161 = 0x2003d0800; // storage size: 16384 B
uint64_t weight162 = 0x2003d4800; // storage size: 16384 B
uint64_t weight163 = 0x2003d8800; // storage size: 16384 B
uint64_t weight164 = 0x2003dc800; // storage size: 1024 B
uint64_t weight165 = 0x2003dcc00; // storage size: 1024 B
uint64_t weight166 = 0x2003dd000; // storage size: 16384 B
uint64_t weight167 = 0x2003e1000; // storage size: 16384 B
uint64_t weight168 = 0x2003e5000; // storage size: 54784 B
uint64_t weight169 = 0x2003f2600; // storage size: 54784 B
uint64_t weight170 = 0x2003ffc00; // storage size: 16384 B
uint64_t weight171 = 0x200403c00; // storage size: 16384 B
uint64_t weight172 = 0x200407c00; // storage size: 16384 B
uint64_t weight173 = 0x20040bc00; // storage size: 1024 B
uint64_t weight174 = 0x20040c000; // storage size: 1024 B
uint64_t weight175 = 0x20040c400; // storage size: 16384 B
uint64_t weight176 = 0x200410400; // storage size: 16384 B
uint64_t weight177 = 0x200414400; // storage size: 54784 B
uint64_t weight178 = 0x200421a00; // storage size: 54784 B
uint64_t weight179 = 0x20042f000; // storage size: 16384 B
uint64_t weight180 = 0x200433000; // storage size: 16384 B
uint64_t weight181 = 0x200437000; // storage size: 16384 B
uint64_t weight182 = 0x20043b000; // storage size: 1024 B
uint64_t weight183 = 0x20043b400; // storage size: 1024 B
uint64_t weight184 = 0x20043b800; // storage size: 16384 B
uint64_t weight185 = 0x20043f800; // storage size: 16384 B
uint64_t weight186 = 0x200443800; // storage size: 54784 B
uint64_t weight187 = 0x200450e00; // storage size: 54784 B
uint64_t weight188 = 0x20045e400; // storage size: 16384 B
uint64_t weight189 = 0x200462400; // storage size: 16384 B
uint64_t weight190 = 0x200466400; // storage size: 16384 B
uint64_t weight191 = 0x20046a400; // storage size: 1024 B
uint64_t weight192 = 0x20046a800; // storage size: 1024 B
uint64_t weight193 = 0x20046ac00; // storage size: 16384 B
uint64_t weight194 = 0x20046ec00; // storage size: 16384 B
uint64_t weight195 = 0x200472c00; // storage size: 54784 B
uint64_t weight196 = 0x200480200; // storage size: 54784 B
uint64_t weight197 = 0x20048d800; // storage size: 16384 B
uint64_t weight198 = 0x200491800; // storage size: 16384 B
uint64_t weight199 = 0x200495800; // storage size: 16384 B
uint64_t weight200 = 0x200499800; // storage size: 1024 B
uint64_t weight201 = 0x200499c00; // storage size: 1024 B
uint64_t weight202 = 0x20049a000; // storage size: 16384 B
uint64_t weight203 = 0x20049e000; // storage size: 16384 B
uint64_t weight204 = 0x2004a2000; // storage size: 54784 B
uint64_t weight205 = 0x2004af600; // storage size: 54784 B
uint64_t weight206 = 0x2004bcc00; // storage size: 16384 B
uint64_t weight207 = 0x2004c0c00; // storage size: 16384 B
uint64_t weight208 = 0x2004c4c00; // storage size: 16384 B
uint64_t weight209 = 0x2004c8c00; // storage size: 1024 B
uint64_t weight210 = 0x2004c9000; // storage size: 1024 B
uint64_t weight211 = 0x2004c9400; // storage size: 16384 B
uint64_t weight212 = 0x2004cd400; // storage size: 16384 B
uint64_t weight213 = 0x2004d1400; // storage size: 54784 B
uint64_t weight214 = 0x2004dea00; // storage size: 54784 B
uint64_t weight215 = 0x2004ec000; // storage size: 16384 B
uint64_t weight216 = 0x2004f0000; // storage size: 16384 B
uint64_t weight217 = 0x2004f4000; // storage size: 16384 B
uint64_t weight218 = 0x2004f8000; // storage size: 1024 B
uint64_t weight219 = 0x2004f8400; // storage size: 1024 B
uint64_t weight220 = 0x2004f8800; // storage size: 16384 B
uint64_t weight221 = 0x2004fc800; // storage size: 16384 B
uint64_t weight222 = 0x200500800; // storage size: 54784 B
uint64_t weight223 = 0x20050de00; // storage size: 54784 B
uint64_t weight224 = 0x20051b400; // storage size: 16384 B
uint64_t weight225 = 0x20051f400; // storage size: 16384 B
uint64_t weight226 = 0x200523400; // storage size: 16384 B
uint64_t weight227 = 0x200527400; // storage size: 1024 B
uint64_t weight228 = 0x200527800; // storage size: 1024 B
uint64_t weight229 = 0x200527c00; // storage size: 16384 B
uint64_t weight230 = 0x20052bc00; // storage size: 16384 B
uint64_t weight231 = 0x20052fc00; // storage size: 54784 B
uint64_t weight232 = 0x20053d200; // storage size: 54784 B
uint64_t weight233 = 0x20054a800; // storage size: 16384 B
uint64_t weight234 = 0x20054e800; // storage size: 16384 B
uint64_t weight235 = 0x200552800; // storage size: 16384 B
uint64_t weight236 = 0x200556800; // storage size: 1024 B
uint64_t weight237 = 0x200556c00; // storage size: 1024 B
uint64_t weight238 = 0x200557000; // storage size: 16384 B
uint64_t weight239 = 0x20055b000; // storage size: 16384 B
uint64_t weight240 = 0x20055f000; // storage size: 54784 B
uint64_t weight241 = 0x20056c600; // storage size: 54784 B
uint64_t weight242 = 0x200579c00; // storage size: 16384 B
uint64_t weight243 = 0x20057dc00; // storage size: 16384 B
uint64_t weight244 = 0x200581c00; // storage size: 16384 B
uint64_t weight245 = 0x200585c00; // storage size: 1024 B
uint64_t weight246 = 0x200586000; // storage size: 1024 B
uint64_t weight247 = 0x200586400; // storage size: 16384 B
uint64_t weight248 = 0x20058a400; // storage size: 16384 B
uint64_t weight249 = 0x20058e400; // storage size: 54784 B
uint64_t weight250 = 0x20059ba00; // storage size: 54784 B
uint64_t weight251 = 0x2005a9000; // storage size: 16384 B
uint64_t weight252 = 0x2005ad000; // storage size: 16384 B
uint64_t weight253 = 0x2005b1000; // storage size: 260096 B
// cache storage define
uint64_t cache0 = 0x2005f0800; // storage size: 1048576 B
uint64_t cache1 = 0x2006f0800; // storage size: 1048576 B
uint64_t cache2 = 0x2007f0800; // storage size: 1048576 B
uint64_t cache3 = 0x2008f0800; // storage size: 1048576 B
uint64_t cache4 = 0x2009f0800; // storage size: 1048576 B
uint64_t cache5 = 0x200af0800; // storage size: 1048576 B
uint64_t cache6 = 0x200bf0800; // storage size: 1048576 B
uint64_t cache7 = 0x200cf0800; // storage size: 1048576 B
uint64_t cache8 = 0x200df0800; // storage size: 1048576 B
uint64_t cache9 = 0x200ef0800; // storage size: 1048576 B
uint64_t cache10 = 0x200ff0800; // storage size: 1048576 B
uint64_t cache11 = 0x2010f0800; // storage size: 1048576 B
uint64_t cache12 = 0x2011f0800; // storage size: 1048576 B
uint64_t cache13 = 0x2012f0800; // storage size: 1048576 B
uint64_t cache14 = 0x2013f0800; // storage size: 1048576 B
uint64_t cache15 = 0x2014f0800; // storage size: 1048576 B
uint64_t cache16 = 0x2015f0800; // storage size: 1048576 B
uint64_t cache17 = 0x2016f0800; // storage size: 1048576 B
uint64_t cache18 = 0x2017f0800; // storage size: 1048576 B
uint64_t cache19 = 0x2018f0800; // storage size: 1048576 B
uint64_t cache20 = 0x2019f0800; // storage size: 1048576 B
uint64_t cache21 = 0x201af0800; // storage size: 1048576 B
uint64_t cache22 = 0x201bf0800; // storage size: 1048576 B
uint64_t cache23 = 0x201cf0800; // storage size: 1048576 B
uint64_t cache24 = 0x201df0800; // storage size: 1048576 B
uint64_t cache25 = 0x201ef0800; // storage size: 1048576 B
uint64_t cache26 = 0x201ff0800; // storage size: 1048576 B
uint64_t cache27 = 0x2020f0800; // storage size: 1048576 B
uint64_t cache28 = 0x2021f0800; // storage size: 1048576 B
uint64_t cache29 = 0x2022f0800; // storage size: 1048576 B
uint64_t cache30 = 0x2023f0800; // storage size: 1048576 B
uint64_t cache31 = 0x2024f0800; // storage size: 1048576 B
uint64_t cache32 = 0x2025f0800; // storage size: 1048576 B
uint64_t cache33 = 0x2026f0800; // storage size: 1048576 B
uint64_t cache34 = 0x2027f0800; // storage size: 1048576 B
uint64_t cache35 = 0x2028f0800; // storage size: 1048576 B
uint64_t cache36 = 0x2029f0800; // storage size: 1048576 B
uint64_t cache37 = 0x202af0800; // storage size: 1048576 B
uint64_t cache38 = 0x202bf0800; // storage size: 1048576 B
uint64_t cache39 = 0x202cf0800; // storage size: 1048576 B
uint64_t cache40 = 0x202df0800; // storage size: 1048576 B
uint64_t cache41 = 0x202ef0800; // storage size: 1048576 B
uint64_t cache42 = 0x202ff0800; // storage size: 1048576 B
uint64_t cache43 = 0x2030f0800; // storage size: 1048576 B
uint64_t cache44 = 0x2031f0800; // storage size: 1048576 B
uint64_t cache45 = 0x2032f0800; // storage size: 1048576 B
uint64_t cache46 = 0x2033f0800; // storage size: 1048576 B
uint64_t cache47 = 0x2034f0800; // storage size: 1048576 B
uint64_t cache48 = 0x2035f0800; // storage size: 1048576 B
uint64_t cache49 = 0x2036f0800; // storage size: 1048576 B
uint64_t cache50 = 0x2037f0800; // storage size: 1048576 B
uint64_t cache51 = 0x2038f0800; // storage size: 1048576 B
uint64_t cache52 = 0x2039f0800; // storage size: 1048576 B
uint64_t cache53 = 0x203af0800; // storage size: 1048576 B
uint64_t cache54 = 0x203bf0800; // storage size: 1048576 B
uint64_t cache55 = 0x203cf0800; // storage size: 1048576 B
// runtime storage define
uint64_t runtime0 = 0x203df0800; // storage size: 16777216 B
uint64_t runtime1 = 0x204df0800; // storage size: 56098816 B
uint64_t runtime2 = 0x208370800; // storage size: 268435456 B
uint64_t runtime3 = 0x218370800; // storage size: 268435456 B
// hbm storage define
uint64_t hbm0 = 0x000000000; // storage size: 270336 B
uint64_t hbm1 = 0x000042000; // storage size: 16896 B
uint64_t hbm2 = 0x000046200; // storage size: 16896 B
uint64_t hbm3 = 0x00004a400; // storage size: 270336 B
uint64_t hbm4 = 0x00008c400; // storage size: 903936 B
uint64_t hbm5 = 0x000168f00; // storage size: 903936 B
uint64_t hbm6 = 0x000245a00; // storage size: 905216 B
uint64_t hbm7 = 0x000322a00; // storage size: 270336 B
uint64_t hbm8 = 0x000364a00; // storage size: 16896 B
uint64_t hbm9 = 0x000368c00; // storage size: 16896 B
uint64_t hbm10 = 0x00036ce00; // storage size: 270336 B
uint64_t hbm11 = 0x0003aee00; // storage size: 903936 B
uint64_t hbm12 = 0x00048b900; // storage size: 903936 B
uint64_t hbm13 = 0x000568400; // storage size: 905216 B
uint64_t hbm14 = 0x000645400; // storage size: 270336 B
uint64_t hbm15 = 0x000687400; // storage size: 16896 B
uint64_t hbm16 = 0x00068b600; // storage size: 16896 B
uint64_t hbm17 = 0x00068f800; // storage size: 270336 B
uint64_t hbm18 = 0x0006d1800; // storage size: 903936 B
uint64_t hbm19 = 0x0007ae300; // storage size: 903936 B
uint64_t hbm20 = 0x00088ae00; // storage size: 905216 B
uint64_t hbm21 = 0x000967e00; // storage size: 270336 B
uint64_t hbm22 = 0x0009a9e00; // storage size: 16896 B
uint64_t hbm23 = 0x0009ae000; // storage size: 16896 B
uint64_t hbm24 = 0x0009b2200; // storage size: 270336 B
uint64_t hbm25 = 0x0009f4200; // storage size: 903936 B
uint64_t hbm26 = 0x000ad0d00; // storage size: 903936 B
uint64_t hbm27 = 0x000bad800; // storage size: 905216 B
uint64_t hbm28 = 0x000c8a800; // storage size: 270336 B
uint64_t hbm29 = 0x000ccc800; // storage size: 16896 B
uint64_t hbm30 = 0x000cd0a00; // storage size: 16896 B
uint64_t hbm31 = 0x000cd4c00; // storage size: 270336 B
uint64_t hbm32 = 0x000d16c00; // storage size: 903936 B
uint64_t hbm33 = 0x000df3700; // storage size: 903936 B
uint64_t hbm34 = 0x000ed0200; // storage size: 905216 B
uint64_t hbm35 = 0x000fad200; // storage size: 270336 B
uint64_t hbm36 = 0x000fef200; // storage size: 16896 B
uint64_t hbm37 = 0x000ff3400; // storage size: 16896 B
uint64_t hbm38 = 0x000ff7600; // storage size: 270336 B
uint64_t hbm39 = 0x001039600; // storage size: 903936 B
uint64_t hbm40 = 0x001116100; // storage size: 903936 B
uint64_t hbm41 = 0x0011f2c00; // storage size: 905216 B
uint64_t hbm42 = 0x0012cfc00; // storage size: 270336 B
uint64_t hbm43 = 0x001311c00; // storage size: 16896 B
uint64_t hbm44 = 0x001315e00; // storage size: 16896 B
uint64_t hbm45 = 0x00131a000; // storage size: 270336 B
uint64_t hbm46 = 0x00135c000; // storage size: 903936 B
uint64_t hbm47 = 0x001438b00; // storage size: 903936 B
uint64_t hbm48 = 0x001515600; // storage size: 905216 B
uint64_t hbm49 = 0x0015f2600; // storage size: 270336 B
uint64_t hbm50 = 0x001634600; // storage size: 16896 B
uint64_t hbm51 = 0x001638800; // storage size: 16896 B
uint64_t hbm52 = 0x00163ca00; // storage size: 270336 B
uint64_t hbm53 = 0x00167ea00; // storage size: 903936 B
uint64_t hbm54 = 0x00175b500; // storage size: 903936 B
uint64_t hbm55 = 0x001838000; // storage size: 905216 B
uint64_t hbm56 = 0x001915000; // storage size: 270336 B
uint64_t hbm57 = 0x001957000; // storage size: 16896 B
uint64_t hbm58 = 0x00195b200; // storage size: 16896 B
uint64_t hbm59 = 0x00195f400; // storage size: 270336 B
uint64_t hbm60 = 0x0019a1400; // storage size: 903936 B
uint64_t hbm61 = 0x001a7df00; // storage size: 903936 B
uint64_t hbm62 = 0x001b5aa00; // storage size: 905216 B
uint64_t hbm63 = 0x001c37a00; // storage size: 270336 B
uint64_t hbm64 = 0x001c79a00; // storage size: 16896 B
uint64_t hbm65 = 0x001c7dc00; // storage size: 16896 B
uint64_t hbm66 = 0x001c81e00; // storage size: 270336 B
uint64_t hbm67 = 0x001cc3e00; // storage size: 903936 B
uint64_t hbm68 = 0x001da0900; // storage size: 903936 B
uint64_t hbm69 = 0x001e7d400; // storage size: 905216 B
uint64_t hbm70 = 0x001f5a400; // storage size: 270336 B
uint64_t hbm71 = 0x001f9c400; // storage size: 16896 B
uint64_t hbm72 = 0x001fa0600; // storage size: 16896 B
uint64_t hbm73 = 0x001fa4800; // storage size: 270336 B
uint64_t hbm74 = 0x001fe6800; // storage size: 903936 B
uint64_t hbm75 = 0x0020c3300; // storage size: 903936 B
uint64_t hbm76 = 0x00219fe00; // storage size: 905216 B
uint64_t hbm77 = 0x00227ce00; // storage size: 270336 B
uint64_t hbm78 = 0x0022bee00; // storage size: 16896 B
uint64_t hbm79 = 0x0022c3000; // storage size: 16896 B
uint64_t hbm80 = 0x0022c7200; // storage size: 270336 B
uint64_t hbm81 = 0x002309200; // storage size: 903936 B
uint64_t hbm82 = 0x0023e5d00; // storage size: 903936 B
uint64_t hbm83 = 0x0024c2800; // storage size: 905216 B
uint64_t hbm84 = 0x00259f800; // storage size: 270336 B
uint64_t hbm85 = 0x0025e1800; // storage size: 16896 B
uint64_t hbm86 = 0x0025e5a00; // storage size: 16896 B
uint64_t hbm87 = 0x0025e9c00; // storage size: 270336 B
uint64_t hbm88 = 0x00262bc00; // storage size: 903936 B
uint64_t hbm89 = 0x002708700; // storage size: 903936 B
uint64_t hbm90 = 0x0027e5200; // storage size: 905216 B
uint64_t hbm91 = 0x0028c2200; // storage size: 270336 B
uint64_t hbm92 = 0x002904200; // storage size: 16896 B
uint64_t hbm93 = 0x002908400; // storage size: 16896 B
uint64_t hbm94 = 0x00290c600; // storage size: 270336 B
uint64_t hbm95 = 0x00294e600; // storage size: 903936 B
uint64_t hbm96 = 0x002a2b100; // storage size: 903936 B
uint64_t hbm97 = 0x002b07c00; // storage size: 905216 B
uint64_t hbm98 = 0x002be4c00; // storage size: 270336 B
uint64_t hbm99 = 0x002c26c00; // storage size: 16896 B
uint64_t hbm100 = 0x002c2ae00; // storage size: 16896 B
uint64_t hbm101 = 0x002c2f000; // storage size: 270336 B
uint64_t hbm102 = 0x002c71000; // storage size: 903936 B
uint64_t hbm103 = 0x002d4db00; // storage size: 903936 B
uint64_t hbm104 = 0x002e2a600; // storage size: 905216 B
uint64_t hbm105 = 0x002f07600; // storage size: 270336 B
uint64_t hbm106 = 0x002f49600; // storage size: 16896 B
uint64_t hbm107 = 0x002f4d800; // storage size: 16896 B
uint64_t hbm108 = 0x002f51a00; // storage size: 270336 B
uint64_t hbm109 = 0x002f93a00; // storage size: 903936 B
uint64_t hbm110 = 0x003070500; // storage size: 903936 B
uint64_t hbm111 = 0x00314d000; // storage size: 905216 B
uint64_t hbm112 = 0x00322a000; // storage size: 270336 B
uint64_t hbm113 = 0x00326c000; // storage size: 16896 B
uint64_t hbm114 = 0x003270200; // storage size: 16896 B
uint64_t hbm115 = 0x003274400; // storage size: 270336 B
uint64_t hbm116 = 0x0032b6400; // storage size: 903936 B
uint64_t hbm117 = 0x003392f00; // storage size: 903936 B
uint64_t hbm118 = 0x00346fa00; // storage size: 905216 B
uint64_t hbm119 = 0x00354ca00; // storage size: 270336 B
uint64_t hbm120 = 0x00358ea00; // storage size: 16896 B
uint64_t hbm121 = 0x003592c00; // storage size: 16896 B
uint64_t hbm122 = 0x003596e00; // storage size: 270336 B
uint64_t hbm123 = 0x0035d8e00; // storage size: 903936 B
uint64_t hbm124 = 0x0036b5900; // storage size: 903936 B
uint64_t hbm125 = 0x003792400; // storage size: 905216 B
uint64_t hbm126 = 0x00386f400; // storage size: 270336 B
uint64_t hbm127 = 0x0038b1400; // storage size: 16896 B
uint64_t hbm128 = 0x0038b5600; // storage size: 16896 B
uint64_t hbm129 = 0x0038b9800; // storage size: 270336 B
uint64_t hbm130 = 0x0038fb800; // storage size: 903936 B
uint64_t hbm131 = 0x0039d8300; // storage size: 903936 B
uint64_t hbm132 = 0x003ab4e00; // storage size: 905216 B
uint64_t hbm133 = 0x003b91e00; // storage size: 270336 B
uint64_t hbm134 = 0x003bd3e00; // storage size: 16896 B
uint64_t hbm135 = 0x003bd8000; // storage size: 16896 B
uint64_t hbm136 = 0x003bdc200; // storage size: 270336 B
uint64_t hbm137 = 0x003c1e200; // storage size: 903936 B
uint64_t hbm138 = 0x003cfad00; // storage size: 903936 B
uint64_t hbm139 = 0x003dd7800; // storage size: 905216 B
uint64_t hbm140 = 0x003eb4800; // storage size: 270336 B
uint64_t hbm141 = 0x003ef6800; // storage size: 16896 B
uint64_t hbm142 = 0x003efaa00; // storage size: 16896 B
uint64_t hbm143 = 0x003efec00; // storage size: 270336 B
uint64_t hbm144 = 0x003f40c00; // storage size: 903936 B
uint64_t hbm145 = 0x00401d700; // storage size: 903936 B
uint64_t hbm146 = 0x0040fa200; // storage size: 905216 B
uint64_t hbm147 = 0x0041d7200; // storage size: 270336 B
uint64_t hbm148 = 0x004219200; // storage size: 16896 B
uint64_t hbm149 = 0x00421d400; // storage size: 16896 B
uint64_t hbm150 = 0x004221600; // storage size: 270336 B
uint64_t hbm151 = 0x004263600; // storage size: 903936 B
uint64_t hbm152 = 0x004340100; // storage size: 903936 B
uint64_t hbm153 = 0x00441cc00; // storage size: 905216 B
uint64_t hbm154 = 0x0044f9c00; // storage size: 270336 B
uint64_t hbm155 = 0x00453bc00; // storage size: 16896 B
uint64_t hbm156 = 0x00453fe00; // storage size: 16896 B
uint64_t hbm157 = 0x004544000; // storage size: 270336 B
uint64_t hbm158 = 0x004586000; // storage size: 903936 B
uint64_t hbm159 = 0x004662b00; // storage size: 903936 B
uint64_t hbm160 = 0x00473f600; // storage size: 905216 B
uint64_t hbm161 = 0x00481c600; // storage size: 270336 B
uint64_t hbm162 = 0x00485e600; // storage size: 16896 B
uint64_t hbm163 = 0x004862800; // storage size: 16896 B
uint64_t hbm164 = 0x004866a00; // storage size: 270336 B
uint64_t hbm165 = 0x0048a8a00; // storage size: 903936 B
uint64_t hbm166 = 0x004985500; // storage size: 903936 B
uint64_t hbm167 = 0x004a62000; // storage size: 905216 B
uint64_t hbm168 = 0x004b3f000; // storage size: 270336 B
uint64_t hbm169 = 0x004b81000; // storage size: 16896 B
uint64_t hbm170 = 0x004b85200; // storage size: 16896 B
uint64_t hbm171 = 0x004b89400; // storage size: 270336 B
uint64_t hbm172 = 0x004bcb400; // storage size: 903936 B
uint64_t hbm173 = 0x004ca7f00; // storage size: 903936 B
uint64_t hbm174 = 0x004d84a00; // storage size: 905216 B
uint64_t hbm175 = 0x004e61a00; // storage size: 270336 B
uint64_t hbm176 = 0x004ea3a00; // storage size: 16896 B
uint64_t hbm177 = 0x004ea7c00; // storage size: 16896 B
uint64_t hbm178 = 0x004eabe00; // storage size: 270336 B
uint64_t hbm179 = 0x004eede00; // storage size: 903936 B
uint64_t hbm180 = 0x004fca900; // storage size: 903936 B
uint64_t hbm181 = 0x0050a7400; // storage size: 905216 B
uint64_t hbm182 = 0x005184400; // storage size: 270336 B
uint64_t hbm183 = 0x0051c6400; // storage size: 16896 B
uint64_t hbm184 = 0x0051ca600; // storage size: 16896 B
uint64_t hbm185 = 0x0051ce800; // storage size: 270336 B
uint64_t hbm186 = 0x005210800; // storage size: 903936 B
uint64_t hbm187 = 0x0052ed300; // storage size: 903936 B
uint64_t hbm188 = 0x0053c9e00; // storage size: 905216 B
uint64_t hbm189 = 0x0054a6e00; // storage size: 270336 B
uint64_t hbm190 = 0x0054e8e00; // storage size: 16896 B
uint64_t hbm191 = 0x0054ed000; // storage size: 16896 B
uint64_t hbm192 = 0x0054f1200; // storage size: 270336 B
uint64_t hbm193 = 0x005533200; // storage size: 903936 B
uint64_t hbm194 = 0x00560fd00; // storage size: 903936 B
uint64_t hbm195 = 0x0056ec800; // storage size: 905216 B
uint64_t hbm196 = 0x0057c9800; // storage size: 4291584 B

// get input ptr
uint64_t data_in = 0x203df0800; // 64948224

// get output ptr
uint64_t data_out = 0x203df0800; // 64948224

// get weight ddr ptr
uint64_t BLOCK00_ln_k_bias = 0x200082000; // 532480
uint64_t BLOCK00_q_bn_bias = 0x200086000; // 548864
uint64_t pos_emb = 0x200000000; // 0
uint64_t BLOCK00_k_bn_bias = 0x20008a000; // 565248
uint64_t BLOCK00_v_bn_bias = 0x20008a400; // 566272
uint64_t BLOCK00_atten_bn = 0x20008a800; // 567296
uint64_t BLOCK00_post_k_bias = 0x20008e800; // 583680
uint64_t BLOCK00_h_to_4h_bn_1 = 0x200092800; // 600064
uint64_t BLOCK00_h_to_4h_bn_0 = 0x20009fe00; // 654848
uint64_t silu_act = 0x200080000; // 524288
uint64_t BLOCK00_dense_4h_to_h_bn = 0x2000ad400; // 709632
uint64_t BLOCK01_ln_k_bias = 0x2000b1400; // 726016
uint64_t BLOCK01_q_bn_bias = 0x2000b5400; // 742400
uint64_t BLOCK01_k_bn_bias = 0x2000b9400; // 758784
uint64_t BLOCK01_v_bn_bias = 0x2000b9800; // 759808
uint64_t BLOCK01_atten_bn = 0x2000b9c00; // 760832
uint64_t BLOCK01_post_k_bias = 0x2000bdc00; // 777216
uint64_t BLOCK01_h_to_4h_bn_1 = 0x2000c1c00; // 793600
uint64_t BLOCK01_h_to_4h_bn_0 = 0x2000cf200; // 848384
uint64_t BLOCK01_dense_4h_to_h_bn = 0x2000dc800; // 903168
uint64_t BLOCK02_ln_k_bias = 0x2000e0800; // 919552
uint64_t BLOCK02_q_bn_bias = 0x2000e4800; // 935936
uint64_t BLOCK02_k_bn_bias = 0x2000e8800; // 952320
uint64_t BLOCK02_v_bn_bias = 0x2000e8c00; // 953344
uint64_t BLOCK02_atten_bn = 0x2000e9000; // 954368
uint64_t BLOCK02_post_k_bias = 0x2000ed000; // 970752
uint64_t BLOCK02_h_to_4h_bn_1 = 0x2000f1000; // 987136
uint64_t BLOCK02_h_to_4h_bn_0 = 0x2000fe600; // 1041920
uint64_t BLOCK02_dense_4h_to_h_bn = 0x20010bc00; // 1096704
uint64_t BLOCK03_ln_k_bias = 0x20010fc00; // 1113088
uint64_t BLOCK03_q_bn_bias = 0x200113c00; // 1129472
uint64_t BLOCK03_k_bn_bias = 0x200117c00; // 1145856
uint64_t BLOCK03_v_bn_bias = 0x200118000; // 1146880
uint64_t BLOCK03_atten_bn = 0x200118400; // 1147904
uint64_t BLOCK03_post_k_bias = 0x20011c400; // 1164288
uint64_t BLOCK03_h_to_4h_bn_1 = 0x200120400; // 1180672
uint64_t BLOCK03_h_to_4h_bn_0 = 0x20012da00; // 1235456
uint64_t BLOCK03_dense_4h_to_h_bn = 0x20013b000; // 1290240
uint64_t BLOCK04_ln_k_bias = 0x20013f000; // 1306624
uint64_t BLOCK04_q_bn_bias = 0x200143000; // 1323008
uint64_t BLOCK04_k_bn_bias = 0x200147000; // 1339392
uint64_t BLOCK04_v_bn_bias = 0x200147400; // 1340416
uint64_t BLOCK04_atten_bn = 0x200147800; // 1341440
uint64_t BLOCK04_post_k_bias = 0x20014b800; // 1357824
uint64_t BLOCK04_h_to_4h_bn_1 = 0x20014f800; // 1374208
uint64_t BLOCK04_h_to_4h_bn_0 = 0x20015ce00; // 1428992
uint64_t BLOCK04_dense_4h_to_h_bn = 0x20016a400; // 1483776
uint64_t BLOCK05_ln_k_bias = 0x20016e400; // 1500160
uint64_t BLOCK05_q_bn_bias = 0x200172400; // 1516544
uint64_t BLOCK05_k_bn_bias = 0x200176400; // 1532928
uint64_t BLOCK05_v_bn_bias = 0x200176800; // 1533952
uint64_t BLOCK05_atten_bn = 0x200176c00; // 1534976
uint64_t BLOCK05_post_k_bias = 0x20017ac00; // 1551360
uint64_t BLOCK05_h_to_4h_bn_1 = 0x20017ec00; // 1567744
uint64_t BLOCK05_h_to_4h_bn_0 = 0x20018c200; // 1622528
uint64_t BLOCK05_dense_4h_to_h_bn = 0x200199800; // 1677312
uint64_t BLOCK06_ln_k_bias = 0x20019d800; // 1693696
uint64_t BLOCK06_q_bn_bias = 0x2001a1800; // 1710080
uint64_t BLOCK06_k_bn_bias = 0x2001a5800; // 1726464
uint64_t BLOCK06_v_bn_bias = 0x2001a5c00; // 1727488
uint64_t BLOCK06_atten_bn = 0x2001a6000; // 1728512
uint64_t BLOCK06_post_k_bias = 0x2001aa000; // 1744896
uint64_t BLOCK06_h_to_4h_bn_1 = 0x2001ae000; // 1761280
uint64_t BLOCK06_h_to_4h_bn_0 = 0x2001bb600; // 1816064
uint64_t BLOCK06_dense_4h_to_h_bn = 0x2001c8c00; // 1870848
uint64_t BLOCK07_ln_k_bias = 0x2001ccc00; // 1887232
uint64_t BLOCK07_q_bn_bias = 0x2001d0c00; // 1903616
uint64_t BLOCK07_k_bn_bias = 0x2001d4c00; // 1920000
uint64_t BLOCK07_v_bn_bias = 0x2001d5000; // 1921024
uint64_t BLOCK07_atten_bn = 0x2001d5400; // 1922048
uint64_t BLOCK07_post_k_bias = 0x2001d9400; // 1938432
uint64_t BLOCK07_h_to_4h_bn_1 = 0x2001dd400; // 1954816
uint64_t BLOCK07_h_to_4h_bn_0 = 0x2001eaa00; // 2009600
uint64_t BLOCK07_dense_4h_to_h_bn = 0x2001f8000; // 2064384
uint64_t BLOCK08_ln_k_bias = 0x2001fc000; // 2080768
uint64_t BLOCK08_q_bn_bias = 0x200200000; // 2097152
uint64_t BLOCK08_k_bn_bias = 0x200204000; // 2113536
uint64_t BLOCK08_v_bn_bias = 0x200204400; // 2114560
uint64_t BLOCK08_atten_bn = 0x200204800; // 2115584
uint64_t BLOCK08_post_k_bias = 0x200208800; // 2131968
uint64_t BLOCK08_h_to_4h_bn_1 = 0x20020c800; // 2148352
uint64_t BLOCK08_h_to_4h_bn_0 = 0x200219e00; // 2203136
uint64_t BLOCK08_dense_4h_to_h_bn = 0x200227400; // 2257920
uint64_t BLOCK09_ln_k_bias = 0x20022b400; // 2274304
uint64_t BLOCK09_q_bn_bias = 0x20022f400; // 2290688
uint64_t BLOCK09_k_bn_bias = 0x200233400; // 2307072
uint64_t BLOCK09_v_bn_bias = 0x200233800; // 2308096
uint64_t BLOCK09_atten_bn = 0x200233c00; // 2309120
uint64_t BLOCK09_post_k_bias = 0x200237c00; // 2325504
uint64_t BLOCK09_h_to_4h_bn_1 = 0x20023bc00; // 2341888
uint64_t BLOCK09_h_to_4h_bn_0 = 0x200249200; // 2396672
uint64_t BLOCK09_dense_4h_to_h_bn = 0x200256800; // 2451456
uint64_t BLOCK10_ln_k_bias = 0x20025a800; // 2467840
uint64_t BLOCK10_q_bn_bias = 0x20025e800; // 2484224
uint64_t BLOCK10_k_bn_bias = 0x200262800; // 2500608
uint64_t BLOCK10_v_bn_bias = 0x200262c00; // 2501632
uint64_t BLOCK10_atten_bn = 0x200263000; // 2502656
uint64_t BLOCK10_post_k_bias = 0x200267000; // 2519040
uint64_t BLOCK10_h_to_4h_bn_1 = 0x20026b000; // 2535424
uint64_t BLOCK10_h_to_4h_bn_0 = 0x200278600; // 2590208
uint64_t BLOCK10_dense_4h_to_h_bn = 0x200285c00; // 2644992
uint64_t BLOCK11_ln_k_bias = 0x200289c00; // 2661376
uint64_t BLOCK11_q_bn_bias = 0x20028dc00; // 2677760
uint64_t BLOCK11_k_bn_bias = 0x200291c00; // 2694144
uint64_t BLOCK11_v_bn_bias = 0x200292000; // 2695168
uint64_t BLOCK11_atten_bn = 0x200292400; // 2696192
uint64_t BLOCK11_post_k_bias = 0x200296400; // 2712576
uint64_t BLOCK11_h_to_4h_bn_1 = 0x20029a400; // 2728960
uint64_t BLOCK11_h_to_4h_bn_0 = 0x2002a7a00; // 2783744
uint64_t BLOCK11_dense_4h_to_h_bn = 0x2002b5000; // 2838528
uint64_t BLOCK12_ln_k_bias = 0x2002b9000; // 2854912
uint64_t BLOCK12_q_bn_bias = 0x2002bd000; // 2871296
uint64_t BLOCK12_k_bn_bias = 0x2002c1000; // 2887680
uint64_t BLOCK12_v_bn_bias = 0x2002c1400; // 2888704
uint64_t BLOCK12_atten_bn = 0x2002c1800; // 2889728
uint64_t BLOCK12_post_k_bias = 0x2002c5800; // 2906112
uint64_t BLOCK12_h_to_4h_bn_1 = 0x2002c9800; // 2922496
uint64_t BLOCK12_h_to_4h_bn_0 = 0x2002d6e00; // 2977280
uint64_t BLOCK12_dense_4h_to_h_bn = 0x2002e4400; // 3032064
uint64_t BLOCK13_ln_k_bias = 0x2002e8400; // 3048448
uint64_t BLOCK13_q_bn_bias = 0x2002ec400; // 3064832
uint64_t BLOCK13_k_bn_bias = 0x2002f0400; // 3081216
uint64_t BLOCK13_v_bn_bias = 0x2002f0800; // 3082240
uint64_t BLOCK13_atten_bn = 0x2002f0c00; // 3083264
uint64_t BLOCK13_post_k_bias = 0x2002f4c00; // 3099648
uint64_t BLOCK13_h_to_4h_bn_1 = 0x2002f8c00; // 3116032
uint64_t BLOCK13_h_to_4h_bn_0 = 0x200306200; // 3170816
uint64_t BLOCK13_dense_4h_to_h_bn = 0x200313800; // 3225600
uint64_t BLOCK14_ln_k_bias = 0x200317800; // 3241984
uint64_t BLOCK14_q_bn_bias = 0x20031b800; // 3258368
uint64_t BLOCK14_k_bn_bias = 0x20031f800; // 3274752
uint64_t BLOCK14_v_bn_bias = 0x20031fc00; // 3275776
uint64_t BLOCK14_atten_bn = 0x200320000; // 3276800
uint64_t BLOCK14_post_k_bias = 0x200324000; // 3293184
uint64_t BLOCK14_h_to_4h_bn_1 = 0x200328000; // 3309568
uint64_t BLOCK14_h_to_4h_bn_0 = 0x200335600; // 3364352
uint64_t BLOCK14_dense_4h_to_h_bn = 0x200342c00; // 3419136
uint64_t BLOCK15_ln_k_bias = 0x200346c00; // 3435520
uint64_t BLOCK15_q_bn_bias = 0x20034ac00; // 3451904
uint64_t BLOCK15_k_bn_bias = 0x20034ec00; // 3468288
uint64_t BLOCK15_v_bn_bias = 0x20034f000; // 3469312
uint64_t BLOCK15_atten_bn = 0x20034f400; // 3470336
uint64_t BLOCK15_post_k_bias = 0x200353400; // 3486720
uint64_t BLOCK15_h_to_4h_bn_1 = 0x200357400; // 3503104
uint64_t BLOCK15_h_to_4h_bn_0 = 0x200364a00; // 3557888
uint64_t BLOCK15_dense_4h_to_h_bn = 0x200372000; // 3612672
uint64_t BLOCK16_ln_k_bias = 0x200376000; // 3629056
uint64_t BLOCK16_q_bn_bias = 0x20037a000; // 3645440
uint64_t BLOCK16_k_bn_bias = 0x20037e000; // 3661824
uint64_t BLOCK16_v_bn_bias = 0x20037e400; // 3662848
uint64_t BLOCK16_atten_bn = 0x20037e800; // 3663872
uint64_t BLOCK16_post_k_bias = 0x200382800; // 3680256
uint64_t BLOCK16_h_to_4h_bn_1 = 0x200386800; // 3696640
uint64_t BLOCK16_h_to_4h_bn_0 = 0x200393e00; // 3751424
uint64_t BLOCK16_dense_4h_to_h_bn = 0x2003a1400; // 3806208
uint64_t BLOCK17_ln_k_bias = 0x2003a5400; // 3822592
uint64_t BLOCK17_q_bn_bias = 0x2003a9400; // 3838976
uint64_t BLOCK17_k_bn_bias = 0x2003ad400; // 3855360
uint64_t BLOCK17_v_bn_bias = 0x2003ad800; // 3856384
uint64_t BLOCK17_atten_bn = 0x2003adc00; // 3857408
uint64_t BLOCK17_post_k_bias = 0x2003b1c00; // 3873792
uint64_t BLOCK17_h_to_4h_bn_1 = 0x2003b5c00; // 3890176
uint64_t BLOCK17_h_to_4h_bn_0 = 0x2003c3200; // 3944960
uint64_t BLOCK17_dense_4h_to_h_bn = 0x2003d0800; // 3999744
uint64_t BLOCK18_ln_k_bias = 0x2003d4800; // 4016128
uint64_t BLOCK18_q_bn_bias = 0x2003d8800; // 4032512
uint64_t BLOCK18_k_bn_bias = 0x2003dc800; // 4048896
uint64_t BLOCK18_v_bn_bias = 0x2003dcc00; // 4049920
uint64_t BLOCK18_atten_bn = 0x2003dd000; // 4050944
uint64_t BLOCK18_post_k_bias = 0x2003e1000; // 4067328
uint64_t BLOCK18_h_to_4h_bn_1 = 0x2003e5000; // 4083712
uint64_t BLOCK18_h_to_4h_bn_0 = 0x2003f2600; // 4138496
uint64_t BLOCK18_dense_4h_to_h_bn = 0x2003ffc00; // 4193280
uint64_t BLOCK19_ln_k_bias = 0x200403c00; // 4209664
uint64_t BLOCK19_q_bn_bias = 0x200407c00; // 4226048
uint64_t BLOCK19_k_bn_bias = 0x20040bc00; // 4242432
uint64_t BLOCK19_v_bn_bias = 0x20040c000; // 4243456
uint64_t BLOCK19_atten_bn = 0x20040c400; // 4244480
uint64_t BLOCK19_post_k_bias = 0x200410400; // 4260864
uint64_t BLOCK19_h_to_4h_bn_1 = 0x200414400; // 4277248
uint64_t BLOCK19_h_to_4h_bn_0 = 0x200421a00; // 4332032
uint64_t BLOCK19_dense_4h_to_h_bn = 0x20042f000; // 4386816
uint64_t BLOCK20_ln_k_bias = 0x200433000; // 4403200
uint64_t BLOCK20_q_bn_bias = 0x200437000; // 4419584
uint64_t BLOCK20_k_bn_bias = 0x20043b000; // 4435968
uint64_t BLOCK20_v_bn_bias = 0x20043b400; // 4436992
uint64_t BLOCK20_atten_bn = 0x20043b800; // 4438016
uint64_t BLOCK20_post_k_bias = 0x20043f800; // 4454400
uint64_t BLOCK20_h_to_4h_bn_1 = 0x200443800; // 4470784
uint64_t BLOCK20_h_to_4h_bn_0 = 0x200450e00; // 4525568
uint64_t BLOCK20_dense_4h_to_h_bn = 0x20045e400; // 4580352
uint64_t BLOCK21_ln_k_bias = 0x200462400; // 4596736
uint64_t BLOCK21_q_bn_bias = 0x200466400; // 4613120
uint64_t BLOCK21_k_bn_bias = 0x20046a400; // 4629504
uint64_t BLOCK21_v_bn_bias = 0x20046a800; // 4630528
uint64_t BLOCK21_atten_bn = 0x20046ac00; // 4631552
uint64_t BLOCK21_post_k_bias = 0x20046ec00; // 4647936
uint64_t BLOCK21_h_to_4h_bn_1 = 0x200472c00; // 4664320
uint64_t BLOCK21_h_to_4h_bn_0 = 0x200480200; // 4719104
uint64_t BLOCK21_dense_4h_to_h_bn = 0x20048d800; // 4773888
uint64_t BLOCK22_ln_k_bias = 0x200491800; // 4790272
uint64_t BLOCK22_q_bn_bias = 0x200495800; // 4806656
uint64_t BLOCK22_k_bn_bias = 0x200499800; // 4823040
uint64_t BLOCK22_v_bn_bias = 0x200499c00; // 4824064
uint64_t BLOCK22_atten_bn = 0x20049a000; // 4825088
uint64_t BLOCK22_post_k_bias = 0x20049e000; // 4841472
uint64_t BLOCK22_h_to_4h_bn_1 = 0x2004a2000; // 4857856
uint64_t BLOCK22_h_to_4h_bn_0 = 0x2004af600; // 4912640
uint64_t BLOCK22_dense_4h_to_h_bn = 0x2004bcc00; // 4967424
uint64_t BLOCK23_ln_k_bias = 0x2004c0c00; // 4983808
uint64_t BLOCK23_q_bn_bias = 0x2004c4c00; // 5000192
uint64_t BLOCK23_k_bn_bias = 0x2004c8c00; // 5016576
uint64_t BLOCK23_v_bn_bias = 0x2004c9000; // 5017600
uint64_t BLOCK23_atten_bn = 0x2004c9400; // 5018624
uint64_t BLOCK23_post_k_bias = 0x2004cd400; // 5035008
uint64_t BLOCK23_h_to_4h_bn_1 = 0x2004d1400; // 5051392
uint64_t BLOCK23_h_to_4h_bn_0 = 0x2004dea00; // 5106176
uint64_t BLOCK23_dense_4h_to_h_bn = 0x2004ec000; // 5160960
uint64_t BLOCK24_ln_k_bias = 0x2004f0000; // 5177344
uint64_t BLOCK24_q_bn_bias = 0x2004f4000; // 5193728
uint64_t BLOCK24_k_bn_bias = 0x2004f8000; // 5210112
uint64_t BLOCK24_v_bn_bias = 0x2004f8400; // 5211136
uint64_t BLOCK24_atten_bn = 0x2004f8800; // 5212160
uint64_t BLOCK24_post_k_bias = 0x2004fc800; // 5228544
uint64_t BLOCK24_h_to_4h_bn_1 = 0x200500800; // 5244928
uint64_t BLOCK24_h_to_4h_bn_0 = 0x20050de00; // 5299712
uint64_t BLOCK24_dense_4h_to_h_bn = 0x20051b400; // 5354496
uint64_t BLOCK25_ln_k_bias = 0x20051f400; // 5370880
uint64_t BLOCK25_q_bn_bias = 0x200523400; // 5387264
uint64_t BLOCK25_k_bn_bias = 0x200527400; // 5403648
uint64_t BLOCK25_v_bn_bias = 0x200527800; // 5404672
uint64_t BLOCK25_atten_bn = 0x200527c00; // 5405696
uint64_t BLOCK25_post_k_bias = 0x20052bc00; // 5422080
uint64_t BLOCK25_h_to_4h_bn_1 = 0x20052fc00; // 5438464
uint64_t BLOCK25_h_to_4h_bn_0 = 0x20053d200; // 5493248
uint64_t BLOCK25_dense_4h_to_h_bn = 0x20054a800; // 5548032
uint64_t BLOCK26_ln_k_bias = 0x20054e800; // 5564416
uint64_t BLOCK26_q_bn_bias = 0x200552800; // 5580800
uint64_t BLOCK26_k_bn_bias = 0x200556800; // 5597184
uint64_t BLOCK26_v_bn_bias = 0x200556c00; // 5598208
uint64_t BLOCK26_atten_bn = 0x200557000; // 5599232
uint64_t BLOCK26_post_k_bias = 0x20055b000; // 5615616
uint64_t BLOCK26_h_to_4h_bn_1 = 0x20055f000; // 5632000
uint64_t BLOCK26_h_to_4h_bn_0 = 0x20056c600; // 5686784
uint64_t BLOCK26_dense_4h_to_h_bn = 0x200579c00; // 5741568
uint64_t BLOCK27_ln_k_bias = 0x20057dc00; // 5757952
uint64_t BLOCK27_q_bn_bias = 0x200581c00; // 5774336
uint64_t BLOCK27_k_bn_bias = 0x200585c00; // 5790720
uint64_t BLOCK27_v_bn_bias = 0x200586000; // 5791744
uint64_t BLOCK27_atten_bn = 0x200586400; // 5792768
uint64_t BLOCK27_post_k_bias = 0x20058a400; // 5809152
uint64_t BLOCK27_h_to_4h_bn_1 = 0x20058e400; // 5825536
uint64_t BLOCK27_h_to_4h_bn_0 = 0x20059ba00; // 5880320
uint64_t BLOCK27_dense_4h_to_h_bn = 0x2005a9000; // 5935104
uint64_t Final_LN_k_bias = 0x2005ad000; // 5951488
uint64_t Output_Layer_bn = 0x2005b1000; // 5967872

// get weight hbm ptr
uint64_t BLOCK00_q_weight = 0x000000000; // 0
uint64_t BLOCK00_k_weight = 0x000042000; // 270336
uint64_t BLOCK00_v_weight = 0x000046200; // 287232
uint64_t BLOCK00_atten_weight = 0x00004a400; // 304128
uint64_t BLOCK00_h_to_4h_wt_1 = 0x00008c400; // 574464
uint64_t BLOCK00_h_to_4h_wt_0 = 0x000168f00; // 1478400
uint64_t BLOCK00_dense_4h_to_h_wt = 0x000245a00; // 2382336
uint64_t BLOCK01_q_weight = 0x000322a00; // 3287552
uint64_t BLOCK01_k_weight = 0x000364a00; // 3557888
uint64_t BLOCK01_v_weight = 0x000368c00; // 3574784
uint64_t BLOCK01_atten_weight = 0x00036ce00; // 3591680
uint64_t BLOCK01_h_to_4h_wt_1 = 0x0003aee00; // 3862016
uint64_t BLOCK01_h_to_4h_wt_0 = 0x00048b900; // 4765952
uint64_t BLOCK01_dense_4h_to_h_wt = 0x000568400; // 5669888
uint64_t BLOCK02_q_weight = 0x000645400; // 6575104
uint64_t BLOCK02_k_weight = 0x000687400; // 6845440
uint64_t BLOCK02_v_weight = 0x00068b600; // 6862336
uint64_t BLOCK02_atten_weight = 0x00068f800; // 6879232
uint64_t BLOCK02_h_to_4h_wt_1 = 0x0006d1800; // 7149568
uint64_t BLOCK02_h_to_4h_wt_0 = 0x0007ae300; // 8053504
uint64_t BLOCK02_dense_4h_to_h_wt = 0x00088ae00; // 8957440
uint64_t BLOCK03_q_weight = 0x000967e00; // 9862656
uint64_t BLOCK03_k_weight = 0x0009a9e00; // 10132992
uint64_t BLOCK03_v_weight = 0x0009ae000; // 10149888
uint64_t BLOCK03_atten_weight = 0x0009b2200; // 10166784
uint64_t BLOCK03_h_to_4h_wt_1 = 0x0009f4200; // 10437120
uint64_t BLOCK03_h_to_4h_wt_0 = 0x000ad0d00; // 11341056
uint64_t BLOCK03_dense_4h_to_h_wt = 0x000bad800; // 12244992
uint64_t BLOCK04_q_weight = 0x000c8a800; // 13150208
uint64_t BLOCK04_k_weight = 0x000ccc800; // 13420544
uint64_t BLOCK04_v_weight = 0x000cd0a00; // 13437440
uint64_t BLOCK04_atten_weight = 0x000cd4c00; // 13454336
uint64_t BLOCK04_h_to_4h_wt_1 = 0x000d16c00; // 13724672
uint64_t BLOCK04_h_to_4h_wt_0 = 0x000df3700; // 14628608
uint64_t BLOCK04_dense_4h_to_h_wt = 0x000ed0200; // 15532544
uint64_t BLOCK05_q_weight = 0x000fad200; // 16437760
uint64_t BLOCK05_k_weight = 0x000fef200; // 16708096
uint64_t BLOCK05_v_weight = 0x000ff3400; // 16724992
uint64_t BLOCK05_atten_weight = 0x000ff7600; // 16741888
uint64_t BLOCK05_h_to_4h_wt_1 = 0x001039600; // 17012224
uint64_t BLOCK05_h_to_4h_wt_0 = 0x001116100; // 17916160
uint64_t BLOCK05_dense_4h_to_h_wt = 0x0011f2c00; // 18820096
uint64_t BLOCK06_q_weight = 0x0012cfc00; // 19725312
uint64_t BLOCK06_k_weight = 0x001311c00; // 19995648
uint64_t BLOCK06_v_weight = 0x001315e00; // 20012544
uint64_t BLOCK06_atten_weight = 0x00131a000; // 20029440
uint64_t BLOCK06_h_to_4h_wt_1 = 0x00135c000; // 20299776
uint64_t BLOCK06_h_to_4h_wt_0 = 0x001438b00; // 21203712
uint64_t BLOCK06_dense_4h_to_h_wt = 0x001515600; // 22107648
uint64_t BLOCK07_q_weight = 0x0015f2600; // 23012864
uint64_t BLOCK07_k_weight = 0x001634600; // 23283200
uint64_t BLOCK07_v_weight = 0x001638800; // 23300096
uint64_t BLOCK07_atten_weight = 0x00163ca00; // 23316992
uint64_t BLOCK07_h_to_4h_wt_1 = 0x00167ea00; // 23587328
uint64_t BLOCK07_h_to_4h_wt_0 = 0x00175b500; // 24491264
uint64_t BLOCK07_dense_4h_to_h_wt = 0x001838000; // 25395200
uint64_t BLOCK08_q_weight = 0x001915000; // 26300416
uint64_t BLOCK08_k_weight = 0x001957000; // 26570752
uint64_t BLOCK08_v_weight = 0x00195b200; // 26587648
uint64_t BLOCK08_atten_weight = 0x00195f400; // 26604544
uint64_t BLOCK08_h_to_4h_wt_1 = 0x0019a1400; // 26874880
uint64_t BLOCK08_h_to_4h_wt_0 = 0x001a7df00; // 27778816
uint64_t BLOCK08_dense_4h_to_h_wt = 0x001b5aa00; // 28682752
uint64_t BLOCK09_q_weight = 0x001c37a00; // 29587968
uint64_t BLOCK09_k_weight = 0x001c79a00; // 29858304
uint64_t BLOCK09_v_weight = 0x001c7dc00; // 29875200
uint64_t BLOCK09_atten_weight = 0x001c81e00; // 29892096
uint64_t BLOCK09_h_to_4h_wt_1 = 0x001cc3e00; // 30162432
uint64_t BLOCK09_h_to_4h_wt_0 = 0x001da0900; // 31066368
uint64_t BLOCK09_dense_4h_to_h_wt = 0x001e7d400; // 31970304
uint64_t BLOCK10_q_weight = 0x001f5a400; // 32875520
uint64_t BLOCK10_k_weight = 0x001f9c400; // 33145856
uint64_t BLOCK10_v_weight = 0x001fa0600; // 33162752
uint64_t BLOCK10_atten_weight = 0x001fa4800; // 33179648
uint64_t BLOCK10_h_to_4h_wt_1 = 0x001fe6800; // 33449984
uint64_t BLOCK10_h_to_4h_wt_0 = 0x0020c3300; // 34353920
uint64_t BLOCK10_dense_4h_to_h_wt = 0x00219fe00; // 35257856
uint64_t BLOCK11_q_weight = 0x00227ce00; // 36163072
uint64_t BLOCK11_k_weight = 0x0022bee00; // 36433408
uint64_t BLOCK11_v_weight = 0x0022c3000; // 36450304
uint64_t BLOCK11_atten_weight = 0x0022c7200; // 36467200
uint64_t BLOCK11_h_to_4h_wt_1 = 0x002309200; // 36737536
uint64_t BLOCK11_h_to_4h_wt_0 = 0x0023e5d00; // 37641472
uint64_t BLOCK11_dense_4h_to_h_wt = 0x0024c2800; // 38545408
uint64_t BLOCK12_q_weight = 0x00259f800; // 39450624
uint64_t BLOCK12_k_weight = 0x0025e1800; // 39720960
uint64_t BLOCK12_v_weight = 0x0025e5a00; // 39737856
uint64_t BLOCK12_atten_weight = 0x0025e9c00; // 39754752
uint64_t BLOCK12_h_to_4h_wt_1 = 0x00262bc00; // 40025088
uint64_t BLOCK12_h_to_4h_wt_0 = 0x002708700; // 40929024
uint64_t BLOCK12_dense_4h_to_h_wt = 0x0027e5200; // 41832960
uint64_t BLOCK13_q_weight = 0x0028c2200; // 42738176
uint64_t BLOCK13_k_weight = 0x002904200; // 43008512
uint64_t BLOCK13_v_weight = 0x002908400; // 43025408
uint64_t BLOCK13_atten_weight = 0x00290c600; // 43042304
uint64_t BLOCK13_h_to_4h_wt_1 = 0x00294e600; // 43312640
uint64_t BLOCK13_h_to_4h_wt_0 = 0x002a2b100; // 44216576
uint64_t BLOCK13_dense_4h_to_h_wt = 0x002b07c00; // 45120512
uint64_t BLOCK14_q_weight = 0x002be4c00; // 46025728
uint64_t BLOCK14_k_weight = 0x002c26c00; // 46296064
uint64_t BLOCK14_v_weight = 0x002c2ae00; // 46312960
uint64_t BLOCK14_atten_weight = 0x002c2f000; // 46329856
uint64_t BLOCK14_h_to_4h_wt_1 = 0x002c71000; // 46600192
uint64_t BLOCK14_h_to_4h_wt_0 = 0x002d4db00; // 47504128
uint64_t BLOCK14_dense_4h_to_h_wt = 0x002e2a600; // 48408064
uint64_t BLOCK15_q_weight = 0x002f07600; // 49313280
uint64_t BLOCK15_k_weight = 0x002f49600; // 49583616
uint64_t BLOCK15_v_weight = 0x002f4d800; // 49600512
uint64_t BLOCK15_atten_weight = 0x002f51a00; // 49617408
uint64_t BLOCK15_h_to_4h_wt_1 = 0x002f93a00; // 49887744
uint64_t BLOCK15_h_to_4h_wt_0 = 0x003070500; // 50791680
uint64_t BLOCK15_dense_4h_to_h_wt = 0x00314d000; // 51695616
uint64_t BLOCK16_q_weight = 0x00322a000; // 52600832
uint64_t BLOCK16_k_weight = 0x00326c000; // 52871168
uint64_t BLOCK16_v_weight = 0x003270200; // 52888064
uint64_t BLOCK16_atten_weight = 0x003274400; // 52904960
uint64_t BLOCK16_h_to_4h_wt_1 = 0x0032b6400; // 53175296
uint64_t BLOCK16_h_to_4h_wt_0 = 0x003392f00; // 54079232
uint64_t BLOCK16_dense_4h_to_h_wt = 0x00346fa00; // 54983168
uint64_t BLOCK17_q_weight = 0x00354ca00; // 55888384
uint64_t BLOCK17_k_weight = 0x00358ea00; // 56158720
uint64_t BLOCK17_v_weight = 0x003592c00; // 56175616
uint64_t BLOCK17_atten_weight = 0x003596e00; // 56192512
uint64_t BLOCK17_h_to_4h_wt_1 = 0x0035d8e00; // 56462848
uint64_t BLOCK17_h_to_4h_wt_0 = 0x0036b5900; // 57366784
uint64_t BLOCK17_dense_4h_to_h_wt = 0x003792400; // 58270720
uint64_t BLOCK18_q_weight = 0x00386f400; // 59175936
uint64_t BLOCK18_k_weight = 0x0038b1400; // 59446272
uint64_t BLOCK18_v_weight = 0x0038b5600; // 59463168
uint64_t BLOCK18_atten_weight = 0x0038b9800; // 59480064
uint64_t BLOCK18_h_to_4h_wt_1 = 0x0038fb800; // 59750400
uint64_t BLOCK18_h_to_4h_wt_0 = 0x0039d8300; // 60654336
uint64_t BLOCK18_dense_4h_to_h_wt = 0x003ab4e00; // 61558272
uint64_t BLOCK19_q_weight = 0x003b91e00; // 62463488
uint64_t BLOCK19_k_weight = 0x003bd3e00; // 62733824
uint64_t BLOCK19_v_weight = 0x003bd8000; // 62750720
uint64_t BLOCK19_atten_weight = 0x003bdc200; // 62767616
uint64_t BLOCK19_h_to_4h_wt_1 = 0x003c1e200; // 63037952
uint64_t BLOCK19_h_to_4h_wt_0 = 0x003cfad00; // 63941888
uint64_t BLOCK19_dense_4h_to_h_wt = 0x003dd7800; // 64845824
uint64_t BLOCK20_q_weight = 0x003eb4800; // 65751040
uint64_t BLOCK20_k_weight = 0x003ef6800; // 66021376
uint64_t BLOCK20_v_weight = 0x003efaa00; // 66038272
uint64_t BLOCK20_atten_weight = 0x003efec00; // 66055168
uint64_t BLOCK20_h_to_4h_wt_1 = 0x003f40c00; // 66325504
uint64_t BLOCK20_h_to_4h_wt_0 = 0x00401d700; // 67229440
uint64_t BLOCK20_dense_4h_to_h_wt = 0x0040fa200; // 68133376
uint64_t BLOCK21_q_weight = 0x0041d7200; // 69038592
uint64_t BLOCK21_k_weight = 0x004219200; // 69308928
uint64_t BLOCK21_v_weight = 0x00421d400; // 69325824
uint64_t BLOCK21_atten_weight = 0x004221600; // 69342720
uint64_t BLOCK21_h_to_4h_wt_1 = 0x004263600; // 69613056
uint64_t BLOCK21_h_to_4h_wt_0 = 0x004340100; // 70516992
uint64_t BLOCK21_dense_4h_to_h_wt = 0x00441cc00; // 71420928
uint64_t BLOCK22_q_weight = 0x0044f9c00; // 72326144
uint64_t BLOCK22_k_weight = 0x00453bc00; // 72596480
uint64_t BLOCK22_v_weight = 0x00453fe00; // 72613376
uint64_t BLOCK22_atten_weight = 0x004544000; // 72630272
uint64_t BLOCK22_h_to_4h_wt_1 = 0x004586000; // 72900608
uint64_t BLOCK22_h_to_4h_wt_0 = 0x004662b00; // 73804544
uint64_t BLOCK22_dense_4h_to_h_wt = 0x00473f600; // 74708480
uint64_t BLOCK23_q_weight = 0x00481c600; // 75613696
uint64_t BLOCK23_k_weight = 0x00485e600; // 75884032
uint64_t BLOCK23_v_weight = 0x004862800; // 75900928
uint64_t BLOCK23_atten_weight = 0x004866a00; // 75917824
uint64_t BLOCK23_h_to_4h_wt_1 = 0x0048a8a00; // 76188160
uint64_t BLOCK23_h_to_4h_wt_0 = 0x004985500; // 77092096
uint64_t BLOCK23_dense_4h_to_h_wt = 0x004a62000; // 77996032
uint64_t BLOCK24_q_weight = 0x004b3f000; // 78901248
uint64_t BLOCK24_k_weight = 0x004b81000; // 79171584
uint64_t BLOCK24_v_weight = 0x004b85200; // 79188480
uint64_t BLOCK24_atten_weight = 0x004b89400; // 79205376
uint64_t BLOCK24_h_to_4h_wt_1 = 0x004bcb400; // 79475712
uint64_t BLOCK24_h_to_4h_wt_0 = 0x004ca7f00; // 80379648
uint64_t BLOCK24_dense_4h_to_h_wt = 0x004d84a00; // 81283584
uint64_t BLOCK25_q_weight = 0x004e61a00; // 82188800
uint64_t BLOCK25_k_weight = 0x004ea3a00; // 82459136
uint64_t BLOCK25_v_weight = 0x004ea7c00; // 82476032
uint64_t BLOCK25_atten_weight = 0x004eabe00; // 82492928
uint64_t BLOCK25_h_to_4h_wt_1 = 0x004eede00; // 82763264
uint64_t BLOCK25_h_to_4h_wt_0 = 0x004fca900; // 83667200
uint64_t BLOCK25_dense_4h_to_h_wt = 0x0050a7400; // 84571136
uint64_t BLOCK26_q_weight = 0x005184400; // 85476352
uint64_t BLOCK26_k_weight = 0x0051c6400; // 85746688
uint64_t BLOCK26_v_weight = 0x0051ca600; // 85763584
uint64_t BLOCK26_atten_weight = 0x0051ce800; // 85780480
uint64_t BLOCK26_h_to_4h_wt_1 = 0x005210800; // 86050816
uint64_t BLOCK26_h_to_4h_wt_0 = 0x0052ed300; // 86954752
uint64_t BLOCK26_dense_4h_to_h_wt = 0x0053c9e00; // 87858688
uint64_t BLOCK27_q_weight = 0x0054a6e00; // 88763904
uint64_t BLOCK27_k_weight = 0x0054e8e00; // 89034240
uint64_t BLOCK27_v_weight = 0x0054ed000; // 89051136
uint64_t BLOCK27_atten_weight = 0x0054f1200; // 89068032
uint64_t BLOCK27_h_to_4h_wt_1 = 0x005533200; // 89338368
uint64_t BLOCK27_h_to_4h_wt_0 = 0x00560fd00; // 90242304
uint64_t BLOCK27_dense_4h_to_h_wt = 0x0056ec800; // 91146240
uint64_t Output_Layer_wt = 0x0057c9800; // 92051456

void step1 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 532480);
  CSB_Write(device, 195, 64948224);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 81725440);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_STEP
printf("start: step1!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step2 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  for (int for_k = 0; for_k < (kvcache ? 1 : ((((token - last_token) + 16) - 1) / 16)); for_k++) {
    CSB_Write(device, 2, 4096);
    CSB_Write(device, 3, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 4, 1);
    CSB_Write(device, 5, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 6, 1);
    CSB_Write(device, 7, 1024);
    CSB_Write(device, 8, 1024);
    CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
    CSB_Write(device, 10, (81725440 + ((for_k * 16) * 64)));
    CSB_Write(device, 11, 0);
    CSB_Write(device, 12, 16896);
    CSB_Write(device, 13, (137824256 + ((for_k * 16) * 64)));
    CSB_Write(device, 14, 3);
    CSB_Write(device, 15, 28);
    CSB_Write(device, 16, 0);
    CSB_Write(device, 17, 0);
    CSB_Write(device, 18, 0);
    CSB_Write(device, 19, 0);
    CSB_Write(device, 20, 0);
    CSB_Write(device, 21, 1);
    CSB_Write(device, 22, 1);
    CSB_Write(device, 23, 1);
    CSB_Write(device, 24, 1);
    CSB_Write(device, 25, 0);
    CSB_Write(device, 26, 548864);
    CSB_Write(device, 27, 0);
    CSB_Write(device, 28, 0);
    CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("start: step2!\n");
#endif
    while(CSB_Read(device, 1) != 1) {}
  }
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step3 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.pos_emb accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (kvcache ? (0 + ((token - 1) * 64)) : (0 + (last_token * 64))));
  CSB_Write(device, 195, 137824256);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 406259712);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 203, last_token);
  CSB_Write(device, 204, 32);
  CSB_Write(device, 205, 262144);
  CSB_Write(device, 206, 131072);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
#ifdef PRINT_STEP
printf("start: step3!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step4 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  for (int for_k = 0; for_k < (kvcache ? 1 : ((((token - last_token) + 16) - 1) / 16)); for_k++) {
    CSB_Write(device, 2, 4096);
    CSB_Write(device, 3, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 4, 1);
    CSB_Write(device, 5, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 6, 1);
    CSB_Write(device, 7, 256);
    CSB_Write(device, 8, 256);
    CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
    CSB_Write(device, 10, (81725440 + ((for_k * 16) * 64)));
    CSB_Write(device, 11, 270336);
    CSB_Write(device, 12, 16896);
    CSB_Write(device, 13, (137824256 + ((for_k * 16) * 64)));
    CSB_Write(device, 14, 0);
    CSB_Write(device, 15, 28);
    CSB_Write(device, 16, 0);
    CSB_Write(device, 17, 0);
    CSB_Write(device, 18, 0);
    CSB_Write(device, 19, 0);
    CSB_Write(device, 20, 0);
    CSB_Write(device, 21, 1);
    CSB_Write(device, 22, 1);
    CSB_Write(device, 23, 1);
    CSB_Write(device, 24, 1);
    CSB_Write(device, 25, 0);
    CSB_Write(device, 26, 565248);
    CSB_Write(device, 27, 0);
    CSB_Write(device, 28, 0);
    CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("start: step4!\n");
#endif
    while(CSB_Read(device, 1) != 1) {}
  }
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step5 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.pos_emb accel operator node, storage data in cache0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (kvcache ? (0 + ((token - 1) * 64)) : (0 + (last_token * 64))));
  CSB_Write(device, 195, 137824256);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, (kvcache ? (6227968 + ((token - 1) * 64)) : (6227968 + (last_token * 64))));
  CSB_Write(device, 199, 524288);
  CSB_Write(device, 200, 131072);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 203, last_token);
  CSB_Write(device, 204, 2);
  CSB_Write(device, 205, 262144);
  CSB_Write(device, 206, 131072);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
#ifdef PRINT_STEP
printf("start: step5!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step6 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_afterTRP accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 6227968);
  CSB_Write(device, 195, 406259712);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 137824256);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 524288);
  CSB_Write(device, 202, 131072);
  CSB_Write(device, 203, 4);
  CSB_Write(device, 204, token);
  CSB_Write(device, 205, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 206, 11688);
  CSB_Write(device, 207, 991234);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 2);
#ifdef PRINT_STEP
printf("start: step6!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterTRP run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step7 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.softmax accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (1 - kvcache));
  CSB_Write(device, 195, 137824256);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 406259712);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, (((token + 32) - 1) / 32));
  CSB_Write(device, 202, 32);
  CSB_Write(device, 203, token);
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, (token - last_token));
  CSB_Write(device, 206, last_token);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 8);
#ifdef PRINT_STEP
printf("start: step7!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.softmax run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step8 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in cache1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  for (int for_k = 0; for_k < (kvcache ? 1 : ((((token - last_token) + 16) - 1) / 16)); for_k++) {
    CSB_Write(device, 2, 4096);
    CSB_Write(device, 3, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 4, 1);
    CSB_Write(device, 5, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 6, 1);
    CSB_Write(device, 7, 256);
    CSB_Write(device, 8, 256);
    CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
    CSB_Write(device, 10, (81725440 + ((for_k * 16) * 64)));
    CSB_Write(device, 11, 287232);
    CSB_Write(device, 12, 16896);
    CSB_Write(device, 13, ((kvcache ? (7276544 + ((token - 1) * 64)) : (7276544 + (last_token * 64))) + ((for_k * 16) * 64)));
    CSB_Write(device, 14, 0);
    CSB_Write(device, 15, 28);
    CSB_Write(device, 16, 0);
    CSB_Write(device, 17, 0);
    CSB_Write(device, 18, 0);
    CSB_Write(device, 19, 0);
    CSB_Write(device, 20, 0);
    CSB_Write(device, 21, 1);
    CSB_Write(device, 22, 1);
    CSB_Write(device, 23, 1);
    CSB_Write(device, 24, 1);
    CSB_Write(device, 25, 0);
    CSB_Write(device, 26, 566272);
    CSB_Write(device, 27, 0);
    CSB_Write(device, 28, 0);
    CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 31, 131072);
    CSB_Write(device, 32, 131072);
    CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("start: step8!\n");
#endif
    while(CSB_Read(device, 1) != 1) {}
  }
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step9 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_afterF2W accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 7276544);
  CSB_Write(device, 195, 406259712);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 81725440);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 524288);
  CSB_Write(device, 202, 131072);
  CSB_Write(device, 203, (((token + 32) - 1) / 32));
  CSB_Write(device, 204, token);
  CSB_Write(device, 205, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 206, 4);
  CSB_Write(device, 207, 991234);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 1);
#ifdef PRINT_STEP
printf("start: step9!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterF2W run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step10 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  for (int for_k = 0; for_k < (kvcache ? 1 : ((((token - last_token) + 16) - 1) / 16)); for_k++) {
    CSB_Write(device, 2, 4096);
    CSB_Write(device, 3, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 4, 1);
    CSB_Write(device, 5, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 6, 1);
    CSB_Write(device, 7, 1024);
    CSB_Write(device, 8, 1024);
    CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
    CSB_Write(device, 10, (81725440 + ((for_k * 16) * 64)));
    CSB_Write(device, 11, 304128);
    CSB_Write(device, 12, 16896);
    CSB_Write(device, 13, (406259712 + ((for_k * 16) * 64)));
    CSB_Write(device, 14, 3);
    CSB_Write(device, 15, 28);
    CSB_Write(device, 16, 0);
    CSB_Write(device, 17, 0);
    CSB_Write(device, 18, 0);
    CSB_Write(device, 19, 0);
    CSB_Write(device, 20, 0);
    CSB_Write(device, 21, 1);
    CSB_Write(device, 22, 1);
    CSB_Write(device, 23, 1);
    CSB_Write(device, 24, 1);
    CSB_Write(device, 25, 0);
    CSB_Write(device, 26, 567296);
    CSB_Write(device, 27, (64948224 + ((for_k * 16) * 64)));
    CSB_Write(device, 28, 0);
    CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("start: step10!\n");
#endif
    while(CSB_Read(device, 1) != 1) {}
  }
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step11 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 583680);
  CSB_Write(device, 195, 406259712);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 64948224);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_STEP
printf("start: step11!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step12 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  for (int for_k = 0; for_k < (kvcache ? 1 : ((((token - last_token) + 16) - 1) / 16)); for_k++) {
    CSB_Write(device, 2, 4096);
    CSB_Write(device, 3, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 4, 1);
    CSB_Write(device, 5, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 6, 1);
    CSB_Write(device, 7, 1024);
    CSB_Write(device, 8, 384);
    CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
    CSB_Write(device, 10, (64948224 + ((for_k * 16) * 64)));
    CSB_Write(device, 11, 1478400);
    CSB_Write(device, 12, 16896);
    CSB_Write(device, 13, (137824256 + ((for_k * 16) * 64)));
    CSB_Write(device, 14, 13);
    CSB_Write(device, 15, 28);
    CSB_Write(device, 16, 0);
    CSB_Write(device, 17, 0);
    CSB_Write(device, 18, 0);
    CSB_Write(device, 19, 0);
    CSB_Write(device, 20, 0);
    CSB_Write(device, 21, 1);
    CSB_Write(device, 22, 1);
    CSB_Write(device, 23, 1);
    CSB_Write(device, 24, 1);
    CSB_Write(device, 25, 0);
    CSB_Write(device, 26, 654848);
    CSB_Write(device, 27, 0);
    CSB_Write(device, 28, 0);
    CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("start: step12!\n");
#endif
    while(CSB_Read(device, 1) != 1) {}
  }
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step13 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.activate accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 524288);
  CSB_Write(device, 195, 137824256);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 81725440);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 428);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 428);
  CSB_Write(device, 206, 13696);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 16);
#ifdef PRINT_STEP
printf("start: step13!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.activate run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step14 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  for (int for_k = 0; for_k < (kvcache ? 1 : ((((token - last_token) + 16) - 1) / 16)); for_k++) {
    CSB_Write(device, 2, 4096);
    CSB_Write(device, 3, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 4, 1);
    CSB_Write(device, 5, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 6, 1);
    CSB_Write(device, 7, 1024);
    CSB_Write(device, 8, 384);
    CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
    CSB_Write(device, 10, (64948224 + ((for_k * 16) * 64)));
    CSB_Write(device, 11, 574464);
    CSB_Write(device, 12, 16896);
    CSB_Write(device, 13, (137824256 + ((for_k * 16) * 64)));
    CSB_Write(device, 14, 13);
    CSB_Write(device, 15, 28);
    CSB_Write(device, 16, 2);
    CSB_Write(device, 17, 0);
    CSB_Write(device, 18, 0);
    CSB_Write(device, 19, 0);
    CSB_Write(device, 20, 0);
    CSB_Write(device, 21, 1);
    CSB_Write(device, 22, 1);
    CSB_Write(device, 23, 1);
    CSB_Write(device, 24, 1);
    CSB_Write(device, 25, 0);
    CSB_Write(device, 26, 600064);
    CSB_Write(device, 27, (81725440 + ((for_k * 16) * 64)));
    CSB_Write(device, 28, 0);
    CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("start: step14!\n");
#endif
    while(CSB_Read(device, 1) != 1) {}
  }
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step15 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  for (int for_k = 0; for_k < (kvcache ? 1 : ((((token - last_token) + 16) - 1) / 16)); for_k++) {
    CSB_Write(device, 2, 13696);
    CSB_Write(device, 3, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 4, 1);
    CSB_Write(device, 5, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 6, 1);
    CSB_Write(device, 7, 288);
    CSB_Write(device, 8, 64);
    CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
    CSB_Write(device, 10, (137824256 + ((for_k * 16) * 64)));
    CSB_Write(device, 11, 2382336);
    CSB_Write(device, 12, 56576);
    CSB_Write(device, 13, (64948224 + ((for_k * 16) * 64)));
    CSB_Write(device, 14, 14);
    CSB_Write(device, 15, 28);
    CSB_Write(device, 16, 0);
    CSB_Write(device, 17, 0);
    CSB_Write(device, 18, 0);
    CSB_Write(device, 19, 0);
    CSB_Write(device, 20, 0);
    CSB_Write(device, 21, 1);
    CSB_Write(device, 22, 1);
    CSB_Write(device, 23, 1);
    CSB_Write(device, 24, 1);
    CSB_Write(device, 25, 0);
    CSB_Write(device, 26, 709632);
    CSB_Write(device, 27, (406259712 + ((for_k * 16) * 64)));
    CSB_Write(device, 28, 0);
    CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("start: step15!\n");
#endif
    while(CSB_Read(device, 1) != 1) {}
  }
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step16 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 726016);
  CSB_Write(device, 195, 64948224);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 81725440);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_STEP
printf("start: step16!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step17 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  for (int for_k = 0; for_k < (kvcache ? 1 : ((((token - last_token) + 16) - 1) / 16)); for_k++) {
    CSB_Write(device, 2, 4096);
    CSB_Write(device, 3, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 4, 1);
    CSB_Write(device, 5, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 6, 1);
    CSB_Write(device, 7, 1024);
    CSB_Write(device, 8, 1024);
    CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
    CSB_Write(device, 10, (81725440 + ((for_k * 16) * 64)));
    CSB_Write(device, 11, 3287552);
    CSB_Write(device, 12, 16896);
    CSB_Write(device, 13, (406259712 + ((for_k * 16) * 64)));
    CSB_Write(device, 14, 3);
    CSB_Write(device, 15, 28);
    CSB_Write(device, 16, 0);
    CSB_Write(device, 17, 0);
    CSB_Write(device, 18, 0);
    CSB_Write(device, 19, 0);
    CSB_Write(device, 20, 0);
    CSB_Write(device, 21, 1);
    CSB_Write(device, 22, 1);
    CSB_Write(device, 23, 1);
    CSB_Write(device, 24, 1);
    CSB_Write(device, 25, 0);
    CSB_Write(device, 26, 742400);
    CSB_Write(device, 27, 0);
    CSB_Write(device, 28, 0);
    CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("start: step17!\n");
#endif
    while(CSB_Read(device, 1) != 1) {}
  }
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step18 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.pos_emb accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (kvcache ? (0 + ((token - 1) * 64)) : (0 + (last_token * 64))));
  CSB_Write(device, 195, 406259712);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 137824256);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 203, last_token);
  CSB_Write(device, 204, 32);
  CSB_Write(device, 205, 262144);
  CSB_Write(device, 206, 131072);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
#ifdef PRINT_STEP
printf("start: step18!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step19 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  for (int for_k = 0; for_k < (kvcache ? 1 : ((((token - last_token) + 16) - 1) / 16)); for_k++) {
    CSB_Write(device, 2, 4096);
    CSB_Write(device, 3, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 4, 1);
    CSB_Write(device, 5, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 6, 1);
    CSB_Write(device, 7, 256);
    CSB_Write(device, 8, 256);
    CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
    CSB_Write(device, 10, (81725440 + ((for_k * 16) * 64)));
    CSB_Write(device, 11, 3557888);
    CSB_Write(device, 12, 16896);
    CSB_Write(device, 13, (406259712 + ((for_k * 16) * 64)));
    CSB_Write(device, 14, 0);
    CSB_Write(device, 15, 28);
    CSB_Write(device, 16, 0);
    CSB_Write(device, 17, 0);
    CSB_Write(device, 18, 0);
    CSB_Write(device, 19, 0);
    CSB_Write(device, 20, 0);
    CSB_Write(device, 21, 1);
    CSB_Write(device, 22, 1);
    CSB_Write(device, 23, 1);
    CSB_Write(device, 24, 1);
    CSB_Write(device, 25, 0);
    CSB_Write(device, 26, 758784);
    CSB_Write(device, 27, 0);
    CSB_Write(device, 28, 0);
    CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("start: step19!\n");
#endif
    while(CSB_Read(device, 1) != 1) {}
  }
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step20 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.pos_emb accel operator node, storage data in cache2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (kvcache ? (0 + ((token - 1) * 64)) : (0 + (last_token * 64))));
  CSB_Write(device, 195, 406259712);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, (kvcache ? (8325120 + ((token - 1) * 64)) : (8325120 + (last_token * 64))));
  CSB_Write(device, 199, 524288);
  CSB_Write(device, 200, 131072);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 203, last_token);
  CSB_Write(device, 204, 2);
  CSB_Write(device, 205, 262144);
  CSB_Write(device, 206, 131072);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
#ifdef PRINT_STEP
printf("start: step20!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step21 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_afterTRP accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 8325120);
  CSB_Write(device, 195, 137824256);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 406259712);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 524288);
  CSB_Write(device, 202, 131072);
  CSB_Write(device, 203, 4);
  CSB_Write(device, 204, token);
  CSB_Write(device, 205, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 206, 11688);
  CSB_Write(device, 207, 991234);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 2);
#ifdef PRINT_STEP
printf("start: step21!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterTRP run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step22 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.softmax accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (1 - kvcache));
  CSB_Write(device, 195, 406259712);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 137824256);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, (((token + 32) - 1) / 32));
  CSB_Write(device, 202, 32);
  CSB_Write(device, 203, token);
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, (token - last_token));
  CSB_Write(device, 206, last_token);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 8);
#ifdef PRINT_STEP
printf("start: step22!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.softmax run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step23 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in cache3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  for (int for_k = 0; for_k < (kvcache ? 1 : ((((token - last_token) + 16) - 1) / 16)); for_k++) {
    CSB_Write(device, 2, 4096);
    CSB_Write(device, 3, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 4, 1);
    CSB_Write(device, 5, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 6, 1);
    CSB_Write(device, 7, 256);
    CSB_Write(device, 8, 256);
    CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
    CSB_Write(device, 10, (81725440 + ((for_k * 16) * 64)));
    CSB_Write(device, 11, 3574784);
    CSB_Write(device, 12, 16896);
    CSB_Write(device, 13, ((kvcache ? (9373696 + ((token - 1) * 64)) : (9373696 + (last_token * 64))) + ((for_k * 16) * 64)));
    CSB_Write(device, 14, 0);
    CSB_Write(device, 15, 28);
    CSB_Write(device, 16, 0);
    CSB_Write(device, 17, 0);
    CSB_Write(device, 18, 0);
    CSB_Write(device, 19, 0);
    CSB_Write(device, 20, 0);
    CSB_Write(device, 21, 1);
    CSB_Write(device, 22, 1);
    CSB_Write(device, 23, 1);
    CSB_Write(device, 24, 1);
    CSB_Write(device, 25, 0);
    CSB_Write(device, 26, 759808);
    CSB_Write(device, 27, 0);
    CSB_Write(device, 28, 0);
    CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 31, 131072);
    CSB_Write(device, 32, 131072);
    CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("start: step23!\n");
#endif
    while(CSB_Read(device, 1) != 1) {}
  }
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step24 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_afterF2W accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 9373696);
  CSB_Write(device, 195, 137824256);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 81725440);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 524288);
  CSB_Write(device, 202, 131072);
  CSB_Write(device, 203, (((token + 32) - 1) / 32));
  CSB_Write(device, 204, token);
  CSB_Write(device, 205, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 206, 4);
  CSB_Write(device, 207, 991234);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 1);
#ifdef PRINT_STEP
printf("start: step24!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterF2W run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step25 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  for (int for_k = 0; for_k < (kvcache ? 1 : ((((token - last_token) + 16) - 1) / 16)); for_k++) {
    CSB_Write(device, 2, 4096);
    CSB_Write(device, 3, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 4, 1);
    CSB_Write(device, 5, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 6, 1);
    CSB_Write(device, 7, 1024);
    CSB_Write(device, 8, 1024);
    CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
    CSB_Write(device, 10, (81725440 + ((for_k * 16) * 64)));
    CSB_Write(device, 11, 3591680);
    CSB_Write(device, 12, 16896);
    CSB_Write(device, 13, (137824256 + ((for_k * 16) * 64)));
    CSB_Write(device, 14, 3);
    CSB_Write(device, 15, 28);
    CSB_Write(device, 16, 0);
    CSB_Write(device, 17, 0);
    CSB_Write(device, 18, 0);
    CSB_Write(device, 19, 0);
    CSB_Write(device, 20, 0);
    CSB_Write(device, 21, 1);
    CSB_Write(device, 22, 1);
    CSB_Write(device, 23, 1);
    CSB_Write(device, 24, 1);
    CSB_Write(device, 25, 0);
    CSB_Write(device, 26, 760832);
    CSB_Write(device, 27, (64948224 + ((for_k * 16) * 64)));
    CSB_Write(device, 28, 0);
    CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("start: step25!\n");
#endif
    while(CSB_Read(device, 1) != 1) {}
  }
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step26 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 777216);
  CSB_Write(device, 195, 137824256);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 64948224);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_STEP
printf("start: step26!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step27 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  for (int for_k = 0; for_k < (kvcache ? 1 : ((((token - last_token) + 16) - 1) / 16)); for_k++) {
    CSB_Write(device, 2, 4096);
    CSB_Write(device, 3, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 4, 1);
    CSB_Write(device, 5, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 6, 1);
    CSB_Write(device, 7, 1024);
    CSB_Write(device, 8, 384);
    CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
    CSB_Write(device, 10, (64948224 + ((for_k * 16) * 64)));
    CSB_Write(device, 11, 4765952);
    CSB_Write(device, 12, 16896);
    CSB_Write(device, 13, (81725440 + ((for_k * 16) * 64)));
    CSB_Write(device, 14, 13);
    CSB_Write(device, 15, 28);
    CSB_Write(device, 16, 0);
    CSB_Write(device, 17, 0);
    CSB_Write(device, 18, 0);
    CSB_Write(device, 19, 0);
    CSB_Write(device, 20, 0);
    CSB_Write(device, 21, 1);
    CSB_Write(device, 22, 1);
    CSB_Write(device, 23, 1);
    CSB_Write(device, 24, 1);
    CSB_Write(device, 25, 0);
    CSB_Write(device, 26, 848384);
    CSB_Write(device, 27, 0);
    CSB_Write(device, 28, 0);
    CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("start: step27!\n");
#endif
    while(CSB_Read(device, 1) != 1) {}
  }
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step28 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.activate accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 524288);
  CSB_Write(device, 195, 81725440);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 406259712);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 428);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 428);
  CSB_Write(device, 206, 13696);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 16);
#ifdef PRINT_STEP
printf("start: step28!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.activate run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step29 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  for (int for_k = 0; for_k < (kvcache ? 1 : ((((token - last_token) + 16) - 1) / 16)); for_k++) {
    CSB_Write(device, 2, 4096);
    CSB_Write(device, 3, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 4, 1);
    CSB_Write(device, 5, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 6, 1);
    CSB_Write(device, 7, 1024);
    CSB_Write(device, 8, 384);
    CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
    CSB_Write(device, 10, (64948224 + ((for_k * 16) * 64)));
    CSB_Write(device, 11, 3862016);
    CSB_Write(device, 12, 16896);
    CSB_Write(device, 13, (81725440 + ((for_k * 16) * 64)));
    CSB_Write(device, 14, 13);
    CSB_Write(device, 15, 28);
    CSB_Write(device, 16, 2);
    CSB_Write(device, 17, 0);
    CSB_Write(device, 18, 0);
    CSB_Write(device, 19, 0);
    CSB_Write(device, 20, 0);
    CSB_Write(device, 21, 1);
    CSB_Write(device, 22, 1);
    CSB_Write(device, 23, 1);
    CSB_Write(device, 24, 1);
    CSB_Write(device, 25, 0);
    CSB_Write(device, 26, 793600);
    CSB_Write(device, 27, (406259712 + ((for_k * 16) * 64)));
    CSB_Write(device, 28, 0);
    CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("start: step29!\n");
#endif
    while(CSB_Read(device, 1) != 1) {}
  }
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step30 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  for (int for_k = 0; for_k < (kvcache ? 1 : ((((token - last_token) + 16) - 1) / 16)); for_k++) {
    CSB_Write(device, 2, 13696);
    CSB_Write(device, 3, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 4, 1);
    CSB_Write(device, 5, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 6, 1);
    CSB_Write(device, 7, 288);
    CSB_Write(device, 8, 64);
    CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
    CSB_Write(device, 10, (81725440 + ((for_k * 16) * 64)));
    CSB_Write(device, 11, 5669888);
    CSB_Write(device, 12, 56576);
    CSB_Write(device, 13, (64948224 + ((for_k * 16) * 64)));
    CSB_Write(device, 14, 14);
    CSB_Write(device, 15, 28);
    CSB_Write(device, 16, 0);
    CSB_Write(device, 17, 0);
    CSB_Write(device, 18, 0);
    CSB_Write(device, 19, 0);
    CSB_Write(device, 20, 0);
    CSB_Write(device, 21, 1);
    CSB_Write(device, 22, 1);
    CSB_Write(device, 23, 1);
    CSB_Write(device, 24, 1);
    CSB_Write(device, 25, 0);
    CSB_Write(device, 26, 903168);
    CSB_Write(device, 27, (137824256 + ((for_k * 16) * 64)));
    CSB_Write(device, 28, 0);
    CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("start: step30!\n");
#endif
    while(CSB_Read(device, 1) != 1) {}
  }
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step31 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 919552);
  CSB_Write(device, 195, 64948224);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 81725440);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_STEP
printf("start: step31!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step32 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  for (int for_k = 0; for_k < (kvcache ? 1 : ((((token - last_token) + 16) - 1) / 16)); for_k++) {
    CSB_Write(device, 2, 4096);
    CSB_Write(device, 3, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 4, 1);
    CSB_Write(device, 5, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 6, 1);
    CSB_Write(device, 7, 1024);
    CSB_Write(device, 8, 1024);
    CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
    CSB_Write(device, 10, (81725440 + ((for_k * 16) * 64)));
    CSB_Write(device, 11, 6575104);
    CSB_Write(device, 12, 16896);
    CSB_Write(device, 13, (137824256 + ((for_k * 16) * 64)));
    CSB_Write(device, 14, 3);
    CSB_Write(device, 15, 28);
    CSB_Write(device, 16, 0);
    CSB_Write(device, 17, 0);
    CSB_Write(device, 18, 0);
    CSB_Write(device, 19, 0);
    CSB_Write(device, 20, 0);
    CSB_Write(device, 21, 1);
    CSB_Write(device, 22, 1);
    CSB_Write(device, 23, 1);
    CSB_Write(device, 24, 1);
    CSB_Write(device, 25, 0);
    CSB_Write(device, 26, 935936);
    CSB_Write(device, 27, 0);
    CSB_Write(device, 28, 0);
    CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("start: step32!\n");
#endif
    while(CSB_Read(device, 1) != 1) {}
  }
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step33 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.pos_emb accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (kvcache ? (0 + ((token - 1) * 64)) : (0 + (last_token * 64))));
  CSB_Write(device, 195, 137824256);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 406259712);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 203, last_token);
  CSB_Write(device, 204, 32);
  CSB_Write(device, 205, 262144);
  CSB_Write(device, 206, 131072);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
#ifdef PRINT_STEP
printf("start: step33!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step34 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  for (int for_k = 0; for_k < (kvcache ? 1 : ((((token - last_token) + 16) - 1) / 16)); for_k++) {
    CSB_Write(device, 2, 4096);
    CSB_Write(device, 3, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 4, 1);
    CSB_Write(device, 5, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 6, 1);
    CSB_Write(device, 7, 256);
    CSB_Write(device, 8, 256);
    CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
    CSB_Write(device, 10, (81725440 + ((for_k * 16) * 64)));
    CSB_Write(device, 11, 6845440);
    CSB_Write(device, 12, 16896);
    CSB_Write(device, 13, (137824256 + ((for_k * 16) * 64)));
    CSB_Write(device, 14, 0);
    CSB_Write(device, 15, 28);
    CSB_Write(device, 16, 0);
    CSB_Write(device, 17, 0);
    CSB_Write(device, 18, 0);
    CSB_Write(device, 19, 0);
    CSB_Write(device, 20, 0);
    CSB_Write(device, 21, 1);
    CSB_Write(device, 22, 1);
    CSB_Write(device, 23, 1);
    CSB_Write(device, 24, 1);
    CSB_Write(device, 25, 0);
    CSB_Write(device, 26, 952320);
    CSB_Write(device, 27, 0);
    CSB_Write(device, 28, 0);
    CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("start: step34!\n");
#endif
    while(CSB_Read(device, 1) != 1) {}
  }
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step35 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.pos_emb accel operator node, storage data in cache4 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (kvcache ? (0 + ((token - 1) * 64)) : (0 + (last_token * 64))));
  CSB_Write(device, 195, 137824256);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, (kvcache ? (10422272 + ((token - 1) * 64)) : (10422272 + (last_token * 64))));
  CSB_Write(device, 199, 524288);
  CSB_Write(device, 200, 131072);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 203, last_token);
  CSB_Write(device, 204, 2);
  CSB_Write(device, 205, 262144);
  CSB_Write(device, 206, 131072);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
#ifdef PRINT_STEP
printf("start: step35!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step36 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_afterTRP accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 10422272);
  CSB_Write(device, 195, 406259712);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 137824256);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 524288);
  CSB_Write(device, 202, 131072);
  CSB_Write(device, 203, 4);
  CSB_Write(device, 204, token);
  CSB_Write(device, 205, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 206, 11688);
  CSB_Write(device, 207, 991234);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 2);
#ifdef PRINT_STEP
printf("start: step36!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterTRP run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step37 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.softmax accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (1 - kvcache));
  CSB_Write(device, 195, 137824256);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 406259712);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, (((token + 32) - 1) / 32));
  CSB_Write(device, 202, 32);
  CSB_Write(device, 203, token);
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, (token - last_token));
  CSB_Write(device, 206, last_token);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 8);
#ifdef PRINT_STEP
printf("start: step37!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.softmax run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step38 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in cache5 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  for (int for_k = 0; for_k < (kvcache ? 1 : ((((token - last_token) + 16) - 1) / 16)); for_k++) {
    CSB_Write(device, 2, 4096);
    CSB_Write(device, 3, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 4, 1);
    CSB_Write(device, 5, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 6, 1);
    CSB_Write(device, 7, 256);
    CSB_Write(device, 8, 256);
    CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
    CSB_Write(device, 10, (81725440 + ((for_k * 16) * 64)));
    CSB_Write(device, 11, 6862336);
    CSB_Write(device, 12, 16896);
    CSB_Write(device, 13, ((kvcache ? (11470848 + ((token - 1) * 64)) : (11470848 + (last_token * 64))) + ((for_k * 16) * 64)));
    CSB_Write(device, 14, 0);
    CSB_Write(device, 15, 28);
    CSB_Write(device, 16, 0);
    CSB_Write(device, 17, 0);
    CSB_Write(device, 18, 0);
    CSB_Write(device, 19, 0);
    CSB_Write(device, 20, 0);
    CSB_Write(device, 21, 1);
    CSB_Write(device, 22, 1);
    CSB_Write(device, 23, 1);
    CSB_Write(device, 24, 1);
    CSB_Write(device, 25, 0);
    CSB_Write(device, 26, 953344);
    CSB_Write(device, 27, 0);
    CSB_Write(device, 28, 0);
    CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 31, 131072);
    CSB_Write(device, 32, 131072);
    CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("start: step38!\n");
#endif
    while(CSB_Read(device, 1) != 1) {}
  }
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step39 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_afterF2W accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 11470848);
  CSB_Write(device, 195, 406259712);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 81725440);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 524288);
  CSB_Write(device, 202, 131072);
  CSB_Write(device, 203, (((token + 32) - 1) / 32));
  CSB_Write(device, 204, token);
  CSB_Write(device, 205, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 206, 4);
  CSB_Write(device, 207, 991234);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 1);
#ifdef PRINT_STEP
printf("start: step39!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterF2W run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step40 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  for (int for_k = 0; for_k < (kvcache ? 1 : ((((token - last_token) + 16) - 1) / 16)); for_k++) {
    CSB_Write(device, 2, 4096);
    CSB_Write(device, 3, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 4, 1);
    CSB_Write(device, 5, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 6, 1);
    CSB_Write(device, 7, 1024);
    CSB_Write(device, 8, 1024);
    CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
    CSB_Write(device, 10, (81725440 + ((for_k * 16) * 64)));
    CSB_Write(device, 11, 6879232);
    CSB_Write(device, 12, 16896);
    CSB_Write(device, 13, (406259712 + ((for_k * 16) * 64)));
    CSB_Write(device, 14, 3);
    CSB_Write(device, 15, 28);
    CSB_Write(device, 16, 0);
    CSB_Write(device, 17, 0);
    CSB_Write(device, 18, 0);
    CSB_Write(device, 19, 0);
    CSB_Write(device, 20, 0);
    CSB_Write(device, 21, 1);
    CSB_Write(device, 22, 1);
    CSB_Write(device, 23, 1);
    CSB_Write(device, 24, 1);
    CSB_Write(device, 25, 0);
    CSB_Write(device, 26, 954368);
    CSB_Write(device, 27, (64948224 + ((for_k * 16) * 64)));
    CSB_Write(device, 28, 0);
    CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("start: step40!\n");
#endif
    while(CSB_Read(device, 1) != 1) {}
  }
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step41 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 970752);
  CSB_Write(device, 195, 406259712);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 64948224);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_STEP
printf("start: step41!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step42 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  for (int for_k = 0; for_k < (kvcache ? 1 : ((((token - last_token) + 16) - 1) / 16)); for_k++) {
    CSB_Write(device, 2, 4096);
    CSB_Write(device, 3, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 4, 1);
    CSB_Write(device, 5, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 6, 1);
    CSB_Write(device, 7, 1024);
    CSB_Write(device, 8, 384);
    CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
    CSB_Write(device, 10, (64948224 + ((for_k * 16) * 64)));
    CSB_Write(device, 11, 8053504);
    CSB_Write(device, 12, 16896);
    CSB_Write(device, 13, (81725440 + ((for_k * 16) * 64)));
    CSB_Write(device, 14, 13);
    CSB_Write(device, 15, 28);
    CSB_Write(device, 16, 0);
    CSB_Write(device, 17, 0);
    CSB_Write(device, 18, 0);
    CSB_Write(device, 19, 0);
    CSB_Write(device, 20, 0);
    CSB_Write(device, 21, 1);
    CSB_Write(device, 22, 1);
    CSB_Write(device, 23, 1);
    CSB_Write(device, 24, 1);
    CSB_Write(device, 25, 0);
    CSB_Write(device, 26, 1041920);
    CSB_Write(device, 27, 0);
    CSB_Write(device, 28, 0);
    CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("start: step42!\n");
#endif
    while(CSB_Read(device, 1) != 1) {}
  }
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step43 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.activate accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 524288);
  CSB_Write(device, 195, 81725440);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 137824256);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 428);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 428);
  CSB_Write(device, 206, 13696);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 16);
#ifdef PRINT_STEP
printf("start: step43!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.activate run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step44 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  for (int for_k = 0; for_k < (kvcache ? 1 : ((((token - last_token) + 16) - 1) / 16)); for_k++) {
    CSB_Write(device, 2, 4096);
    CSB_Write(device, 3, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 4, 1);
    CSB_Write(device, 5, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 6, 1);
    CSB_Write(device, 7, 1024);
    CSB_Write(device, 8, 384);
    CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
    CSB_Write(device, 10, (64948224 + ((for_k * 16) * 64)));
    CSB_Write(device, 11, 7149568);
    CSB_Write(device, 12, 16896);
    CSB_Write(device, 13, (81725440 + ((for_k * 16) * 64)));
    CSB_Write(device, 14, 13);
    CSB_Write(device, 15, 28);
    CSB_Write(device, 16, 2);
    CSB_Write(device, 17, 0);
    CSB_Write(device, 18, 0);
    CSB_Write(device, 19, 0);
    CSB_Write(device, 20, 0);
    CSB_Write(device, 21, 1);
    CSB_Write(device, 22, 1);
    CSB_Write(device, 23, 1);
    CSB_Write(device, 24, 1);
    CSB_Write(device, 25, 0);
    CSB_Write(device, 26, 987136);
    CSB_Write(device, 27, (137824256 + ((for_k * 16) * 64)));
    CSB_Write(device, 28, 0);
    CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("start: step44!\n");
#endif
    while(CSB_Read(device, 1) != 1) {}
  }
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step45 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  for (int for_k = 0; for_k < (kvcache ? 1 : ((((token - last_token) + 16) - 1) / 16)); for_k++) {
    CSB_Write(device, 2, 13696);
    CSB_Write(device, 3, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 4, 1);
    CSB_Write(device, 5, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 6, 1);
    CSB_Write(device, 7, 288);
    CSB_Write(device, 8, 64);
    CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
    CSB_Write(device, 10, (81725440 + ((for_k * 16) * 64)));
    CSB_Write(device, 11, 8957440);
    CSB_Write(device, 12, 56576);
    CSB_Write(device, 13, (64948224 + ((for_k * 16) * 64)));
    CSB_Write(device, 14, 14);
    CSB_Write(device, 15, 28);
    CSB_Write(device, 16, 0);
    CSB_Write(device, 17, 0);
    CSB_Write(device, 18, 0);
    CSB_Write(device, 19, 0);
    CSB_Write(device, 20, 0);
    CSB_Write(device, 21, 1);
    CSB_Write(device, 22, 1);
    CSB_Write(device, 23, 1);
    CSB_Write(device, 24, 1);
    CSB_Write(device, 25, 0);
    CSB_Write(device, 26, 1096704);
    CSB_Write(device, 27, (406259712 + ((for_k * 16) * 64)));
    CSB_Write(device, 28, 0);
    CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("start: step45!\n");
#endif
    while(CSB_Read(device, 1) != 1) {}
  }
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step46 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 1113088);
  CSB_Write(device, 195, 64948224);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 81725440);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_STEP
printf("start: step46!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step47 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  for (int for_k = 0; for_k < (kvcache ? 1 : ((((token - last_token) + 16) - 1) / 16)); for_k++) {
    CSB_Write(device, 2, 4096);
    CSB_Write(device, 3, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 4, 1);
    CSB_Write(device, 5, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 6, 1);
    CSB_Write(device, 7, 1024);
    CSB_Write(device, 8, 1024);
    CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
    CSB_Write(device, 10, (81725440 + ((for_k * 16) * 64)));
    CSB_Write(device, 11, 9862656);
    CSB_Write(device, 12, 16896);
    CSB_Write(device, 13, (406259712 + ((for_k * 16) * 64)));
    CSB_Write(device, 14, 3);
    CSB_Write(device, 15, 28);
    CSB_Write(device, 16, 0);
    CSB_Write(device, 17, 0);
    CSB_Write(device, 18, 0);
    CSB_Write(device, 19, 0);
    CSB_Write(device, 20, 0);
    CSB_Write(device, 21, 1);
    CSB_Write(device, 22, 1);
    CSB_Write(device, 23, 1);
    CSB_Write(device, 24, 1);
    CSB_Write(device, 25, 0);
    CSB_Write(device, 26, 1129472);
    CSB_Write(device, 27, 0);
    CSB_Write(device, 28, 0);
    CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("start: step47!\n");
#endif
    while(CSB_Read(device, 1) != 1) {}
  }
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step48 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.pos_emb accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (kvcache ? (0 + ((token - 1) * 64)) : (0 + (last_token * 64))));
  CSB_Write(device, 195, 406259712);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 137824256);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 203, last_token);
  CSB_Write(device, 204, 32);
  CSB_Write(device, 205, 262144);
  CSB_Write(device, 206, 131072);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
#ifdef PRINT_STEP
printf("start: step48!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step49 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  for (int for_k = 0; for_k < (kvcache ? 1 : ((((token - last_token) + 16) - 1) / 16)); for_k++) {
    CSB_Write(device, 2, 4096);
    CSB_Write(device, 3, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 4, 1);
    CSB_Write(device, 5, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 6, 1);
    CSB_Write(device, 7, 256);
    CSB_Write(device, 8, 256);
    CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
    CSB_Write(device, 10, (81725440 + ((for_k * 16) * 64)));
    CSB_Write(device, 11, 10132992);
    CSB_Write(device, 12, 16896);
    CSB_Write(device, 13, (406259712 + ((for_k * 16) * 64)));
    CSB_Write(device, 14, 0);
    CSB_Write(device, 15, 28);
    CSB_Write(device, 16, 0);
    CSB_Write(device, 17, 0);
    CSB_Write(device, 18, 0);
    CSB_Write(device, 19, 0);
    CSB_Write(device, 20, 0);
    CSB_Write(device, 21, 1);
    CSB_Write(device, 22, 1);
    CSB_Write(device, 23, 1);
    CSB_Write(device, 24, 1);
    CSB_Write(device, 25, 0);
    CSB_Write(device, 26, 1145856);
    CSB_Write(device, 27, 0);
    CSB_Write(device, 28, 0);
    CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("start: step49!\n");
#endif
    while(CSB_Read(device, 1) != 1) {}
  }
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step50 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.pos_emb accel operator node, storage data in cache6 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (kvcache ? (0 + ((token - 1) * 64)) : (0 + (last_token * 64))));
  CSB_Write(device, 195, 406259712);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, (kvcache ? (12519424 + ((token - 1) * 64)) : (12519424 + (last_token * 64))));
  CSB_Write(device, 199, 524288);
  CSB_Write(device, 200, 131072);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 203, last_token);
  CSB_Write(device, 204, 2);
  CSB_Write(device, 205, 262144);
  CSB_Write(device, 206, 131072);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
#ifdef PRINT_STEP
printf("start: step50!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step51 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_afterTRP accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 12519424);
  CSB_Write(device, 195, 137824256);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 406259712);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 524288);
  CSB_Write(device, 202, 131072);
  CSB_Write(device, 203, 4);
  CSB_Write(device, 204, token);
  CSB_Write(device, 205, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 206, 11688);
  CSB_Write(device, 207, 991234);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 2);
#ifdef PRINT_STEP
printf("start: step51!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterTRP run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step52 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.softmax accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (1 - kvcache));
  CSB_Write(device, 195, 406259712);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 137824256);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, (((token + 32) - 1) / 32));
  CSB_Write(device, 202, 32);
  CSB_Write(device, 203, token);
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, (token - last_token));
  CSB_Write(device, 206, last_token);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 8);
#ifdef PRINT_STEP
printf("start: step52!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.softmax run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step53 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in cache7 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  for (int for_k = 0; for_k < (kvcache ? 1 : ((((token - last_token) + 16) - 1) / 16)); for_k++) {
    CSB_Write(device, 2, 4096);
    CSB_Write(device, 3, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 4, 1);
    CSB_Write(device, 5, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 6, 1);
    CSB_Write(device, 7, 256);
    CSB_Write(device, 8, 256);
    CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
    CSB_Write(device, 10, (81725440 + ((for_k * 16) * 64)));
    CSB_Write(device, 11, 10149888);
    CSB_Write(device, 12, 16896);
    CSB_Write(device, 13, ((kvcache ? (13568000 + ((token - 1) * 64)) : (13568000 + (last_token * 64))) + ((for_k * 16) * 64)));
    CSB_Write(device, 14, 0);
    CSB_Write(device, 15, 28);
    CSB_Write(device, 16, 0);
    CSB_Write(device, 17, 0);
    CSB_Write(device, 18, 0);
    CSB_Write(device, 19, 0);
    CSB_Write(device, 20, 0);
    CSB_Write(device, 21, 1);
    CSB_Write(device, 22, 1);
    CSB_Write(device, 23, 1);
    CSB_Write(device, 24, 1);
    CSB_Write(device, 25, 0);
    CSB_Write(device, 26, 1146880);
    CSB_Write(device, 27, 0);
    CSB_Write(device, 28, 0);
    CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 31, 131072);
    CSB_Write(device, 32, 131072);
    CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("start: step53!\n");
#endif
    while(CSB_Read(device, 1) != 1) {}
  }
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step54 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_afterF2W accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 13568000);
  CSB_Write(device, 195, 137824256);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 81725440);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 524288);
  CSB_Write(device, 202, 131072);
  CSB_Write(device, 203, (((token + 32) - 1) / 32));
  CSB_Write(device, 204, token);
  CSB_Write(device, 205, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 206, 4);
  CSB_Write(device, 207, 991234);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 1);
#ifdef PRINT_STEP
printf("start: step54!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterF2W run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step55 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  for (int for_k = 0; for_k < (kvcache ? 1 : ((((token - last_token) + 16) - 1) / 16)); for_k++) {
    CSB_Write(device, 2, 4096);
    CSB_Write(device, 3, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 4, 1);
    CSB_Write(device, 5, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 6, 1);
    CSB_Write(device, 7, 1024);
    CSB_Write(device, 8, 1024);
    CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
    CSB_Write(device, 10, (81725440 + ((for_k * 16) * 64)));
    CSB_Write(device, 11, 10166784);
    CSB_Write(device, 12, 16896);
    CSB_Write(device, 13, (137824256 + ((for_k * 16) * 64)));
    CSB_Write(device, 14, 3);
    CSB_Write(device, 15, 28);
    CSB_Write(device, 16, 0);
    CSB_Write(device, 17, 0);
    CSB_Write(device, 18, 0);
    CSB_Write(device, 19, 0);
    CSB_Write(device, 20, 0);
    CSB_Write(device, 21, 1);
    CSB_Write(device, 22, 1);
    CSB_Write(device, 23, 1);
    CSB_Write(device, 24, 1);
    CSB_Write(device, 25, 0);
    CSB_Write(device, 26, 1147904);
    CSB_Write(device, 27, (64948224 + ((for_k * 16) * 64)));
    CSB_Write(device, 28, 0);
    CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("start: step55!\n");
#endif
    while(CSB_Read(device, 1) != 1) {}
  }
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step56 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 1164288);
  CSB_Write(device, 195, 137824256);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 64948224);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_STEP
printf("start: step56!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step57 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  for (int for_k = 0; for_k < (kvcache ? 1 : ((((token - last_token) + 16) - 1) / 16)); for_k++) {
    CSB_Write(device, 2, 4096);
    CSB_Write(device, 3, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 4, 1);
    CSB_Write(device, 5, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 6, 1);
    CSB_Write(device, 7, 1024);
    CSB_Write(device, 8, 384);
    CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
    CSB_Write(device, 10, (64948224 + ((for_k * 16) * 64)));
    CSB_Write(device, 11, 11341056);
    CSB_Write(device, 12, 16896);
    CSB_Write(device, 13, (81725440 + ((for_k * 16) * 64)));
    CSB_Write(device, 14, 13);
    CSB_Write(device, 15, 28);
    CSB_Write(device, 16, 0);
    CSB_Write(device, 17, 0);
    CSB_Write(device, 18, 0);
    CSB_Write(device, 19, 0);
    CSB_Write(device, 20, 0);
    CSB_Write(device, 21, 1);
    CSB_Write(device, 22, 1);
    CSB_Write(device, 23, 1);
    CSB_Write(device, 24, 1);
    CSB_Write(device, 25, 0);
    CSB_Write(device, 26, 1235456);
    CSB_Write(device, 27, 0);
    CSB_Write(device, 28, 0);
    CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("start: step57!\n");
#endif
    while(CSB_Read(device, 1) != 1) {}
  }
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step58 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.activate accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 524288);
  CSB_Write(device, 195, 81725440);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 406259712);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 428);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 428);
  CSB_Write(device, 206, 13696);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 16);
#ifdef PRINT_STEP
printf("start: step58!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.activate run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step59 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  for (int for_k = 0; for_k < (kvcache ? 1 : ((((token - last_token) + 16) - 1) / 16)); for_k++) {
    CSB_Write(device, 2, 4096);
    CSB_Write(device, 3, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 4, 1);
    CSB_Write(device, 5, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 6, 1);
    CSB_Write(device, 7, 1024);
    CSB_Write(device, 8, 384);
    CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
    CSB_Write(device, 10, (64948224 + ((for_k * 16) * 64)));
    CSB_Write(device, 11, 10437120);
    CSB_Write(device, 12, 16896);
    CSB_Write(device, 13, (81725440 + ((for_k * 16) * 64)));
    CSB_Write(device, 14, 13);
    CSB_Write(device, 15, 28);
    CSB_Write(device, 16, 2);
    CSB_Write(device, 17, 0);
    CSB_Write(device, 18, 0);
    CSB_Write(device, 19, 0);
    CSB_Write(device, 20, 0);
    CSB_Write(device, 21, 1);
    CSB_Write(device, 22, 1);
    CSB_Write(device, 23, 1);
    CSB_Write(device, 24, 1);
    CSB_Write(device, 25, 0);
    CSB_Write(device, 26, 1180672);
    CSB_Write(device, 27, (406259712 + ((for_k * 16) * 64)));
    CSB_Write(device, 28, 0);
    CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("start: step59!\n");
#endif
    while(CSB_Read(device, 1) != 1) {}
  }
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step60 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  for (int for_k = 0; for_k < (kvcache ? 1 : ((((token - last_token) + 16) - 1) / 16)); for_k++) {
    CSB_Write(device, 2, 13696);
    CSB_Write(device, 3, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 4, 1);
    CSB_Write(device, 5, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 6, 1);
    CSB_Write(device, 7, 288);
    CSB_Write(device, 8, 64);
    CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
    CSB_Write(device, 10, (81725440 + ((for_k * 16) * 64)));
    CSB_Write(device, 11, 12244992);
    CSB_Write(device, 12, 56576);
    CSB_Write(device, 13, (64948224 + ((for_k * 16) * 64)));
    CSB_Write(device, 14, 14);
    CSB_Write(device, 15, 28);
    CSB_Write(device, 16, 0);
    CSB_Write(device, 17, 0);
    CSB_Write(device, 18, 0);
    CSB_Write(device, 19, 0);
    CSB_Write(device, 20, 0);
    CSB_Write(device, 21, 1);
    CSB_Write(device, 22, 1);
    CSB_Write(device, 23, 1);
    CSB_Write(device, 24, 1);
    CSB_Write(device, 25, 0);
    CSB_Write(device, 26, 1290240);
    CSB_Write(device, 27, (137824256 + ((for_k * 16) * 64)));
    CSB_Write(device, 28, 0);
    CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("start: step60!\n");
#endif
    while(CSB_Read(device, 1) != 1) {}
  }
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step61 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 1306624);
  CSB_Write(device, 195, 64948224);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 81725440);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_STEP
printf("start: step61!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step62 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  for (int for_k = 0; for_k < (kvcache ? 1 : ((((token - last_token) + 16) - 1) / 16)); for_k++) {
    CSB_Write(device, 2, 4096);
    CSB_Write(device, 3, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 4, 1);
    CSB_Write(device, 5, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 6, 1);
    CSB_Write(device, 7, 1024);
    CSB_Write(device, 8, 1024);
    CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
    CSB_Write(device, 10, (81725440 + ((for_k * 16) * 64)));
    CSB_Write(device, 11, 13150208);
    CSB_Write(device, 12, 16896);
    CSB_Write(device, 13, (137824256 + ((for_k * 16) * 64)));
    CSB_Write(device, 14, 3);
    CSB_Write(device, 15, 28);
    CSB_Write(device, 16, 0);
    CSB_Write(device, 17, 0);
    CSB_Write(device, 18, 0);
    CSB_Write(device, 19, 0);
    CSB_Write(device, 20, 0);
    CSB_Write(device, 21, 1);
    CSB_Write(device, 22, 1);
    CSB_Write(device, 23, 1);
    CSB_Write(device, 24, 1);
    CSB_Write(device, 25, 0);
    CSB_Write(device, 26, 1323008);
    CSB_Write(device, 27, 0);
    CSB_Write(device, 28, 0);
    CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("start: step62!\n");
#endif
    while(CSB_Read(device, 1) != 1) {}
  }
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step63 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.pos_emb accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (kvcache ? (0 + ((token - 1) * 64)) : (0 + (last_token * 64))));
  CSB_Write(device, 195, 137824256);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 406259712);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 203, last_token);
  CSB_Write(device, 204, 32);
  CSB_Write(device, 205, 262144);
  CSB_Write(device, 206, 131072);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
#ifdef PRINT_STEP
printf("start: step63!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step64 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  for (int for_k = 0; for_k < (kvcache ? 1 : ((((token - last_token) + 16) - 1) / 16)); for_k++) {
    CSB_Write(device, 2, 4096);
    CSB_Write(device, 3, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 4, 1);
    CSB_Write(device, 5, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 6, 1);
    CSB_Write(device, 7, 256);
    CSB_Write(device, 8, 256);
    CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
    CSB_Write(device, 10, (81725440 + ((for_k * 16) * 64)));
    CSB_Write(device, 11, 13420544);
    CSB_Write(device, 12, 16896);
    CSB_Write(device, 13, (137824256 + ((for_k * 16) * 64)));
    CSB_Write(device, 14, 0);
    CSB_Write(device, 15, 28);
    CSB_Write(device, 16, 0);
    CSB_Write(device, 17, 0);
    CSB_Write(device, 18, 0);
    CSB_Write(device, 19, 0);
    CSB_Write(device, 20, 0);
    CSB_Write(device, 21, 1);
    CSB_Write(device, 22, 1);
    CSB_Write(device, 23, 1);
    CSB_Write(device, 24, 1);
    CSB_Write(device, 25, 0);
    CSB_Write(device, 26, 1339392);
    CSB_Write(device, 27, 0);
    CSB_Write(device, 28, 0);
    CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("start: step64!\n");
#endif
    while(CSB_Read(device, 1) != 1) {}
  }
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step65 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.pos_emb accel operator node, storage data in cache8 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (kvcache ? (0 + ((token - 1) * 64)) : (0 + (last_token * 64))));
  CSB_Write(device, 195, 137824256);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, (kvcache ? (14616576 + ((token - 1) * 64)) : (14616576 + (last_token * 64))));
  CSB_Write(device, 199, 524288);
  CSB_Write(device, 200, 131072);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 203, last_token);
  CSB_Write(device, 204, 2);
  CSB_Write(device, 205, 262144);
  CSB_Write(device, 206, 131072);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
#ifdef PRINT_STEP
printf("start: step65!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step66 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_afterTRP accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 14616576);
  CSB_Write(device, 195, 406259712);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 137824256);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 524288);
  CSB_Write(device, 202, 131072);
  CSB_Write(device, 203, 4);
  CSB_Write(device, 204, token);
  CSB_Write(device, 205, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 206, 11688);
  CSB_Write(device, 207, 991234);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 2);
#ifdef PRINT_STEP
printf("start: step66!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterTRP run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step67 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.softmax accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (1 - kvcache));
  CSB_Write(device, 195, 137824256);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 406259712);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, (((token + 32) - 1) / 32));
  CSB_Write(device, 202, 32);
  CSB_Write(device, 203, token);
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, (token - last_token));
  CSB_Write(device, 206, last_token);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 8);
#ifdef PRINT_STEP
printf("start: step67!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.softmax run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step68 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in cache9 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  for (int for_k = 0; for_k < (kvcache ? 1 : ((((token - last_token) + 16) - 1) / 16)); for_k++) {
    CSB_Write(device, 2, 4096);
    CSB_Write(device, 3, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 4, 1);
    CSB_Write(device, 5, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 6, 1);
    CSB_Write(device, 7, 256);
    CSB_Write(device, 8, 256);
    CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
    CSB_Write(device, 10, (81725440 + ((for_k * 16) * 64)));
    CSB_Write(device, 11, 13437440);
    CSB_Write(device, 12, 16896);
    CSB_Write(device, 13, ((kvcache ? (15665152 + ((token - 1) * 64)) : (15665152 + (last_token * 64))) + ((for_k * 16) * 64)));
    CSB_Write(device, 14, 0);
    CSB_Write(device, 15, 28);
    CSB_Write(device, 16, 0);
    CSB_Write(device, 17, 0);
    CSB_Write(device, 18, 0);
    CSB_Write(device, 19, 0);
    CSB_Write(device, 20, 0);
    CSB_Write(device, 21, 1);
    CSB_Write(device, 22, 1);
    CSB_Write(device, 23, 1);
    CSB_Write(device, 24, 1);
    CSB_Write(device, 25, 0);
    CSB_Write(device, 26, 1340416);
    CSB_Write(device, 27, 0);
    CSB_Write(device, 28, 0);
    CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 31, 131072);
    CSB_Write(device, 32, 131072);
    CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("start: step68!\n");
#endif
    while(CSB_Read(device, 1) != 1) {}
  }
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step69 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_afterF2W accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 15665152);
  CSB_Write(device, 195, 406259712);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 81725440);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 524288);
  CSB_Write(device, 202, 131072);
  CSB_Write(device, 203, (((token + 32) - 1) / 32));
  CSB_Write(device, 204, token);
  CSB_Write(device, 205, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 206, 4);
  CSB_Write(device, 207, 991234);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 1);
#ifdef PRINT_STEP
printf("start: step69!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterF2W run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step70 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  for (int for_k = 0; for_k < (kvcache ? 1 : ((((token - last_token) + 16) - 1) / 16)); for_k++) {
    CSB_Write(device, 2, 4096);
    CSB_Write(device, 3, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 4, 1);
    CSB_Write(device, 5, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 6, 1);
    CSB_Write(device, 7, 1024);
    CSB_Write(device, 8, 1024);
    CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
    CSB_Write(device, 10, (81725440 + ((for_k * 16) * 64)));
    CSB_Write(device, 11, 13454336);
    CSB_Write(device, 12, 16896);
    CSB_Write(device, 13, (406259712 + ((for_k * 16) * 64)));
    CSB_Write(device, 14, 3);
    CSB_Write(device, 15, 28);
    CSB_Write(device, 16, 0);
    CSB_Write(device, 17, 0);
    CSB_Write(device, 18, 0);
    CSB_Write(device, 19, 0);
    CSB_Write(device, 20, 0);
    CSB_Write(device, 21, 1);
    CSB_Write(device, 22, 1);
    CSB_Write(device, 23, 1);
    CSB_Write(device, 24, 1);
    CSB_Write(device, 25, 0);
    CSB_Write(device, 26, 1341440);
    CSB_Write(device, 27, (64948224 + ((for_k * 16) * 64)));
    CSB_Write(device, 28, 0);
    CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("start: step70!\n");
#endif
    while(CSB_Read(device, 1) != 1) {}
  }
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step71 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 1357824);
  CSB_Write(device, 195, 406259712);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 64948224);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_STEP
printf("start: step71!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step72 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  for (int for_k = 0; for_k < (kvcache ? 1 : ((((token - last_token) + 16) - 1) / 16)); for_k++) {
    CSB_Write(device, 2, 4096);
    CSB_Write(device, 3, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 4, 1);
    CSB_Write(device, 5, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 6, 1);
    CSB_Write(device, 7, 1024);
    CSB_Write(device, 8, 384);
    CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
    CSB_Write(device, 10, (64948224 + ((for_k * 16) * 64)));
    CSB_Write(device, 11, 14628608);
    CSB_Write(device, 12, 16896);
    CSB_Write(device, 13, (81725440 + ((for_k * 16) * 64)));
    CSB_Write(device, 14, 13);
    CSB_Write(device, 15, 28);
    CSB_Write(device, 16, 0);
    CSB_Write(device, 17, 0);
    CSB_Write(device, 18, 0);
    CSB_Write(device, 19, 0);
    CSB_Write(device, 20, 0);
    CSB_Write(device, 21, 1);
    CSB_Write(device, 22, 1);
    CSB_Write(device, 23, 1);
    CSB_Write(device, 24, 1);
    CSB_Write(device, 25, 0);
    CSB_Write(device, 26, 1428992);
    CSB_Write(device, 27, 0);
    CSB_Write(device, 28, 0);
    CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("start: step72!\n");
#endif
    while(CSB_Read(device, 1) != 1) {}
  }
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step73 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.activate accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 524288);
  CSB_Write(device, 195, 81725440);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 137824256);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 428);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 428);
  CSB_Write(device, 206, 13696);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 16);
#ifdef PRINT_STEP
printf("start: step73!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.activate run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step74 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  for (int for_k = 0; for_k < (kvcache ? 1 : ((((token - last_token) + 16) - 1) / 16)); for_k++) {
    CSB_Write(device, 2, 4096);
    CSB_Write(device, 3, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 4, 1);
    CSB_Write(device, 5, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 6, 1);
    CSB_Write(device, 7, 1024);
    CSB_Write(device, 8, 384);
    CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
    CSB_Write(device, 10, (64948224 + ((for_k * 16) * 64)));
    CSB_Write(device, 11, 13724672);
    CSB_Write(device, 12, 16896);
    CSB_Write(device, 13, (81725440 + ((for_k * 16) * 64)));
    CSB_Write(device, 14, 13);
    CSB_Write(device, 15, 28);
    CSB_Write(device, 16, 2);
    CSB_Write(device, 17, 0);
    CSB_Write(device, 18, 0);
    CSB_Write(device, 19, 0);
    CSB_Write(device, 20, 0);
    CSB_Write(device, 21, 1);
    CSB_Write(device, 22, 1);
    CSB_Write(device, 23, 1);
    CSB_Write(device, 24, 1);
    CSB_Write(device, 25, 0);
    CSB_Write(device, 26, 1374208);
    CSB_Write(device, 27, (137824256 + ((for_k * 16) * 64)));
    CSB_Write(device, 28, 0);
    CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("start: step74!\n");
#endif
    while(CSB_Read(device, 1) != 1) {}
  }
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step75 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  for (int for_k = 0; for_k < (kvcache ? 1 : ((((token - last_token) + 16) - 1) / 16)); for_k++) {
    CSB_Write(device, 2, 13696);
    CSB_Write(device, 3, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 4, 1);
    CSB_Write(device, 5, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 6, 1);
    CSB_Write(device, 7, 288);
    CSB_Write(device, 8, 64);
    CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
    CSB_Write(device, 10, (81725440 + ((for_k * 16) * 64)));
    CSB_Write(device, 11, 15532544);
    CSB_Write(device, 12, 56576);
    CSB_Write(device, 13, (64948224 + ((for_k * 16) * 64)));
    CSB_Write(device, 14, 14);
    CSB_Write(device, 15, 28);
    CSB_Write(device, 16, 0);
    CSB_Write(device, 17, 0);
    CSB_Write(device, 18, 0);
    CSB_Write(device, 19, 0);
    CSB_Write(device, 20, 0);
    CSB_Write(device, 21, 1);
    CSB_Write(device, 22, 1);
    CSB_Write(device, 23, 1);
    CSB_Write(device, 24, 1);
    CSB_Write(device, 25, 0);
    CSB_Write(device, 26, 1483776);
    CSB_Write(device, 27, (406259712 + ((for_k * 16) * 64)));
    CSB_Write(device, 28, 0);
    CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("start: step75!\n");
#endif
    while(CSB_Read(device, 1) != 1) {}
  }
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step76 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 1500160);
  CSB_Write(device, 195, 64948224);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 81725440);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_STEP
printf("start: step76!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step77 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  for (int for_k = 0; for_k < (kvcache ? 1 : ((((token - last_token) + 16) - 1) / 16)); for_k++) {
    CSB_Write(device, 2, 4096);
    CSB_Write(device, 3, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 4, 1);
    CSB_Write(device, 5, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 6, 1);
    CSB_Write(device, 7, 1024);
    CSB_Write(device, 8, 1024);
    CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
    CSB_Write(device, 10, (81725440 + ((for_k * 16) * 64)));
    CSB_Write(device, 11, 16437760);
    CSB_Write(device, 12, 16896);
    CSB_Write(device, 13, (406259712 + ((for_k * 16) * 64)));
    CSB_Write(device, 14, 3);
    CSB_Write(device, 15, 28);
    CSB_Write(device, 16, 0);
    CSB_Write(device, 17, 0);
    CSB_Write(device, 18, 0);
    CSB_Write(device, 19, 0);
    CSB_Write(device, 20, 0);
    CSB_Write(device, 21, 1);
    CSB_Write(device, 22, 1);
    CSB_Write(device, 23, 1);
    CSB_Write(device, 24, 1);
    CSB_Write(device, 25, 0);
    CSB_Write(device, 26, 1516544);
    CSB_Write(device, 27, 0);
    CSB_Write(device, 28, 0);
    CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("start: step77!\n");
#endif
    while(CSB_Read(device, 1) != 1) {}
  }
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step78 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.pos_emb accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (kvcache ? (0 + ((token - 1) * 64)) : (0 + (last_token * 64))));
  CSB_Write(device, 195, 406259712);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 137824256);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 203, last_token);
  CSB_Write(device, 204, 32);
  CSB_Write(device, 205, 262144);
  CSB_Write(device, 206, 131072);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
#ifdef PRINT_STEP
printf("start: step78!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step79 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  for (int for_k = 0; for_k < (kvcache ? 1 : ((((token - last_token) + 16) - 1) / 16)); for_k++) {
    CSB_Write(device, 2, 4096);
    CSB_Write(device, 3, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 4, 1);
    CSB_Write(device, 5, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 6, 1);
    CSB_Write(device, 7, 256);
    CSB_Write(device, 8, 256);
    CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
    CSB_Write(device, 10, (81725440 + ((for_k * 16) * 64)));
    CSB_Write(device, 11, 16708096);
    CSB_Write(device, 12, 16896);
    CSB_Write(device, 13, (406259712 + ((for_k * 16) * 64)));
    CSB_Write(device, 14, 0);
    CSB_Write(device, 15, 28);
    CSB_Write(device, 16, 0);
    CSB_Write(device, 17, 0);
    CSB_Write(device, 18, 0);
    CSB_Write(device, 19, 0);
    CSB_Write(device, 20, 0);
    CSB_Write(device, 21, 1);
    CSB_Write(device, 22, 1);
    CSB_Write(device, 23, 1);
    CSB_Write(device, 24, 1);
    CSB_Write(device, 25, 0);
    CSB_Write(device, 26, 1532928);
    CSB_Write(device, 27, 0);
    CSB_Write(device, 28, 0);
    CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("start: step79!\n");
#endif
    while(CSB_Read(device, 1) != 1) {}
  }
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step80 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.pos_emb accel operator node, storage data in cache10 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (kvcache ? (0 + ((token - 1) * 64)) : (0 + (last_token * 64))));
  CSB_Write(device, 195, 406259712);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, (kvcache ? (16713728 + ((token - 1) * 64)) : (16713728 + (last_token * 64))));
  CSB_Write(device, 199, 524288);
  CSB_Write(device, 200, 131072);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 203, last_token);
  CSB_Write(device, 204, 2);
  CSB_Write(device, 205, 262144);
  CSB_Write(device, 206, 131072);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
#ifdef PRINT_STEP
printf("start: step80!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step81 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_afterTRP accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 16713728);
  CSB_Write(device, 195, 137824256);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 406259712);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 524288);
  CSB_Write(device, 202, 131072);
  CSB_Write(device, 203, 4);
  CSB_Write(device, 204, token);
  CSB_Write(device, 205, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 206, 11688);
  CSB_Write(device, 207, 991234);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 2);
#ifdef PRINT_STEP
printf("start: step81!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterTRP run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step82 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.softmax accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (1 - kvcache));
  CSB_Write(device, 195, 406259712);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 137824256);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, (((token + 32) - 1) / 32));
  CSB_Write(device, 202, 32);
  CSB_Write(device, 203, token);
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, (token - last_token));
  CSB_Write(device, 206, last_token);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 8);
#ifdef PRINT_STEP
printf("start: step82!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.softmax run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step83 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in cache11 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  for (int for_k = 0; for_k < (kvcache ? 1 : ((((token - last_token) + 16) - 1) / 16)); for_k++) {
    CSB_Write(device, 2, 4096);
    CSB_Write(device, 3, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 4, 1);
    CSB_Write(device, 5, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 6, 1);
    CSB_Write(device, 7, 256);
    CSB_Write(device, 8, 256);
    CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
    CSB_Write(device, 10, (81725440 + ((for_k * 16) * 64)));
    CSB_Write(device, 11, 16724992);
    CSB_Write(device, 12, 16896);
    CSB_Write(device, 13, ((kvcache ? (17762304 + ((token - 1) * 64)) : (17762304 + (last_token * 64))) + ((for_k * 16) * 64)));
    CSB_Write(device, 14, 0);
    CSB_Write(device, 15, 28);
    CSB_Write(device, 16, 0);
    CSB_Write(device, 17, 0);
    CSB_Write(device, 18, 0);
    CSB_Write(device, 19, 0);
    CSB_Write(device, 20, 0);
    CSB_Write(device, 21, 1);
    CSB_Write(device, 22, 1);
    CSB_Write(device, 23, 1);
    CSB_Write(device, 24, 1);
    CSB_Write(device, 25, 0);
    CSB_Write(device, 26, 1533952);
    CSB_Write(device, 27, 0);
    CSB_Write(device, 28, 0);
    CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 31, 131072);
    CSB_Write(device, 32, 131072);
    CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("start: step83!\n");
#endif
    while(CSB_Read(device, 1) != 1) {}
  }
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step84 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_afterF2W accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 17762304);
  CSB_Write(device, 195, 137824256);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 81725440);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 524288);
  CSB_Write(device, 202, 131072);
  CSB_Write(device, 203, (((token + 32) - 1) / 32));
  CSB_Write(device, 204, token);
  CSB_Write(device, 205, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 206, 4);
  CSB_Write(device, 207, 991234);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 1);
#ifdef PRINT_STEP
printf("start: step84!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterF2W run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step85 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  for (int for_k = 0; for_k < (kvcache ? 1 : ((((token - last_token) + 16) - 1) / 16)); for_k++) {
    CSB_Write(device, 2, 4096);
    CSB_Write(device, 3, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 4, 1);
    CSB_Write(device, 5, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 6, 1);
    CSB_Write(device, 7, 1024);
    CSB_Write(device, 8, 1024);
    CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
    CSB_Write(device, 10, (81725440 + ((for_k * 16) * 64)));
    CSB_Write(device, 11, 16741888);
    CSB_Write(device, 12, 16896);
    CSB_Write(device, 13, (137824256 + ((for_k * 16) * 64)));
    CSB_Write(device, 14, 3);
    CSB_Write(device, 15, 28);
    CSB_Write(device, 16, 0);
    CSB_Write(device, 17, 0);
    CSB_Write(device, 18, 0);
    CSB_Write(device, 19, 0);
    CSB_Write(device, 20, 0);
    CSB_Write(device, 21, 1);
    CSB_Write(device, 22, 1);
    CSB_Write(device, 23, 1);
    CSB_Write(device, 24, 1);
    CSB_Write(device, 25, 0);
    CSB_Write(device, 26, 1534976);
    CSB_Write(device, 27, (64948224 + ((for_k * 16) * 64)));
    CSB_Write(device, 28, 0);
    CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("start: step85!\n");
#endif
    while(CSB_Read(device, 1) != 1) {}
  }
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step86 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 1551360);
  CSB_Write(device, 195, 137824256);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 64948224);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_STEP
printf("start: step86!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step87 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  for (int for_k = 0; for_k < (kvcache ? 1 : ((((token - last_token) + 16) - 1) / 16)); for_k++) {
    CSB_Write(device, 2, 4096);
    CSB_Write(device, 3, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 4, 1);
    CSB_Write(device, 5, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 6, 1);
    CSB_Write(device, 7, 1024);
    CSB_Write(device, 8, 384);
    CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
    CSB_Write(device, 10, (64948224 + ((for_k * 16) * 64)));
    CSB_Write(device, 11, 17916160);
    CSB_Write(device, 12, 16896);
    CSB_Write(device, 13, (81725440 + ((for_k * 16) * 64)));
    CSB_Write(device, 14, 13);
    CSB_Write(device, 15, 28);
    CSB_Write(device, 16, 0);
    CSB_Write(device, 17, 0);
    CSB_Write(device, 18, 0);
    CSB_Write(device, 19, 0);
    CSB_Write(device, 20, 0);
    CSB_Write(device, 21, 1);
    CSB_Write(device, 22, 1);
    CSB_Write(device, 23, 1);
    CSB_Write(device, 24, 1);
    CSB_Write(device, 25, 0);
    CSB_Write(device, 26, 1622528);
    CSB_Write(device, 27, 0);
    CSB_Write(device, 28, 0);
    CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("start: step87!\n");
#endif
    while(CSB_Read(device, 1) != 1) {}
  }
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step88 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.activate accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 524288);
  CSB_Write(device, 195, 81725440);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 406259712);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 428);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 428);
  CSB_Write(device, 206, 13696);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 16);
#ifdef PRINT_STEP
printf("start: step88!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.activate run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step89 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  for (int for_k = 0; for_k < (kvcache ? 1 : ((((token - last_token) + 16) - 1) / 16)); for_k++) {
    CSB_Write(device, 2, 4096);
    CSB_Write(device, 3, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 4, 1);
    CSB_Write(device, 5, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 6, 1);
    CSB_Write(device, 7, 1024);
    CSB_Write(device, 8, 384);
    CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
    CSB_Write(device, 10, (64948224 + ((for_k * 16) * 64)));
    CSB_Write(device, 11, 17012224);
    CSB_Write(device, 12, 16896);
    CSB_Write(device, 13, (81725440 + ((for_k * 16) * 64)));
    CSB_Write(device, 14, 13);
    CSB_Write(device, 15, 28);
    CSB_Write(device, 16, 2);
    CSB_Write(device, 17, 0);
    CSB_Write(device, 18, 0);
    CSB_Write(device, 19, 0);
    CSB_Write(device, 20, 0);
    CSB_Write(device, 21, 1);
    CSB_Write(device, 22, 1);
    CSB_Write(device, 23, 1);
    CSB_Write(device, 24, 1);
    CSB_Write(device, 25, 0);
    CSB_Write(device, 26, 1567744);
    CSB_Write(device, 27, (406259712 + ((for_k * 16) * 64)));
    CSB_Write(device, 28, 0);
    CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("start: step89!\n");
#endif
    while(CSB_Read(device, 1) != 1) {}
  }
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step90 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  for (int for_k = 0; for_k < (kvcache ? 1 : ((((token - last_token) + 16) - 1) / 16)); for_k++) {
    CSB_Write(device, 2, 13696);
    CSB_Write(device, 3, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 4, 1);
    CSB_Write(device, 5, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 6, 1);
    CSB_Write(device, 7, 288);
    CSB_Write(device, 8, 64);
    CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
    CSB_Write(device, 10, (81725440 + ((for_k * 16) * 64)));
    CSB_Write(device, 11, 18820096);
    CSB_Write(device, 12, 56576);
    CSB_Write(device, 13, (64948224 + ((for_k * 16) * 64)));
    CSB_Write(device, 14, 14);
    CSB_Write(device, 15, 28);
    CSB_Write(device, 16, 0);
    CSB_Write(device, 17, 0);
    CSB_Write(device, 18, 0);
    CSB_Write(device, 19, 0);
    CSB_Write(device, 20, 0);
    CSB_Write(device, 21, 1);
    CSB_Write(device, 22, 1);
    CSB_Write(device, 23, 1);
    CSB_Write(device, 24, 1);
    CSB_Write(device, 25, 0);
    CSB_Write(device, 26, 1677312);
    CSB_Write(device, 27, (137824256 + ((for_k * 16) * 64)));
    CSB_Write(device, 28, 0);
    CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("start: step90!\n");
#endif
    while(CSB_Read(device, 1) != 1) {}
  }
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step91 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 1693696);
  CSB_Write(device, 195, 64948224);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 81725440);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_STEP
printf("start: step91!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step92 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  for (int for_k = 0; for_k < (kvcache ? 1 : ((((token - last_token) + 16) - 1) / 16)); for_k++) {
    CSB_Write(device, 2, 4096);
    CSB_Write(device, 3, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 4, 1);
    CSB_Write(device, 5, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 6, 1);
    CSB_Write(device, 7, 1024);
    CSB_Write(device, 8, 1024);
    CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
    CSB_Write(device, 10, (81725440 + ((for_k * 16) * 64)));
    CSB_Write(device, 11, 19725312);
    CSB_Write(device, 12, 16896);
    CSB_Write(device, 13, (137824256 + ((for_k * 16) * 64)));
    CSB_Write(device, 14, 3);
    CSB_Write(device, 15, 28);
    CSB_Write(device, 16, 0);
    CSB_Write(device, 17, 0);
    CSB_Write(device, 18, 0);
    CSB_Write(device, 19, 0);
    CSB_Write(device, 20, 0);
    CSB_Write(device, 21, 1);
    CSB_Write(device, 22, 1);
    CSB_Write(device, 23, 1);
    CSB_Write(device, 24, 1);
    CSB_Write(device, 25, 0);
    CSB_Write(device, 26, 1710080);
    CSB_Write(device, 27, 0);
    CSB_Write(device, 28, 0);
    CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("start: step92!\n");
#endif
    while(CSB_Read(device, 1) != 1) {}
  }
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step93 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.pos_emb accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (kvcache ? (0 + ((token - 1) * 64)) : (0 + (last_token * 64))));
  CSB_Write(device, 195, 137824256);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 406259712);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 203, last_token);
  CSB_Write(device, 204, 32);
  CSB_Write(device, 205, 262144);
  CSB_Write(device, 206, 131072);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
#ifdef PRINT_STEP
printf("start: step93!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step94 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  for (int for_k = 0; for_k < (kvcache ? 1 : ((((token - last_token) + 16) - 1) / 16)); for_k++) {
    CSB_Write(device, 2, 4096);
    CSB_Write(device, 3, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 4, 1);
    CSB_Write(device, 5, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 6, 1);
    CSB_Write(device, 7, 256);
    CSB_Write(device, 8, 256);
    CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
    CSB_Write(device, 10, (81725440 + ((for_k * 16) * 64)));
    CSB_Write(device, 11, 19995648);
    CSB_Write(device, 12, 16896);
    CSB_Write(device, 13, (137824256 + ((for_k * 16) * 64)));
    CSB_Write(device, 14, 0);
    CSB_Write(device, 15, 28);
    CSB_Write(device, 16, 0);
    CSB_Write(device, 17, 0);
    CSB_Write(device, 18, 0);
    CSB_Write(device, 19, 0);
    CSB_Write(device, 20, 0);
    CSB_Write(device, 21, 1);
    CSB_Write(device, 22, 1);
    CSB_Write(device, 23, 1);
    CSB_Write(device, 24, 1);
    CSB_Write(device, 25, 0);
    CSB_Write(device, 26, 1726464);
    CSB_Write(device, 27, 0);
    CSB_Write(device, 28, 0);
    CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("start: step94!\n");
#endif
    while(CSB_Read(device, 1) != 1) {}
  }
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step95 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.pos_emb accel operator node, storage data in cache12 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (kvcache ? (0 + ((token - 1) * 64)) : (0 + (last_token * 64))));
  CSB_Write(device, 195, 137824256);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, (kvcache ? (18810880 + ((token - 1) * 64)) : (18810880 + (last_token * 64))));
  CSB_Write(device, 199, 524288);
  CSB_Write(device, 200, 131072);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 203, last_token);
  CSB_Write(device, 204, 2);
  CSB_Write(device, 205, 262144);
  CSB_Write(device, 206, 131072);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
#ifdef PRINT_STEP
printf("start: step95!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step96 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_afterTRP accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 18810880);
  CSB_Write(device, 195, 406259712);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 137824256);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 524288);
  CSB_Write(device, 202, 131072);
  CSB_Write(device, 203, 4);
  CSB_Write(device, 204, token);
  CSB_Write(device, 205, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 206, 11688);
  CSB_Write(device, 207, 991234);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 2);
#ifdef PRINT_STEP
printf("start: step96!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterTRP run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step97 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.softmax accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (1 - kvcache));
  CSB_Write(device, 195, 137824256);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 406259712);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, (((token + 32) - 1) / 32));
  CSB_Write(device, 202, 32);
  CSB_Write(device, 203, token);
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, (token - last_token));
  CSB_Write(device, 206, last_token);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 8);
#ifdef PRINT_STEP
printf("start: step97!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.softmax run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step98 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in cache13 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  for (int for_k = 0; for_k < (kvcache ? 1 : ((((token - last_token) + 16) - 1) / 16)); for_k++) {
    CSB_Write(device, 2, 4096);
    CSB_Write(device, 3, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 4, 1);
    CSB_Write(device, 5, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 6, 1);
    CSB_Write(device, 7, 256);
    CSB_Write(device, 8, 256);
    CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
    CSB_Write(device, 10, (81725440 + ((for_k * 16) * 64)));
    CSB_Write(device, 11, 20012544);
    CSB_Write(device, 12, 16896);
    CSB_Write(device, 13, ((kvcache ? (19859456 + ((token - 1) * 64)) : (19859456 + (last_token * 64))) + ((for_k * 16) * 64)));
    CSB_Write(device, 14, 0);
    CSB_Write(device, 15, 28);
    CSB_Write(device, 16, 0);
    CSB_Write(device, 17, 0);
    CSB_Write(device, 18, 0);
    CSB_Write(device, 19, 0);
    CSB_Write(device, 20, 0);
    CSB_Write(device, 21, 1);
    CSB_Write(device, 22, 1);
    CSB_Write(device, 23, 1);
    CSB_Write(device, 24, 1);
    CSB_Write(device, 25, 0);
    CSB_Write(device, 26, 1727488);
    CSB_Write(device, 27, 0);
    CSB_Write(device, 28, 0);
    CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 31, 131072);
    CSB_Write(device, 32, 131072);
    CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("start: step98!\n");
#endif
    while(CSB_Read(device, 1) != 1) {}
  }
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step99 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_afterF2W accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 19859456);
  CSB_Write(device, 195, 406259712);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 81725440);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 524288);
  CSB_Write(device, 202, 131072);
  CSB_Write(device, 203, (((token + 32) - 1) / 32));
  CSB_Write(device, 204, token);
  CSB_Write(device, 205, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 206, 4);
  CSB_Write(device, 207, 991234);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 1);
#ifdef PRINT_STEP
printf("start: step99!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterF2W run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step100 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  for (int for_k = 0; for_k < (kvcache ? 1 : ((((token - last_token) + 16) - 1) / 16)); for_k++) {
    CSB_Write(device, 2, 4096);
    CSB_Write(device, 3, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 4, 1);
    CSB_Write(device, 5, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 6, 1);
    CSB_Write(device, 7, 1024);
    CSB_Write(device, 8, 1024);
    CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
    CSB_Write(device, 10, (81725440 + ((for_k * 16) * 64)));
    CSB_Write(device, 11, 20029440);
    CSB_Write(device, 12, 16896);
    CSB_Write(device, 13, (406259712 + ((for_k * 16) * 64)));
    CSB_Write(device, 14, 3);
    CSB_Write(device, 15, 28);
    CSB_Write(device, 16, 0);
    CSB_Write(device, 17, 0);
    CSB_Write(device, 18, 0);
    CSB_Write(device, 19, 0);
    CSB_Write(device, 20, 0);
    CSB_Write(device, 21, 1);
    CSB_Write(device, 22, 1);
    CSB_Write(device, 23, 1);
    CSB_Write(device, 24, 1);
    CSB_Write(device, 25, 0);
    CSB_Write(device, 26, 1728512);
    CSB_Write(device, 27, (64948224 + ((for_k * 16) * 64)));
    CSB_Write(device, 28, 0);
    CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("start: step100!\n");
#endif
    while(CSB_Read(device, 1) != 1) {}
  }
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step101 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 1744896);
  CSB_Write(device, 195, 406259712);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 64948224);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_STEP
printf("start: step101!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step102 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  for (int for_k = 0; for_k < (kvcache ? 1 : ((((token - last_token) + 16) - 1) / 16)); for_k++) {
    CSB_Write(device, 2, 4096);
    CSB_Write(device, 3, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 4, 1);
    CSB_Write(device, 5, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 6, 1);
    CSB_Write(device, 7, 1024);
    CSB_Write(device, 8, 384);
    CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
    CSB_Write(device, 10, (64948224 + ((for_k * 16) * 64)));
    CSB_Write(device, 11, 21203712);
    CSB_Write(device, 12, 16896);
    CSB_Write(device, 13, (81725440 + ((for_k * 16) * 64)));
    CSB_Write(device, 14, 13);
    CSB_Write(device, 15, 28);
    CSB_Write(device, 16, 0);
    CSB_Write(device, 17, 0);
    CSB_Write(device, 18, 0);
    CSB_Write(device, 19, 0);
    CSB_Write(device, 20, 0);
    CSB_Write(device, 21, 1);
    CSB_Write(device, 22, 1);
    CSB_Write(device, 23, 1);
    CSB_Write(device, 24, 1);
    CSB_Write(device, 25, 0);
    CSB_Write(device, 26, 1816064);
    CSB_Write(device, 27, 0);
    CSB_Write(device, 28, 0);
    CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("start: step102!\n");
#endif
    while(CSB_Read(device, 1) != 1) {}
  }
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step103 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.activate accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 524288);
  CSB_Write(device, 195, 81725440);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 137824256);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 428);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 428);
  CSB_Write(device, 206, 13696);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 16);
#ifdef PRINT_STEP
printf("start: step103!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.activate run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step104 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  for (int for_k = 0; for_k < (kvcache ? 1 : ((((token - last_token) + 16) - 1) / 16)); for_k++) {
    CSB_Write(device, 2, 4096);
    CSB_Write(device, 3, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 4, 1);
    CSB_Write(device, 5, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 6, 1);
    CSB_Write(device, 7, 1024);
    CSB_Write(device, 8, 384);
    CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
    CSB_Write(device, 10, (64948224 + ((for_k * 16) * 64)));
    CSB_Write(device, 11, 20299776);
    CSB_Write(device, 12, 16896);
    CSB_Write(device, 13, (81725440 + ((for_k * 16) * 64)));
    CSB_Write(device, 14, 13);
    CSB_Write(device, 15, 28);
    CSB_Write(device, 16, 2);
    CSB_Write(device, 17, 0);
    CSB_Write(device, 18, 0);
    CSB_Write(device, 19, 0);
    CSB_Write(device, 20, 0);
    CSB_Write(device, 21, 1);
    CSB_Write(device, 22, 1);
    CSB_Write(device, 23, 1);
    CSB_Write(device, 24, 1);
    CSB_Write(device, 25, 0);
    CSB_Write(device, 26, 1761280);
    CSB_Write(device, 27, (137824256 + ((for_k * 16) * 64)));
    CSB_Write(device, 28, 0);
    CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("start: step104!\n");
#endif
    while(CSB_Read(device, 1) != 1) {}
  }
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step105 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  for (int for_k = 0; for_k < (kvcache ? 1 : ((((token - last_token) + 16) - 1) / 16)); for_k++) {
    CSB_Write(device, 2, 13696);
    CSB_Write(device, 3, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 4, 1);
    CSB_Write(device, 5, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 6, 1);
    CSB_Write(device, 7, 288);
    CSB_Write(device, 8, 64);
    CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
    CSB_Write(device, 10, (81725440 + ((for_k * 16) * 64)));
    CSB_Write(device, 11, 22107648);
    CSB_Write(device, 12, 56576);
    CSB_Write(device, 13, (64948224 + ((for_k * 16) * 64)));
    CSB_Write(device, 14, 14);
    CSB_Write(device, 15, 28);
    CSB_Write(device, 16, 0);
    CSB_Write(device, 17, 0);
    CSB_Write(device, 18, 0);
    CSB_Write(device, 19, 0);
    CSB_Write(device, 20, 0);
    CSB_Write(device, 21, 1);
    CSB_Write(device, 22, 1);
    CSB_Write(device, 23, 1);
    CSB_Write(device, 24, 1);
    CSB_Write(device, 25, 0);
    CSB_Write(device, 26, 1870848);
    CSB_Write(device, 27, (406259712 + ((for_k * 16) * 64)));
    CSB_Write(device, 28, 0);
    CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("start: step105!\n");
#endif
    while(CSB_Read(device, 1) != 1) {}
  }
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step106 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 1887232);
  CSB_Write(device, 195, 64948224);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 81725440);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_STEP
printf("start: step106!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step107 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  for (int for_k = 0; for_k < (kvcache ? 1 : ((((token - last_token) + 16) - 1) / 16)); for_k++) {
    CSB_Write(device, 2, 4096);
    CSB_Write(device, 3, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 4, 1);
    CSB_Write(device, 5, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 6, 1);
    CSB_Write(device, 7, 1024);
    CSB_Write(device, 8, 1024);
    CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
    CSB_Write(device, 10, (81725440 + ((for_k * 16) * 64)));
    CSB_Write(device, 11, 23012864);
    CSB_Write(device, 12, 16896);
    CSB_Write(device, 13, (406259712 + ((for_k * 16) * 64)));
    CSB_Write(device, 14, 3);
    CSB_Write(device, 15, 28);
    CSB_Write(device, 16, 0);
    CSB_Write(device, 17, 0);
    CSB_Write(device, 18, 0);
    CSB_Write(device, 19, 0);
    CSB_Write(device, 20, 0);
    CSB_Write(device, 21, 1);
    CSB_Write(device, 22, 1);
    CSB_Write(device, 23, 1);
    CSB_Write(device, 24, 1);
    CSB_Write(device, 25, 0);
    CSB_Write(device, 26, 1903616);
    CSB_Write(device, 27, 0);
    CSB_Write(device, 28, 0);
    CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("start: step107!\n");
#endif
    while(CSB_Read(device, 1) != 1) {}
  }
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step108 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.pos_emb accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (kvcache ? (0 + ((token - 1) * 64)) : (0 + (last_token * 64))));
  CSB_Write(device, 195, 406259712);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 137824256);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 203, last_token);
  CSB_Write(device, 204, 32);
  CSB_Write(device, 205, 262144);
  CSB_Write(device, 206, 131072);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
#ifdef PRINT_STEP
printf("start: step108!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step109 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  for (int for_k = 0; for_k < (kvcache ? 1 : ((((token - last_token) + 16) - 1) / 16)); for_k++) {
    CSB_Write(device, 2, 4096);
    CSB_Write(device, 3, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 4, 1);
    CSB_Write(device, 5, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 6, 1);
    CSB_Write(device, 7, 256);
    CSB_Write(device, 8, 256);
    CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
    CSB_Write(device, 10, (81725440 + ((for_k * 16) * 64)));
    CSB_Write(device, 11, 23283200);
    CSB_Write(device, 12, 16896);
    CSB_Write(device, 13, (406259712 + ((for_k * 16) * 64)));
    CSB_Write(device, 14, 0);
    CSB_Write(device, 15, 28);
    CSB_Write(device, 16, 0);
    CSB_Write(device, 17, 0);
    CSB_Write(device, 18, 0);
    CSB_Write(device, 19, 0);
    CSB_Write(device, 20, 0);
    CSB_Write(device, 21, 1);
    CSB_Write(device, 22, 1);
    CSB_Write(device, 23, 1);
    CSB_Write(device, 24, 1);
    CSB_Write(device, 25, 0);
    CSB_Write(device, 26, 1920000);
    CSB_Write(device, 27, 0);
    CSB_Write(device, 28, 0);
    CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("start: step109!\n");
#endif
    while(CSB_Read(device, 1) != 1) {}
  }
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step110 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.pos_emb accel operator node, storage data in cache14 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (kvcache ? (0 + ((token - 1) * 64)) : (0 + (last_token * 64))));
  CSB_Write(device, 195, 406259712);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, (kvcache ? (20908032 + ((token - 1) * 64)) : (20908032 + (last_token * 64))));
  CSB_Write(device, 199, 524288);
  CSB_Write(device, 200, 131072);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 203, last_token);
  CSB_Write(device, 204, 2);
  CSB_Write(device, 205, 262144);
  CSB_Write(device, 206, 131072);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
#ifdef PRINT_STEP
printf("start: step110!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step111 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_afterTRP accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 20908032);
  CSB_Write(device, 195, 137824256);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 406259712);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 524288);
  CSB_Write(device, 202, 131072);
  CSB_Write(device, 203, 4);
  CSB_Write(device, 204, token);
  CSB_Write(device, 205, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 206, 11688);
  CSB_Write(device, 207, 991234);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 2);
#ifdef PRINT_STEP
printf("start: step111!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterTRP run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step112 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.softmax accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (1 - kvcache));
  CSB_Write(device, 195, 406259712);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 137824256);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, (((token + 32) - 1) / 32));
  CSB_Write(device, 202, 32);
  CSB_Write(device, 203, token);
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, (token - last_token));
  CSB_Write(device, 206, last_token);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 8);
#ifdef PRINT_STEP
printf("start: step112!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.softmax run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step113 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in cache15 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  for (int for_k = 0; for_k < (kvcache ? 1 : ((((token - last_token) + 16) - 1) / 16)); for_k++) {
    CSB_Write(device, 2, 4096);
    CSB_Write(device, 3, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 4, 1);
    CSB_Write(device, 5, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 6, 1);
    CSB_Write(device, 7, 256);
    CSB_Write(device, 8, 256);
    CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
    CSB_Write(device, 10, (81725440 + ((for_k * 16) * 64)));
    CSB_Write(device, 11, 23300096);
    CSB_Write(device, 12, 16896);
    CSB_Write(device, 13, ((kvcache ? (21956608 + ((token - 1) * 64)) : (21956608 + (last_token * 64))) + ((for_k * 16) * 64)));
    CSB_Write(device, 14, 0);
    CSB_Write(device, 15, 28);
    CSB_Write(device, 16, 0);
    CSB_Write(device, 17, 0);
    CSB_Write(device, 18, 0);
    CSB_Write(device, 19, 0);
    CSB_Write(device, 20, 0);
    CSB_Write(device, 21, 1);
    CSB_Write(device, 22, 1);
    CSB_Write(device, 23, 1);
    CSB_Write(device, 24, 1);
    CSB_Write(device, 25, 0);
    CSB_Write(device, 26, 1921024);
    CSB_Write(device, 27, 0);
    CSB_Write(device, 28, 0);
    CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 31, 131072);
    CSB_Write(device, 32, 131072);
    CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("start: step113!\n");
#endif
    while(CSB_Read(device, 1) != 1) {}
  }
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step114 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_afterF2W accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 21956608);
  CSB_Write(device, 195, 137824256);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 81725440);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 524288);
  CSB_Write(device, 202, 131072);
  CSB_Write(device, 203, (((token + 32) - 1) / 32));
  CSB_Write(device, 204, token);
  CSB_Write(device, 205, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 206, 4);
  CSB_Write(device, 207, 991234);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 1);
#ifdef PRINT_STEP
printf("start: step114!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterF2W run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step115 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  for (int for_k = 0; for_k < (kvcache ? 1 : ((((token - last_token) + 16) - 1) / 16)); for_k++) {
    CSB_Write(device, 2, 4096);
    CSB_Write(device, 3, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 4, 1);
    CSB_Write(device, 5, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 6, 1);
    CSB_Write(device, 7, 1024);
    CSB_Write(device, 8, 1024);
    CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
    CSB_Write(device, 10, (81725440 + ((for_k * 16) * 64)));
    CSB_Write(device, 11, 23316992);
    CSB_Write(device, 12, 16896);
    CSB_Write(device, 13, (137824256 + ((for_k * 16) * 64)));
    CSB_Write(device, 14, 3);
    CSB_Write(device, 15, 28);
    CSB_Write(device, 16, 0);
    CSB_Write(device, 17, 0);
    CSB_Write(device, 18, 0);
    CSB_Write(device, 19, 0);
    CSB_Write(device, 20, 0);
    CSB_Write(device, 21, 1);
    CSB_Write(device, 22, 1);
    CSB_Write(device, 23, 1);
    CSB_Write(device, 24, 1);
    CSB_Write(device, 25, 0);
    CSB_Write(device, 26, 1922048);
    CSB_Write(device, 27, (64948224 + ((for_k * 16) * 64)));
    CSB_Write(device, 28, 0);
    CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("start: step115!\n");
#endif
    while(CSB_Read(device, 1) != 1) {}
  }
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step116 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 1938432);
  CSB_Write(device, 195, 137824256);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 64948224);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_STEP
printf("start: step116!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step117 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  for (int for_k = 0; for_k < (kvcache ? 1 : ((((token - last_token) + 16) - 1) / 16)); for_k++) {
    CSB_Write(device, 2, 4096);
    CSB_Write(device, 3, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 4, 1);
    CSB_Write(device, 5, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 6, 1);
    CSB_Write(device, 7, 1024);
    CSB_Write(device, 8, 384);
    CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
    CSB_Write(device, 10, (64948224 + ((for_k * 16) * 64)));
    CSB_Write(device, 11, 24491264);
    CSB_Write(device, 12, 16896);
    CSB_Write(device, 13, (81725440 + ((for_k * 16) * 64)));
    CSB_Write(device, 14, 13);
    CSB_Write(device, 15, 28);
    CSB_Write(device, 16, 0);
    CSB_Write(device, 17, 0);
    CSB_Write(device, 18, 0);
    CSB_Write(device, 19, 0);
    CSB_Write(device, 20, 0);
    CSB_Write(device, 21, 1);
    CSB_Write(device, 22, 1);
    CSB_Write(device, 23, 1);
    CSB_Write(device, 24, 1);
    CSB_Write(device, 25, 0);
    CSB_Write(device, 26, 2009600);
    CSB_Write(device, 27, 0);
    CSB_Write(device, 28, 0);
    CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("start: step117!\n");
#endif
    while(CSB_Read(device, 1) != 1) {}
  }
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step118 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.activate accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 524288);
  CSB_Write(device, 195, 81725440);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 406259712);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 428);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 428);
  CSB_Write(device, 206, 13696);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 16);
#ifdef PRINT_STEP
printf("start: step118!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.activate run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step119 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  for (int for_k = 0; for_k < (kvcache ? 1 : ((((token - last_token) + 16) - 1) / 16)); for_k++) {
    CSB_Write(device, 2, 4096);
    CSB_Write(device, 3, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 4, 1);
    CSB_Write(device, 5, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 6, 1);
    CSB_Write(device, 7, 1024);
    CSB_Write(device, 8, 384);
    CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
    CSB_Write(device, 10, (64948224 + ((for_k * 16) * 64)));
    CSB_Write(device, 11, 23587328);
    CSB_Write(device, 12, 16896);
    CSB_Write(device, 13, (81725440 + ((for_k * 16) * 64)));
    CSB_Write(device, 14, 13);
    CSB_Write(device, 15, 28);
    CSB_Write(device, 16, 2);
    CSB_Write(device, 17, 0);
    CSB_Write(device, 18, 0);
    CSB_Write(device, 19, 0);
    CSB_Write(device, 20, 0);
    CSB_Write(device, 21, 1);
    CSB_Write(device, 22, 1);
    CSB_Write(device, 23, 1);
    CSB_Write(device, 24, 1);
    CSB_Write(device, 25, 0);
    CSB_Write(device, 26, 1954816);
    CSB_Write(device, 27, (406259712 + ((for_k * 16) * 64)));
    CSB_Write(device, 28, 0);
    CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("start: step119!\n");
#endif
    while(CSB_Read(device, 1) != 1) {}
  }
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step120 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  for (int for_k = 0; for_k < (kvcache ? 1 : ((((token - last_token) + 16) - 1) / 16)); for_k++) {
    CSB_Write(device, 2, 13696);
    CSB_Write(device, 3, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 4, 1);
    CSB_Write(device, 5, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 6, 1);
    CSB_Write(device, 7, 288);
    CSB_Write(device, 8, 64);
    CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
    CSB_Write(device, 10, (81725440 + ((for_k * 16) * 64)));
    CSB_Write(device, 11, 25395200);
    CSB_Write(device, 12, 56576);
    CSB_Write(device, 13, (64948224 + ((for_k * 16) * 64)));
    CSB_Write(device, 14, 14);
    CSB_Write(device, 15, 28);
    CSB_Write(device, 16, 0);
    CSB_Write(device, 17, 0);
    CSB_Write(device, 18, 0);
    CSB_Write(device, 19, 0);
    CSB_Write(device, 20, 0);
    CSB_Write(device, 21, 1);
    CSB_Write(device, 22, 1);
    CSB_Write(device, 23, 1);
    CSB_Write(device, 24, 1);
    CSB_Write(device, 25, 0);
    CSB_Write(device, 26, 2064384);
    CSB_Write(device, 27, (137824256 + ((for_k * 16) * 64)));
    CSB_Write(device, 28, 0);
    CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("start: step120!\n");
#endif
    while(CSB_Read(device, 1) != 1) {}
  }
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step121 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 2080768);
  CSB_Write(device, 195, 64948224);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 81725440);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_STEP
printf("start: step121!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step122 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  for (int for_k = 0; for_k < (kvcache ? 1 : ((((token - last_token) + 16) - 1) / 16)); for_k++) {
    CSB_Write(device, 2, 4096);
    CSB_Write(device, 3, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 4, 1);
    CSB_Write(device, 5, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 6, 1);
    CSB_Write(device, 7, 1024);
    CSB_Write(device, 8, 1024);
    CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
    CSB_Write(device, 10, (81725440 + ((for_k * 16) * 64)));
    CSB_Write(device, 11, 26300416);
    CSB_Write(device, 12, 16896);
    CSB_Write(device, 13, (137824256 + ((for_k * 16) * 64)));
    CSB_Write(device, 14, 3);
    CSB_Write(device, 15, 28);
    CSB_Write(device, 16, 0);
    CSB_Write(device, 17, 0);
    CSB_Write(device, 18, 0);
    CSB_Write(device, 19, 0);
    CSB_Write(device, 20, 0);
    CSB_Write(device, 21, 1);
    CSB_Write(device, 22, 1);
    CSB_Write(device, 23, 1);
    CSB_Write(device, 24, 1);
    CSB_Write(device, 25, 0);
    CSB_Write(device, 26, 2097152);
    CSB_Write(device, 27, 0);
    CSB_Write(device, 28, 0);
    CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("start: step122!\n");
#endif
    while(CSB_Read(device, 1) != 1) {}
  }
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step123 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.pos_emb accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (kvcache ? (0 + ((token - 1) * 64)) : (0 + (last_token * 64))));
  CSB_Write(device, 195, 137824256);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 406259712);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 203, last_token);
  CSB_Write(device, 204, 32);
  CSB_Write(device, 205, 262144);
  CSB_Write(device, 206, 131072);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
#ifdef PRINT_STEP
printf("start: step123!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step124 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  for (int for_k = 0; for_k < (kvcache ? 1 : ((((token - last_token) + 16) - 1) / 16)); for_k++) {
    CSB_Write(device, 2, 4096);
    CSB_Write(device, 3, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 4, 1);
    CSB_Write(device, 5, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 6, 1);
    CSB_Write(device, 7, 256);
    CSB_Write(device, 8, 256);
    CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
    CSB_Write(device, 10, (81725440 + ((for_k * 16) * 64)));
    CSB_Write(device, 11, 26570752);
    CSB_Write(device, 12, 16896);
    CSB_Write(device, 13, (137824256 + ((for_k * 16) * 64)));
    CSB_Write(device, 14, 0);
    CSB_Write(device, 15, 28);
    CSB_Write(device, 16, 0);
    CSB_Write(device, 17, 0);
    CSB_Write(device, 18, 0);
    CSB_Write(device, 19, 0);
    CSB_Write(device, 20, 0);
    CSB_Write(device, 21, 1);
    CSB_Write(device, 22, 1);
    CSB_Write(device, 23, 1);
    CSB_Write(device, 24, 1);
    CSB_Write(device, 25, 0);
    CSB_Write(device, 26, 2113536);
    CSB_Write(device, 27, 0);
    CSB_Write(device, 28, 0);
    CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("start: step124!\n");
#endif
    while(CSB_Read(device, 1) != 1) {}
  }
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step125 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.pos_emb accel operator node, storage data in cache16 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (kvcache ? (0 + ((token - 1) * 64)) : (0 + (last_token * 64))));
  CSB_Write(device, 195, 137824256);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, (kvcache ? (23005184 + ((token - 1) * 64)) : (23005184 + (last_token * 64))));
  CSB_Write(device, 199, 524288);
  CSB_Write(device, 200, 131072);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 203, last_token);
  CSB_Write(device, 204, 2);
  CSB_Write(device, 205, 262144);
  CSB_Write(device, 206, 131072);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
#ifdef PRINT_STEP
printf("start: step125!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step126 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_afterTRP accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 23005184);
  CSB_Write(device, 195, 406259712);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 137824256);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 524288);
  CSB_Write(device, 202, 131072);
  CSB_Write(device, 203, 4);
  CSB_Write(device, 204, token);
  CSB_Write(device, 205, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 206, 11688);
  CSB_Write(device, 207, 991234);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 2);
#ifdef PRINT_STEP
printf("start: step126!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterTRP run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step127 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.softmax accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (1 - kvcache));
  CSB_Write(device, 195, 137824256);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 406259712);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, (((token + 32) - 1) / 32));
  CSB_Write(device, 202, 32);
  CSB_Write(device, 203, token);
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, (token - last_token));
  CSB_Write(device, 206, last_token);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 8);
#ifdef PRINT_STEP
printf("start: step127!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.softmax run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step128 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in cache17 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  for (int for_k = 0; for_k < (kvcache ? 1 : ((((token - last_token) + 16) - 1) / 16)); for_k++) {
    CSB_Write(device, 2, 4096);
    CSB_Write(device, 3, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 4, 1);
    CSB_Write(device, 5, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 6, 1);
    CSB_Write(device, 7, 256);
    CSB_Write(device, 8, 256);
    CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
    CSB_Write(device, 10, (81725440 + ((for_k * 16) * 64)));
    CSB_Write(device, 11, 26587648);
    CSB_Write(device, 12, 16896);
    CSB_Write(device, 13, ((kvcache ? (24053760 + ((token - 1) * 64)) : (24053760 + (last_token * 64))) + ((for_k * 16) * 64)));
    CSB_Write(device, 14, 0);
    CSB_Write(device, 15, 28);
    CSB_Write(device, 16, 0);
    CSB_Write(device, 17, 0);
    CSB_Write(device, 18, 0);
    CSB_Write(device, 19, 0);
    CSB_Write(device, 20, 0);
    CSB_Write(device, 21, 1);
    CSB_Write(device, 22, 1);
    CSB_Write(device, 23, 1);
    CSB_Write(device, 24, 1);
    CSB_Write(device, 25, 0);
    CSB_Write(device, 26, 2114560);
    CSB_Write(device, 27, 0);
    CSB_Write(device, 28, 0);
    CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 31, 131072);
    CSB_Write(device, 32, 131072);
    CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("start: step128!\n");
#endif
    while(CSB_Read(device, 1) != 1) {}
  }
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step129 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_afterF2W accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 24053760);
  CSB_Write(device, 195, 406259712);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 81725440);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 524288);
  CSB_Write(device, 202, 131072);
  CSB_Write(device, 203, (((token + 32) - 1) / 32));
  CSB_Write(device, 204, token);
  CSB_Write(device, 205, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 206, 4);
  CSB_Write(device, 207, 991234);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 1);
#ifdef PRINT_STEP
printf("start: step129!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterF2W run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step130 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  for (int for_k = 0; for_k < (kvcache ? 1 : ((((token - last_token) + 16) - 1) / 16)); for_k++) {
    CSB_Write(device, 2, 4096);
    CSB_Write(device, 3, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 4, 1);
    CSB_Write(device, 5, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 6, 1);
    CSB_Write(device, 7, 1024);
    CSB_Write(device, 8, 1024);
    CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
    CSB_Write(device, 10, (81725440 + ((for_k * 16) * 64)));
    CSB_Write(device, 11, 26604544);
    CSB_Write(device, 12, 16896);
    CSB_Write(device, 13, (406259712 + ((for_k * 16) * 64)));
    CSB_Write(device, 14, 3);
    CSB_Write(device, 15, 28);
    CSB_Write(device, 16, 0);
    CSB_Write(device, 17, 0);
    CSB_Write(device, 18, 0);
    CSB_Write(device, 19, 0);
    CSB_Write(device, 20, 0);
    CSB_Write(device, 21, 1);
    CSB_Write(device, 22, 1);
    CSB_Write(device, 23, 1);
    CSB_Write(device, 24, 1);
    CSB_Write(device, 25, 0);
    CSB_Write(device, 26, 2115584);
    CSB_Write(device, 27, (64948224 + ((for_k * 16) * 64)));
    CSB_Write(device, 28, 0);
    CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("start: step130!\n");
#endif
    while(CSB_Read(device, 1) != 1) {}
  }
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step131 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 2131968);
  CSB_Write(device, 195, 406259712);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 64948224);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_STEP
printf("start: step131!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step132 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  for (int for_k = 0; for_k < (kvcache ? 1 : ((((token - last_token) + 16) - 1) / 16)); for_k++) {
    CSB_Write(device, 2, 4096);
    CSB_Write(device, 3, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 4, 1);
    CSB_Write(device, 5, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 6, 1);
    CSB_Write(device, 7, 1024);
    CSB_Write(device, 8, 384);
    CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
    CSB_Write(device, 10, (64948224 + ((for_k * 16) * 64)));
    CSB_Write(device, 11, 27778816);
    CSB_Write(device, 12, 16896);
    CSB_Write(device, 13, (81725440 + ((for_k * 16) * 64)));
    CSB_Write(device, 14, 13);
    CSB_Write(device, 15, 28);
    CSB_Write(device, 16, 0);
    CSB_Write(device, 17, 0);
    CSB_Write(device, 18, 0);
    CSB_Write(device, 19, 0);
    CSB_Write(device, 20, 0);
    CSB_Write(device, 21, 1);
    CSB_Write(device, 22, 1);
    CSB_Write(device, 23, 1);
    CSB_Write(device, 24, 1);
    CSB_Write(device, 25, 0);
    CSB_Write(device, 26, 2203136);
    CSB_Write(device, 27, 0);
    CSB_Write(device, 28, 0);
    CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("start: step132!\n");
#endif
    while(CSB_Read(device, 1) != 1) {}
  }
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step133 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.activate accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 524288);
  CSB_Write(device, 195, 81725440);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 137824256);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 428);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 428);
  CSB_Write(device, 206, 13696);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 16);
#ifdef PRINT_STEP
printf("start: step133!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.activate run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step134 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  for (int for_k = 0; for_k < (kvcache ? 1 : ((((token - last_token) + 16) - 1) / 16)); for_k++) {
    CSB_Write(device, 2, 4096);
    CSB_Write(device, 3, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 4, 1);
    CSB_Write(device, 5, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 6, 1);
    CSB_Write(device, 7, 1024);
    CSB_Write(device, 8, 384);
    CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
    CSB_Write(device, 10, (64948224 + ((for_k * 16) * 64)));
    CSB_Write(device, 11, 26874880);
    CSB_Write(device, 12, 16896);
    CSB_Write(device, 13, (81725440 + ((for_k * 16) * 64)));
    CSB_Write(device, 14, 13);
    CSB_Write(device, 15, 28);
    CSB_Write(device, 16, 2);
    CSB_Write(device, 17, 0);
    CSB_Write(device, 18, 0);
    CSB_Write(device, 19, 0);
    CSB_Write(device, 20, 0);
    CSB_Write(device, 21, 1);
    CSB_Write(device, 22, 1);
    CSB_Write(device, 23, 1);
    CSB_Write(device, 24, 1);
    CSB_Write(device, 25, 0);
    CSB_Write(device, 26, 2148352);
    CSB_Write(device, 27, (137824256 + ((for_k * 16) * 64)));
    CSB_Write(device, 28, 0);
    CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("start: step134!\n");
#endif
    while(CSB_Read(device, 1) != 1) {}
  }
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step135 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  for (int for_k = 0; for_k < (kvcache ? 1 : ((((token - last_token) + 16) - 1) / 16)); for_k++) {
    CSB_Write(device, 2, 13696);
    CSB_Write(device, 3, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 4, 1);
    CSB_Write(device, 5, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 6, 1);
    CSB_Write(device, 7, 288);
    CSB_Write(device, 8, 64);
    CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
    CSB_Write(device, 10, (81725440 + ((for_k * 16) * 64)));
    CSB_Write(device, 11, 28682752);
    CSB_Write(device, 12, 56576);
    CSB_Write(device, 13, (64948224 + ((for_k * 16) * 64)));
    CSB_Write(device, 14, 14);
    CSB_Write(device, 15, 28);
    CSB_Write(device, 16, 0);
    CSB_Write(device, 17, 0);
    CSB_Write(device, 18, 0);
    CSB_Write(device, 19, 0);
    CSB_Write(device, 20, 0);
    CSB_Write(device, 21, 1);
    CSB_Write(device, 22, 1);
    CSB_Write(device, 23, 1);
    CSB_Write(device, 24, 1);
    CSB_Write(device, 25, 0);
    CSB_Write(device, 26, 2257920);
    CSB_Write(device, 27, (406259712 + ((for_k * 16) * 64)));
    CSB_Write(device, 28, 0);
    CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("start: step135!\n");
#endif
    while(CSB_Read(device, 1) != 1) {}
  }
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step136 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 2274304);
  CSB_Write(device, 195, 64948224);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 81725440);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_STEP
printf("start: step136!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step137 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  for (int for_k = 0; for_k < (kvcache ? 1 : ((((token - last_token) + 16) - 1) / 16)); for_k++) {
    CSB_Write(device, 2, 4096);
    CSB_Write(device, 3, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 4, 1);
    CSB_Write(device, 5, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 6, 1);
    CSB_Write(device, 7, 1024);
    CSB_Write(device, 8, 1024);
    CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
    CSB_Write(device, 10, (81725440 + ((for_k * 16) * 64)));
    CSB_Write(device, 11, 29587968);
    CSB_Write(device, 12, 16896);
    CSB_Write(device, 13, (406259712 + ((for_k * 16) * 64)));
    CSB_Write(device, 14, 3);
    CSB_Write(device, 15, 28);
    CSB_Write(device, 16, 0);
    CSB_Write(device, 17, 0);
    CSB_Write(device, 18, 0);
    CSB_Write(device, 19, 0);
    CSB_Write(device, 20, 0);
    CSB_Write(device, 21, 1);
    CSB_Write(device, 22, 1);
    CSB_Write(device, 23, 1);
    CSB_Write(device, 24, 1);
    CSB_Write(device, 25, 0);
    CSB_Write(device, 26, 2290688);
    CSB_Write(device, 27, 0);
    CSB_Write(device, 28, 0);
    CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("start: step137!\n");
#endif
    while(CSB_Read(device, 1) != 1) {}
  }
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step138 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.pos_emb accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (kvcache ? (0 + ((token - 1) * 64)) : (0 + (last_token * 64))));
  CSB_Write(device, 195, 406259712);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 137824256);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 203, last_token);
  CSB_Write(device, 204, 32);
  CSB_Write(device, 205, 262144);
  CSB_Write(device, 206, 131072);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
#ifdef PRINT_STEP
printf("start: step138!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step139 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  for (int for_k = 0; for_k < (kvcache ? 1 : ((((token - last_token) + 16) - 1) / 16)); for_k++) {
    CSB_Write(device, 2, 4096);
    CSB_Write(device, 3, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 4, 1);
    CSB_Write(device, 5, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 6, 1);
    CSB_Write(device, 7, 256);
    CSB_Write(device, 8, 256);
    CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
    CSB_Write(device, 10, (81725440 + ((for_k * 16) * 64)));
    CSB_Write(device, 11, 29858304);
    CSB_Write(device, 12, 16896);
    CSB_Write(device, 13, (406259712 + ((for_k * 16) * 64)));
    CSB_Write(device, 14, 0);
    CSB_Write(device, 15, 28);
    CSB_Write(device, 16, 0);
    CSB_Write(device, 17, 0);
    CSB_Write(device, 18, 0);
    CSB_Write(device, 19, 0);
    CSB_Write(device, 20, 0);
    CSB_Write(device, 21, 1);
    CSB_Write(device, 22, 1);
    CSB_Write(device, 23, 1);
    CSB_Write(device, 24, 1);
    CSB_Write(device, 25, 0);
    CSB_Write(device, 26, 2307072);
    CSB_Write(device, 27, 0);
    CSB_Write(device, 28, 0);
    CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("start: step139!\n");
#endif
    while(CSB_Read(device, 1) != 1) {}
  }
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step140 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.pos_emb accel operator node, storage data in cache18 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (kvcache ? (0 + ((token - 1) * 64)) : (0 + (last_token * 64))));
  CSB_Write(device, 195, 406259712);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, (kvcache ? (25102336 + ((token - 1) * 64)) : (25102336 + (last_token * 64))));
  CSB_Write(device, 199, 524288);
  CSB_Write(device, 200, 131072);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 203, last_token);
  CSB_Write(device, 204, 2);
  CSB_Write(device, 205, 262144);
  CSB_Write(device, 206, 131072);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
#ifdef PRINT_STEP
printf("start: step140!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step141 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_afterTRP accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 25102336);
  CSB_Write(device, 195, 137824256);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 406259712);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 524288);
  CSB_Write(device, 202, 131072);
  CSB_Write(device, 203, 4);
  CSB_Write(device, 204, token);
  CSB_Write(device, 205, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 206, 11688);
  CSB_Write(device, 207, 991234);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 2);
#ifdef PRINT_STEP
printf("start: step141!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterTRP run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step142 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.softmax accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (1 - kvcache));
  CSB_Write(device, 195, 406259712);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 137824256);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, (((token + 32) - 1) / 32));
  CSB_Write(device, 202, 32);
  CSB_Write(device, 203, token);
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, (token - last_token));
  CSB_Write(device, 206, last_token);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 8);
#ifdef PRINT_STEP
printf("start: step142!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.softmax run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step143 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in cache19 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  for (int for_k = 0; for_k < (kvcache ? 1 : ((((token - last_token) + 16) - 1) / 16)); for_k++) {
    CSB_Write(device, 2, 4096);
    CSB_Write(device, 3, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 4, 1);
    CSB_Write(device, 5, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 6, 1);
    CSB_Write(device, 7, 256);
    CSB_Write(device, 8, 256);
    CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
    CSB_Write(device, 10, (81725440 + ((for_k * 16) * 64)));
    CSB_Write(device, 11, 29875200);
    CSB_Write(device, 12, 16896);
    CSB_Write(device, 13, ((kvcache ? (26150912 + ((token - 1) * 64)) : (26150912 + (last_token * 64))) + ((for_k * 16) * 64)));
    CSB_Write(device, 14, 0);
    CSB_Write(device, 15, 28);
    CSB_Write(device, 16, 0);
    CSB_Write(device, 17, 0);
    CSB_Write(device, 18, 0);
    CSB_Write(device, 19, 0);
    CSB_Write(device, 20, 0);
    CSB_Write(device, 21, 1);
    CSB_Write(device, 22, 1);
    CSB_Write(device, 23, 1);
    CSB_Write(device, 24, 1);
    CSB_Write(device, 25, 0);
    CSB_Write(device, 26, 2308096);
    CSB_Write(device, 27, 0);
    CSB_Write(device, 28, 0);
    CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 31, 131072);
    CSB_Write(device, 32, 131072);
    CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("start: step143!\n");
#endif
    while(CSB_Read(device, 1) != 1) {}
  }
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step144 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_afterF2W accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 26150912);
  CSB_Write(device, 195, 137824256);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 81725440);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 524288);
  CSB_Write(device, 202, 131072);
  CSB_Write(device, 203, (((token + 32) - 1) / 32));
  CSB_Write(device, 204, token);
  CSB_Write(device, 205, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 206, 4);
  CSB_Write(device, 207, 991234);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 1);
#ifdef PRINT_STEP
printf("start: step144!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterF2W run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step145 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  for (int for_k = 0; for_k < (kvcache ? 1 : ((((token - last_token) + 16) - 1) / 16)); for_k++) {
    CSB_Write(device, 2, 4096);
    CSB_Write(device, 3, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 4, 1);
    CSB_Write(device, 5, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 6, 1);
    CSB_Write(device, 7, 1024);
    CSB_Write(device, 8, 1024);
    CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
    CSB_Write(device, 10, (81725440 + ((for_k * 16) * 64)));
    CSB_Write(device, 11, 29892096);
    CSB_Write(device, 12, 16896);
    CSB_Write(device, 13, (137824256 + ((for_k * 16) * 64)));
    CSB_Write(device, 14, 3);
    CSB_Write(device, 15, 28);
    CSB_Write(device, 16, 0);
    CSB_Write(device, 17, 0);
    CSB_Write(device, 18, 0);
    CSB_Write(device, 19, 0);
    CSB_Write(device, 20, 0);
    CSB_Write(device, 21, 1);
    CSB_Write(device, 22, 1);
    CSB_Write(device, 23, 1);
    CSB_Write(device, 24, 1);
    CSB_Write(device, 25, 0);
    CSB_Write(device, 26, 2309120);
    CSB_Write(device, 27, (64948224 + ((for_k * 16) * 64)));
    CSB_Write(device, 28, 0);
    CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("start: step145!\n");
#endif
    while(CSB_Read(device, 1) != 1) {}
  }
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step146 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 2325504);
  CSB_Write(device, 195, 137824256);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 64948224);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_STEP
printf("start: step146!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step147 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  for (int for_k = 0; for_k < (kvcache ? 1 : ((((token - last_token) + 16) - 1) / 16)); for_k++) {
    CSB_Write(device, 2, 4096);
    CSB_Write(device, 3, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 4, 1);
    CSB_Write(device, 5, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 6, 1);
    CSB_Write(device, 7, 1024);
    CSB_Write(device, 8, 384);
    CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
    CSB_Write(device, 10, (64948224 + ((for_k * 16) * 64)));
    CSB_Write(device, 11, 31066368);
    CSB_Write(device, 12, 16896);
    CSB_Write(device, 13, (81725440 + ((for_k * 16) * 64)));
    CSB_Write(device, 14, 13);
    CSB_Write(device, 15, 28);
    CSB_Write(device, 16, 0);
    CSB_Write(device, 17, 0);
    CSB_Write(device, 18, 0);
    CSB_Write(device, 19, 0);
    CSB_Write(device, 20, 0);
    CSB_Write(device, 21, 1);
    CSB_Write(device, 22, 1);
    CSB_Write(device, 23, 1);
    CSB_Write(device, 24, 1);
    CSB_Write(device, 25, 0);
    CSB_Write(device, 26, 2396672);
    CSB_Write(device, 27, 0);
    CSB_Write(device, 28, 0);
    CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("start: step147!\n");
#endif
    while(CSB_Read(device, 1) != 1) {}
  }
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step148 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.activate accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 524288);
  CSB_Write(device, 195, 81725440);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 406259712);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 428);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 428);
  CSB_Write(device, 206, 13696);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 16);
#ifdef PRINT_STEP
printf("start: step148!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.activate run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step149 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  for (int for_k = 0; for_k < (kvcache ? 1 : ((((token - last_token) + 16) - 1) / 16)); for_k++) {
    CSB_Write(device, 2, 4096);
    CSB_Write(device, 3, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 4, 1);
    CSB_Write(device, 5, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 6, 1);
    CSB_Write(device, 7, 1024);
    CSB_Write(device, 8, 384);
    CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
    CSB_Write(device, 10, (64948224 + ((for_k * 16) * 64)));
    CSB_Write(device, 11, 30162432);
    CSB_Write(device, 12, 16896);
    CSB_Write(device, 13, (81725440 + ((for_k * 16) * 64)));
    CSB_Write(device, 14, 13);
    CSB_Write(device, 15, 28);
    CSB_Write(device, 16, 2);
    CSB_Write(device, 17, 0);
    CSB_Write(device, 18, 0);
    CSB_Write(device, 19, 0);
    CSB_Write(device, 20, 0);
    CSB_Write(device, 21, 1);
    CSB_Write(device, 22, 1);
    CSB_Write(device, 23, 1);
    CSB_Write(device, 24, 1);
    CSB_Write(device, 25, 0);
    CSB_Write(device, 26, 2341888);
    CSB_Write(device, 27, (406259712 + ((for_k * 16) * 64)));
    CSB_Write(device, 28, 0);
    CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("start: step149!\n");
#endif
    while(CSB_Read(device, 1) != 1) {}
  }
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step150 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  for (int for_k = 0; for_k < (kvcache ? 1 : ((((token - last_token) + 16) - 1) / 16)); for_k++) {
    CSB_Write(device, 2, 13696);
    CSB_Write(device, 3, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 4, 1);
    CSB_Write(device, 5, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 6, 1);
    CSB_Write(device, 7, 288);
    CSB_Write(device, 8, 64);
    CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
    CSB_Write(device, 10, (81725440 + ((for_k * 16) * 64)));
    CSB_Write(device, 11, 31970304);
    CSB_Write(device, 12, 56576);
    CSB_Write(device, 13, (64948224 + ((for_k * 16) * 64)));
    CSB_Write(device, 14, 14);
    CSB_Write(device, 15, 28);
    CSB_Write(device, 16, 0);
    CSB_Write(device, 17, 0);
    CSB_Write(device, 18, 0);
    CSB_Write(device, 19, 0);
    CSB_Write(device, 20, 0);
    CSB_Write(device, 21, 1);
    CSB_Write(device, 22, 1);
    CSB_Write(device, 23, 1);
    CSB_Write(device, 24, 1);
    CSB_Write(device, 25, 0);
    CSB_Write(device, 26, 2451456);
    CSB_Write(device, 27, (137824256 + ((for_k * 16) * 64)));
    CSB_Write(device, 28, 0);
    CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("start: step150!\n");
#endif
    while(CSB_Read(device, 1) != 1) {}
  }
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step151 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 2467840);
  CSB_Write(device, 195, 64948224);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 81725440);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_STEP
printf("start: step151!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step152 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  for (int for_k = 0; for_k < (kvcache ? 1 : ((((token - last_token) + 16) - 1) / 16)); for_k++) {
    CSB_Write(device, 2, 4096);
    CSB_Write(device, 3, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 4, 1);
    CSB_Write(device, 5, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 6, 1);
    CSB_Write(device, 7, 1024);
    CSB_Write(device, 8, 1024);
    CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
    CSB_Write(device, 10, (81725440 + ((for_k * 16) * 64)));
    CSB_Write(device, 11, 32875520);
    CSB_Write(device, 12, 16896);
    CSB_Write(device, 13, (137824256 + ((for_k * 16) * 64)));
    CSB_Write(device, 14, 3);
    CSB_Write(device, 15, 28);
    CSB_Write(device, 16, 0);
    CSB_Write(device, 17, 0);
    CSB_Write(device, 18, 0);
    CSB_Write(device, 19, 0);
    CSB_Write(device, 20, 0);
    CSB_Write(device, 21, 1);
    CSB_Write(device, 22, 1);
    CSB_Write(device, 23, 1);
    CSB_Write(device, 24, 1);
    CSB_Write(device, 25, 0);
    CSB_Write(device, 26, 2484224);
    CSB_Write(device, 27, 0);
    CSB_Write(device, 28, 0);
    CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("start: step152!\n");
#endif
    while(CSB_Read(device, 1) != 1) {}
  }
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step153 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.pos_emb accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (kvcache ? (0 + ((token - 1) * 64)) : (0 + (last_token * 64))));
  CSB_Write(device, 195, 137824256);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 406259712);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 203, last_token);
  CSB_Write(device, 204, 32);
  CSB_Write(device, 205, 262144);
  CSB_Write(device, 206, 131072);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
#ifdef PRINT_STEP
printf("start: step153!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step154 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  for (int for_k = 0; for_k < (kvcache ? 1 : ((((token - last_token) + 16) - 1) / 16)); for_k++) {
    CSB_Write(device, 2, 4096);
    CSB_Write(device, 3, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 4, 1);
    CSB_Write(device, 5, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 6, 1);
    CSB_Write(device, 7, 256);
    CSB_Write(device, 8, 256);
    CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
    CSB_Write(device, 10, (81725440 + ((for_k * 16) * 64)));
    CSB_Write(device, 11, 33145856);
    CSB_Write(device, 12, 16896);
    CSB_Write(device, 13, (137824256 + ((for_k * 16) * 64)));
    CSB_Write(device, 14, 0);
    CSB_Write(device, 15, 28);
    CSB_Write(device, 16, 0);
    CSB_Write(device, 17, 0);
    CSB_Write(device, 18, 0);
    CSB_Write(device, 19, 0);
    CSB_Write(device, 20, 0);
    CSB_Write(device, 21, 1);
    CSB_Write(device, 22, 1);
    CSB_Write(device, 23, 1);
    CSB_Write(device, 24, 1);
    CSB_Write(device, 25, 0);
    CSB_Write(device, 26, 2500608);
    CSB_Write(device, 27, 0);
    CSB_Write(device, 28, 0);
    CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("start: step154!\n");
#endif
    while(CSB_Read(device, 1) != 1) {}
  }
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step155 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.pos_emb accel operator node, storage data in cache20 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (kvcache ? (0 + ((token - 1) * 64)) : (0 + (last_token * 64))));
  CSB_Write(device, 195, 137824256);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, (kvcache ? (27199488 + ((token - 1) * 64)) : (27199488 + (last_token * 64))));
  CSB_Write(device, 199, 524288);
  CSB_Write(device, 200, 131072);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 203, last_token);
  CSB_Write(device, 204, 2);
  CSB_Write(device, 205, 262144);
  CSB_Write(device, 206, 131072);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
#ifdef PRINT_STEP
printf("start: step155!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step156 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_afterTRP accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 27199488);
  CSB_Write(device, 195, 406259712);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 137824256);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 524288);
  CSB_Write(device, 202, 131072);
  CSB_Write(device, 203, 4);
  CSB_Write(device, 204, token);
  CSB_Write(device, 205, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 206, 11688);
  CSB_Write(device, 207, 991234);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 2);
#ifdef PRINT_STEP
printf("start: step156!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterTRP run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step157 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.softmax accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (1 - kvcache));
  CSB_Write(device, 195, 137824256);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 406259712);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, (((token + 32) - 1) / 32));
  CSB_Write(device, 202, 32);
  CSB_Write(device, 203, token);
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, (token - last_token));
  CSB_Write(device, 206, last_token);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 8);
#ifdef PRINT_STEP
printf("start: step157!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.softmax run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step158 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in cache21 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  for (int for_k = 0; for_k < (kvcache ? 1 : ((((token - last_token) + 16) - 1) / 16)); for_k++) {
    CSB_Write(device, 2, 4096);
    CSB_Write(device, 3, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 4, 1);
    CSB_Write(device, 5, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 6, 1);
    CSB_Write(device, 7, 256);
    CSB_Write(device, 8, 256);
    CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
    CSB_Write(device, 10, (81725440 + ((for_k * 16) * 64)));
    CSB_Write(device, 11, 33162752);
    CSB_Write(device, 12, 16896);
    CSB_Write(device, 13, ((kvcache ? (28248064 + ((token - 1) * 64)) : (28248064 + (last_token * 64))) + ((for_k * 16) * 64)));
    CSB_Write(device, 14, 0);
    CSB_Write(device, 15, 28);
    CSB_Write(device, 16, 0);
    CSB_Write(device, 17, 0);
    CSB_Write(device, 18, 0);
    CSB_Write(device, 19, 0);
    CSB_Write(device, 20, 0);
    CSB_Write(device, 21, 1);
    CSB_Write(device, 22, 1);
    CSB_Write(device, 23, 1);
    CSB_Write(device, 24, 1);
    CSB_Write(device, 25, 0);
    CSB_Write(device, 26, 2501632);
    CSB_Write(device, 27, 0);
    CSB_Write(device, 28, 0);
    CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 31, 131072);
    CSB_Write(device, 32, 131072);
    CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("start: step158!\n");
#endif
    while(CSB_Read(device, 1) != 1) {}
  }
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step159 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_afterF2W accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 28248064);
  CSB_Write(device, 195, 406259712);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 81725440);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 524288);
  CSB_Write(device, 202, 131072);
  CSB_Write(device, 203, (((token + 32) - 1) / 32));
  CSB_Write(device, 204, token);
  CSB_Write(device, 205, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 206, 4);
  CSB_Write(device, 207, 991234);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 1);
#ifdef PRINT_STEP
printf("start: step159!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterF2W run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step160 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  for (int for_k = 0; for_k < (kvcache ? 1 : ((((token - last_token) + 16) - 1) / 16)); for_k++) {
    CSB_Write(device, 2, 4096);
    CSB_Write(device, 3, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 4, 1);
    CSB_Write(device, 5, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 6, 1);
    CSB_Write(device, 7, 1024);
    CSB_Write(device, 8, 1024);
    CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
    CSB_Write(device, 10, (81725440 + ((for_k * 16) * 64)));
    CSB_Write(device, 11, 33179648);
    CSB_Write(device, 12, 16896);
    CSB_Write(device, 13, (406259712 + ((for_k * 16) * 64)));
    CSB_Write(device, 14, 3);
    CSB_Write(device, 15, 28);
    CSB_Write(device, 16, 0);
    CSB_Write(device, 17, 0);
    CSB_Write(device, 18, 0);
    CSB_Write(device, 19, 0);
    CSB_Write(device, 20, 0);
    CSB_Write(device, 21, 1);
    CSB_Write(device, 22, 1);
    CSB_Write(device, 23, 1);
    CSB_Write(device, 24, 1);
    CSB_Write(device, 25, 0);
    CSB_Write(device, 26, 2502656);
    CSB_Write(device, 27, (64948224 + ((for_k * 16) * 64)));
    CSB_Write(device, 28, 0);
    CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("start: step160!\n");
#endif
    while(CSB_Read(device, 1) != 1) {}
  }
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step161 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 2519040);
  CSB_Write(device, 195, 406259712);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 64948224);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_STEP
printf("start: step161!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step162 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  for (int for_k = 0; for_k < (kvcache ? 1 : ((((token - last_token) + 16) - 1) / 16)); for_k++) {
    CSB_Write(device, 2, 4096);
    CSB_Write(device, 3, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 4, 1);
    CSB_Write(device, 5, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 6, 1);
    CSB_Write(device, 7, 1024);
    CSB_Write(device, 8, 384);
    CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
    CSB_Write(device, 10, (64948224 + ((for_k * 16) * 64)));
    CSB_Write(device, 11, 34353920);
    CSB_Write(device, 12, 16896);
    CSB_Write(device, 13, (81725440 + ((for_k * 16) * 64)));
    CSB_Write(device, 14, 13);
    CSB_Write(device, 15, 28);
    CSB_Write(device, 16, 0);
    CSB_Write(device, 17, 0);
    CSB_Write(device, 18, 0);
    CSB_Write(device, 19, 0);
    CSB_Write(device, 20, 0);
    CSB_Write(device, 21, 1);
    CSB_Write(device, 22, 1);
    CSB_Write(device, 23, 1);
    CSB_Write(device, 24, 1);
    CSB_Write(device, 25, 0);
    CSB_Write(device, 26, 2590208);
    CSB_Write(device, 27, 0);
    CSB_Write(device, 28, 0);
    CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("start: step162!\n");
#endif
    while(CSB_Read(device, 1) != 1) {}
  }
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step163 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.activate accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 524288);
  CSB_Write(device, 195, 81725440);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 137824256);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 428);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 428);
  CSB_Write(device, 206, 13696);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 16);
#ifdef PRINT_STEP
printf("start: step163!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.activate run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step164 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  for (int for_k = 0; for_k < (kvcache ? 1 : ((((token - last_token) + 16) - 1) / 16)); for_k++) {
    CSB_Write(device, 2, 4096);
    CSB_Write(device, 3, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 4, 1);
    CSB_Write(device, 5, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 6, 1);
    CSB_Write(device, 7, 1024);
    CSB_Write(device, 8, 384);
    CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
    CSB_Write(device, 10, (64948224 + ((for_k * 16) * 64)));
    CSB_Write(device, 11, 33449984);
    CSB_Write(device, 12, 16896);
    CSB_Write(device, 13, (81725440 + ((for_k * 16) * 64)));
    CSB_Write(device, 14, 13);
    CSB_Write(device, 15, 28);
    CSB_Write(device, 16, 2);
    CSB_Write(device, 17, 0);
    CSB_Write(device, 18, 0);
    CSB_Write(device, 19, 0);
    CSB_Write(device, 20, 0);
    CSB_Write(device, 21, 1);
    CSB_Write(device, 22, 1);
    CSB_Write(device, 23, 1);
    CSB_Write(device, 24, 1);
    CSB_Write(device, 25, 0);
    CSB_Write(device, 26, 2535424);
    CSB_Write(device, 27, (137824256 + ((for_k * 16) * 64)));
    CSB_Write(device, 28, 0);
    CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("start: step164!\n");
#endif
    while(CSB_Read(device, 1) != 1) {}
  }
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step165 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  for (int for_k = 0; for_k < (kvcache ? 1 : ((((token - last_token) + 16) - 1) / 16)); for_k++) {
    CSB_Write(device, 2, 13696);
    CSB_Write(device, 3, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 4, 1);
    CSB_Write(device, 5, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 6, 1);
    CSB_Write(device, 7, 288);
    CSB_Write(device, 8, 64);
    CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
    CSB_Write(device, 10, (81725440 + ((for_k * 16) * 64)));
    CSB_Write(device, 11, 35257856);
    CSB_Write(device, 12, 56576);
    CSB_Write(device, 13, (64948224 + ((for_k * 16) * 64)));
    CSB_Write(device, 14, 14);
    CSB_Write(device, 15, 28);
    CSB_Write(device, 16, 0);
    CSB_Write(device, 17, 0);
    CSB_Write(device, 18, 0);
    CSB_Write(device, 19, 0);
    CSB_Write(device, 20, 0);
    CSB_Write(device, 21, 1);
    CSB_Write(device, 22, 1);
    CSB_Write(device, 23, 1);
    CSB_Write(device, 24, 1);
    CSB_Write(device, 25, 0);
    CSB_Write(device, 26, 2644992);
    CSB_Write(device, 27, (406259712 + ((for_k * 16) * 64)));
    CSB_Write(device, 28, 0);
    CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("start: step165!\n");
#endif
    while(CSB_Read(device, 1) != 1) {}
  }
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step166 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 2661376);
  CSB_Write(device, 195, 64948224);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 81725440);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_STEP
printf("start: step166!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step167 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  for (int for_k = 0; for_k < (kvcache ? 1 : ((((token - last_token) + 16) - 1) / 16)); for_k++) {
    CSB_Write(device, 2, 4096);
    CSB_Write(device, 3, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 4, 1);
    CSB_Write(device, 5, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 6, 1);
    CSB_Write(device, 7, 1024);
    CSB_Write(device, 8, 1024);
    CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
    CSB_Write(device, 10, (81725440 + ((for_k * 16) * 64)));
    CSB_Write(device, 11, 36163072);
    CSB_Write(device, 12, 16896);
    CSB_Write(device, 13, (406259712 + ((for_k * 16) * 64)));
    CSB_Write(device, 14, 3);
    CSB_Write(device, 15, 28);
    CSB_Write(device, 16, 0);
    CSB_Write(device, 17, 0);
    CSB_Write(device, 18, 0);
    CSB_Write(device, 19, 0);
    CSB_Write(device, 20, 0);
    CSB_Write(device, 21, 1);
    CSB_Write(device, 22, 1);
    CSB_Write(device, 23, 1);
    CSB_Write(device, 24, 1);
    CSB_Write(device, 25, 0);
    CSB_Write(device, 26, 2677760);
    CSB_Write(device, 27, 0);
    CSB_Write(device, 28, 0);
    CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("start: step167!\n");
#endif
    while(CSB_Read(device, 1) != 1) {}
  }
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step168 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.pos_emb accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (kvcache ? (0 + ((token - 1) * 64)) : (0 + (last_token * 64))));
  CSB_Write(device, 195, 406259712);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 137824256);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 203, last_token);
  CSB_Write(device, 204, 32);
  CSB_Write(device, 205, 262144);
  CSB_Write(device, 206, 131072);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
#ifdef PRINT_STEP
printf("start: step168!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step169 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  for (int for_k = 0; for_k < (kvcache ? 1 : ((((token - last_token) + 16) - 1) / 16)); for_k++) {
    CSB_Write(device, 2, 4096);
    CSB_Write(device, 3, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 4, 1);
    CSB_Write(device, 5, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 6, 1);
    CSB_Write(device, 7, 256);
    CSB_Write(device, 8, 256);
    CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
    CSB_Write(device, 10, (81725440 + ((for_k * 16) * 64)));
    CSB_Write(device, 11, 36433408);
    CSB_Write(device, 12, 16896);
    CSB_Write(device, 13, (406259712 + ((for_k * 16) * 64)));
    CSB_Write(device, 14, 0);
    CSB_Write(device, 15, 28);
    CSB_Write(device, 16, 0);
    CSB_Write(device, 17, 0);
    CSB_Write(device, 18, 0);
    CSB_Write(device, 19, 0);
    CSB_Write(device, 20, 0);
    CSB_Write(device, 21, 1);
    CSB_Write(device, 22, 1);
    CSB_Write(device, 23, 1);
    CSB_Write(device, 24, 1);
    CSB_Write(device, 25, 0);
    CSB_Write(device, 26, 2694144);
    CSB_Write(device, 27, 0);
    CSB_Write(device, 28, 0);
    CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("start: step169!\n");
#endif
    while(CSB_Read(device, 1) != 1) {}
  }
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step170 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.pos_emb accel operator node, storage data in cache22 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (kvcache ? (0 + ((token - 1) * 64)) : (0 + (last_token * 64))));
  CSB_Write(device, 195, 406259712);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, (kvcache ? (29296640 + ((token - 1) * 64)) : (29296640 + (last_token * 64))));
  CSB_Write(device, 199, 524288);
  CSB_Write(device, 200, 131072);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 203, last_token);
  CSB_Write(device, 204, 2);
  CSB_Write(device, 205, 262144);
  CSB_Write(device, 206, 131072);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
#ifdef PRINT_STEP
printf("start: step170!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step171 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_afterTRP accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 29296640);
  CSB_Write(device, 195, 137824256);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 406259712);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 524288);
  CSB_Write(device, 202, 131072);
  CSB_Write(device, 203, 4);
  CSB_Write(device, 204, token);
  CSB_Write(device, 205, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 206, 11688);
  CSB_Write(device, 207, 991234);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 2);
#ifdef PRINT_STEP
printf("start: step171!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterTRP run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step172 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.softmax accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (1 - kvcache));
  CSB_Write(device, 195, 406259712);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 137824256);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, (((token + 32) - 1) / 32));
  CSB_Write(device, 202, 32);
  CSB_Write(device, 203, token);
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, (token - last_token));
  CSB_Write(device, 206, last_token);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 8);
#ifdef PRINT_STEP
printf("start: step172!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.softmax run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step173 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in cache23 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  for (int for_k = 0; for_k < (kvcache ? 1 : ((((token - last_token) + 16) - 1) / 16)); for_k++) {
    CSB_Write(device, 2, 4096);
    CSB_Write(device, 3, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 4, 1);
    CSB_Write(device, 5, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 6, 1);
    CSB_Write(device, 7, 256);
    CSB_Write(device, 8, 256);
    CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
    CSB_Write(device, 10, (81725440 + ((for_k * 16) * 64)));
    CSB_Write(device, 11, 36450304);
    CSB_Write(device, 12, 16896);
    CSB_Write(device, 13, ((kvcache ? (30345216 + ((token - 1) * 64)) : (30345216 + (last_token * 64))) + ((for_k * 16) * 64)));
    CSB_Write(device, 14, 0);
    CSB_Write(device, 15, 28);
    CSB_Write(device, 16, 0);
    CSB_Write(device, 17, 0);
    CSB_Write(device, 18, 0);
    CSB_Write(device, 19, 0);
    CSB_Write(device, 20, 0);
    CSB_Write(device, 21, 1);
    CSB_Write(device, 22, 1);
    CSB_Write(device, 23, 1);
    CSB_Write(device, 24, 1);
    CSB_Write(device, 25, 0);
    CSB_Write(device, 26, 2695168);
    CSB_Write(device, 27, 0);
    CSB_Write(device, 28, 0);
    CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 31, 131072);
    CSB_Write(device, 32, 131072);
    CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("start: step173!\n");
#endif
    while(CSB_Read(device, 1) != 1) {}
  }
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step174 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_afterF2W accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 30345216);
  CSB_Write(device, 195, 137824256);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 81725440);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 524288);
  CSB_Write(device, 202, 131072);
  CSB_Write(device, 203, (((token + 32) - 1) / 32));
  CSB_Write(device, 204, token);
  CSB_Write(device, 205, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 206, 4);
  CSB_Write(device, 207, 991234);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 1);
#ifdef PRINT_STEP
printf("start: step174!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterF2W run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step175 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  for (int for_k = 0; for_k < (kvcache ? 1 : ((((token - last_token) + 16) - 1) / 16)); for_k++) {
    CSB_Write(device, 2, 4096);
    CSB_Write(device, 3, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 4, 1);
    CSB_Write(device, 5, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 6, 1);
    CSB_Write(device, 7, 1024);
    CSB_Write(device, 8, 1024);
    CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
    CSB_Write(device, 10, (81725440 + ((for_k * 16) * 64)));
    CSB_Write(device, 11, 36467200);
    CSB_Write(device, 12, 16896);
    CSB_Write(device, 13, (137824256 + ((for_k * 16) * 64)));
    CSB_Write(device, 14, 3);
    CSB_Write(device, 15, 28);
    CSB_Write(device, 16, 0);
    CSB_Write(device, 17, 0);
    CSB_Write(device, 18, 0);
    CSB_Write(device, 19, 0);
    CSB_Write(device, 20, 0);
    CSB_Write(device, 21, 1);
    CSB_Write(device, 22, 1);
    CSB_Write(device, 23, 1);
    CSB_Write(device, 24, 1);
    CSB_Write(device, 25, 0);
    CSB_Write(device, 26, 2696192);
    CSB_Write(device, 27, (64948224 + ((for_k * 16) * 64)));
    CSB_Write(device, 28, 0);
    CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("start: step175!\n");
#endif
    while(CSB_Read(device, 1) != 1) {}
  }
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step176 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 2712576);
  CSB_Write(device, 195, 137824256);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 64948224);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_STEP
printf("start: step176!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step177 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  for (int for_k = 0; for_k < (kvcache ? 1 : ((((token - last_token) + 16) - 1) / 16)); for_k++) {
    CSB_Write(device, 2, 4096);
    CSB_Write(device, 3, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 4, 1);
    CSB_Write(device, 5, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 6, 1);
    CSB_Write(device, 7, 1024);
    CSB_Write(device, 8, 384);
    CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
    CSB_Write(device, 10, (64948224 + ((for_k * 16) * 64)));
    CSB_Write(device, 11, 37641472);
    CSB_Write(device, 12, 16896);
    CSB_Write(device, 13, (81725440 + ((for_k * 16) * 64)));
    CSB_Write(device, 14, 13);
    CSB_Write(device, 15, 28);
    CSB_Write(device, 16, 0);
    CSB_Write(device, 17, 0);
    CSB_Write(device, 18, 0);
    CSB_Write(device, 19, 0);
    CSB_Write(device, 20, 0);
    CSB_Write(device, 21, 1);
    CSB_Write(device, 22, 1);
    CSB_Write(device, 23, 1);
    CSB_Write(device, 24, 1);
    CSB_Write(device, 25, 0);
    CSB_Write(device, 26, 2783744);
    CSB_Write(device, 27, 0);
    CSB_Write(device, 28, 0);
    CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("start: step177!\n");
#endif
    while(CSB_Read(device, 1) != 1) {}
  }
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step178 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.activate accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 524288);
  CSB_Write(device, 195, 81725440);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 406259712);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 428);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 428);
  CSB_Write(device, 206, 13696);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 16);
#ifdef PRINT_STEP
printf("start: step178!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.activate run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step179 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  for (int for_k = 0; for_k < (kvcache ? 1 : ((((token - last_token) + 16) - 1) / 16)); for_k++) {
    CSB_Write(device, 2, 4096);
    CSB_Write(device, 3, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 4, 1);
    CSB_Write(device, 5, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 6, 1);
    CSB_Write(device, 7, 1024);
    CSB_Write(device, 8, 384);
    CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
    CSB_Write(device, 10, (64948224 + ((for_k * 16) * 64)));
    CSB_Write(device, 11, 36737536);
    CSB_Write(device, 12, 16896);
    CSB_Write(device, 13, (81725440 + ((for_k * 16) * 64)));
    CSB_Write(device, 14, 13);
    CSB_Write(device, 15, 28);
    CSB_Write(device, 16, 2);
    CSB_Write(device, 17, 0);
    CSB_Write(device, 18, 0);
    CSB_Write(device, 19, 0);
    CSB_Write(device, 20, 0);
    CSB_Write(device, 21, 1);
    CSB_Write(device, 22, 1);
    CSB_Write(device, 23, 1);
    CSB_Write(device, 24, 1);
    CSB_Write(device, 25, 0);
    CSB_Write(device, 26, 2728960);
    CSB_Write(device, 27, (406259712 + ((for_k * 16) * 64)));
    CSB_Write(device, 28, 0);
    CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("start: step179!\n");
#endif
    while(CSB_Read(device, 1) != 1) {}
  }
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step180 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  for (int for_k = 0; for_k < (kvcache ? 1 : ((((token - last_token) + 16) - 1) / 16)); for_k++) {
    CSB_Write(device, 2, 13696);
    CSB_Write(device, 3, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 4, 1);
    CSB_Write(device, 5, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 6, 1);
    CSB_Write(device, 7, 288);
    CSB_Write(device, 8, 64);
    CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
    CSB_Write(device, 10, (81725440 + ((for_k * 16) * 64)));
    CSB_Write(device, 11, 38545408);
    CSB_Write(device, 12, 56576);
    CSB_Write(device, 13, (64948224 + ((for_k * 16) * 64)));
    CSB_Write(device, 14, 14);
    CSB_Write(device, 15, 28);
    CSB_Write(device, 16, 0);
    CSB_Write(device, 17, 0);
    CSB_Write(device, 18, 0);
    CSB_Write(device, 19, 0);
    CSB_Write(device, 20, 0);
    CSB_Write(device, 21, 1);
    CSB_Write(device, 22, 1);
    CSB_Write(device, 23, 1);
    CSB_Write(device, 24, 1);
    CSB_Write(device, 25, 0);
    CSB_Write(device, 26, 2838528);
    CSB_Write(device, 27, (137824256 + ((for_k * 16) * 64)));
    CSB_Write(device, 28, 0);
    CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("start: step180!\n");
#endif
    while(CSB_Read(device, 1) != 1) {}
  }
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step181 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 2854912);
  CSB_Write(device, 195, 64948224);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 81725440);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_STEP
printf("start: step181!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step182 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  for (int for_k = 0; for_k < (kvcache ? 1 : ((((token - last_token) + 16) - 1) / 16)); for_k++) {
    CSB_Write(device, 2, 4096);
    CSB_Write(device, 3, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 4, 1);
    CSB_Write(device, 5, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 6, 1);
    CSB_Write(device, 7, 1024);
    CSB_Write(device, 8, 1024);
    CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
    CSB_Write(device, 10, (81725440 + ((for_k * 16) * 64)));
    CSB_Write(device, 11, 39450624);
    CSB_Write(device, 12, 16896);
    CSB_Write(device, 13, (137824256 + ((for_k * 16) * 64)));
    CSB_Write(device, 14, 3);
    CSB_Write(device, 15, 28);
    CSB_Write(device, 16, 0);
    CSB_Write(device, 17, 0);
    CSB_Write(device, 18, 0);
    CSB_Write(device, 19, 0);
    CSB_Write(device, 20, 0);
    CSB_Write(device, 21, 1);
    CSB_Write(device, 22, 1);
    CSB_Write(device, 23, 1);
    CSB_Write(device, 24, 1);
    CSB_Write(device, 25, 0);
    CSB_Write(device, 26, 2871296);
    CSB_Write(device, 27, 0);
    CSB_Write(device, 28, 0);
    CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("start: step182!\n");
#endif
    while(CSB_Read(device, 1) != 1) {}
  }
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step183 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.pos_emb accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (kvcache ? (0 + ((token - 1) * 64)) : (0 + (last_token * 64))));
  CSB_Write(device, 195, 137824256);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 406259712);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 203, last_token);
  CSB_Write(device, 204, 32);
  CSB_Write(device, 205, 262144);
  CSB_Write(device, 206, 131072);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
#ifdef PRINT_STEP
printf("start: step183!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step184 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  for (int for_k = 0; for_k < (kvcache ? 1 : ((((token - last_token) + 16) - 1) / 16)); for_k++) {
    CSB_Write(device, 2, 4096);
    CSB_Write(device, 3, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 4, 1);
    CSB_Write(device, 5, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 6, 1);
    CSB_Write(device, 7, 256);
    CSB_Write(device, 8, 256);
    CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
    CSB_Write(device, 10, (81725440 + ((for_k * 16) * 64)));
    CSB_Write(device, 11, 39720960);
    CSB_Write(device, 12, 16896);
    CSB_Write(device, 13, (137824256 + ((for_k * 16) * 64)));
    CSB_Write(device, 14, 0);
    CSB_Write(device, 15, 28);
    CSB_Write(device, 16, 0);
    CSB_Write(device, 17, 0);
    CSB_Write(device, 18, 0);
    CSB_Write(device, 19, 0);
    CSB_Write(device, 20, 0);
    CSB_Write(device, 21, 1);
    CSB_Write(device, 22, 1);
    CSB_Write(device, 23, 1);
    CSB_Write(device, 24, 1);
    CSB_Write(device, 25, 0);
    CSB_Write(device, 26, 2887680);
    CSB_Write(device, 27, 0);
    CSB_Write(device, 28, 0);
    CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("start: step184!\n");
#endif
    while(CSB_Read(device, 1) != 1) {}
  }
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step185 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.pos_emb accel operator node, storage data in cache24 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (kvcache ? (0 + ((token - 1) * 64)) : (0 + (last_token * 64))));
  CSB_Write(device, 195, 137824256);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, (kvcache ? (31393792 + ((token - 1) * 64)) : (31393792 + (last_token * 64))));
  CSB_Write(device, 199, 524288);
  CSB_Write(device, 200, 131072);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 203, last_token);
  CSB_Write(device, 204, 2);
  CSB_Write(device, 205, 262144);
  CSB_Write(device, 206, 131072);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
#ifdef PRINT_STEP
printf("start: step185!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step186 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_afterTRP accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 31393792);
  CSB_Write(device, 195, 406259712);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 137824256);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 524288);
  CSB_Write(device, 202, 131072);
  CSB_Write(device, 203, 4);
  CSB_Write(device, 204, token);
  CSB_Write(device, 205, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 206, 11688);
  CSB_Write(device, 207, 991234);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 2);
#ifdef PRINT_STEP
printf("start: step186!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterTRP run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step187 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.softmax accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (1 - kvcache));
  CSB_Write(device, 195, 137824256);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 406259712);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, (((token + 32) - 1) / 32));
  CSB_Write(device, 202, 32);
  CSB_Write(device, 203, token);
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, (token - last_token));
  CSB_Write(device, 206, last_token);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 8);
#ifdef PRINT_STEP
printf("start: step187!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.softmax run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step188 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in cache25 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  for (int for_k = 0; for_k < (kvcache ? 1 : ((((token - last_token) + 16) - 1) / 16)); for_k++) {
    CSB_Write(device, 2, 4096);
    CSB_Write(device, 3, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 4, 1);
    CSB_Write(device, 5, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 6, 1);
    CSB_Write(device, 7, 256);
    CSB_Write(device, 8, 256);
    CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
    CSB_Write(device, 10, (81725440 + ((for_k * 16) * 64)));
    CSB_Write(device, 11, 39737856);
    CSB_Write(device, 12, 16896);
    CSB_Write(device, 13, ((kvcache ? (32442368 + ((token - 1) * 64)) : (32442368 + (last_token * 64))) + ((for_k * 16) * 64)));
    CSB_Write(device, 14, 0);
    CSB_Write(device, 15, 28);
    CSB_Write(device, 16, 0);
    CSB_Write(device, 17, 0);
    CSB_Write(device, 18, 0);
    CSB_Write(device, 19, 0);
    CSB_Write(device, 20, 0);
    CSB_Write(device, 21, 1);
    CSB_Write(device, 22, 1);
    CSB_Write(device, 23, 1);
    CSB_Write(device, 24, 1);
    CSB_Write(device, 25, 0);
    CSB_Write(device, 26, 2888704);
    CSB_Write(device, 27, 0);
    CSB_Write(device, 28, 0);
    CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 31, 131072);
    CSB_Write(device, 32, 131072);
    CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("start: step188!\n");
#endif
    while(CSB_Read(device, 1) != 1) {}
  }
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step189 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_afterF2W accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 32442368);
  CSB_Write(device, 195, 406259712);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 81725440);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 524288);
  CSB_Write(device, 202, 131072);
  CSB_Write(device, 203, (((token + 32) - 1) / 32));
  CSB_Write(device, 204, token);
  CSB_Write(device, 205, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 206, 4);
  CSB_Write(device, 207, 991234);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 1);
#ifdef PRINT_STEP
printf("start: step189!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterF2W run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step190 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  for (int for_k = 0; for_k < (kvcache ? 1 : ((((token - last_token) + 16) - 1) / 16)); for_k++) {
    CSB_Write(device, 2, 4096);
    CSB_Write(device, 3, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 4, 1);
    CSB_Write(device, 5, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 6, 1);
    CSB_Write(device, 7, 1024);
    CSB_Write(device, 8, 1024);
    CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
    CSB_Write(device, 10, (81725440 + ((for_k * 16) * 64)));
    CSB_Write(device, 11, 39754752);
    CSB_Write(device, 12, 16896);
    CSB_Write(device, 13, (406259712 + ((for_k * 16) * 64)));
    CSB_Write(device, 14, 3);
    CSB_Write(device, 15, 28);
    CSB_Write(device, 16, 0);
    CSB_Write(device, 17, 0);
    CSB_Write(device, 18, 0);
    CSB_Write(device, 19, 0);
    CSB_Write(device, 20, 0);
    CSB_Write(device, 21, 1);
    CSB_Write(device, 22, 1);
    CSB_Write(device, 23, 1);
    CSB_Write(device, 24, 1);
    CSB_Write(device, 25, 0);
    CSB_Write(device, 26, 2889728);
    CSB_Write(device, 27, (64948224 + ((for_k * 16) * 64)));
    CSB_Write(device, 28, 0);
    CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("start: step190!\n");
#endif
    while(CSB_Read(device, 1) != 1) {}
  }
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step191 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 2906112);
  CSB_Write(device, 195, 406259712);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 64948224);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_STEP
printf("start: step191!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step192 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  for (int for_k = 0; for_k < (kvcache ? 1 : ((((token - last_token) + 16) - 1) / 16)); for_k++) {
    CSB_Write(device, 2, 4096);
    CSB_Write(device, 3, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 4, 1);
    CSB_Write(device, 5, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 6, 1);
    CSB_Write(device, 7, 1024);
    CSB_Write(device, 8, 384);
    CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
    CSB_Write(device, 10, (64948224 + ((for_k * 16) * 64)));
    CSB_Write(device, 11, 40929024);
    CSB_Write(device, 12, 16896);
    CSB_Write(device, 13, (81725440 + ((for_k * 16) * 64)));
    CSB_Write(device, 14, 13);
    CSB_Write(device, 15, 28);
    CSB_Write(device, 16, 0);
    CSB_Write(device, 17, 0);
    CSB_Write(device, 18, 0);
    CSB_Write(device, 19, 0);
    CSB_Write(device, 20, 0);
    CSB_Write(device, 21, 1);
    CSB_Write(device, 22, 1);
    CSB_Write(device, 23, 1);
    CSB_Write(device, 24, 1);
    CSB_Write(device, 25, 0);
    CSB_Write(device, 26, 2977280);
    CSB_Write(device, 27, 0);
    CSB_Write(device, 28, 0);
    CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("start: step192!\n");
#endif
    while(CSB_Read(device, 1) != 1) {}
  }
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step193 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.activate accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 524288);
  CSB_Write(device, 195, 81725440);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 137824256);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 428);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 428);
  CSB_Write(device, 206, 13696);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 16);
#ifdef PRINT_STEP
printf("start: step193!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.activate run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step194 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  for (int for_k = 0; for_k < (kvcache ? 1 : ((((token - last_token) + 16) - 1) / 16)); for_k++) {
    CSB_Write(device, 2, 4096);
    CSB_Write(device, 3, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 4, 1);
    CSB_Write(device, 5, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 6, 1);
    CSB_Write(device, 7, 1024);
    CSB_Write(device, 8, 384);
    CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
    CSB_Write(device, 10, (64948224 + ((for_k * 16) * 64)));
    CSB_Write(device, 11, 40025088);
    CSB_Write(device, 12, 16896);
    CSB_Write(device, 13, (81725440 + ((for_k * 16) * 64)));
    CSB_Write(device, 14, 13);
    CSB_Write(device, 15, 28);
    CSB_Write(device, 16, 2);
    CSB_Write(device, 17, 0);
    CSB_Write(device, 18, 0);
    CSB_Write(device, 19, 0);
    CSB_Write(device, 20, 0);
    CSB_Write(device, 21, 1);
    CSB_Write(device, 22, 1);
    CSB_Write(device, 23, 1);
    CSB_Write(device, 24, 1);
    CSB_Write(device, 25, 0);
    CSB_Write(device, 26, 2922496);
    CSB_Write(device, 27, (137824256 + ((for_k * 16) * 64)));
    CSB_Write(device, 28, 0);
    CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("start: step194!\n");
#endif
    while(CSB_Read(device, 1) != 1) {}
  }
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step195 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  for (int for_k = 0; for_k < (kvcache ? 1 : ((((token - last_token) + 16) - 1) / 16)); for_k++) {
    CSB_Write(device, 2, 13696);
    CSB_Write(device, 3, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 4, 1);
    CSB_Write(device, 5, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 6, 1);
    CSB_Write(device, 7, 288);
    CSB_Write(device, 8, 64);
    CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
    CSB_Write(device, 10, (81725440 + ((for_k * 16) * 64)));
    CSB_Write(device, 11, 41832960);
    CSB_Write(device, 12, 56576);
    CSB_Write(device, 13, (64948224 + ((for_k * 16) * 64)));
    CSB_Write(device, 14, 14);
    CSB_Write(device, 15, 28);
    CSB_Write(device, 16, 0);
    CSB_Write(device, 17, 0);
    CSB_Write(device, 18, 0);
    CSB_Write(device, 19, 0);
    CSB_Write(device, 20, 0);
    CSB_Write(device, 21, 1);
    CSB_Write(device, 22, 1);
    CSB_Write(device, 23, 1);
    CSB_Write(device, 24, 1);
    CSB_Write(device, 25, 0);
    CSB_Write(device, 26, 3032064);
    CSB_Write(device, 27, (406259712 + ((for_k * 16) * 64)));
    CSB_Write(device, 28, 0);
    CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("start: step195!\n");
#endif
    while(CSB_Read(device, 1) != 1) {}
  }
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step196 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 3048448);
  CSB_Write(device, 195, 64948224);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 81725440);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_STEP
printf("start: step196!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step197 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  for (int for_k = 0; for_k < (kvcache ? 1 : ((((token - last_token) + 16) - 1) / 16)); for_k++) {
    CSB_Write(device, 2, 4096);
    CSB_Write(device, 3, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 4, 1);
    CSB_Write(device, 5, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 6, 1);
    CSB_Write(device, 7, 1024);
    CSB_Write(device, 8, 1024);
    CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
    CSB_Write(device, 10, (81725440 + ((for_k * 16) * 64)));
    CSB_Write(device, 11, 42738176);
    CSB_Write(device, 12, 16896);
    CSB_Write(device, 13, (406259712 + ((for_k * 16) * 64)));
    CSB_Write(device, 14, 3);
    CSB_Write(device, 15, 28);
    CSB_Write(device, 16, 0);
    CSB_Write(device, 17, 0);
    CSB_Write(device, 18, 0);
    CSB_Write(device, 19, 0);
    CSB_Write(device, 20, 0);
    CSB_Write(device, 21, 1);
    CSB_Write(device, 22, 1);
    CSB_Write(device, 23, 1);
    CSB_Write(device, 24, 1);
    CSB_Write(device, 25, 0);
    CSB_Write(device, 26, 3064832);
    CSB_Write(device, 27, 0);
    CSB_Write(device, 28, 0);
    CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("start: step197!\n");
#endif
    while(CSB_Read(device, 1) != 1) {}
  }
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step198 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.pos_emb accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (kvcache ? (0 + ((token - 1) * 64)) : (0 + (last_token * 64))));
  CSB_Write(device, 195, 406259712);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 137824256);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 203, last_token);
  CSB_Write(device, 204, 32);
  CSB_Write(device, 205, 262144);
  CSB_Write(device, 206, 131072);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
#ifdef PRINT_STEP
printf("start: step198!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step199 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  for (int for_k = 0; for_k < (kvcache ? 1 : ((((token - last_token) + 16) - 1) / 16)); for_k++) {
    CSB_Write(device, 2, 4096);
    CSB_Write(device, 3, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 4, 1);
    CSB_Write(device, 5, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 6, 1);
    CSB_Write(device, 7, 256);
    CSB_Write(device, 8, 256);
    CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
    CSB_Write(device, 10, (81725440 + ((for_k * 16) * 64)));
    CSB_Write(device, 11, 43008512);
    CSB_Write(device, 12, 16896);
    CSB_Write(device, 13, (406259712 + ((for_k * 16) * 64)));
    CSB_Write(device, 14, 0);
    CSB_Write(device, 15, 28);
    CSB_Write(device, 16, 0);
    CSB_Write(device, 17, 0);
    CSB_Write(device, 18, 0);
    CSB_Write(device, 19, 0);
    CSB_Write(device, 20, 0);
    CSB_Write(device, 21, 1);
    CSB_Write(device, 22, 1);
    CSB_Write(device, 23, 1);
    CSB_Write(device, 24, 1);
    CSB_Write(device, 25, 0);
    CSB_Write(device, 26, 3081216);
    CSB_Write(device, 27, 0);
    CSB_Write(device, 28, 0);
    CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("start: step199!\n");
#endif
    while(CSB_Read(device, 1) != 1) {}
  }
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step200 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.pos_emb accel operator node, storage data in cache26 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (kvcache ? (0 + ((token - 1) * 64)) : (0 + (last_token * 64))));
  CSB_Write(device, 195, 406259712);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, (kvcache ? (33490944 + ((token - 1) * 64)) : (33490944 + (last_token * 64))));
  CSB_Write(device, 199, 524288);
  CSB_Write(device, 200, 131072);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 203, last_token);
  CSB_Write(device, 204, 2);
  CSB_Write(device, 205, 262144);
  CSB_Write(device, 206, 131072);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
#ifdef PRINT_STEP
printf("start: step200!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step201 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_afterTRP accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 33490944);
  CSB_Write(device, 195, 137824256);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 406259712);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 524288);
  CSB_Write(device, 202, 131072);
  CSB_Write(device, 203, 4);
  CSB_Write(device, 204, token);
  CSB_Write(device, 205, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 206, 11688);
  CSB_Write(device, 207, 991234);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 2);
#ifdef PRINT_STEP
printf("start: step201!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterTRP run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step202 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.softmax accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (1 - kvcache));
  CSB_Write(device, 195, 406259712);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 137824256);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, (((token + 32) - 1) / 32));
  CSB_Write(device, 202, 32);
  CSB_Write(device, 203, token);
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, (token - last_token));
  CSB_Write(device, 206, last_token);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 8);
#ifdef PRINT_STEP
printf("start: step202!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.softmax run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step203 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in cache27 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  for (int for_k = 0; for_k < (kvcache ? 1 : ((((token - last_token) + 16) - 1) / 16)); for_k++) {
    CSB_Write(device, 2, 4096);
    CSB_Write(device, 3, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 4, 1);
    CSB_Write(device, 5, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 6, 1);
    CSB_Write(device, 7, 256);
    CSB_Write(device, 8, 256);
    CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
    CSB_Write(device, 10, (81725440 + ((for_k * 16) * 64)));
    CSB_Write(device, 11, 43025408);
    CSB_Write(device, 12, 16896);
    CSB_Write(device, 13, ((kvcache ? (34539520 + ((token - 1) * 64)) : (34539520 + (last_token * 64))) + ((for_k * 16) * 64)));
    CSB_Write(device, 14, 0);
    CSB_Write(device, 15, 28);
    CSB_Write(device, 16, 0);
    CSB_Write(device, 17, 0);
    CSB_Write(device, 18, 0);
    CSB_Write(device, 19, 0);
    CSB_Write(device, 20, 0);
    CSB_Write(device, 21, 1);
    CSB_Write(device, 22, 1);
    CSB_Write(device, 23, 1);
    CSB_Write(device, 24, 1);
    CSB_Write(device, 25, 0);
    CSB_Write(device, 26, 3082240);
    CSB_Write(device, 27, 0);
    CSB_Write(device, 28, 0);
    CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 31, 131072);
    CSB_Write(device, 32, 131072);
    CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("start: step203!\n");
#endif
    while(CSB_Read(device, 1) != 1) {}
  }
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step204 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_afterF2W accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 34539520);
  CSB_Write(device, 195, 137824256);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 81725440);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 524288);
  CSB_Write(device, 202, 131072);
  CSB_Write(device, 203, (((token + 32) - 1) / 32));
  CSB_Write(device, 204, token);
  CSB_Write(device, 205, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 206, 4);
  CSB_Write(device, 207, 991234);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 1);
#ifdef PRINT_STEP
printf("start: step204!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterF2W run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step205 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  for (int for_k = 0; for_k < (kvcache ? 1 : ((((token - last_token) + 16) - 1) / 16)); for_k++) {
    CSB_Write(device, 2, 4096);
    CSB_Write(device, 3, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 4, 1);
    CSB_Write(device, 5, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 6, 1);
    CSB_Write(device, 7, 1024);
    CSB_Write(device, 8, 1024);
    CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
    CSB_Write(device, 10, (81725440 + ((for_k * 16) * 64)));
    CSB_Write(device, 11, 43042304);
    CSB_Write(device, 12, 16896);
    CSB_Write(device, 13, (137824256 + ((for_k * 16) * 64)));
    CSB_Write(device, 14, 3);
    CSB_Write(device, 15, 28);
    CSB_Write(device, 16, 0);
    CSB_Write(device, 17, 0);
    CSB_Write(device, 18, 0);
    CSB_Write(device, 19, 0);
    CSB_Write(device, 20, 0);
    CSB_Write(device, 21, 1);
    CSB_Write(device, 22, 1);
    CSB_Write(device, 23, 1);
    CSB_Write(device, 24, 1);
    CSB_Write(device, 25, 0);
    CSB_Write(device, 26, 3083264);
    CSB_Write(device, 27, (64948224 + ((for_k * 16) * 64)));
    CSB_Write(device, 28, 0);
    CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("start: step205!\n");
#endif
    while(CSB_Read(device, 1) != 1) {}
  }
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step206 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 3099648);
  CSB_Write(device, 195, 137824256);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 64948224);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_STEP
printf("start: step206!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step207 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  for (int for_k = 0; for_k < (kvcache ? 1 : ((((token - last_token) + 16) - 1) / 16)); for_k++) {
    CSB_Write(device, 2, 4096);
    CSB_Write(device, 3, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 4, 1);
    CSB_Write(device, 5, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 6, 1);
    CSB_Write(device, 7, 1024);
    CSB_Write(device, 8, 384);
    CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
    CSB_Write(device, 10, (64948224 + ((for_k * 16) * 64)));
    CSB_Write(device, 11, 44216576);
    CSB_Write(device, 12, 16896);
    CSB_Write(device, 13, (81725440 + ((for_k * 16) * 64)));
    CSB_Write(device, 14, 13);
    CSB_Write(device, 15, 28);
    CSB_Write(device, 16, 0);
    CSB_Write(device, 17, 0);
    CSB_Write(device, 18, 0);
    CSB_Write(device, 19, 0);
    CSB_Write(device, 20, 0);
    CSB_Write(device, 21, 1);
    CSB_Write(device, 22, 1);
    CSB_Write(device, 23, 1);
    CSB_Write(device, 24, 1);
    CSB_Write(device, 25, 0);
    CSB_Write(device, 26, 3170816);
    CSB_Write(device, 27, 0);
    CSB_Write(device, 28, 0);
    CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("start: step207!\n");
#endif
    while(CSB_Read(device, 1) != 1) {}
  }
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step208 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.activate accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 524288);
  CSB_Write(device, 195, 81725440);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 406259712);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 428);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 428);
  CSB_Write(device, 206, 13696);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 16);
#ifdef PRINT_STEP
printf("start: step208!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.activate run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step209 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  for (int for_k = 0; for_k < (kvcache ? 1 : ((((token - last_token) + 16) - 1) / 16)); for_k++) {
    CSB_Write(device, 2, 4096);
    CSB_Write(device, 3, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 4, 1);
    CSB_Write(device, 5, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 6, 1);
    CSB_Write(device, 7, 1024);
    CSB_Write(device, 8, 384);
    CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
    CSB_Write(device, 10, (64948224 + ((for_k * 16) * 64)));
    CSB_Write(device, 11, 43312640);
    CSB_Write(device, 12, 16896);
    CSB_Write(device, 13, (81725440 + ((for_k * 16) * 64)));
    CSB_Write(device, 14, 13);
    CSB_Write(device, 15, 28);
    CSB_Write(device, 16, 2);
    CSB_Write(device, 17, 0);
    CSB_Write(device, 18, 0);
    CSB_Write(device, 19, 0);
    CSB_Write(device, 20, 0);
    CSB_Write(device, 21, 1);
    CSB_Write(device, 22, 1);
    CSB_Write(device, 23, 1);
    CSB_Write(device, 24, 1);
    CSB_Write(device, 25, 0);
    CSB_Write(device, 26, 3116032);
    CSB_Write(device, 27, (406259712 + ((for_k * 16) * 64)));
    CSB_Write(device, 28, 0);
    CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("start: step209!\n");
#endif
    while(CSB_Read(device, 1) != 1) {}
  }
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step210 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  for (int for_k = 0; for_k < (kvcache ? 1 : ((((token - last_token) + 16) - 1) / 16)); for_k++) {
    CSB_Write(device, 2, 13696);
    CSB_Write(device, 3, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 4, 1);
    CSB_Write(device, 5, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 6, 1);
    CSB_Write(device, 7, 288);
    CSB_Write(device, 8, 64);
    CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
    CSB_Write(device, 10, (81725440 + ((for_k * 16) * 64)));
    CSB_Write(device, 11, 45120512);
    CSB_Write(device, 12, 56576);
    CSB_Write(device, 13, (64948224 + ((for_k * 16) * 64)));
    CSB_Write(device, 14, 14);
    CSB_Write(device, 15, 28);
    CSB_Write(device, 16, 0);
    CSB_Write(device, 17, 0);
    CSB_Write(device, 18, 0);
    CSB_Write(device, 19, 0);
    CSB_Write(device, 20, 0);
    CSB_Write(device, 21, 1);
    CSB_Write(device, 22, 1);
    CSB_Write(device, 23, 1);
    CSB_Write(device, 24, 1);
    CSB_Write(device, 25, 0);
    CSB_Write(device, 26, 3225600);
    CSB_Write(device, 27, (137824256 + ((for_k * 16) * 64)));
    CSB_Write(device, 28, 0);
    CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("start: step210!\n");
#endif
    while(CSB_Read(device, 1) != 1) {}
  }
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step211 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 3241984);
  CSB_Write(device, 195, 64948224);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 81725440);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_STEP
printf("start: step211!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step212 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  for (int for_k = 0; for_k < (kvcache ? 1 : ((((token - last_token) + 16) - 1) / 16)); for_k++) {
    CSB_Write(device, 2, 4096);
    CSB_Write(device, 3, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 4, 1);
    CSB_Write(device, 5, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 6, 1);
    CSB_Write(device, 7, 1024);
    CSB_Write(device, 8, 1024);
    CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
    CSB_Write(device, 10, (81725440 + ((for_k * 16) * 64)));
    CSB_Write(device, 11, 46025728);
    CSB_Write(device, 12, 16896);
    CSB_Write(device, 13, (137824256 + ((for_k * 16) * 64)));
    CSB_Write(device, 14, 3);
    CSB_Write(device, 15, 28);
    CSB_Write(device, 16, 0);
    CSB_Write(device, 17, 0);
    CSB_Write(device, 18, 0);
    CSB_Write(device, 19, 0);
    CSB_Write(device, 20, 0);
    CSB_Write(device, 21, 1);
    CSB_Write(device, 22, 1);
    CSB_Write(device, 23, 1);
    CSB_Write(device, 24, 1);
    CSB_Write(device, 25, 0);
    CSB_Write(device, 26, 3258368);
    CSB_Write(device, 27, 0);
    CSB_Write(device, 28, 0);
    CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("start: step212!\n");
#endif
    while(CSB_Read(device, 1) != 1) {}
  }
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step213 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.pos_emb accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (kvcache ? (0 + ((token - 1) * 64)) : (0 + (last_token * 64))));
  CSB_Write(device, 195, 137824256);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 406259712);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 203, last_token);
  CSB_Write(device, 204, 32);
  CSB_Write(device, 205, 262144);
  CSB_Write(device, 206, 131072);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
#ifdef PRINT_STEP
printf("start: step213!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step214 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  for (int for_k = 0; for_k < (kvcache ? 1 : ((((token - last_token) + 16) - 1) / 16)); for_k++) {
    CSB_Write(device, 2, 4096);
    CSB_Write(device, 3, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 4, 1);
    CSB_Write(device, 5, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 6, 1);
    CSB_Write(device, 7, 256);
    CSB_Write(device, 8, 256);
    CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
    CSB_Write(device, 10, (81725440 + ((for_k * 16) * 64)));
    CSB_Write(device, 11, 46296064);
    CSB_Write(device, 12, 16896);
    CSB_Write(device, 13, (137824256 + ((for_k * 16) * 64)));
    CSB_Write(device, 14, 0);
    CSB_Write(device, 15, 28);
    CSB_Write(device, 16, 0);
    CSB_Write(device, 17, 0);
    CSB_Write(device, 18, 0);
    CSB_Write(device, 19, 0);
    CSB_Write(device, 20, 0);
    CSB_Write(device, 21, 1);
    CSB_Write(device, 22, 1);
    CSB_Write(device, 23, 1);
    CSB_Write(device, 24, 1);
    CSB_Write(device, 25, 0);
    CSB_Write(device, 26, 3274752);
    CSB_Write(device, 27, 0);
    CSB_Write(device, 28, 0);
    CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("start: step214!\n");
#endif
    while(CSB_Read(device, 1) != 1) {}
  }
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step215 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.pos_emb accel operator node, storage data in cache28 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (kvcache ? (0 + ((token - 1) * 64)) : (0 + (last_token * 64))));
  CSB_Write(device, 195, 137824256);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, (kvcache ? (35588096 + ((token - 1) * 64)) : (35588096 + (last_token * 64))));
  CSB_Write(device, 199, 524288);
  CSB_Write(device, 200, 131072);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 203, last_token);
  CSB_Write(device, 204, 2);
  CSB_Write(device, 205, 262144);
  CSB_Write(device, 206, 131072);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
#ifdef PRINT_STEP
printf("start: step215!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step216 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_afterTRP accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 35588096);
  CSB_Write(device, 195, 406259712);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 137824256);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 524288);
  CSB_Write(device, 202, 131072);
  CSB_Write(device, 203, 4);
  CSB_Write(device, 204, token);
  CSB_Write(device, 205, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 206, 11688);
  CSB_Write(device, 207, 991234);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 2);
#ifdef PRINT_STEP
printf("start: step216!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterTRP run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step217 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.softmax accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (1 - kvcache));
  CSB_Write(device, 195, 137824256);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 406259712);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, (((token + 32) - 1) / 32));
  CSB_Write(device, 202, 32);
  CSB_Write(device, 203, token);
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, (token - last_token));
  CSB_Write(device, 206, last_token);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 8);
#ifdef PRINT_STEP
printf("start: step217!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.softmax run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step218 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in cache29 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  for (int for_k = 0; for_k < (kvcache ? 1 : ((((token - last_token) + 16) - 1) / 16)); for_k++) {
    CSB_Write(device, 2, 4096);
    CSB_Write(device, 3, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 4, 1);
    CSB_Write(device, 5, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 6, 1);
    CSB_Write(device, 7, 256);
    CSB_Write(device, 8, 256);
    CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
    CSB_Write(device, 10, (81725440 + ((for_k * 16) * 64)));
    CSB_Write(device, 11, 46312960);
    CSB_Write(device, 12, 16896);
    CSB_Write(device, 13, ((kvcache ? (36636672 + ((token - 1) * 64)) : (36636672 + (last_token * 64))) + ((for_k * 16) * 64)));
    CSB_Write(device, 14, 0);
    CSB_Write(device, 15, 28);
    CSB_Write(device, 16, 0);
    CSB_Write(device, 17, 0);
    CSB_Write(device, 18, 0);
    CSB_Write(device, 19, 0);
    CSB_Write(device, 20, 0);
    CSB_Write(device, 21, 1);
    CSB_Write(device, 22, 1);
    CSB_Write(device, 23, 1);
    CSB_Write(device, 24, 1);
    CSB_Write(device, 25, 0);
    CSB_Write(device, 26, 3275776);
    CSB_Write(device, 27, 0);
    CSB_Write(device, 28, 0);
    CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 31, 131072);
    CSB_Write(device, 32, 131072);
    CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("start: step218!\n");
#endif
    while(CSB_Read(device, 1) != 1) {}
  }
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step219 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_afterF2W accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 36636672);
  CSB_Write(device, 195, 406259712);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 81725440);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 524288);
  CSB_Write(device, 202, 131072);
  CSB_Write(device, 203, (((token + 32) - 1) / 32));
  CSB_Write(device, 204, token);
  CSB_Write(device, 205, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 206, 4);
  CSB_Write(device, 207, 991234);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 1);
#ifdef PRINT_STEP
printf("start: step219!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterF2W run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step220 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  for (int for_k = 0; for_k < (kvcache ? 1 : ((((token - last_token) + 16) - 1) / 16)); for_k++) {
    CSB_Write(device, 2, 4096);
    CSB_Write(device, 3, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 4, 1);
    CSB_Write(device, 5, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 6, 1);
    CSB_Write(device, 7, 1024);
    CSB_Write(device, 8, 1024);
    CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
    CSB_Write(device, 10, (81725440 + ((for_k * 16) * 64)));
    CSB_Write(device, 11, 46329856);
    CSB_Write(device, 12, 16896);
    CSB_Write(device, 13, (406259712 + ((for_k * 16) * 64)));
    CSB_Write(device, 14, 3);
    CSB_Write(device, 15, 28);
    CSB_Write(device, 16, 0);
    CSB_Write(device, 17, 0);
    CSB_Write(device, 18, 0);
    CSB_Write(device, 19, 0);
    CSB_Write(device, 20, 0);
    CSB_Write(device, 21, 1);
    CSB_Write(device, 22, 1);
    CSB_Write(device, 23, 1);
    CSB_Write(device, 24, 1);
    CSB_Write(device, 25, 0);
    CSB_Write(device, 26, 3276800);
    CSB_Write(device, 27, (64948224 + ((for_k * 16) * 64)));
    CSB_Write(device, 28, 0);
    CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("start: step220!\n");
#endif
    while(CSB_Read(device, 1) != 1) {}
  }
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step221 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 3293184);
  CSB_Write(device, 195, 406259712);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 64948224);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_STEP
printf("start: step221!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step222 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  for (int for_k = 0; for_k < (kvcache ? 1 : ((((token - last_token) + 16) - 1) / 16)); for_k++) {
    CSB_Write(device, 2, 4096);
    CSB_Write(device, 3, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 4, 1);
    CSB_Write(device, 5, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 6, 1);
    CSB_Write(device, 7, 1024);
    CSB_Write(device, 8, 384);
    CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
    CSB_Write(device, 10, (64948224 + ((for_k * 16) * 64)));
    CSB_Write(device, 11, 47504128);
    CSB_Write(device, 12, 16896);
    CSB_Write(device, 13, (81725440 + ((for_k * 16) * 64)));
    CSB_Write(device, 14, 13);
    CSB_Write(device, 15, 28);
    CSB_Write(device, 16, 0);
    CSB_Write(device, 17, 0);
    CSB_Write(device, 18, 0);
    CSB_Write(device, 19, 0);
    CSB_Write(device, 20, 0);
    CSB_Write(device, 21, 1);
    CSB_Write(device, 22, 1);
    CSB_Write(device, 23, 1);
    CSB_Write(device, 24, 1);
    CSB_Write(device, 25, 0);
    CSB_Write(device, 26, 3364352);
    CSB_Write(device, 27, 0);
    CSB_Write(device, 28, 0);
    CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("start: step222!\n");
#endif
    while(CSB_Read(device, 1) != 1) {}
  }
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step223 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.activate accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 524288);
  CSB_Write(device, 195, 81725440);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 137824256);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 428);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 428);
  CSB_Write(device, 206, 13696);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 16);
#ifdef PRINT_STEP
printf("start: step223!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.activate run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step224 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  for (int for_k = 0; for_k < (kvcache ? 1 : ((((token - last_token) + 16) - 1) / 16)); for_k++) {
    CSB_Write(device, 2, 4096);
    CSB_Write(device, 3, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 4, 1);
    CSB_Write(device, 5, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 6, 1);
    CSB_Write(device, 7, 1024);
    CSB_Write(device, 8, 384);
    CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
    CSB_Write(device, 10, (64948224 + ((for_k * 16) * 64)));
    CSB_Write(device, 11, 46600192);
    CSB_Write(device, 12, 16896);
    CSB_Write(device, 13, (81725440 + ((for_k * 16) * 64)));
    CSB_Write(device, 14, 13);
    CSB_Write(device, 15, 28);
    CSB_Write(device, 16, 2);
    CSB_Write(device, 17, 0);
    CSB_Write(device, 18, 0);
    CSB_Write(device, 19, 0);
    CSB_Write(device, 20, 0);
    CSB_Write(device, 21, 1);
    CSB_Write(device, 22, 1);
    CSB_Write(device, 23, 1);
    CSB_Write(device, 24, 1);
    CSB_Write(device, 25, 0);
    CSB_Write(device, 26, 3309568);
    CSB_Write(device, 27, (137824256 + ((for_k * 16) * 64)));
    CSB_Write(device, 28, 0);
    CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("start: step224!\n");
#endif
    while(CSB_Read(device, 1) != 1) {}
  }
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step225 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  for (int for_k = 0; for_k < (kvcache ? 1 : ((((token - last_token) + 16) - 1) / 16)); for_k++) {
    CSB_Write(device, 2, 13696);
    CSB_Write(device, 3, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 4, 1);
    CSB_Write(device, 5, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 6, 1);
    CSB_Write(device, 7, 288);
    CSB_Write(device, 8, 64);
    CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
    CSB_Write(device, 10, (81725440 + ((for_k * 16) * 64)));
    CSB_Write(device, 11, 48408064);
    CSB_Write(device, 12, 56576);
    CSB_Write(device, 13, (64948224 + ((for_k * 16) * 64)));
    CSB_Write(device, 14, 14);
    CSB_Write(device, 15, 28);
    CSB_Write(device, 16, 0);
    CSB_Write(device, 17, 0);
    CSB_Write(device, 18, 0);
    CSB_Write(device, 19, 0);
    CSB_Write(device, 20, 0);
    CSB_Write(device, 21, 1);
    CSB_Write(device, 22, 1);
    CSB_Write(device, 23, 1);
    CSB_Write(device, 24, 1);
    CSB_Write(device, 25, 0);
    CSB_Write(device, 26, 3419136);
    CSB_Write(device, 27, (406259712 + ((for_k * 16) * 64)));
    CSB_Write(device, 28, 0);
    CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("start: step225!\n");
#endif
    while(CSB_Read(device, 1) != 1) {}
  }
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step226 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 3435520);
  CSB_Write(device, 195, 64948224);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 81725440);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_STEP
printf("start: step226!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step227 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  for (int for_k = 0; for_k < (kvcache ? 1 : ((((token - last_token) + 16) - 1) / 16)); for_k++) {
    CSB_Write(device, 2, 4096);
    CSB_Write(device, 3, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 4, 1);
    CSB_Write(device, 5, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 6, 1);
    CSB_Write(device, 7, 1024);
    CSB_Write(device, 8, 1024);
    CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
    CSB_Write(device, 10, (81725440 + ((for_k * 16) * 64)));
    CSB_Write(device, 11, 49313280);
    CSB_Write(device, 12, 16896);
    CSB_Write(device, 13, (406259712 + ((for_k * 16) * 64)));
    CSB_Write(device, 14, 3);
    CSB_Write(device, 15, 28);
    CSB_Write(device, 16, 0);
    CSB_Write(device, 17, 0);
    CSB_Write(device, 18, 0);
    CSB_Write(device, 19, 0);
    CSB_Write(device, 20, 0);
    CSB_Write(device, 21, 1);
    CSB_Write(device, 22, 1);
    CSB_Write(device, 23, 1);
    CSB_Write(device, 24, 1);
    CSB_Write(device, 25, 0);
    CSB_Write(device, 26, 3451904);
    CSB_Write(device, 27, 0);
    CSB_Write(device, 28, 0);
    CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("start: step227!\n");
#endif
    while(CSB_Read(device, 1) != 1) {}
  }
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step228 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.pos_emb accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (kvcache ? (0 + ((token - 1) * 64)) : (0 + (last_token * 64))));
  CSB_Write(device, 195, 406259712);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 137824256);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 203, last_token);
  CSB_Write(device, 204, 32);
  CSB_Write(device, 205, 262144);
  CSB_Write(device, 206, 131072);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
#ifdef PRINT_STEP
printf("start: step228!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step229 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  for (int for_k = 0; for_k < (kvcache ? 1 : ((((token - last_token) + 16) - 1) / 16)); for_k++) {
    CSB_Write(device, 2, 4096);
    CSB_Write(device, 3, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 4, 1);
    CSB_Write(device, 5, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 6, 1);
    CSB_Write(device, 7, 256);
    CSB_Write(device, 8, 256);
    CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
    CSB_Write(device, 10, (81725440 + ((for_k * 16) * 64)));
    CSB_Write(device, 11, 49583616);
    CSB_Write(device, 12, 16896);
    CSB_Write(device, 13, (406259712 + ((for_k * 16) * 64)));
    CSB_Write(device, 14, 0);
    CSB_Write(device, 15, 28);
    CSB_Write(device, 16, 0);
    CSB_Write(device, 17, 0);
    CSB_Write(device, 18, 0);
    CSB_Write(device, 19, 0);
    CSB_Write(device, 20, 0);
    CSB_Write(device, 21, 1);
    CSB_Write(device, 22, 1);
    CSB_Write(device, 23, 1);
    CSB_Write(device, 24, 1);
    CSB_Write(device, 25, 0);
    CSB_Write(device, 26, 3468288);
    CSB_Write(device, 27, 0);
    CSB_Write(device, 28, 0);
    CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("start: step229!\n");
#endif
    while(CSB_Read(device, 1) != 1) {}
  }
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step230 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.pos_emb accel operator node, storage data in cache30 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (kvcache ? (0 + ((token - 1) * 64)) : (0 + (last_token * 64))));
  CSB_Write(device, 195, 406259712);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, (kvcache ? (37685248 + ((token - 1) * 64)) : (37685248 + (last_token * 64))));
  CSB_Write(device, 199, 524288);
  CSB_Write(device, 200, 131072);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 203, last_token);
  CSB_Write(device, 204, 2);
  CSB_Write(device, 205, 262144);
  CSB_Write(device, 206, 131072);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
#ifdef PRINT_STEP
printf("start: step230!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step231 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_afterTRP accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 37685248);
  CSB_Write(device, 195, 137824256);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 406259712);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 524288);
  CSB_Write(device, 202, 131072);
  CSB_Write(device, 203, 4);
  CSB_Write(device, 204, token);
  CSB_Write(device, 205, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 206, 11688);
  CSB_Write(device, 207, 991234);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 2);
#ifdef PRINT_STEP
printf("start: step231!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterTRP run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step232 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.softmax accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (1 - kvcache));
  CSB_Write(device, 195, 406259712);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 137824256);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, (((token + 32) - 1) / 32));
  CSB_Write(device, 202, 32);
  CSB_Write(device, 203, token);
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, (token - last_token));
  CSB_Write(device, 206, last_token);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 8);
#ifdef PRINT_STEP
printf("start: step232!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.softmax run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step233 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in cache31 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  for (int for_k = 0; for_k < (kvcache ? 1 : ((((token - last_token) + 16) - 1) / 16)); for_k++) {
    CSB_Write(device, 2, 4096);
    CSB_Write(device, 3, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 4, 1);
    CSB_Write(device, 5, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 6, 1);
    CSB_Write(device, 7, 256);
    CSB_Write(device, 8, 256);
    CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
    CSB_Write(device, 10, (81725440 + ((for_k * 16) * 64)));
    CSB_Write(device, 11, 49600512);
    CSB_Write(device, 12, 16896);
    CSB_Write(device, 13, ((kvcache ? (38733824 + ((token - 1) * 64)) : (38733824 + (last_token * 64))) + ((for_k * 16) * 64)));
    CSB_Write(device, 14, 0);
    CSB_Write(device, 15, 28);
    CSB_Write(device, 16, 0);
    CSB_Write(device, 17, 0);
    CSB_Write(device, 18, 0);
    CSB_Write(device, 19, 0);
    CSB_Write(device, 20, 0);
    CSB_Write(device, 21, 1);
    CSB_Write(device, 22, 1);
    CSB_Write(device, 23, 1);
    CSB_Write(device, 24, 1);
    CSB_Write(device, 25, 0);
    CSB_Write(device, 26, 3469312);
    CSB_Write(device, 27, 0);
    CSB_Write(device, 28, 0);
    CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 31, 131072);
    CSB_Write(device, 32, 131072);
    CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("start: step233!\n");
#endif
    while(CSB_Read(device, 1) != 1) {}
  }
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step234 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_afterF2W accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 38733824);
  CSB_Write(device, 195, 137824256);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 81725440);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 524288);
  CSB_Write(device, 202, 131072);
  CSB_Write(device, 203, (((token + 32) - 1) / 32));
  CSB_Write(device, 204, token);
  CSB_Write(device, 205, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 206, 4);
  CSB_Write(device, 207, 991234);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 1);
#ifdef PRINT_STEP
printf("start: step234!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterF2W run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step235 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  for (int for_k = 0; for_k < (kvcache ? 1 : ((((token - last_token) + 16) - 1) / 16)); for_k++) {
    CSB_Write(device, 2, 4096);
    CSB_Write(device, 3, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 4, 1);
    CSB_Write(device, 5, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 6, 1);
    CSB_Write(device, 7, 1024);
    CSB_Write(device, 8, 1024);
    CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
    CSB_Write(device, 10, (81725440 + ((for_k * 16) * 64)));
    CSB_Write(device, 11, 49617408);
    CSB_Write(device, 12, 16896);
    CSB_Write(device, 13, (137824256 + ((for_k * 16) * 64)));
    CSB_Write(device, 14, 3);
    CSB_Write(device, 15, 28);
    CSB_Write(device, 16, 0);
    CSB_Write(device, 17, 0);
    CSB_Write(device, 18, 0);
    CSB_Write(device, 19, 0);
    CSB_Write(device, 20, 0);
    CSB_Write(device, 21, 1);
    CSB_Write(device, 22, 1);
    CSB_Write(device, 23, 1);
    CSB_Write(device, 24, 1);
    CSB_Write(device, 25, 0);
    CSB_Write(device, 26, 3470336);
    CSB_Write(device, 27, (64948224 + ((for_k * 16) * 64)));
    CSB_Write(device, 28, 0);
    CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("start: step235!\n");
#endif
    while(CSB_Read(device, 1) != 1) {}
  }
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step236 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 3486720);
  CSB_Write(device, 195, 137824256);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 64948224);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_STEP
printf("start: step236!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step237 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  for (int for_k = 0; for_k < (kvcache ? 1 : ((((token - last_token) + 16) - 1) / 16)); for_k++) {
    CSB_Write(device, 2, 4096);
    CSB_Write(device, 3, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 4, 1);
    CSB_Write(device, 5, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 6, 1);
    CSB_Write(device, 7, 1024);
    CSB_Write(device, 8, 384);
    CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
    CSB_Write(device, 10, (64948224 + ((for_k * 16) * 64)));
    CSB_Write(device, 11, 50791680);
    CSB_Write(device, 12, 16896);
    CSB_Write(device, 13, (81725440 + ((for_k * 16) * 64)));
    CSB_Write(device, 14, 13);
    CSB_Write(device, 15, 28);
    CSB_Write(device, 16, 0);
    CSB_Write(device, 17, 0);
    CSB_Write(device, 18, 0);
    CSB_Write(device, 19, 0);
    CSB_Write(device, 20, 0);
    CSB_Write(device, 21, 1);
    CSB_Write(device, 22, 1);
    CSB_Write(device, 23, 1);
    CSB_Write(device, 24, 1);
    CSB_Write(device, 25, 0);
    CSB_Write(device, 26, 3557888);
    CSB_Write(device, 27, 0);
    CSB_Write(device, 28, 0);
    CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("start: step237!\n");
#endif
    while(CSB_Read(device, 1) != 1) {}
  }
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step238 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.activate accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 524288);
  CSB_Write(device, 195, 81725440);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 406259712);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 428);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 428);
  CSB_Write(device, 206, 13696);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 16);
#ifdef PRINT_STEP
printf("start: step238!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.activate run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step239 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  for (int for_k = 0; for_k < (kvcache ? 1 : ((((token - last_token) + 16) - 1) / 16)); for_k++) {
    CSB_Write(device, 2, 4096);
    CSB_Write(device, 3, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 4, 1);
    CSB_Write(device, 5, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 6, 1);
    CSB_Write(device, 7, 1024);
    CSB_Write(device, 8, 384);
    CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
    CSB_Write(device, 10, (64948224 + ((for_k * 16) * 64)));
    CSB_Write(device, 11, 49887744);
    CSB_Write(device, 12, 16896);
    CSB_Write(device, 13, (81725440 + ((for_k * 16) * 64)));
    CSB_Write(device, 14, 13);
    CSB_Write(device, 15, 28);
    CSB_Write(device, 16, 2);
    CSB_Write(device, 17, 0);
    CSB_Write(device, 18, 0);
    CSB_Write(device, 19, 0);
    CSB_Write(device, 20, 0);
    CSB_Write(device, 21, 1);
    CSB_Write(device, 22, 1);
    CSB_Write(device, 23, 1);
    CSB_Write(device, 24, 1);
    CSB_Write(device, 25, 0);
    CSB_Write(device, 26, 3503104);
    CSB_Write(device, 27, (406259712 + ((for_k * 16) * 64)));
    CSB_Write(device, 28, 0);
    CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("start: step239!\n");
#endif
    while(CSB_Read(device, 1) != 1) {}
  }
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step240 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  for (int for_k = 0; for_k < (kvcache ? 1 : ((((token - last_token) + 16) - 1) / 16)); for_k++) {
    CSB_Write(device, 2, 13696);
    CSB_Write(device, 3, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 4, 1);
    CSB_Write(device, 5, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 6, 1);
    CSB_Write(device, 7, 288);
    CSB_Write(device, 8, 64);
    CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
    CSB_Write(device, 10, (81725440 + ((for_k * 16) * 64)));
    CSB_Write(device, 11, 51695616);
    CSB_Write(device, 12, 56576);
    CSB_Write(device, 13, (64948224 + ((for_k * 16) * 64)));
    CSB_Write(device, 14, 14);
    CSB_Write(device, 15, 28);
    CSB_Write(device, 16, 0);
    CSB_Write(device, 17, 0);
    CSB_Write(device, 18, 0);
    CSB_Write(device, 19, 0);
    CSB_Write(device, 20, 0);
    CSB_Write(device, 21, 1);
    CSB_Write(device, 22, 1);
    CSB_Write(device, 23, 1);
    CSB_Write(device, 24, 1);
    CSB_Write(device, 25, 0);
    CSB_Write(device, 26, 3612672);
    CSB_Write(device, 27, (137824256 + ((for_k * 16) * 64)));
    CSB_Write(device, 28, 0);
    CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("start: step240!\n");
#endif
    while(CSB_Read(device, 1) != 1) {}
  }
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step241 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 3629056);
  CSB_Write(device, 195, 64948224);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 81725440);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_STEP
printf("start: step241!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step242 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  for (int for_k = 0; for_k < (kvcache ? 1 : ((((token - last_token) + 16) - 1) / 16)); for_k++) {
    CSB_Write(device, 2, 4096);
    CSB_Write(device, 3, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 4, 1);
    CSB_Write(device, 5, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 6, 1);
    CSB_Write(device, 7, 1024);
    CSB_Write(device, 8, 1024);
    CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
    CSB_Write(device, 10, (81725440 + ((for_k * 16) * 64)));
    CSB_Write(device, 11, 52600832);
    CSB_Write(device, 12, 16896);
    CSB_Write(device, 13, (137824256 + ((for_k * 16) * 64)));
    CSB_Write(device, 14, 3);
    CSB_Write(device, 15, 28);
    CSB_Write(device, 16, 0);
    CSB_Write(device, 17, 0);
    CSB_Write(device, 18, 0);
    CSB_Write(device, 19, 0);
    CSB_Write(device, 20, 0);
    CSB_Write(device, 21, 1);
    CSB_Write(device, 22, 1);
    CSB_Write(device, 23, 1);
    CSB_Write(device, 24, 1);
    CSB_Write(device, 25, 0);
    CSB_Write(device, 26, 3645440);
    CSB_Write(device, 27, 0);
    CSB_Write(device, 28, 0);
    CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("start: step242!\n");
#endif
    while(CSB_Read(device, 1) != 1) {}
  }
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step243 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.pos_emb accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (kvcache ? (0 + ((token - 1) * 64)) : (0 + (last_token * 64))));
  CSB_Write(device, 195, 137824256);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 406259712);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 203, last_token);
  CSB_Write(device, 204, 32);
  CSB_Write(device, 205, 262144);
  CSB_Write(device, 206, 131072);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
#ifdef PRINT_STEP
printf("start: step243!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step244 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  for (int for_k = 0; for_k < (kvcache ? 1 : ((((token - last_token) + 16) - 1) / 16)); for_k++) {
    CSB_Write(device, 2, 4096);
    CSB_Write(device, 3, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 4, 1);
    CSB_Write(device, 5, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 6, 1);
    CSB_Write(device, 7, 256);
    CSB_Write(device, 8, 256);
    CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
    CSB_Write(device, 10, (81725440 + ((for_k * 16) * 64)));
    CSB_Write(device, 11, 52871168);
    CSB_Write(device, 12, 16896);
    CSB_Write(device, 13, (137824256 + ((for_k * 16) * 64)));
    CSB_Write(device, 14, 0);
    CSB_Write(device, 15, 28);
    CSB_Write(device, 16, 0);
    CSB_Write(device, 17, 0);
    CSB_Write(device, 18, 0);
    CSB_Write(device, 19, 0);
    CSB_Write(device, 20, 0);
    CSB_Write(device, 21, 1);
    CSB_Write(device, 22, 1);
    CSB_Write(device, 23, 1);
    CSB_Write(device, 24, 1);
    CSB_Write(device, 25, 0);
    CSB_Write(device, 26, 3661824);
    CSB_Write(device, 27, 0);
    CSB_Write(device, 28, 0);
    CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("start: step244!\n");
#endif
    while(CSB_Read(device, 1) != 1) {}
  }
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step245 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.pos_emb accel operator node, storage data in cache32 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (kvcache ? (0 + ((token - 1) * 64)) : (0 + (last_token * 64))));
  CSB_Write(device, 195, 137824256);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, (kvcache ? (39782400 + ((token - 1) * 64)) : (39782400 + (last_token * 64))));
  CSB_Write(device, 199, 524288);
  CSB_Write(device, 200, 131072);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 203, last_token);
  CSB_Write(device, 204, 2);
  CSB_Write(device, 205, 262144);
  CSB_Write(device, 206, 131072);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
#ifdef PRINT_STEP
printf("start: step245!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step246 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_afterTRP accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 39782400);
  CSB_Write(device, 195, 406259712);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 137824256);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 524288);
  CSB_Write(device, 202, 131072);
  CSB_Write(device, 203, 4);
  CSB_Write(device, 204, token);
  CSB_Write(device, 205, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 206, 11688);
  CSB_Write(device, 207, 991234);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 2);
#ifdef PRINT_STEP
printf("start: step246!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterTRP run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step247 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.softmax accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (1 - kvcache));
  CSB_Write(device, 195, 137824256);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 406259712);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, (((token + 32) - 1) / 32));
  CSB_Write(device, 202, 32);
  CSB_Write(device, 203, token);
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, (token - last_token));
  CSB_Write(device, 206, last_token);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 8);
#ifdef PRINT_STEP
printf("start: step247!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.softmax run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step248 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in cache33 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  for (int for_k = 0; for_k < (kvcache ? 1 : ((((token - last_token) + 16) - 1) / 16)); for_k++) {
    CSB_Write(device, 2, 4096);
    CSB_Write(device, 3, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 4, 1);
    CSB_Write(device, 5, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 6, 1);
    CSB_Write(device, 7, 256);
    CSB_Write(device, 8, 256);
    CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
    CSB_Write(device, 10, (81725440 + ((for_k * 16) * 64)));
    CSB_Write(device, 11, 52888064);
    CSB_Write(device, 12, 16896);
    CSB_Write(device, 13, ((kvcache ? (40830976 + ((token - 1) * 64)) : (40830976 + (last_token * 64))) + ((for_k * 16) * 64)));
    CSB_Write(device, 14, 0);
    CSB_Write(device, 15, 28);
    CSB_Write(device, 16, 0);
    CSB_Write(device, 17, 0);
    CSB_Write(device, 18, 0);
    CSB_Write(device, 19, 0);
    CSB_Write(device, 20, 0);
    CSB_Write(device, 21, 1);
    CSB_Write(device, 22, 1);
    CSB_Write(device, 23, 1);
    CSB_Write(device, 24, 1);
    CSB_Write(device, 25, 0);
    CSB_Write(device, 26, 3662848);
    CSB_Write(device, 27, 0);
    CSB_Write(device, 28, 0);
    CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 31, 131072);
    CSB_Write(device, 32, 131072);
    CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("start: step248!\n");
#endif
    while(CSB_Read(device, 1) != 1) {}
  }
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step249 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_afterF2W accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 40830976);
  CSB_Write(device, 195, 406259712);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 81725440);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 524288);
  CSB_Write(device, 202, 131072);
  CSB_Write(device, 203, (((token + 32) - 1) / 32));
  CSB_Write(device, 204, token);
  CSB_Write(device, 205, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 206, 4);
  CSB_Write(device, 207, 991234);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 1);
#ifdef PRINT_STEP
printf("start: step249!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterF2W run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step250 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  for (int for_k = 0; for_k < (kvcache ? 1 : ((((token - last_token) + 16) - 1) / 16)); for_k++) {
    CSB_Write(device, 2, 4096);
    CSB_Write(device, 3, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 4, 1);
    CSB_Write(device, 5, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 6, 1);
    CSB_Write(device, 7, 1024);
    CSB_Write(device, 8, 1024);
    CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
    CSB_Write(device, 10, (81725440 + ((for_k * 16) * 64)));
    CSB_Write(device, 11, 52904960);
    CSB_Write(device, 12, 16896);
    CSB_Write(device, 13, (406259712 + ((for_k * 16) * 64)));
    CSB_Write(device, 14, 3);
    CSB_Write(device, 15, 28);
    CSB_Write(device, 16, 0);
    CSB_Write(device, 17, 0);
    CSB_Write(device, 18, 0);
    CSB_Write(device, 19, 0);
    CSB_Write(device, 20, 0);
    CSB_Write(device, 21, 1);
    CSB_Write(device, 22, 1);
    CSB_Write(device, 23, 1);
    CSB_Write(device, 24, 1);
    CSB_Write(device, 25, 0);
    CSB_Write(device, 26, 3663872);
    CSB_Write(device, 27, (64948224 + ((for_k * 16) * 64)));
    CSB_Write(device, 28, 0);
    CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("start: step250!\n");
#endif
    while(CSB_Read(device, 1) != 1) {}
  }
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step251 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 3680256);
  CSB_Write(device, 195, 406259712);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 64948224);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_STEP
printf("start: step251!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step252 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  for (int for_k = 0; for_k < (kvcache ? 1 : ((((token - last_token) + 16) - 1) / 16)); for_k++) {
    CSB_Write(device, 2, 4096);
    CSB_Write(device, 3, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 4, 1);
    CSB_Write(device, 5, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 6, 1);
    CSB_Write(device, 7, 1024);
    CSB_Write(device, 8, 384);
    CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
    CSB_Write(device, 10, (64948224 + ((for_k * 16) * 64)));
    CSB_Write(device, 11, 54079232);
    CSB_Write(device, 12, 16896);
    CSB_Write(device, 13, (81725440 + ((for_k * 16) * 64)));
    CSB_Write(device, 14, 13);
    CSB_Write(device, 15, 28);
    CSB_Write(device, 16, 0);
    CSB_Write(device, 17, 0);
    CSB_Write(device, 18, 0);
    CSB_Write(device, 19, 0);
    CSB_Write(device, 20, 0);
    CSB_Write(device, 21, 1);
    CSB_Write(device, 22, 1);
    CSB_Write(device, 23, 1);
    CSB_Write(device, 24, 1);
    CSB_Write(device, 25, 0);
    CSB_Write(device, 26, 3751424);
    CSB_Write(device, 27, 0);
    CSB_Write(device, 28, 0);
    CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("start: step252!\n");
#endif
    while(CSB_Read(device, 1) != 1) {}
  }
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step253 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.activate accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 524288);
  CSB_Write(device, 195, 81725440);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 137824256);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 428);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 428);
  CSB_Write(device, 206, 13696);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 16);
#ifdef PRINT_STEP
printf("start: step253!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.activate run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step254 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  for (int for_k = 0; for_k < (kvcache ? 1 : ((((token - last_token) + 16) - 1) / 16)); for_k++) {
    CSB_Write(device, 2, 4096);
    CSB_Write(device, 3, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 4, 1);
    CSB_Write(device, 5, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 6, 1);
    CSB_Write(device, 7, 1024);
    CSB_Write(device, 8, 384);
    CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
    CSB_Write(device, 10, (64948224 + ((for_k * 16) * 64)));
    CSB_Write(device, 11, 53175296);
    CSB_Write(device, 12, 16896);
    CSB_Write(device, 13, (81725440 + ((for_k * 16) * 64)));
    CSB_Write(device, 14, 13);
    CSB_Write(device, 15, 28);
    CSB_Write(device, 16, 2);
    CSB_Write(device, 17, 0);
    CSB_Write(device, 18, 0);
    CSB_Write(device, 19, 0);
    CSB_Write(device, 20, 0);
    CSB_Write(device, 21, 1);
    CSB_Write(device, 22, 1);
    CSB_Write(device, 23, 1);
    CSB_Write(device, 24, 1);
    CSB_Write(device, 25, 0);
    CSB_Write(device, 26, 3696640);
    CSB_Write(device, 27, (137824256 + ((for_k * 16) * 64)));
    CSB_Write(device, 28, 0);
    CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("start: step254!\n");
#endif
    while(CSB_Read(device, 1) != 1) {}
  }
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step255 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  for (int for_k = 0; for_k < (kvcache ? 1 : ((((token - last_token) + 16) - 1) / 16)); for_k++) {
    CSB_Write(device, 2, 13696);
    CSB_Write(device, 3, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 4, 1);
    CSB_Write(device, 5, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 6, 1);
    CSB_Write(device, 7, 288);
    CSB_Write(device, 8, 64);
    CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
    CSB_Write(device, 10, (81725440 + ((for_k * 16) * 64)));
    CSB_Write(device, 11, 54983168);
    CSB_Write(device, 12, 56576);
    CSB_Write(device, 13, (64948224 + ((for_k * 16) * 64)));
    CSB_Write(device, 14, 14);
    CSB_Write(device, 15, 28);
    CSB_Write(device, 16, 0);
    CSB_Write(device, 17, 0);
    CSB_Write(device, 18, 0);
    CSB_Write(device, 19, 0);
    CSB_Write(device, 20, 0);
    CSB_Write(device, 21, 1);
    CSB_Write(device, 22, 1);
    CSB_Write(device, 23, 1);
    CSB_Write(device, 24, 1);
    CSB_Write(device, 25, 0);
    CSB_Write(device, 26, 3806208);
    CSB_Write(device, 27, (406259712 + ((for_k * 16) * 64)));
    CSB_Write(device, 28, 0);
    CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("start: step255!\n");
#endif
    while(CSB_Read(device, 1) != 1) {}
  }
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step256 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 3822592);
  CSB_Write(device, 195, 64948224);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 81725440);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_STEP
printf("start: step256!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step257 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  for (int for_k = 0; for_k < (kvcache ? 1 : ((((token - last_token) + 16) - 1) / 16)); for_k++) {
    CSB_Write(device, 2, 4096);
    CSB_Write(device, 3, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 4, 1);
    CSB_Write(device, 5, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 6, 1);
    CSB_Write(device, 7, 1024);
    CSB_Write(device, 8, 1024);
    CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
    CSB_Write(device, 10, (81725440 + ((for_k * 16) * 64)));
    CSB_Write(device, 11, 55888384);
    CSB_Write(device, 12, 16896);
    CSB_Write(device, 13, (406259712 + ((for_k * 16) * 64)));
    CSB_Write(device, 14, 3);
    CSB_Write(device, 15, 28);
    CSB_Write(device, 16, 0);
    CSB_Write(device, 17, 0);
    CSB_Write(device, 18, 0);
    CSB_Write(device, 19, 0);
    CSB_Write(device, 20, 0);
    CSB_Write(device, 21, 1);
    CSB_Write(device, 22, 1);
    CSB_Write(device, 23, 1);
    CSB_Write(device, 24, 1);
    CSB_Write(device, 25, 0);
    CSB_Write(device, 26, 3838976);
    CSB_Write(device, 27, 0);
    CSB_Write(device, 28, 0);
    CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("start: step257!\n");
#endif
    while(CSB_Read(device, 1) != 1) {}
  }
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step258 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.pos_emb accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (kvcache ? (0 + ((token - 1) * 64)) : (0 + (last_token * 64))));
  CSB_Write(device, 195, 406259712);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 137824256);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 203, last_token);
  CSB_Write(device, 204, 32);
  CSB_Write(device, 205, 262144);
  CSB_Write(device, 206, 131072);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
#ifdef PRINT_STEP
printf("start: step258!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step259 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  for (int for_k = 0; for_k < (kvcache ? 1 : ((((token - last_token) + 16) - 1) / 16)); for_k++) {
    CSB_Write(device, 2, 4096);
    CSB_Write(device, 3, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 4, 1);
    CSB_Write(device, 5, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 6, 1);
    CSB_Write(device, 7, 256);
    CSB_Write(device, 8, 256);
    CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
    CSB_Write(device, 10, (81725440 + ((for_k * 16) * 64)));
    CSB_Write(device, 11, 56158720);
    CSB_Write(device, 12, 16896);
    CSB_Write(device, 13, (406259712 + ((for_k * 16) * 64)));
    CSB_Write(device, 14, 0);
    CSB_Write(device, 15, 28);
    CSB_Write(device, 16, 0);
    CSB_Write(device, 17, 0);
    CSB_Write(device, 18, 0);
    CSB_Write(device, 19, 0);
    CSB_Write(device, 20, 0);
    CSB_Write(device, 21, 1);
    CSB_Write(device, 22, 1);
    CSB_Write(device, 23, 1);
    CSB_Write(device, 24, 1);
    CSB_Write(device, 25, 0);
    CSB_Write(device, 26, 3855360);
    CSB_Write(device, 27, 0);
    CSB_Write(device, 28, 0);
    CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("start: step259!\n");
#endif
    while(CSB_Read(device, 1) != 1) {}
  }
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step260 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.pos_emb accel operator node, storage data in cache34 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (kvcache ? (0 + ((token - 1) * 64)) : (0 + (last_token * 64))));
  CSB_Write(device, 195, 406259712);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, (kvcache ? (41879552 + ((token - 1) * 64)) : (41879552 + (last_token * 64))));
  CSB_Write(device, 199, 524288);
  CSB_Write(device, 200, 131072);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 203, last_token);
  CSB_Write(device, 204, 2);
  CSB_Write(device, 205, 262144);
  CSB_Write(device, 206, 131072);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
#ifdef PRINT_STEP
printf("start: step260!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step261 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_afterTRP accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 41879552);
  CSB_Write(device, 195, 137824256);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 406259712);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 524288);
  CSB_Write(device, 202, 131072);
  CSB_Write(device, 203, 4);
  CSB_Write(device, 204, token);
  CSB_Write(device, 205, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 206, 11688);
  CSB_Write(device, 207, 991234);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 2);
#ifdef PRINT_STEP
printf("start: step261!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterTRP run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step262 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.softmax accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (1 - kvcache));
  CSB_Write(device, 195, 406259712);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 137824256);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, (((token + 32) - 1) / 32));
  CSB_Write(device, 202, 32);
  CSB_Write(device, 203, token);
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, (token - last_token));
  CSB_Write(device, 206, last_token);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 8);
#ifdef PRINT_STEP
printf("start: step262!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.softmax run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step263 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in cache35 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  for (int for_k = 0; for_k < (kvcache ? 1 : ((((token - last_token) + 16) - 1) / 16)); for_k++) {
    CSB_Write(device, 2, 4096);
    CSB_Write(device, 3, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 4, 1);
    CSB_Write(device, 5, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 6, 1);
    CSB_Write(device, 7, 256);
    CSB_Write(device, 8, 256);
    CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
    CSB_Write(device, 10, (81725440 + ((for_k * 16) * 64)));
    CSB_Write(device, 11, 56175616);
    CSB_Write(device, 12, 16896);
    CSB_Write(device, 13, ((kvcache ? (42928128 + ((token - 1) * 64)) : (42928128 + (last_token * 64))) + ((for_k * 16) * 64)));
    CSB_Write(device, 14, 0);
    CSB_Write(device, 15, 28);
    CSB_Write(device, 16, 0);
    CSB_Write(device, 17, 0);
    CSB_Write(device, 18, 0);
    CSB_Write(device, 19, 0);
    CSB_Write(device, 20, 0);
    CSB_Write(device, 21, 1);
    CSB_Write(device, 22, 1);
    CSB_Write(device, 23, 1);
    CSB_Write(device, 24, 1);
    CSB_Write(device, 25, 0);
    CSB_Write(device, 26, 3856384);
    CSB_Write(device, 27, 0);
    CSB_Write(device, 28, 0);
    CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 31, 131072);
    CSB_Write(device, 32, 131072);
    CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("start: step263!\n");
#endif
    while(CSB_Read(device, 1) != 1) {}
  }
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step264 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_afterF2W accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 42928128);
  CSB_Write(device, 195, 137824256);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 81725440);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 524288);
  CSB_Write(device, 202, 131072);
  CSB_Write(device, 203, (((token + 32) - 1) / 32));
  CSB_Write(device, 204, token);
  CSB_Write(device, 205, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 206, 4);
  CSB_Write(device, 207, 991234);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 1);
#ifdef PRINT_STEP
printf("start: step264!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterF2W run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step265 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  for (int for_k = 0; for_k < (kvcache ? 1 : ((((token - last_token) + 16) - 1) / 16)); for_k++) {
    CSB_Write(device, 2, 4096);
    CSB_Write(device, 3, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 4, 1);
    CSB_Write(device, 5, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 6, 1);
    CSB_Write(device, 7, 1024);
    CSB_Write(device, 8, 1024);
    CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
    CSB_Write(device, 10, (81725440 + ((for_k * 16) * 64)));
    CSB_Write(device, 11, 56192512);
    CSB_Write(device, 12, 16896);
    CSB_Write(device, 13, (137824256 + ((for_k * 16) * 64)));
    CSB_Write(device, 14, 3);
    CSB_Write(device, 15, 28);
    CSB_Write(device, 16, 0);
    CSB_Write(device, 17, 0);
    CSB_Write(device, 18, 0);
    CSB_Write(device, 19, 0);
    CSB_Write(device, 20, 0);
    CSB_Write(device, 21, 1);
    CSB_Write(device, 22, 1);
    CSB_Write(device, 23, 1);
    CSB_Write(device, 24, 1);
    CSB_Write(device, 25, 0);
    CSB_Write(device, 26, 3857408);
    CSB_Write(device, 27, (64948224 + ((for_k * 16) * 64)));
    CSB_Write(device, 28, 0);
    CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("start: step265!\n");
#endif
    while(CSB_Read(device, 1) != 1) {}
  }
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step266 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 3873792);
  CSB_Write(device, 195, 137824256);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 64948224);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_STEP
printf("start: step266!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step267 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  for (int for_k = 0; for_k < (kvcache ? 1 : ((((token - last_token) + 16) - 1) / 16)); for_k++) {
    CSB_Write(device, 2, 4096);
    CSB_Write(device, 3, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 4, 1);
    CSB_Write(device, 5, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 6, 1);
    CSB_Write(device, 7, 1024);
    CSB_Write(device, 8, 384);
    CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
    CSB_Write(device, 10, (64948224 + ((for_k * 16) * 64)));
    CSB_Write(device, 11, 57366784);
    CSB_Write(device, 12, 16896);
    CSB_Write(device, 13, (81725440 + ((for_k * 16) * 64)));
    CSB_Write(device, 14, 13);
    CSB_Write(device, 15, 28);
    CSB_Write(device, 16, 0);
    CSB_Write(device, 17, 0);
    CSB_Write(device, 18, 0);
    CSB_Write(device, 19, 0);
    CSB_Write(device, 20, 0);
    CSB_Write(device, 21, 1);
    CSB_Write(device, 22, 1);
    CSB_Write(device, 23, 1);
    CSB_Write(device, 24, 1);
    CSB_Write(device, 25, 0);
    CSB_Write(device, 26, 3944960);
    CSB_Write(device, 27, 0);
    CSB_Write(device, 28, 0);
    CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("start: step267!\n");
#endif
    while(CSB_Read(device, 1) != 1) {}
  }
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step268 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.activate accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 524288);
  CSB_Write(device, 195, 81725440);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 406259712);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 428);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 428);
  CSB_Write(device, 206, 13696);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 16);
#ifdef PRINT_STEP
printf("start: step268!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.activate run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step269 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  for (int for_k = 0; for_k < (kvcache ? 1 : ((((token - last_token) + 16) - 1) / 16)); for_k++) {
    CSB_Write(device, 2, 4096);
    CSB_Write(device, 3, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 4, 1);
    CSB_Write(device, 5, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 6, 1);
    CSB_Write(device, 7, 1024);
    CSB_Write(device, 8, 384);
    CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
    CSB_Write(device, 10, (64948224 + ((for_k * 16) * 64)));
    CSB_Write(device, 11, 56462848);
    CSB_Write(device, 12, 16896);
    CSB_Write(device, 13, (81725440 + ((for_k * 16) * 64)));
    CSB_Write(device, 14, 13);
    CSB_Write(device, 15, 28);
    CSB_Write(device, 16, 2);
    CSB_Write(device, 17, 0);
    CSB_Write(device, 18, 0);
    CSB_Write(device, 19, 0);
    CSB_Write(device, 20, 0);
    CSB_Write(device, 21, 1);
    CSB_Write(device, 22, 1);
    CSB_Write(device, 23, 1);
    CSB_Write(device, 24, 1);
    CSB_Write(device, 25, 0);
    CSB_Write(device, 26, 3890176);
    CSB_Write(device, 27, (406259712 + ((for_k * 16) * 64)));
    CSB_Write(device, 28, 0);
    CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("start: step269!\n");
#endif
    while(CSB_Read(device, 1) != 1) {}
  }
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step270 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  for (int for_k = 0; for_k < (kvcache ? 1 : ((((token - last_token) + 16) - 1) / 16)); for_k++) {
    CSB_Write(device, 2, 13696);
    CSB_Write(device, 3, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 4, 1);
    CSB_Write(device, 5, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 6, 1);
    CSB_Write(device, 7, 288);
    CSB_Write(device, 8, 64);
    CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
    CSB_Write(device, 10, (81725440 + ((for_k * 16) * 64)));
    CSB_Write(device, 11, 58270720);
    CSB_Write(device, 12, 56576);
    CSB_Write(device, 13, (64948224 + ((for_k * 16) * 64)));
    CSB_Write(device, 14, 14);
    CSB_Write(device, 15, 28);
    CSB_Write(device, 16, 0);
    CSB_Write(device, 17, 0);
    CSB_Write(device, 18, 0);
    CSB_Write(device, 19, 0);
    CSB_Write(device, 20, 0);
    CSB_Write(device, 21, 1);
    CSB_Write(device, 22, 1);
    CSB_Write(device, 23, 1);
    CSB_Write(device, 24, 1);
    CSB_Write(device, 25, 0);
    CSB_Write(device, 26, 3999744);
    CSB_Write(device, 27, (137824256 + ((for_k * 16) * 64)));
    CSB_Write(device, 28, 0);
    CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("start: step270!\n");
#endif
    while(CSB_Read(device, 1) != 1) {}
  }
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step271 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 4016128);
  CSB_Write(device, 195, 64948224);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 81725440);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_STEP
printf("start: step271!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step272 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  for (int for_k = 0; for_k < (kvcache ? 1 : ((((token - last_token) + 16) - 1) / 16)); for_k++) {
    CSB_Write(device, 2, 4096);
    CSB_Write(device, 3, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 4, 1);
    CSB_Write(device, 5, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 6, 1);
    CSB_Write(device, 7, 1024);
    CSB_Write(device, 8, 1024);
    CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
    CSB_Write(device, 10, (81725440 + ((for_k * 16) * 64)));
    CSB_Write(device, 11, 59175936);
    CSB_Write(device, 12, 16896);
    CSB_Write(device, 13, (137824256 + ((for_k * 16) * 64)));
    CSB_Write(device, 14, 3);
    CSB_Write(device, 15, 28);
    CSB_Write(device, 16, 0);
    CSB_Write(device, 17, 0);
    CSB_Write(device, 18, 0);
    CSB_Write(device, 19, 0);
    CSB_Write(device, 20, 0);
    CSB_Write(device, 21, 1);
    CSB_Write(device, 22, 1);
    CSB_Write(device, 23, 1);
    CSB_Write(device, 24, 1);
    CSB_Write(device, 25, 0);
    CSB_Write(device, 26, 4032512);
    CSB_Write(device, 27, 0);
    CSB_Write(device, 28, 0);
    CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("start: step272!\n");
#endif
    while(CSB_Read(device, 1) != 1) {}
  }
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step273 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.pos_emb accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (kvcache ? (0 + ((token - 1) * 64)) : (0 + (last_token * 64))));
  CSB_Write(device, 195, 137824256);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 406259712);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 203, last_token);
  CSB_Write(device, 204, 32);
  CSB_Write(device, 205, 262144);
  CSB_Write(device, 206, 131072);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
#ifdef PRINT_STEP
printf("start: step273!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step274 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  for (int for_k = 0; for_k < (kvcache ? 1 : ((((token - last_token) + 16) - 1) / 16)); for_k++) {
    CSB_Write(device, 2, 4096);
    CSB_Write(device, 3, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 4, 1);
    CSB_Write(device, 5, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 6, 1);
    CSB_Write(device, 7, 256);
    CSB_Write(device, 8, 256);
    CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
    CSB_Write(device, 10, (81725440 + ((for_k * 16) * 64)));
    CSB_Write(device, 11, 59446272);
    CSB_Write(device, 12, 16896);
    CSB_Write(device, 13, (137824256 + ((for_k * 16) * 64)));
    CSB_Write(device, 14, 0);
    CSB_Write(device, 15, 28);
    CSB_Write(device, 16, 0);
    CSB_Write(device, 17, 0);
    CSB_Write(device, 18, 0);
    CSB_Write(device, 19, 0);
    CSB_Write(device, 20, 0);
    CSB_Write(device, 21, 1);
    CSB_Write(device, 22, 1);
    CSB_Write(device, 23, 1);
    CSB_Write(device, 24, 1);
    CSB_Write(device, 25, 0);
    CSB_Write(device, 26, 4048896);
    CSB_Write(device, 27, 0);
    CSB_Write(device, 28, 0);
    CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("start: step274!\n");
#endif
    while(CSB_Read(device, 1) != 1) {}
  }
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step275 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.pos_emb accel operator node, storage data in cache36 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (kvcache ? (0 + ((token - 1) * 64)) : (0 + (last_token * 64))));
  CSB_Write(device, 195, 137824256);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, (kvcache ? (43976704 + ((token - 1) * 64)) : (43976704 + (last_token * 64))));
  CSB_Write(device, 199, 524288);
  CSB_Write(device, 200, 131072);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 203, last_token);
  CSB_Write(device, 204, 2);
  CSB_Write(device, 205, 262144);
  CSB_Write(device, 206, 131072);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
#ifdef PRINT_STEP
printf("start: step275!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step276 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_afterTRP accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 43976704);
  CSB_Write(device, 195, 406259712);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 137824256);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 524288);
  CSB_Write(device, 202, 131072);
  CSB_Write(device, 203, 4);
  CSB_Write(device, 204, token);
  CSB_Write(device, 205, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 206, 11688);
  CSB_Write(device, 207, 991234);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 2);
#ifdef PRINT_STEP
printf("start: step276!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterTRP run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step277 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.softmax accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (1 - kvcache));
  CSB_Write(device, 195, 137824256);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 406259712);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, (((token + 32) - 1) / 32));
  CSB_Write(device, 202, 32);
  CSB_Write(device, 203, token);
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, (token - last_token));
  CSB_Write(device, 206, last_token);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 8);
#ifdef PRINT_STEP
printf("start: step277!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.softmax run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step278 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in cache37 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  for (int for_k = 0; for_k < (kvcache ? 1 : ((((token - last_token) + 16) - 1) / 16)); for_k++) {
    CSB_Write(device, 2, 4096);
    CSB_Write(device, 3, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 4, 1);
    CSB_Write(device, 5, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 6, 1);
    CSB_Write(device, 7, 256);
    CSB_Write(device, 8, 256);
    CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
    CSB_Write(device, 10, (81725440 + ((for_k * 16) * 64)));
    CSB_Write(device, 11, 59463168);
    CSB_Write(device, 12, 16896);
    CSB_Write(device, 13, ((kvcache ? (45025280 + ((token - 1) * 64)) : (45025280 + (last_token * 64))) + ((for_k * 16) * 64)));
    CSB_Write(device, 14, 0);
    CSB_Write(device, 15, 28);
    CSB_Write(device, 16, 0);
    CSB_Write(device, 17, 0);
    CSB_Write(device, 18, 0);
    CSB_Write(device, 19, 0);
    CSB_Write(device, 20, 0);
    CSB_Write(device, 21, 1);
    CSB_Write(device, 22, 1);
    CSB_Write(device, 23, 1);
    CSB_Write(device, 24, 1);
    CSB_Write(device, 25, 0);
    CSB_Write(device, 26, 4049920);
    CSB_Write(device, 27, 0);
    CSB_Write(device, 28, 0);
    CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 31, 131072);
    CSB_Write(device, 32, 131072);
    CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("start: step278!\n");
#endif
    while(CSB_Read(device, 1) != 1) {}
  }
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step279 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_afterF2W accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 45025280);
  CSB_Write(device, 195, 406259712);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 81725440);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 524288);
  CSB_Write(device, 202, 131072);
  CSB_Write(device, 203, (((token + 32) - 1) / 32));
  CSB_Write(device, 204, token);
  CSB_Write(device, 205, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 206, 4);
  CSB_Write(device, 207, 991234);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 1);
#ifdef PRINT_STEP
printf("start: step279!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterF2W run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step280 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  for (int for_k = 0; for_k < (kvcache ? 1 : ((((token - last_token) + 16) - 1) / 16)); for_k++) {
    CSB_Write(device, 2, 4096);
    CSB_Write(device, 3, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 4, 1);
    CSB_Write(device, 5, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 6, 1);
    CSB_Write(device, 7, 1024);
    CSB_Write(device, 8, 1024);
    CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
    CSB_Write(device, 10, (81725440 + ((for_k * 16) * 64)));
    CSB_Write(device, 11, 59480064);
    CSB_Write(device, 12, 16896);
    CSB_Write(device, 13, (406259712 + ((for_k * 16) * 64)));
    CSB_Write(device, 14, 3);
    CSB_Write(device, 15, 28);
    CSB_Write(device, 16, 0);
    CSB_Write(device, 17, 0);
    CSB_Write(device, 18, 0);
    CSB_Write(device, 19, 0);
    CSB_Write(device, 20, 0);
    CSB_Write(device, 21, 1);
    CSB_Write(device, 22, 1);
    CSB_Write(device, 23, 1);
    CSB_Write(device, 24, 1);
    CSB_Write(device, 25, 0);
    CSB_Write(device, 26, 4050944);
    CSB_Write(device, 27, (64948224 + ((for_k * 16) * 64)));
    CSB_Write(device, 28, 0);
    CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("start: step280!\n");
#endif
    while(CSB_Read(device, 1) != 1) {}
  }
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step281 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 4067328);
  CSB_Write(device, 195, 406259712);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 64948224);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_STEP
printf("start: step281!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step282 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  for (int for_k = 0; for_k < (kvcache ? 1 : ((((token - last_token) + 16) - 1) / 16)); for_k++) {
    CSB_Write(device, 2, 4096);
    CSB_Write(device, 3, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 4, 1);
    CSB_Write(device, 5, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 6, 1);
    CSB_Write(device, 7, 1024);
    CSB_Write(device, 8, 384);
    CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
    CSB_Write(device, 10, (64948224 + ((for_k * 16) * 64)));
    CSB_Write(device, 11, 60654336);
    CSB_Write(device, 12, 16896);
    CSB_Write(device, 13, (81725440 + ((for_k * 16) * 64)));
    CSB_Write(device, 14, 13);
    CSB_Write(device, 15, 28);
    CSB_Write(device, 16, 0);
    CSB_Write(device, 17, 0);
    CSB_Write(device, 18, 0);
    CSB_Write(device, 19, 0);
    CSB_Write(device, 20, 0);
    CSB_Write(device, 21, 1);
    CSB_Write(device, 22, 1);
    CSB_Write(device, 23, 1);
    CSB_Write(device, 24, 1);
    CSB_Write(device, 25, 0);
    CSB_Write(device, 26, 4138496);
    CSB_Write(device, 27, 0);
    CSB_Write(device, 28, 0);
    CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("start: step282!\n");
#endif
    while(CSB_Read(device, 1) != 1) {}
  }
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step283 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.activate accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 524288);
  CSB_Write(device, 195, 81725440);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 137824256);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 428);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 428);
  CSB_Write(device, 206, 13696);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 16);
#ifdef PRINT_STEP
printf("start: step283!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.activate run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step284 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  for (int for_k = 0; for_k < (kvcache ? 1 : ((((token - last_token) + 16) - 1) / 16)); for_k++) {
    CSB_Write(device, 2, 4096);
    CSB_Write(device, 3, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 4, 1);
    CSB_Write(device, 5, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 6, 1);
    CSB_Write(device, 7, 1024);
    CSB_Write(device, 8, 384);
    CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
    CSB_Write(device, 10, (64948224 + ((for_k * 16) * 64)));
    CSB_Write(device, 11, 59750400);
    CSB_Write(device, 12, 16896);
    CSB_Write(device, 13, (81725440 + ((for_k * 16) * 64)));
    CSB_Write(device, 14, 13);
    CSB_Write(device, 15, 28);
    CSB_Write(device, 16, 2);
    CSB_Write(device, 17, 0);
    CSB_Write(device, 18, 0);
    CSB_Write(device, 19, 0);
    CSB_Write(device, 20, 0);
    CSB_Write(device, 21, 1);
    CSB_Write(device, 22, 1);
    CSB_Write(device, 23, 1);
    CSB_Write(device, 24, 1);
    CSB_Write(device, 25, 0);
    CSB_Write(device, 26, 4083712);
    CSB_Write(device, 27, (137824256 + ((for_k * 16) * 64)));
    CSB_Write(device, 28, 0);
    CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("start: step284!\n");
#endif
    while(CSB_Read(device, 1) != 1) {}
  }
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step285 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  for (int for_k = 0; for_k < (kvcache ? 1 : ((((token - last_token) + 16) - 1) / 16)); for_k++) {
    CSB_Write(device, 2, 13696);
    CSB_Write(device, 3, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 4, 1);
    CSB_Write(device, 5, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 6, 1);
    CSB_Write(device, 7, 288);
    CSB_Write(device, 8, 64);
    CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
    CSB_Write(device, 10, (81725440 + ((for_k * 16) * 64)));
    CSB_Write(device, 11, 61558272);
    CSB_Write(device, 12, 56576);
    CSB_Write(device, 13, (64948224 + ((for_k * 16) * 64)));
    CSB_Write(device, 14, 14);
    CSB_Write(device, 15, 28);
    CSB_Write(device, 16, 0);
    CSB_Write(device, 17, 0);
    CSB_Write(device, 18, 0);
    CSB_Write(device, 19, 0);
    CSB_Write(device, 20, 0);
    CSB_Write(device, 21, 1);
    CSB_Write(device, 22, 1);
    CSB_Write(device, 23, 1);
    CSB_Write(device, 24, 1);
    CSB_Write(device, 25, 0);
    CSB_Write(device, 26, 4193280);
    CSB_Write(device, 27, (406259712 + ((for_k * 16) * 64)));
    CSB_Write(device, 28, 0);
    CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("start: step285!\n");
#endif
    while(CSB_Read(device, 1) != 1) {}
  }
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step286 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 4209664);
  CSB_Write(device, 195, 64948224);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 81725440);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_STEP
printf("start: step286!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step287 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  for (int for_k = 0; for_k < (kvcache ? 1 : ((((token - last_token) + 16) - 1) / 16)); for_k++) {
    CSB_Write(device, 2, 4096);
    CSB_Write(device, 3, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 4, 1);
    CSB_Write(device, 5, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 6, 1);
    CSB_Write(device, 7, 1024);
    CSB_Write(device, 8, 1024);
    CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
    CSB_Write(device, 10, (81725440 + ((for_k * 16) * 64)));
    CSB_Write(device, 11, 62463488);
    CSB_Write(device, 12, 16896);
    CSB_Write(device, 13, (406259712 + ((for_k * 16) * 64)));
    CSB_Write(device, 14, 3);
    CSB_Write(device, 15, 28);
    CSB_Write(device, 16, 0);
    CSB_Write(device, 17, 0);
    CSB_Write(device, 18, 0);
    CSB_Write(device, 19, 0);
    CSB_Write(device, 20, 0);
    CSB_Write(device, 21, 1);
    CSB_Write(device, 22, 1);
    CSB_Write(device, 23, 1);
    CSB_Write(device, 24, 1);
    CSB_Write(device, 25, 0);
    CSB_Write(device, 26, 4226048);
    CSB_Write(device, 27, 0);
    CSB_Write(device, 28, 0);
    CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("start: step287!\n");
#endif
    while(CSB_Read(device, 1) != 1) {}
  }
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step288 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.pos_emb accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (kvcache ? (0 + ((token - 1) * 64)) : (0 + (last_token * 64))));
  CSB_Write(device, 195, 406259712);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 137824256);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 203, last_token);
  CSB_Write(device, 204, 32);
  CSB_Write(device, 205, 262144);
  CSB_Write(device, 206, 131072);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
#ifdef PRINT_STEP
printf("start: step288!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step289 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  for (int for_k = 0; for_k < (kvcache ? 1 : ((((token - last_token) + 16) - 1) / 16)); for_k++) {
    CSB_Write(device, 2, 4096);
    CSB_Write(device, 3, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 4, 1);
    CSB_Write(device, 5, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 6, 1);
    CSB_Write(device, 7, 256);
    CSB_Write(device, 8, 256);
    CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
    CSB_Write(device, 10, (81725440 + ((for_k * 16) * 64)));
    CSB_Write(device, 11, 62733824);
    CSB_Write(device, 12, 16896);
    CSB_Write(device, 13, (406259712 + ((for_k * 16) * 64)));
    CSB_Write(device, 14, 0);
    CSB_Write(device, 15, 28);
    CSB_Write(device, 16, 0);
    CSB_Write(device, 17, 0);
    CSB_Write(device, 18, 0);
    CSB_Write(device, 19, 0);
    CSB_Write(device, 20, 0);
    CSB_Write(device, 21, 1);
    CSB_Write(device, 22, 1);
    CSB_Write(device, 23, 1);
    CSB_Write(device, 24, 1);
    CSB_Write(device, 25, 0);
    CSB_Write(device, 26, 4242432);
    CSB_Write(device, 27, 0);
    CSB_Write(device, 28, 0);
    CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("start: step289!\n");
#endif
    while(CSB_Read(device, 1) != 1) {}
  }
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step290 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.pos_emb accel operator node, storage data in cache38 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (kvcache ? (0 + ((token - 1) * 64)) : (0 + (last_token * 64))));
  CSB_Write(device, 195, 406259712);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, (kvcache ? (46073856 + ((token - 1) * 64)) : (46073856 + (last_token * 64))));
  CSB_Write(device, 199, 524288);
  CSB_Write(device, 200, 131072);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 203, last_token);
  CSB_Write(device, 204, 2);
  CSB_Write(device, 205, 262144);
  CSB_Write(device, 206, 131072);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
#ifdef PRINT_STEP
printf("start: step290!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step291 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_afterTRP accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 46073856);
  CSB_Write(device, 195, 137824256);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 406259712);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 524288);
  CSB_Write(device, 202, 131072);
  CSB_Write(device, 203, 4);
  CSB_Write(device, 204, token);
  CSB_Write(device, 205, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 206, 11688);
  CSB_Write(device, 207, 991234);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 2);
#ifdef PRINT_STEP
printf("start: step291!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterTRP run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step292 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.softmax accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (1 - kvcache));
  CSB_Write(device, 195, 406259712);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 137824256);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, (((token + 32) - 1) / 32));
  CSB_Write(device, 202, 32);
  CSB_Write(device, 203, token);
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, (token - last_token));
  CSB_Write(device, 206, last_token);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 8);
#ifdef PRINT_STEP
printf("start: step292!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.softmax run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step293 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in cache39 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  for (int for_k = 0; for_k < (kvcache ? 1 : ((((token - last_token) + 16) - 1) / 16)); for_k++) {
    CSB_Write(device, 2, 4096);
    CSB_Write(device, 3, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 4, 1);
    CSB_Write(device, 5, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 6, 1);
    CSB_Write(device, 7, 256);
    CSB_Write(device, 8, 256);
    CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
    CSB_Write(device, 10, (81725440 + ((for_k * 16) * 64)));
    CSB_Write(device, 11, 62750720);
    CSB_Write(device, 12, 16896);
    CSB_Write(device, 13, ((kvcache ? (47122432 + ((token - 1) * 64)) : (47122432 + (last_token * 64))) + ((for_k * 16) * 64)));
    CSB_Write(device, 14, 0);
    CSB_Write(device, 15, 28);
    CSB_Write(device, 16, 0);
    CSB_Write(device, 17, 0);
    CSB_Write(device, 18, 0);
    CSB_Write(device, 19, 0);
    CSB_Write(device, 20, 0);
    CSB_Write(device, 21, 1);
    CSB_Write(device, 22, 1);
    CSB_Write(device, 23, 1);
    CSB_Write(device, 24, 1);
    CSB_Write(device, 25, 0);
    CSB_Write(device, 26, 4243456);
    CSB_Write(device, 27, 0);
    CSB_Write(device, 28, 0);
    CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 31, 131072);
    CSB_Write(device, 32, 131072);
    CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("start: step293!\n");
#endif
    while(CSB_Read(device, 1) != 1) {}
  }
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step294 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_afterF2W accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 47122432);
  CSB_Write(device, 195, 137824256);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 81725440);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 524288);
  CSB_Write(device, 202, 131072);
  CSB_Write(device, 203, (((token + 32) - 1) / 32));
  CSB_Write(device, 204, token);
  CSB_Write(device, 205, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 206, 4);
  CSB_Write(device, 207, 991234);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 1);
#ifdef PRINT_STEP
printf("start: step294!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterF2W run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step295 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  for (int for_k = 0; for_k < (kvcache ? 1 : ((((token - last_token) + 16) - 1) / 16)); for_k++) {
    CSB_Write(device, 2, 4096);
    CSB_Write(device, 3, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 4, 1);
    CSB_Write(device, 5, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 6, 1);
    CSB_Write(device, 7, 1024);
    CSB_Write(device, 8, 1024);
    CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
    CSB_Write(device, 10, (81725440 + ((for_k * 16) * 64)));
    CSB_Write(device, 11, 62767616);
    CSB_Write(device, 12, 16896);
    CSB_Write(device, 13, (137824256 + ((for_k * 16) * 64)));
    CSB_Write(device, 14, 3);
    CSB_Write(device, 15, 28);
    CSB_Write(device, 16, 0);
    CSB_Write(device, 17, 0);
    CSB_Write(device, 18, 0);
    CSB_Write(device, 19, 0);
    CSB_Write(device, 20, 0);
    CSB_Write(device, 21, 1);
    CSB_Write(device, 22, 1);
    CSB_Write(device, 23, 1);
    CSB_Write(device, 24, 1);
    CSB_Write(device, 25, 0);
    CSB_Write(device, 26, 4244480);
    CSB_Write(device, 27, (64948224 + ((for_k * 16) * 64)));
    CSB_Write(device, 28, 0);
    CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("start: step295!\n");
#endif
    while(CSB_Read(device, 1) != 1) {}
  }
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step296 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 4260864);
  CSB_Write(device, 195, 137824256);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 64948224);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_STEP
printf("start: step296!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step297 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  for (int for_k = 0; for_k < (kvcache ? 1 : ((((token - last_token) + 16) - 1) / 16)); for_k++) {
    CSB_Write(device, 2, 4096);
    CSB_Write(device, 3, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 4, 1);
    CSB_Write(device, 5, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 6, 1);
    CSB_Write(device, 7, 1024);
    CSB_Write(device, 8, 384);
    CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
    CSB_Write(device, 10, (64948224 + ((for_k * 16) * 64)));
    CSB_Write(device, 11, 63941888);
    CSB_Write(device, 12, 16896);
    CSB_Write(device, 13, (81725440 + ((for_k * 16) * 64)));
    CSB_Write(device, 14, 13);
    CSB_Write(device, 15, 28);
    CSB_Write(device, 16, 0);
    CSB_Write(device, 17, 0);
    CSB_Write(device, 18, 0);
    CSB_Write(device, 19, 0);
    CSB_Write(device, 20, 0);
    CSB_Write(device, 21, 1);
    CSB_Write(device, 22, 1);
    CSB_Write(device, 23, 1);
    CSB_Write(device, 24, 1);
    CSB_Write(device, 25, 0);
    CSB_Write(device, 26, 4332032);
    CSB_Write(device, 27, 0);
    CSB_Write(device, 28, 0);
    CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("start: step297!\n");
#endif
    while(CSB_Read(device, 1) != 1) {}
  }
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step298 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.activate accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 524288);
  CSB_Write(device, 195, 81725440);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 406259712);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 428);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 428);
  CSB_Write(device, 206, 13696);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 16);
#ifdef PRINT_STEP
printf("start: step298!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.activate run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step299 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  for (int for_k = 0; for_k < (kvcache ? 1 : ((((token - last_token) + 16) - 1) / 16)); for_k++) {
    CSB_Write(device, 2, 4096);
    CSB_Write(device, 3, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 4, 1);
    CSB_Write(device, 5, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 6, 1);
    CSB_Write(device, 7, 1024);
    CSB_Write(device, 8, 384);
    CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
    CSB_Write(device, 10, (64948224 + ((for_k * 16) * 64)));
    CSB_Write(device, 11, 63037952);
    CSB_Write(device, 12, 16896);
    CSB_Write(device, 13, (81725440 + ((for_k * 16) * 64)));
    CSB_Write(device, 14, 13);
    CSB_Write(device, 15, 28);
    CSB_Write(device, 16, 2);
    CSB_Write(device, 17, 0);
    CSB_Write(device, 18, 0);
    CSB_Write(device, 19, 0);
    CSB_Write(device, 20, 0);
    CSB_Write(device, 21, 1);
    CSB_Write(device, 22, 1);
    CSB_Write(device, 23, 1);
    CSB_Write(device, 24, 1);
    CSB_Write(device, 25, 0);
    CSB_Write(device, 26, 4277248);
    CSB_Write(device, 27, (406259712 + ((for_k * 16) * 64)));
    CSB_Write(device, 28, 0);
    CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("start: step299!\n");
#endif
    while(CSB_Read(device, 1) != 1) {}
  }
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step300 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  for (int for_k = 0; for_k < (kvcache ? 1 : ((((token - last_token) + 16) - 1) / 16)); for_k++) {
    CSB_Write(device, 2, 13696);
    CSB_Write(device, 3, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 4, 1);
    CSB_Write(device, 5, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 6, 1);
    CSB_Write(device, 7, 288);
    CSB_Write(device, 8, 64);
    CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
    CSB_Write(device, 10, (81725440 + ((for_k * 16) * 64)));
    CSB_Write(device, 11, 64845824);
    CSB_Write(device, 12, 56576);
    CSB_Write(device, 13, (64948224 + ((for_k * 16) * 64)));
    CSB_Write(device, 14, 14);
    CSB_Write(device, 15, 28);
    CSB_Write(device, 16, 0);
    CSB_Write(device, 17, 0);
    CSB_Write(device, 18, 0);
    CSB_Write(device, 19, 0);
    CSB_Write(device, 20, 0);
    CSB_Write(device, 21, 1);
    CSB_Write(device, 22, 1);
    CSB_Write(device, 23, 1);
    CSB_Write(device, 24, 1);
    CSB_Write(device, 25, 0);
    CSB_Write(device, 26, 4386816);
    CSB_Write(device, 27, (137824256 + ((for_k * 16) * 64)));
    CSB_Write(device, 28, 0);
    CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("start: step300!\n");
#endif
    while(CSB_Read(device, 1) != 1) {}
  }
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step301 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 4403200);
  CSB_Write(device, 195, 64948224);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 81725440);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_STEP
printf("start: step301!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step302 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  for (int for_k = 0; for_k < (kvcache ? 1 : ((((token - last_token) + 16) - 1) / 16)); for_k++) {
    CSB_Write(device, 2, 4096);
    CSB_Write(device, 3, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 4, 1);
    CSB_Write(device, 5, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 6, 1);
    CSB_Write(device, 7, 1024);
    CSB_Write(device, 8, 1024);
    CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
    CSB_Write(device, 10, (81725440 + ((for_k * 16) * 64)));
    CSB_Write(device, 11, 65751040);
    CSB_Write(device, 12, 16896);
    CSB_Write(device, 13, (137824256 + ((for_k * 16) * 64)));
    CSB_Write(device, 14, 3);
    CSB_Write(device, 15, 28);
    CSB_Write(device, 16, 0);
    CSB_Write(device, 17, 0);
    CSB_Write(device, 18, 0);
    CSB_Write(device, 19, 0);
    CSB_Write(device, 20, 0);
    CSB_Write(device, 21, 1);
    CSB_Write(device, 22, 1);
    CSB_Write(device, 23, 1);
    CSB_Write(device, 24, 1);
    CSB_Write(device, 25, 0);
    CSB_Write(device, 26, 4419584);
    CSB_Write(device, 27, 0);
    CSB_Write(device, 28, 0);
    CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("start: step302!\n");
#endif
    while(CSB_Read(device, 1) != 1) {}
  }
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step303 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.pos_emb accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (kvcache ? (0 + ((token - 1) * 64)) : (0 + (last_token * 64))));
  CSB_Write(device, 195, 137824256);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 406259712);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 203, last_token);
  CSB_Write(device, 204, 32);
  CSB_Write(device, 205, 262144);
  CSB_Write(device, 206, 131072);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
#ifdef PRINT_STEP
printf("start: step303!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step304 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  for (int for_k = 0; for_k < (kvcache ? 1 : ((((token - last_token) + 16) - 1) / 16)); for_k++) {
    CSB_Write(device, 2, 4096);
    CSB_Write(device, 3, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 4, 1);
    CSB_Write(device, 5, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 6, 1);
    CSB_Write(device, 7, 256);
    CSB_Write(device, 8, 256);
    CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
    CSB_Write(device, 10, (81725440 + ((for_k * 16) * 64)));
    CSB_Write(device, 11, 66021376);
    CSB_Write(device, 12, 16896);
    CSB_Write(device, 13, (137824256 + ((for_k * 16) * 64)));
    CSB_Write(device, 14, 0);
    CSB_Write(device, 15, 28);
    CSB_Write(device, 16, 0);
    CSB_Write(device, 17, 0);
    CSB_Write(device, 18, 0);
    CSB_Write(device, 19, 0);
    CSB_Write(device, 20, 0);
    CSB_Write(device, 21, 1);
    CSB_Write(device, 22, 1);
    CSB_Write(device, 23, 1);
    CSB_Write(device, 24, 1);
    CSB_Write(device, 25, 0);
    CSB_Write(device, 26, 4435968);
    CSB_Write(device, 27, 0);
    CSB_Write(device, 28, 0);
    CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("start: step304!\n");
#endif
    while(CSB_Read(device, 1) != 1) {}
  }
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step305 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.pos_emb accel operator node, storage data in cache40 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (kvcache ? (0 + ((token - 1) * 64)) : (0 + (last_token * 64))));
  CSB_Write(device, 195, 137824256);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, (kvcache ? (48171008 + ((token - 1) * 64)) : (48171008 + (last_token * 64))));
  CSB_Write(device, 199, 524288);
  CSB_Write(device, 200, 131072);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 203, last_token);
  CSB_Write(device, 204, 2);
  CSB_Write(device, 205, 262144);
  CSB_Write(device, 206, 131072);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
#ifdef PRINT_STEP
printf("start: step305!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step306 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_afterTRP accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 48171008);
  CSB_Write(device, 195, 406259712);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 137824256);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 524288);
  CSB_Write(device, 202, 131072);
  CSB_Write(device, 203, 4);
  CSB_Write(device, 204, token);
  CSB_Write(device, 205, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 206, 11688);
  CSB_Write(device, 207, 991234);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 2);
#ifdef PRINT_STEP
printf("start: step306!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterTRP run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step307 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.softmax accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (1 - kvcache));
  CSB_Write(device, 195, 137824256);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 406259712);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, (((token + 32) - 1) / 32));
  CSB_Write(device, 202, 32);
  CSB_Write(device, 203, token);
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, (token - last_token));
  CSB_Write(device, 206, last_token);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 8);
#ifdef PRINT_STEP
printf("start: step307!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.softmax run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step308 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in cache41 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  for (int for_k = 0; for_k < (kvcache ? 1 : ((((token - last_token) + 16) - 1) / 16)); for_k++) {
    CSB_Write(device, 2, 4096);
    CSB_Write(device, 3, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 4, 1);
    CSB_Write(device, 5, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 6, 1);
    CSB_Write(device, 7, 256);
    CSB_Write(device, 8, 256);
    CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
    CSB_Write(device, 10, (81725440 + ((for_k * 16) * 64)));
    CSB_Write(device, 11, 66038272);
    CSB_Write(device, 12, 16896);
    CSB_Write(device, 13, ((kvcache ? (49219584 + ((token - 1) * 64)) : (49219584 + (last_token * 64))) + ((for_k * 16) * 64)));
    CSB_Write(device, 14, 0);
    CSB_Write(device, 15, 28);
    CSB_Write(device, 16, 0);
    CSB_Write(device, 17, 0);
    CSB_Write(device, 18, 0);
    CSB_Write(device, 19, 0);
    CSB_Write(device, 20, 0);
    CSB_Write(device, 21, 1);
    CSB_Write(device, 22, 1);
    CSB_Write(device, 23, 1);
    CSB_Write(device, 24, 1);
    CSB_Write(device, 25, 0);
    CSB_Write(device, 26, 4436992);
    CSB_Write(device, 27, 0);
    CSB_Write(device, 28, 0);
    CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 31, 131072);
    CSB_Write(device, 32, 131072);
    CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("start: step308!\n");
#endif
    while(CSB_Read(device, 1) != 1) {}
  }
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step309 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_afterF2W accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 49219584);
  CSB_Write(device, 195, 406259712);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 81725440);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 524288);
  CSB_Write(device, 202, 131072);
  CSB_Write(device, 203, (((token + 32) - 1) / 32));
  CSB_Write(device, 204, token);
  CSB_Write(device, 205, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 206, 4);
  CSB_Write(device, 207, 991234);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 1);
#ifdef PRINT_STEP
printf("start: step309!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterF2W run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step310 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  for (int for_k = 0; for_k < (kvcache ? 1 : ((((token - last_token) + 16) - 1) / 16)); for_k++) {
    CSB_Write(device, 2, 4096);
    CSB_Write(device, 3, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 4, 1);
    CSB_Write(device, 5, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 6, 1);
    CSB_Write(device, 7, 1024);
    CSB_Write(device, 8, 1024);
    CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
    CSB_Write(device, 10, (81725440 + ((for_k * 16) * 64)));
    CSB_Write(device, 11, 66055168);
    CSB_Write(device, 12, 16896);
    CSB_Write(device, 13, (406259712 + ((for_k * 16) * 64)));
    CSB_Write(device, 14, 3);
    CSB_Write(device, 15, 28);
    CSB_Write(device, 16, 0);
    CSB_Write(device, 17, 0);
    CSB_Write(device, 18, 0);
    CSB_Write(device, 19, 0);
    CSB_Write(device, 20, 0);
    CSB_Write(device, 21, 1);
    CSB_Write(device, 22, 1);
    CSB_Write(device, 23, 1);
    CSB_Write(device, 24, 1);
    CSB_Write(device, 25, 0);
    CSB_Write(device, 26, 4438016);
    CSB_Write(device, 27, (64948224 + ((for_k * 16) * 64)));
    CSB_Write(device, 28, 0);
    CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("start: step310!\n");
#endif
    while(CSB_Read(device, 1) != 1) {}
  }
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step311 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 4454400);
  CSB_Write(device, 195, 406259712);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 64948224);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_STEP
printf("start: step311!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step312 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  for (int for_k = 0; for_k < (kvcache ? 1 : ((((token - last_token) + 16) - 1) / 16)); for_k++) {
    CSB_Write(device, 2, 4096);
    CSB_Write(device, 3, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 4, 1);
    CSB_Write(device, 5, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 6, 1);
    CSB_Write(device, 7, 1024);
    CSB_Write(device, 8, 384);
    CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
    CSB_Write(device, 10, (64948224 + ((for_k * 16) * 64)));
    CSB_Write(device, 11, 67229440);
    CSB_Write(device, 12, 16896);
    CSB_Write(device, 13, (81725440 + ((for_k * 16) * 64)));
    CSB_Write(device, 14, 13);
    CSB_Write(device, 15, 28);
    CSB_Write(device, 16, 0);
    CSB_Write(device, 17, 0);
    CSB_Write(device, 18, 0);
    CSB_Write(device, 19, 0);
    CSB_Write(device, 20, 0);
    CSB_Write(device, 21, 1);
    CSB_Write(device, 22, 1);
    CSB_Write(device, 23, 1);
    CSB_Write(device, 24, 1);
    CSB_Write(device, 25, 0);
    CSB_Write(device, 26, 4525568);
    CSB_Write(device, 27, 0);
    CSB_Write(device, 28, 0);
    CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("start: step312!\n");
#endif
    while(CSB_Read(device, 1) != 1) {}
  }
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step313 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.activate accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 524288);
  CSB_Write(device, 195, 81725440);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 137824256);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 428);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 428);
  CSB_Write(device, 206, 13696);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 16);
#ifdef PRINT_STEP
printf("start: step313!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.activate run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step314 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  for (int for_k = 0; for_k < (kvcache ? 1 : ((((token - last_token) + 16) - 1) / 16)); for_k++) {
    CSB_Write(device, 2, 4096);
    CSB_Write(device, 3, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 4, 1);
    CSB_Write(device, 5, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 6, 1);
    CSB_Write(device, 7, 1024);
    CSB_Write(device, 8, 384);
    CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
    CSB_Write(device, 10, (64948224 + ((for_k * 16) * 64)));
    CSB_Write(device, 11, 66325504);
    CSB_Write(device, 12, 16896);
    CSB_Write(device, 13, (81725440 + ((for_k * 16) * 64)));
    CSB_Write(device, 14, 13);
    CSB_Write(device, 15, 28);
    CSB_Write(device, 16, 2);
    CSB_Write(device, 17, 0);
    CSB_Write(device, 18, 0);
    CSB_Write(device, 19, 0);
    CSB_Write(device, 20, 0);
    CSB_Write(device, 21, 1);
    CSB_Write(device, 22, 1);
    CSB_Write(device, 23, 1);
    CSB_Write(device, 24, 1);
    CSB_Write(device, 25, 0);
    CSB_Write(device, 26, 4470784);
    CSB_Write(device, 27, (137824256 + ((for_k * 16) * 64)));
    CSB_Write(device, 28, 0);
    CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("start: step314!\n");
#endif
    while(CSB_Read(device, 1) != 1) {}
  }
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step315 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  for (int for_k = 0; for_k < (kvcache ? 1 : ((((token - last_token) + 16) - 1) / 16)); for_k++) {
    CSB_Write(device, 2, 13696);
    CSB_Write(device, 3, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 4, 1);
    CSB_Write(device, 5, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 6, 1);
    CSB_Write(device, 7, 288);
    CSB_Write(device, 8, 64);
    CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
    CSB_Write(device, 10, (81725440 + ((for_k * 16) * 64)));
    CSB_Write(device, 11, 68133376);
    CSB_Write(device, 12, 56576);
    CSB_Write(device, 13, (64948224 + ((for_k * 16) * 64)));
    CSB_Write(device, 14, 14);
    CSB_Write(device, 15, 28);
    CSB_Write(device, 16, 0);
    CSB_Write(device, 17, 0);
    CSB_Write(device, 18, 0);
    CSB_Write(device, 19, 0);
    CSB_Write(device, 20, 0);
    CSB_Write(device, 21, 1);
    CSB_Write(device, 22, 1);
    CSB_Write(device, 23, 1);
    CSB_Write(device, 24, 1);
    CSB_Write(device, 25, 0);
    CSB_Write(device, 26, 4580352);
    CSB_Write(device, 27, (406259712 + ((for_k * 16) * 64)));
    CSB_Write(device, 28, 0);
    CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("start: step315!\n");
#endif
    while(CSB_Read(device, 1) != 1) {}
  }
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step316 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 4596736);
  CSB_Write(device, 195, 64948224);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 81725440);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_STEP
printf("start: step316!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step317 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  for (int for_k = 0; for_k < (kvcache ? 1 : ((((token - last_token) + 16) - 1) / 16)); for_k++) {
    CSB_Write(device, 2, 4096);
    CSB_Write(device, 3, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 4, 1);
    CSB_Write(device, 5, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 6, 1);
    CSB_Write(device, 7, 1024);
    CSB_Write(device, 8, 1024);
    CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
    CSB_Write(device, 10, (81725440 + ((for_k * 16) * 64)));
    CSB_Write(device, 11, 69038592);
    CSB_Write(device, 12, 16896);
    CSB_Write(device, 13, (406259712 + ((for_k * 16) * 64)));
    CSB_Write(device, 14, 3);
    CSB_Write(device, 15, 28);
    CSB_Write(device, 16, 0);
    CSB_Write(device, 17, 0);
    CSB_Write(device, 18, 0);
    CSB_Write(device, 19, 0);
    CSB_Write(device, 20, 0);
    CSB_Write(device, 21, 1);
    CSB_Write(device, 22, 1);
    CSB_Write(device, 23, 1);
    CSB_Write(device, 24, 1);
    CSB_Write(device, 25, 0);
    CSB_Write(device, 26, 4613120);
    CSB_Write(device, 27, 0);
    CSB_Write(device, 28, 0);
    CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("start: step317!\n");
#endif
    while(CSB_Read(device, 1) != 1) {}
  }
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step318 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.pos_emb accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (kvcache ? (0 + ((token - 1) * 64)) : (0 + (last_token * 64))));
  CSB_Write(device, 195, 406259712);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 137824256);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 203, last_token);
  CSB_Write(device, 204, 32);
  CSB_Write(device, 205, 262144);
  CSB_Write(device, 206, 131072);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
#ifdef PRINT_STEP
printf("start: step318!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step319 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  for (int for_k = 0; for_k < (kvcache ? 1 : ((((token - last_token) + 16) - 1) / 16)); for_k++) {
    CSB_Write(device, 2, 4096);
    CSB_Write(device, 3, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 4, 1);
    CSB_Write(device, 5, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 6, 1);
    CSB_Write(device, 7, 256);
    CSB_Write(device, 8, 256);
    CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
    CSB_Write(device, 10, (81725440 + ((for_k * 16) * 64)));
    CSB_Write(device, 11, 69308928);
    CSB_Write(device, 12, 16896);
    CSB_Write(device, 13, (406259712 + ((for_k * 16) * 64)));
    CSB_Write(device, 14, 0);
    CSB_Write(device, 15, 28);
    CSB_Write(device, 16, 0);
    CSB_Write(device, 17, 0);
    CSB_Write(device, 18, 0);
    CSB_Write(device, 19, 0);
    CSB_Write(device, 20, 0);
    CSB_Write(device, 21, 1);
    CSB_Write(device, 22, 1);
    CSB_Write(device, 23, 1);
    CSB_Write(device, 24, 1);
    CSB_Write(device, 25, 0);
    CSB_Write(device, 26, 4629504);
    CSB_Write(device, 27, 0);
    CSB_Write(device, 28, 0);
    CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("start: step319!\n");
#endif
    while(CSB_Read(device, 1) != 1) {}
  }
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step320 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.pos_emb accel operator node, storage data in cache42 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (kvcache ? (0 + ((token - 1) * 64)) : (0 + (last_token * 64))));
  CSB_Write(device, 195, 406259712);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, (kvcache ? (50268160 + ((token - 1) * 64)) : (50268160 + (last_token * 64))));
  CSB_Write(device, 199, 524288);
  CSB_Write(device, 200, 131072);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 203, last_token);
  CSB_Write(device, 204, 2);
  CSB_Write(device, 205, 262144);
  CSB_Write(device, 206, 131072);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
#ifdef PRINT_STEP
printf("start: step320!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step321 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_afterTRP accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 50268160);
  CSB_Write(device, 195, 137824256);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 406259712);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 524288);
  CSB_Write(device, 202, 131072);
  CSB_Write(device, 203, 4);
  CSB_Write(device, 204, token);
  CSB_Write(device, 205, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 206, 11688);
  CSB_Write(device, 207, 991234);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 2);
#ifdef PRINT_STEP
printf("start: step321!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterTRP run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step322 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.softmax accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (1 - kvcache));
  CSB_Write(device, 195, 406259712);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 137824256);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, (((token + 32) - 1) / 32));
  CSB_Write(device, 202, 32);
  CSB_Write(device, 203, token);
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, (token - last_token));
  CSB_Write(device, 206, last_token);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 8);
#ifdef PRINT_STEP
printf("start: step322!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.softmax run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step323 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in cache43 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  for (int for_k = 0; for_k < (kvcache ? 1 : ((((token - last_token) + 16) - 1) / 16)); for_k++) {
    CSB_Write(device, 2, 4096);
    CSB_Write(device, 3, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 4, 1);
    CSB_Write(device, 5, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 6, 1);
    CSB_Write(device, 7, 256);
    CSB_Write(device, 8, 256);
    CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
    CSB_Write(device, 10, (81725440 + ((for_k * 16) * 64)));
    CSB_Write(device, 11, 69325824);
    CSB_Write(device, 12, 16896);
    CSB_Write(device, 13, ((kvcache ? (51316736 + ((token - 1) * 64)) : (51316736 + (last_token * 64))) + ((for_k * 16) * 64)));
    CSB_Write(device, 14, 0);
    CSB_Write(device, 15, 28);
    CSB_Write(device, 16, 0);
    CSB_Write(device, 17, 0);
    CSB_Write(device, 18, 0);
    CSB_Write(device, 19, 0);
    CSB_Write(device, 20, 0);
    CSB_Write(device, 21, 1);
    CSB_Write(device, 22, 1);
    CSB_Write(device, 23, 1);
    CSB_Write(device, 24, 1);
    CSB_Write(device, 25, 0);
    CSB_Write(device, 26, 4630528);
    CSB_Write(device, 27, 0);
    CSB_Write(device, 28, 0);
    CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 31, 131072);
    CSB_Write(device, 32, 131072);
    CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("start: step323!\n");
#endif
    while(CSB_Read(device, 1) != 1) {}
  }
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step324 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_afterF2W accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 51316736);
  CSB_Write(device, 195, 137824256);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 81725440);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 524288);
  CSB_Write(device, 202, 131072);
  CSB_Write(device, 203, (((token + 32) - 1) / 32));
  CSB_Write(device, 204, token);
  CSB_Write(device, 205, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 206, 4);
  CSB_Write(device, 207, 991234);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 1);
#ifdef PRINT_STEP
printf("start: step324!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterF2W run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step325 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  for (int for_k = 0; for_k < (kvcache ? 1 : ((((token - last_token) + 16) - 1) / 16)); for_k++) {
    CSB_Write(device, 2, 4096);
    CSB_Write(device, 3, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 4, 1);
    CSB_Write(device, 5, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 6, 1);
    CSB_Write(device, 7, 1024);
    CSB_Write(device, 8, 1024);
    CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
    CSB_Write(device, 10, (81725440 + ((for_k * 16) * 64)));
    CSB_Write(device, 11, 69342720);
    CSB_Write(device, 12, 16896);
    CSB_Write(device, 13, (137824256 + ((for_k * 16) * 64)));
    CSB_Write(device, 14, 3);
    CSB_Write(device, 15, 28);
    CSB_Write(device, 16, 0);
    CSB_Write(device, 17, 0);
    CSB_Write(device, 18, 0);
    CSB_Write(device, 19, 0);
    CSB_Write(device, 20, 0);
    CSB_Write(device, 21, 1);
    CSB_Write(device, 22, 1);
    CSB_Write(device, 23, 1);
    CSB_Write(device, 24, 1);
    CSB_Write(device, 25, 0);
    CSB_Write(device, 26, 4631552);
    CSB_Write(device, 27, (64948224 + ((for_k * 16) * 64)));
    CSB_Write(device, 28, 0);
    CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("start: step325!\n");
#endif
    while(CSB_Read(device, 1) != 1) {}
  }
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step326 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 4647936);
  CSB_Write(device, 195, 137824256);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 64948224);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_STEP
printf("start: step326!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step327 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  for (int for_k = 0; for_k < (kvcache ? 1 : ((((token - last_token) + 16) - 1) / 16)); for_k++) {
    CSB_Write(device, 2, 4096);
    CSB_Write(device, 3, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 4, 1);
    CSB_Write(device, 5, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 6, 1);
    CSB_Write(device, 7, 1024);
    CSB_Write(device, 8, 384);
    CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
    CSB_Write(device, 10, (64948224 + ((for_k * 16) * 64)));
    CSB_Write(device, 11, 70516992);
    CSB_Write(device, 12, 16896);
    CSB_Write(device, 13, (81725440 + ((for_k * 16) * 64)));
    CSB_Write(device, 14, 13);
    CSB_Write(device, 15, 28);
    CSB_Write(device, 16, 0);
    CSB_Write(device, 17, 0);
    CSB_Write(device, 18, 0);
    CSB_Write(device, 19, 0);
    CSB_Write(device, 20, 0);
    CSB_Write(device, 21, 1);
    CSB_Write(device, 22, 1);
    CSB_Write(device, 23, 1);
    CSB_Write(device, 24, 1);
    CSB_Write(device, 25, 0);
    CSB_Write(device, 26, 4719104);
    CSB_Write(device, 27, 0);
    CSB_Write(device, 28, 0);
    CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("start: step327!\n");
#endif
    while(CSB_Read(device, 1) != 1) {}
  }
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step328 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.activate accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 524288);
  CSB_Write(device, 195, 81725440);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 406259712);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 428);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 428);
  CSB_Write(device, 206, 13696);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 16);
#ifdef PRINT_STEP
printf("start: step328!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.activate run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step329 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  for (int for_k = 0; for_k < (kvcache ? 1 : ((((token - last_token) + 16) - 1) / 16)); for_k++) {
    CSB_Write(device, 2, 4096);
    CSB_Write(device, 3, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 4, 1);
    CSB_Write(device, 5, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 6, 1);
    CSB_Write(device, 7, 1024);
    CSB_Write(device, 8, 384);
    CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
    CSB_Write(device, 10, (64948224 + ((for_k * 16) * 64)));
    CSB_Write(device, 11, 69613056);
    CSB_Write(device, 12, 16896);
    CSB_Write(device, 13, (81725440 + ((for_k * 16) * 64)));
    CSB_Write(device, 14, 13);
    CSB_Write(device, 15, 28);
    CSB_Write(device, 16, 2);
    CSB_Write(device, 17, 0);
    CSB_Write(device, 18, 0);
    CSB_Write(device, 19, 0);
    CSB_Write(device, 20, 0);
    CSB_Write(device, 21, 1);
    CSB_Write(device, 22, 1);
    CSB_Write(device, 23, 1);
    CSB_Write(device, 24, 1);
    CSB_Write(device, 25, 0);
    CSB_Write(device, 26, 4664320);
    CSB_Write(device, 27, (406259712 + ((for_k * 16) * 64)));
    CSB_Write(device, 28, 0);
    CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("start: step329!\n");
#endif
    while(CSB_Read(device, 1) != 1) {}
  }
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step330 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  for (int for_k = 0; for_k < (kvcache ? 1 : ((((token - last_token) + 16) - 1) / 16)); for_k++) {
    CSB_Write(device, 2, 13696);
    CSB_Write(device, 3, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 4, 1);
    CSB_Write(device, 5, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 6, 1);
    CSB_Write(device, 7, 288);
    CSB_Write(device, 8, 64);
    CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
    CSB_Write(device, 10, (81725440 + ((for_k * 16) * 64)));
    CSB_Write(device, 11, 71420928);
    CSB_Write(device, 12, 56576);
    CSB_Write(device, 13, (64948224 + ((for_k * 16) * 64)));
    CSB_Write(device, 14, 14);
    CSB_Write(device, 15, 28);
    CSB_Write(device, 16, 0);
    CSB_Write(device, 17, 0);
    CSB_Write(device, 18, 0);
    CSB_Write(device, 19, 0);
    CSB_Write(device, 20, 0);
    CSB_Write(device, 21, 1);
    CSB_Write(device, 22, 1);
    CSB_Write(device, 23, 1);
    CSB_Write(device, 24, 1);
    CSB_Write(device, 25, 0);
    CSB_Write(device, 26, 4773888);
    CSB_Write(device, 27, (137824256 + ((for_k * 16) * 64)));
    CSB_Write(device, 28, 0);
    CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("start: step330!\n");
#endif
    while(CSB_Read(device, 1) != 1) {}
  }
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step331 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 4790272);
  CSB_Write(device, 195, 64948224);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 81725440);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_STEP
printf("start: step331!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step332 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  for (int for_k = 0; for_k < (kvcache ? 1 : ((((token - last_token) + 16) - 1) / 16)); for_k++) {
    CSB_Write(device, 2, 4096);
    CSB_Write(device, 3, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 4, 1);
    CSB_Write(device, 5, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 6, 1);
    CSB_Write(device, 7, 1024);
    CSB_Write(device, 8, 1024);
    CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
    CSB_Write(device, 10, (81725440 + ((for_k * 16) * 64)));
    CSB_Write(device, 11, 72326144);
    CSB_Write(device, 12, 16896);
    CSB_Write(device, 13, (137824256 + ((for_k * 16) * 64)));
    CSB_Write(device, 14, 3);
    CSB_Write(device, 15, 28);
    CSB_Write(device, 16, 0);
    CSB_Write(device, 17, 0);
    CSB_Write(device, 18, 0);
    CSB_Write(device, 19, 0);
    CSB_Write(device, 20, 0);
    CSB_Write(device, 21, 1);
    CSB_Write(device, 22, 1);
    CSB_Write(device, 23, 1);
    CSB_Write(device, 24, 1);
    CSB_Write(device, 25, 0);
    CSB_Write(device, 26, 4806656);
    CSB_Write(device, 27, 0);
    CSB_Write(device, 28, 0);
    CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("start: step332!\n");
#endif
    while(CSB_Read(device, 1) != 1) {}
  }
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step333 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.pos_emb accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (kvcache ? (0 + ((token - 1) * 64)) : (0 + (last_token * 64))));
  CSB_Write(device, 195, 137824256);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 406259712);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 203, last_token);
  CSB_Write(device, 204, 32);
  CSB_Write(device, 205, 262144);
  CSB_Write(device, 206, 131072);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
#ifdef PRINT_STEP
printf("start: step333!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step334 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  for (int for_k = 0; for_k < (kvcache ? 1 : ((((token - last_token) + 16) - 1) / 16)); for_k++) {
    CSB_Write(device, 2, 4096);
    CSB_Write(device, 3, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 4, 1);
    CSB_Write(device, 5, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 6, 1);
    CSB_Write(device, 7, 256);
    CSB_Write(device, 8, 256);
    CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
    CSB_Write(device, 10, (81725440 + ((for_k * 16) * 64)));
    CSB_Write(device, 11, 72596480);
    CSB_Write(device, 12, 16896);
    CSB_Write(device, 13, (137824256 + ((for_k * 16) * 64)));
    CSB_Write(device, 14, 0);
    CSB_Write(device, 15, 28);
    CSB_Write(device, 16, 0);
    CSB_Write(device, 17, 0);
    CSB_Write(device, 18, 0);
    CSB_Write(device, 19, 0);
    CSB_Write(device, 20, 0);
    CSB_Write(device, 21, 1);
    CSB_Write(device, 22, 1);
    CSB_Write(device, 23, 1);
    CSB_Write(device, 24, 1);
    CSB_Write(device, 25, 0);
    CSB_Write(device, 26, 4823040);
    CSB_Write(device, 27, 0);
    CSB_Write(device, 28, 0);
    CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("start: step334!\n");
#endif
    while(CSB_Read(device, 1) != 1) {}
  }
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step335 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.pos_emb accel operator node, storage data in cache44 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (kvcache ? (0 + ((token - 1) * 64)) : (0 + (last_token * 64))));
  CSB_Write(device, 195, 137824256);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, (kvcache ? (52365312 + ((token - 1) * 64)) : (52365312 + (last_token * 64))));
  CSB_Write(device, 199, 524288);
  CSB_Write(device, 200, 131072);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 203, last_token);
  CSB_Write(device, 204, 2);
  CSB_Write(device, 205, 262144);
  CSB_Write(device, 206, 131072);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
#ifdef PRINT_STEP
printf("start: step335!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step336 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_afterTRP accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 52365312);
  CSB_Write(device, 195, 406259712);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 137824256);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 524288);
  CSB_Write(device, 202, 131072);
  CSB_Write(device, 203, 4);
  CSB_Write(device, 204, token);
  CSB_Write(device, 205, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 206, 11688);
  CSB_Write(device, 207, 991234);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 2);
#ifdef PRINT_STEP
printf("start: step336!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterTRP run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step337 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.softmax accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (1 - kvcache));
  CSB_Write(device, 195, 137824256);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 406259712);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, (((token + 32) - 1) / 32));
  CSB_Write(device, 202, 32);
  CSB_Write(device, 203, token);
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, (token - last_token));
  CSB_Write(device, 206, last_token);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 8);
#ifdef PRINT_STEP
printf("start: step337!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.softmax run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step338 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in cache45 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  for (int for_k = 0; for_k < (kvcache ? 1 : ((((token - last_token) + 16) - 1) / 16)); for_k++) {
    CSB_Write(device, 2, 4096);
    CSB_Write(device, 3, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 4, 1);
    CSB_Write(device, 5, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 6, 1);
    CSB_Write(device, 7, 256);
    CSB_Write(device, 8, 256);
    CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
    CSB_Write(device, 10, (81725440 + ((for_k * 16) * 64)));
    CSB_Write(device, 11, 72613376);
    CSB_Write(device, 12, 16896);
    CSB_Write(device, 13, ((kvcache ? (53413888 + ((token - 1) * 64)) : (53413888 + (last_token * 64))) + ((for_k * 16) * 64)));
    CSB_Write(device, 14, 0);
    CSB_Write(device, 15, 28);
    CSB_Write(device, 16, 0);
    CSB_Write(device, 17, 0);
    CSB_Write(device, 18, 0);
    CSB_Write(device, 19, 0);
    CSB_Write(device, 20, 0);
    CSB_Write(device, 21, 1);
    CSB_Write(device, 22, 1);
    CSB_Write(device, 23, 1);
    CSB_Write(device, 24, 1);
    CSB_Write(device, 25, 0);
    CSB_Write(device, 26, 4824064);
    CSB_Write(device, 27, 0);
    CSB_Write(device, 28, 0);
    CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 31, 131072);
    CSB_Write(device, 32, 131072);
    CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("start: step338!\n");
#endif
    while(CSB_Read(device, 1) != 1) {}
  }
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step339 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_afterF2W accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 53413888);
  CSB_Write(device, 195, 406259712);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 81725440);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 524288);
  CSB_Write(device, 202, 131072);
  CSB_Write(device, 203, (((token + 32) - 1) / 32));
  CSB_Write(device, 204, token);
  CSB_Write(device, 205, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 206, 4);
  CSB_Write(device, 207, 991234);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 1);
#ifdef PRINT_STEP
printf("start: step339!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterF2W run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step340 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  for (int for_k = 0; for_k < (kvcache ? 1 : ((((token - last_token) + 16) - 1) / 16)); for_k++) {
    CSB_Write(device, 2, 4096);
    CSB_Write(device, 3, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 4, 1);
    CSB_Write(device, 5, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 6, 1);
    CSB_Write(device, 7, 1024);
    CSB_Write(device, 8, 1024);
    CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
    CSB_Write(device, 10, (81725440 + ((for_k * 16) * 64)));
    CSB_Write(device, 11, 72630272);
    CSB_Write(device, 12, 16896);
    CSB_Write(device, 13, (406259712 + ((for_k * 16) * 64)));
    CSB_Write(device, 14, 3);
    CSB_Write(device, 15, 28);
    CSB_Write(device, 16, 0);
    CSB_Write(device, 17, 0);
    CSB_Write(device, 18, 0);
    CSB_Write(device, 19, 0);
    CSB_Write(device, 20, 0);
    CSB_Write(device, 21, 1);
    CSB_Write(device, 22, 1);
    CSB_Write(device, 23, 1);
    CSB_Write(device, 24, 1);
    CSB_Write(device, 25, 0);
    CSB_Write(device, 26, 4825088);
    CSB_Write(device, 27, (64948224 + ((for_k * 16) * 64)));
    CSB_Write(device, 28, 0);
    CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("start: step340!\n");
#endif
    while(CSB_Read(device, 1) != 1) {}
  }
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step341 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 4841472);
  CSB_Write(device, 195, 406259712);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 64948224);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_STEP
printf("start: step341!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step342 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  for (int for_k = 0; for_k < (kvcache ? 1 : ((((token - last_token) + 16) - 1) / 16)); for_k++) {
    CSB_Write(device, 2, 4096);
    CSB_Write(device, 3, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 4, 1);
    CSB_Write(device, 5, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 6, 1);
    CSB_Write(device, 7, 1024);
    CSB_Write(device, 8, 384);
    CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
    CSB_Write(device, 10, (64948224 + ((for_k * 16) * 64)));
    CSB_Write(device, 11, 73804544);
    CSB_Write(device, 12, 16896);
    CSB_Write(device, 13, (81725440 + ((for_k * 16) * 64)));
    CSB_Write(device, 14, 13);
    CSB_Write(device, 15, 28);
    CSB_Write(device, 16, 0);
    CSB_Write(device, 17, 0);
    CSB_Write(device, 18, 0);
    CSB_Write(device, 19, 0);
    CSB_Write(device, 20, 0);
    CSB_Write(device, 21, 1);
    CSB_Write(device, 22, 1);
    CSB_Write(device, 23, 1);
    CSB_Write(device, 24, 1);
    CSB_Write(device, 25, 0);
    CSB_Write(device, 26, 4912640);
    CSB_Write(device, 27, 0);
    CSB_Write(device, 28, 0);
    CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("start: step342!\n");
#endif
    while(CSB_Read(device, 1) != 1) {}
  }
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step343 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.activate accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 524288);
  CSB_Write(device, 195, 81725440);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 137824256);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 428);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 428);
  CSB_Write(device, 206, 13696);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 16);
#ifdef PRINT_STEP
printf("start: step343!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.activate run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step344 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  for (int for_k = 0; for_k < (kvcache ? 1 : ((((token - last_token) + 16) - 1) / 16)); for_k++) {
    CSB_Write(device, 2, 4096);
    CSB_Write(device, 3, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 4, 1);
    CSB_Write(device, 5, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 6, 1);
    CSB_Write(device, 7, 1024);
    CSB_Write(device, 8, 384);
    CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
    CSB_Write(device, 10, (64948224 + ((for_k * 16) * 64)));
    CSB_Write(device, 11, 72900608);
    CSB_Write(device, 12, 16896);
    CSB_Write(device, 13, (81725440 + ((for_k * 16) * 64)));
    CSB_Write(device, 14, 13);
    CSB_Write(device, 15, 28);
    CSB_Write(device, 16, 2);
    CSB_Write(device, 17, 0);
    CSB_Write(device, 18, 0);
    CSB_Write(device, 19, 0);
    CSB_Write(device, 20, 0);
    CSB_Write(device, 21, 1);
    CSB_Write(device, 22, 1);
    CSB_Write(device, 23, 1);
    CSB_Write(device, 24, 1);
    CSB_Write(device, 25, 0);
    CSB_Write(device, 26, 4857856);
    CSB_Write(device, 27, (137824256 + ((for_k * 16) * 64)));
    CSB_Write(device, 28, 0);
    CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("start: step344!\n");
#endif
    while(CSB_Read(device, 1) != 1) {}
  }
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step345 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  for (int for_k = 0; for_k < (kvcache ? 1 : ((((token - last_token) + 16) - 1) / 16)); for_k++) {
    CSB_Write(device, 2, 13696);
    CSB_Write(device, 3, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 4, 1);
    CSB_Write(device, 5, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 6, 1);
    CSB_Write(device, 7, 288);
    CSB_Write(device, 8, 64);
    CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
    CSB_Write(device, 10, (81725440 + ((for_k * 16) * 64)));
    CSB_Write(device, 11, 74708480);
    CSB_Write(device, 12, 56576);
    CSB_Write(device, 13, (64948224 + ((for_k * 16) * 64)));
    CSB_Write(device, 14, 14);
    CSB_Write(device, 15, 28);
    CSB_Write(device, 16, 0);
    CSB_Write(device, 17, 0);
    CSB_Write(device, 18, 0);
    CSB_Write(device, 19, 0);
    CSB_Write(device, 20, 0);
    CSB_Write(device, 21, 1);
    CSB_Write(device, 22, 1);
    CSB_Write(device, 23, 1);
    CSB_Write(device, 24, 1);
    CSB_Write(device, 25, 0);
    CSB_Write(device, 26, 4967424);
    CSB_Write(device, 27, (406259712 + ((for_k * 16) * 64)));
    CSB_Write(device, 28, 0);
    CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("start: step345!\n");
#endif
    while(CSB_Read(device, 1) != 1) {}
  }
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step346 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 4983808);
  CSB_Write(device, 195, 64948224);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 81725440);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_STEP
printf("start: step346!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step347 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  for (int for_k = 0; for_k < (kvcache ? 1 : ((((token - last_token) + 16) - 1) / 16)); for_k++) {
    CSB_Write(device, 2, 4096);
    CSB_Write(device, 3, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 4, 1);
    CSB_Write(device, 5, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 6, 1);
    CSB_Write(device, 7, 1024);
    CSB_Write(device, 8, 1024);
    CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
    CSB_Write(device, 10, (81725440 + ((for_k * 16) * 64)));
    CSB_Write(device, 11, 75613696);
    CSB_Write(device, 12, 16896);
    CSB_Write(device, 13, (406259712 + ((for_k * 16) * 64)));
    CSB_Write(device, 14, 3);
    CSB_Write(device, 15, 28);
    CSB_Write(device, 16, 0);
    CSB_Write(device, 17, 0);
    CSB_Write(device, 18, 0);
    CSB_Write(device, 19, 0);
    CSB_Write(device, 20, 0);
    CSB_Write(device, 21, 1);
    CSB_Write(device, 22, 1);
    CSB_Write(device, 23, 1);
    CSB_Write(device, 24, 1);
    CSB_Write(device, 25, 0);
    CSB_Write(device, 26, 5000192);
    CSB_Write(device, 27, 0);
    CSB_Write(device, 28, 0);
    CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("start: step347!\n");
#endif
    while(CSB_Read(device, 1) != 1) {}
  }
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step348 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.pos_emb accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (kvcache ? (0 + ((token - 1) * 64)) : (0 + (last_token * 64))));
  CSB_Write(device, 195, 406259712);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 137824256);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 203, last_token);
  CSB_Write(device, 204, 32);
  CSB_Write(device, 205, 262144);
  CSB_Write(device, 206, 131072);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
#ifdef PRINT_STEP
printf("start: step348!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step349 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  for (int for_k = 0; for_k < (kvcache ? 1 : ((((token - last_token) + 16) - 1) / 16)); for_k++) {
    CSB_Write(device, 2, 4096);
    CSB_Write(device, 3, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 4, 1);
    CSB_Write(device, 5, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 6, 1);
    CSB_Write(device, 7, 256);
    CSB_Write(device, 8, 256);
    CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
    CSB_Write(device, 10, (81725440 + ((for_k * 16) * 64)));
    CSB_Write(device, 11, 75884032);
    CSB_Write(device, 12, 16896);
    CSB_Write(device, 13, (406259712 + ((for_k * 16) * 64)));
    CSB_Write(device, 14, 0);
    CSB_Write(device, 15, 28);
    CSB_Write(device, 16, 0);
    CSB_Write(device, 17, 0);
    CSB_Write(device, 18, 0);
    CSB_Write(device, 19, 0);
    CSB_Write(device, 20, 0);
    CSB_Write(device, 21, 1);
    CSB_Write(device, 22, 1);
    CSB_Write(device, 23, 1);
    CSB_Write(device, 24, 1);
    CSB_Write(device, 25, 0);
    CSB_Write(device, 26, 5016576);
    CSB_Write(device, 27, 0);
    CSB_Write(device, 28, 0);
    CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("start: step349!\n");
#endif
    while(CSB_Read(device, 1) != 1) {}
  }
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step350 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.pos_emb accel operator node, storage data in cache46 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (kvcache ? (0 + ((token - 1) * 64)) : (0 + (last_token * 64))));
  CSB_Write(device, 195, 406259712);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, (kvcache ? (54462464 + ((token - 1) * 64)) : (54462464 + (last_token * 64))));
  CSB_Write(device, 199, 524288);
  CSB_Write(device, 200, 131072);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 203, last_token);
  CSB_Write(device, 204, 2);
  CSB_Write(device, 205, 262144);
  CSB_Write(device, 206, 131072);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
#ifdef PRINT_STEP
printf("start: step350!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step351 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_afterTRP accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 54462464);
  CSB_Write(device, 195, 137824256);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 406259712);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 524288);
  CSB_Write(device, 202, 131072);
  CSB_Write(device, 203, 4);
  CSB_Write(device, 204, token);
  CSB_Write(device, 205, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 206, 11688);
  CSB_Write(device, 207, 991234);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 2);
#ifdef PRINT_STEP
printf("start: step351!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterTRP run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step352 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.softmax accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (1 - kvcache));
  CSB_Write(device, 195, 406259712);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 137824256);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, (((token + 32) - 1) / 32));
  CSB_Write(device, 202, 32);
  CSB_Write(device, 203, token);
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, (token - last_token));
  CSB_Write(device, 206, last_token);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 8);
#ifdef PRINT_STEP
printf("start: step352!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.softmax run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step353 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in cache47 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  for (int for_k = 0; for_k < (kvcache ? 1 : ((((token - last_token) + 16) - 1) / 16)); for_k++) {
    CSB_Write(device, 2, 4096);
    CSB_Write(device, 3, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 4, 1);
    CSB_Write(device, 5, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 6, 1);
    CSB_Write(device, 7, 256);
    CSB_Write(device, 8, 256);
    CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
    CSB_Write(device, 10, (81725440 + ((for_k * 16) * 64)));
    CSB_Write(device, 11, 75900928);
    CSB_Write(device, 12, 16896);
    CSB_Write(device, 13, ((kvcache ? (55511040 + ((token - 1) * 64)) : (55511040 + (last_token * 64))) + ((for_k * 16) * 64)));
    CSB_Write(device, 14, 0);
    CSB_Write(device, 15, 28);
    CSB_Write(device, 16, 0);
    CSB_Write(device, 17, 0);
    CSB_Write(device, 18, 0);
    CSB_Write(device, 19, 0);
    CSB_Write(device, 20, 0);
    CSB_Write(device, 21, 1);
    CSB_Write(device, 22, 1);
    CSB_Write(device, 23, 1);
    CSB_Write(device, 24, 1);
    CSB_Write(device, 25, 0);
    CSB_Write(device, 26, 5017600);
    CSB_Write(device, 27, 0);
    CSB_Write(device, 28, 0);
    CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 31, 131072);
    CSB_Write(device, 32, 131072);
    CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("start: step353!\n");
#endif
    while(CSB_Read(device, 1) != 1) {}
  }
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step354 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_afterF2W accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 55511040);
  CSB_Write(device, 195, 137824256);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 81725440);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 524288);
  CSB_Write(device, 202, 131072);
  CSB_Write(device, 203, (((token + 32) - 1) / 32));
  CSB_Write(device, 204, token);
  CSB_Write(device, 205, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 206, 4);
  CSB_Write(device, 207, 991234);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 1);
#ifdef PRINT_STEP
printf("start: step354!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterF2W run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step355 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  for (int for_k = 0; for_k < (kvcache ? 1 : ((((token - last_token) + 16) - 1) / 16)); for_k++) {
    CSB_Write(device, 2, 4096);
    CSB_Write(device, 3, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 4, 1);
    CSB_Write(device, 5, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 6, 1);
    CSB_Write(device, 7, 1024);
    CSB_Write(device, 8, 1024);
    CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
    CSB_Write(device, 10, (81725440 + ((for_k * 16) * 64)));
    CSB_Write(device, 11, 75917824);
    CSB_Write(device, 12, 16896);
    CSB_Write(device, 13, (137824256 + ((for_k * 16) * 64)));
    CSB_Write(device, 14, 3);
    CSB_Write(device, 15, 28);
    CSB_Write(device, 16, 0);
    CSB_Write(device, 17, 0);
    CSB_Write(device, 18, 0);
    CSB_Write(device, 19, 0);
    CSB_Write(device, 20, 0);
    CSB_Write(device, 21, 1);
    CSB_Write(device, 22, 1);
    CSB_Write(device, 23, 1);
    CSB_Write(device, 24, 1);
    CSB_Write(device, 25, 0);
    CSB_Write(device, 26, 5018624);
    CSB_Write(device, 27, (64948224 + ((for_k * 16) * 64)));
    CSB_Write(device, 28, 0);
    CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("start: step355!\n");
#endif
    while(CSB_Read(device, 1) != 1) {}
  }
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step356 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 5035008);
  CSB_Write(device, 195, 137824256);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 64948224);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_STEP
printf("start: step356!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step357 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  for (int for_k = 0; for_k < (kvcache ? 1 : ((((token - last_token) + 16) - 1) / 16)); for_k++) {
    CSB_Write(device, 2, 4096);
    CSB_Write(device, 3, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 4, 1);
    CSB_Write(device, 5, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 6, 1);
    CSB_Write(device, 7, 1024);
    CSB_Write(device, 8, 384);
    CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
    CSB_Write(device, 10, (64948224 + ((for_k * 16) * 64)));
    CSB_Write(device, 11, 77092096);
    CSB_Write(device, 12, 16896);
    CSB_Write(device, 13, (81725440 + ((for_k * 16) * 64)));
    CSB_Write(device, 14, 13);
    CSB_Write(device, 15, 28);
    CSB_Write(device, 16, 0);
    CSB_Write(device, 17, 0);
    CSB_Write(device, 18, 0);
    CSB_Write(device, 19, 0);
    CSB_Write(device, 20, 0);
    CSB_Write(device, 21, 1);
    CSB_Write(device, 22, 1);
    CSB_Write(device, 23, 1);
    CSB_Write(device, 24, 1);
    CSB_Write(device, 25, 0);
    CSB_Write(device, 26, 5106176);
    CSB_Write(device, 27, 0);
    CSB_Write(device, 28, 0);
    CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("start: step357!\n");
#endif
    while(CSB_Read(device, 1) != 1) {}
  }
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step358 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.activate accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 524288);
  CSB_Write(device, 195, 81725440);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 406259712);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 428);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 428);
  CSB_Write(device, 206, 13696);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 16);
#ifdef PRINT_STEP
printf("start: step358!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.activate run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step359 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  for (int for_k = 0; for_k < (kvcache ? 1 : ((((token - last_token) + 16) - 1) / 16)); for_k++) {
    CSB_Write(device, 2, 4096);
    CSB_Write(device, 3, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 4, 1);
    CSB_Write(device, 5, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 6, 1);
    CSB_Write(device, 7, 1024);
    CSB_Write(device, 8, 384);
    CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
    CSB_Write(device, 10, (64948224 + ((for_k * 16) * 64)));
    CSB_Write(device, 11, 76188160);
    CSB_Write(device, 12, 16896);
    CSB_Write(device, 13, (81725440 + ((for_k * 16) * 64)));
    CSB_Write(device, 14, 13);
    CSB_Write(device, 15, 28);
    CSB_Write(device, 16, 2);
    CSB_Write(device, 17, 0);
    CSB_Write(device, 18, 0);
    CSB_Write(device, 19, 0);
    CSB_Write(device, 20, 0);
    CSB_Write(device, 21, 1);
    CSB_Write(device, 22, 1);
    CSB_Write(device, 23, 1);
    CSB_Write(device, 24, 1);
    CSB_Write(device, 25, 0);
    CSB_Write(device, 26, 5051392);
    CSB_Write(device, 27, (406259712 + ((for_k * 16) * 64)));
    CSB_Write(device, 28, 0);
    CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("start: step359!\n");
#endif
    while(CSB_Read(device, 1) != 1) {}
  }
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step360 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  for (int for_k = 0; for_k < (kvcache ? 1 : ((((token - last_token) + 16) - 1) / 16)); for_k++) {
    CSB_Write(device, 2, 13696);
    CSB_Write(device, 3, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 4, 1);
    CSB_Write(device, 5, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 6, 1);
    CSB_Write(device, 7, 288);
    CSB_Write(device, 8, 64);
    CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
    CSB_Write(device, 10, (81725440 + ((for_k * 16) * 64)));
    CSB_Write(device, 11, 77996032);
    CSB_Write(device, 12, 56576);
    CSB_Write(device, 13, (64948224 + ((for_k * 16) * 64)));
    CSB_Write(device, 14, 14);
    CSB_Write(device, 15, 28);
    CSB_Write(device, 16, 0);
    CSB_Write(device, 17, 0);
    CSB_Write(device, 18, 0);
    CSB_Write(device, 19, 0);
    CSB_Write(device, 20, 0);
    CSB_Write(device, 21, 1);
    CSB_Write(device, 22, 1);
    CSB_Write(device, 23, 1);
    CSB_Write(device, 24, 1);
    CSB_Write(device, 25, 0);
    CSB_Write(device, 26, 5160960);
    CSB_Write(device, 27, (137824256 + ((for_k * 16) * 64)));
    CSB_Write(device, 28, 0);
    CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("start: step360!\n");
#endif
    while(CSB_Read(device, 1) != 1) {}
  }
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step361 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 5177344);
  CSB_Write(device, 195, 64948224);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 81725440);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_STEP
printf("start: step361!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step362 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  for (int for_k = 0; for_k < (kvcache ? 1 : ((((token - last_token) + 16) - 1) / 16)); for_k++) {
    CSB_Write(device, 2, 4096);
    CSB_Write(device, 3, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 4, 1);
    CSB_Write(device, 5, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 6, 1);
    CSB_Write(device, 7, 1024);
    CSB_Write(device, 8, 1024);
    CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
    CSB_Write(device, 10, (81725440 + ((for_k * 16) * 64)));
    CSB_Write(device, 11, 78901248);
    CSB_Write(device, 12, 16896);
    CSB_Write(device, 13, (137824256 + ((for_k * 16) * 64)));
    CSB_Write(device, 14, 3);
    CSB_Write(device, 15, 28);
    CSB_Write(device, 16, 0);
    CSB_Write(device, 17, 0);
    CSB_Write(device, 18, 0);
    CSB_Write(device, 19, 0);
    CSB_Write(device, 20, 0);
    CSB_Write(device, 21, 1);
    CSB_Write(device, 22, 1);
    CSB_Write(device, 23, 1);
    CSB_Write(device, 24, 1);
    CSB_Write(device, 25, 0);
    CSB_Write(device, 26, 5193728);
    CSB_Write(device, 27, 0);
    CSB_Write(device, 28, 0);
    CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("start: step362!\n");
#endif
    while(CSB_Read(device, 1) != 1) {}
  }
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step363 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.pos_emb accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (kvcache ? (0 + ((token - 1) * 64)) : (0 + (last_token * 64))));
  CSB_Write(device, 195, 137824256);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 406259712);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 203, last_token);
  CSB_Write(device, 204, 32);
  CSB_Write(device, 205, 262144);
  CSB_Write(device, 206, 131072);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
#ifdef PRINT_STEP
printf("start: step363!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step364 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  for (int for_k = 0; for_k < (kvcache ? 1 : ((((token - last_token) + 16) - 1) / 16)); for_k++) {
    CSB_Write(device, 2, 4096);
    CSB_Write(device, 3, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 4, 1);
    CSB_Write(device, 5, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 6, 1);
    CSB_Write(device, 7, 256);
    CSB_Write(device, 8, 256);
    CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
    CSB_Write(device, 10, (81725440 + ((for_k * 16) * 64)));
    CSB_Write(device, 11, 79171584);
    CSB_Write(device, 12, 16896);
    CSB_Write(device, 13, (137824256 + ((for_k * 16) * 64)));
    CSB_Write(device, 14, 0);
    CSB_Write(device, 15, 28);
    CSB_Write(device, 16, 0);
    CSB_Write(device, 17, 0);
    CSB_Write(device, 18, 0);
    CSB_Write(device, 19, 0);
    CSB_Write(device, 20, 0);
    CSB_Write(device, 21, 1);
    CSB_Write(device, 22, 1);
    CSB_Write(device, 23, 1);
    CSB_Write(device, 24, 1);
    CSB_Write(device, 25, 0);
    CSB_Write(device, 26, 5210112);
    CSB_Write(device, 27, 0);
    CSB_Write(device, 28, 0);
    CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("start: step364!\n");
#endif
    while(CSB_Read(device, 1) != 1) {}
  }
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step365 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.pos_emb accel operator node, storage data in cache48 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (kvcache ? (0 + ((token - 1) * 64)) : (0 + (last_token * 64))));
  CSB_Write(device, 195, 137824256);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, (kvcache ? (56559616 + ((token - 1) * 64)) : (56559616 + (last_token * 64))));
  CSB_Write(device, 199, 524288);
  CSB_Write(device, 200, 131072);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 203, last_token);
  CSB_Write(device, 204, 2);
  CSB_Write(device, 205, 262144);
  CSB_Write(device, 206, 131072);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
#ifdef PRINT_STEP
printf("start: step365!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step366 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_afterTRP accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 56559616);
  CSB_Write(device, 195, 406259712);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 137824256);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 524288);
  CSB_Write(device, 202, 131072);
  CSB_Write(device, 203, 4);
  CSB_Write(device, 204, token);
  CSB_Write(device, 205, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 206, 11688);
  CSB_Write(device, 207, 991234);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 2);
#ifdef PRINT_STEP
printf("start: step366!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterTRP run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step367 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.softmax accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (1 - kvcache));
  CSB_Write(device, 195, 137824256);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 406259712);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, (((token + 32) - 1) / 32));
  CSB_Write(device, 202, 32);
  CSB_Write(device, 203, token);
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, (token - last_token));
  CSB_Write(device, 206, last_token);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 8);
#ifdef PRINT_STEP
printf("start: step367!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.softmax run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step368 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in cache49 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  for (int for_k = 0; for_k < (kvcache ? 1 : ((((token - last_token) + 16) - 1) / 16)); for_k++) {
    CSB_Write(device, 2, 4096);
    CSB_Write(device, 3, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 4, 1);
    CSB_Write(device, 5, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 6, 1);
    CSB_Write(device, 7, 256);
    CSB_Write(device, 8, 256);
    CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
    CSB_Write(device, 10, (81725440 + ((for_k * 16) * 64)));
    CSB_Write(device, 11, 79188480);
    CSB_Write(device, 12, 16896);
    CSB_Write(device, 13, ((kvcache ? (57608192 + ((token - 1) * 64)) : (57608192 + (last_token * 64))) + ((for_k * 16) * 64)));
    CSB_Write(device, 14, 0);
    CSB_Write(device, 15, 28);
    CSB_Write(device, 16, 0);
    CSB_Write(device, 17, 0);
    CSB_Write(device, 18, 0);
    CSB_Write(device, 19, 0);
    CSB_Write(device, 20, 0);
    CSB_Write(device, 21, 1);
    CSB_Write(device, 22, 1);
    CSB_Write(device, 23, 1);
    CSB_Write(device, 24, 1);
    CSB_Write(device, 25, 0);
    CSB_Write(device, 26, 5211136);
    CSB_Write(device, 27, 0);
    CSB_Write(device, 28, 0);
    CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 31, 131072);
    CSB_Write(device, 32, 131072);
    CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("start: step368!\n");
#endif
    while(CSB_Read(device, 1) != 1) {}
  }
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step369 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_afterF2W accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 57608192);
  CSB_Write(device, 195, 406259712);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 81725440);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 524288);
  CSB_Write(device, 202, 131072);
  CSB_Write(device, 203, (((token + 32) - 1) / 32));
  CSB_Write(device, 204, token);
  CSB_Write(device, 205, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 206, 4);
  CSB_Write(device, 207, 991234);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 1);
#ifdef PRINT_STEP
printf("start: step369!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterF2W run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step370 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  for (int for_k = 0; for_k < (kvcache ? 1 : ((((token - last_token) + 16) - 1) / 16)); for_k++) {
    CSB_Write(device, 2, 4096);
    CSB_Write(device, 3, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 4, 1);
    CSB_Write(device, 5, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 6, 1);
    CSB_Write(device, 7, 1024);
    CSB_Write(device, 8, 1024);
    CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
    CSB_Write(device, 10, (81725440 + ((for_k * 16) * 64)));
    CSB_Write(device, 11, 79205376);
    CSB_Write(device, 12, 16896);
    CSB_Write(device, 13, (406259712 + ((for_k * 16) * 64)));
    CSB_Write(device, 14, 3);
    CSB_Write(device, 15, 28);
    CSB_Write(device, 16, 0);
    CSB_Write(device, 17, 0);
    CSB_Write(device, 18, 0);
    CSB_Write(device, 19, 0);
    CSB_Write(device, 20, 0);
    CSB_Write(device, 21, 1);
    CSB_Write(device, 22, 1);
    CSB_Write(device, 23, 1);
    CSB_Write(device, 24, 1);
    CSB_Write(device, 25, 0);
    CSB_Write(device, 26, 5212160);
    CSB_Write(device, 27, (64948224 + ((for_k * 16) * 64)));
    CSB_Write(device, 28, 0);
    CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("start: step370!\n");
#endif
    while(CSB_Read(device, 1) != 1) {}
  }
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step371 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 5228544);
  CSB_Write(device, 195, 406259712);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 64948224);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_STEP
printf("start: step371!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step372 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  for (int for_k = 0; for_k < (kvcache ? 1 : ((((token - last_token) + 16) - 1) / 16)); for_k++) {
    CSB_Write(device, 2, 4096);
    CSB_Write(device, 3, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 4, 1);
    CSB_Write(device, 5, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 6, 1);
    CSB_Write(device, 7, 1024);
    CSB_Write(device, 8, 384);
    CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
    CSB_Write(device, 10, (64948224 + ((for_k * 16) * 64)));
    CSB_Write(device, 11, 80379648);
    CSB_Write(device, 12, 16896);
    CSB_Write(device, 13, (81725440 + ((for_k * 16) * 64)));
    CSB_Write(device, 14, 13);
    CSB_Write(device, 15, 28);
    CSB_Write(device, 16, 0);
    CSB_Write(device, 17, 0);
    CSB_Write(device, 18, 0);
    CSB_Write(device, 19, 0);
    CSB_Write(device, 20, 0);
    CSB_Write(device, 21, 1);
    CSB_Write(device, 22, 1);
    CSB_Write(device, 23, 1);
    CSB_Write(device, 24, 1);
    CSB_Write(device, 25, 0);
    CSB_Write(device, 26, 5299712);
    CSB_Write(device, 27, 0);
    CSB_Write(device, 28, 0);
    CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("start: step372!\n");
#endif
    while(CSB_Read(device, 1) != 1) {}
  }
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step373 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.activate accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 524288);
  CSB_Write(device, 195, 81725440);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 137824256);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 428);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 428);
  CSB_Write(device, 206, 13696);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 16);
#ifdef PRINT_STEP
printf("start: step373!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.activate run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step374 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  for (int for_k = 0; for_k < (kvcache ? 1 : ((((token - last_token) + 16) - 1) / 16)); for_k++) {
    CSB_Write(device, 2, 4096);
    CSB_Write(device, 3, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 4, 1);
    CSB_Write(device, 5, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 6, 1);
    CSB_Write(device, 7, 1024);
    CSB_Write(device, 8, 384);
    CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
    CSB_Write(device, 10, (64948224 + ((for_k * 16) * 64)));
    CSB_Write(device, 11, 79475712);
    CSB_Write(device, 12, 16896);
    CSB_Write(device, 13, (81725440 + ((for_k * 16) * 64)));
    CSB_Write(device, 14, 13);
    CSB_Write(device, 15, 28);
    CSB_Write(device, 16, 2);
    CSB_Write(device, 17, 0);
    CSB_Write(device, 18, 0);
    CSB_Write(device, 19, 0);
    CSB_Write(device, 20, 0);
    CSB_Write(device, 21, 1);
    CSB_Write(device, 22, 1);
    CSB_Write(device, 23, 1);
    CSB_Write(device, 24, 1);
    CSB_Write(device, 25, 0);
    CSB_Write(device, 26, 5244928);
    CSB_Write(device, 27, (137824256 + ((for_k * 16) * 64)));
    CSB_Write(device, 28, 0);
    CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("start: step374!\n");
#endif
    while(CSB_Read(device, 1) != 1) {}
  }
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step375 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  for (int for_k = 0; for_k < (kvcache ? 1 : ((((token - last_token) + 16) - 1) / 16)); for_k++) {
    CSB_Write(device, 2, 13696);
    CSB_Write(device, 3, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 4, 1);
    CSB_Write(device, 5, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 6, 1);
    CSB_Write(device, 7, 288);
    CSB_Write(device, 8, 64);
    CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
    CSB_Write(device, 10, (81725440 + ((for_k * 16) * 64)));
    CSB_Write(device, 11, 81283584);
    CSB_Write(device, 12, 56576);
    CSB_Write(device, 13, (64948224 + ((for_k * 16) * 64)));
    CSB_Write(device, 14, 14);
    CSB_Write(device, 15, 28);
    CSB_Write(device, 16, 0);
    CSB_Write(device, 17, 0);
    CSB_Write(device, 18, 0);
    CSB_Write(device, 19, 0);
    CSB_Write(device, 20, 0);
    CSB_Write(device, 21, 1);
    CSB_Write(device, 22, 1);
    CSB_Write(device, 23, 1);
    CSB_Write(device, 24, 1);
    CSB_Write(device, 25, 0);
    CSB_Write(device, 26, 5354496);
    CSB_Write(device, 27, (406259712 + ((for_k * 16) * 64)));
    CSB_Write(device, 28, 0);
    CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("start: step375!\n");
#endif
    while(CSB_Read(device, 1) != 1) {}
  }
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step376 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 5370880);
  CSB_Write(device, 195, 64948224);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 81725440);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_STEP
printf("start: step376!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step377 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  for (int for_k = 0; for_k < (kvcache ? 1 : ((((token - last_token) + 16) - 1) / 16)); for_k++) {
    CSB_Write(device, 2, 4096);
    CSB_Write(device, 3, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 4, 1);
    CSB_Write(device, 5, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 6, 1);
    CSB_Write(device, 7, 1024);
    CSB_Write(device, 8, 1024);
    CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
    CSB_Write(device, 10, (81725440 + ((for_k * 16) * 64)));
    CSB_Write(device, 11, 82188800);
    CSB_Write(device, 12, 16896);
    CSB_Write(device, 13, (406259712 + ((for_k * 16) * 64)));
    CSB_Write(device, 14, 3);
    CSB_Write(device, 15, 28);
    CSB_Write(device, 16, 0);
    CSB_Write(device, 17, 0);
    CSB_Write(device, 18, 0);
    CSB_Write(device, 19, 0);
    CSB_Write(device, 20, 0);
    CSB_Write(device, 21, 1);
    CSB_Write(device, 22, 1);
    CSB_Write(device, 23, 1);
    CSB_Write(device, 24, 1);
    CSB_Write(device, 25, 0);
    CSB_Write(device, 26, 5387264);
    CSB_Write(device, 27, 0);
    CSB_Write(device, 28, 0);
    CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("start: step377!\n");
#endif
    while(CSB_Read(device, 1) != 1) {}
  }
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step378 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.pos_emb accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (kvcache ? (0 + ((token - 1) * 64)) : (0 + (last_token * 64))));
  CSB_Write(device, 195, 406259712);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 137824256);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 203, last_token);
  CSB_Write(device, 204, 32);
  CSB_Write(device, 205, 262144);
  CSB_Write(device, 206, 131072);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
#ifdef PRINT_STEP
printf("start: step378!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step379 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  for (int for_k = 0; for_k < (kvcache ? 1 : ((((token - last_token) + 16) - 1) / 16)); for_k++) {
    CSB_Write(device, 2, 4096);
    CSB_Write(device, 3, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 4, 1);
    CSB_Write(device, 5, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 6, 1);
    CSB_Write(device, 7, 256);
    CSB_Write(device, 8, 256);
    CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
    CSB_Write(device, 10, (81725440 + ((for_k * 16) * 64)));
    CSB_Write(device, 11, 82459136);
    CSB_Write(device, 12, 16896);
    CSB_Write(device, 13, (406259712 + ((for_k * 16) * 64)));
    CSB_Write(device, 14, 0);
    CSB_Write(device, 15, 28);
    CSB_Write(device, 16, 0);
    CSB_Write(device, 17, 0);
    CSB_Write(device, 18, 0);
    CSB_Write(device, 19, 0);
    CSB_Write(device, 20, 0);
    CSB_Write(device, 21, 1);
    CSB_Write(device, 22, 1);
    CSB_Write(device, 23, 1);
    CSB_Write(device, 24, 1);
    CSB_Write(device, 25, 0);
    CSB_Write(device, 26, 5403648);
    CSB_Write(device, 27, 0);
    CSB_Write(device, 28, 0);
    CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("start: step379!\n");
#endif
    while(CSB_Read(device, 1) != 1) {}
  }
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step380 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.pos_emb accel operator node, storage data in cache50 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (kvcache ? (0 + ((token - 1) * 64)) : (0 + (last_token * 64))));
  CSB_Write(device, 195, 406259712);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, (kvcache ? (58656768 + ((token - 1) * 64)) : (58656768 + (last_token * 64))));
  CSB_Write(device, 199, 524288);
  CSB_Write(device, 200, 131072);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 203, last_token);
  CSB_Write(device, 204, 2);
  CSB_Write(device, 205, 262144);
  CSB_Write(device, 206, 131072);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
#ifdef PRINT_STEP
printf("start: step380!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step381 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_afterTRP accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 58656768);
  CSB_Write(device, 195, 137824256);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 406259712);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 524288);
  CSB_Write(device, 202, 131072);
  CSB_Write(device, 203, 4);
  CSB_Write(device, 204, token);
  CSB_Write(device, 205, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 206, 11688);
  CSB_Write(device, 207, 991234);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 2);
#ifdef PRINT_STEP
printf("start: step381!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterTRP run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step382 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.softmax accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (1 - kvcache));
  CSB_Write(device, 195, 406259712);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 137824256);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, (((token + 32) - 1) / 32));
  CSB_Write(device, 202, 32);
  CSB_Write(device, 203, token);
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, (token - last_token));
  CSB_Write(device, 206, last_token);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 8);
#ifdef PRINT_STEP
printf("start: step382!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.softmax run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step383 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in cache51 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  for (int for_k = 0; for_k < (kvcache ? 1 : ((((token - last_token) + 16) - 1) / 16)); for_k++) {
    CSB_Write(device, 2, 4096);
    CSB_Write(device, 3, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 4, 1);
    CSB_Write(device, 5, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 6, 1);
    CSB_Write(device, 7, 256);
    CSB_Write(device, 8, 256);
    CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
    CSB_Write(device, 10, (81725440 + ((for_k * 16) * 64)));
    CSB_Write(device, 11, 82476032);
    CSB_Write(device, 12, 16896);
    CSB_Write(device, 13, ((kvcache ? (59705344 + ((token - 1) * 64)) : (59705344 + (last_token * 64))) + ((for_k * 16) * 64)));
    CSB_Write(device, 14, 0);
    CSB_Write(device, 15, 28);
    CSB_Write(device, 16, 0);
    CSB_Write(device, 17, 0);
    CSB_Write(device, 18, 0);
    CSB_Write(device, 19, 0);
    CSB_Write(device, 20, 0);
    CSB_Write(device, 21, 1);
    CSB_Write(device, 22, 1);
    CSB_Write(device, 23, 1);
    CSB_Write(device, 24, 1);
    CSB_Write(device, 25, 0);
    CSB_Write(device, 26, 5404672);
    CSB_Write(device, 27, 0);
    CSB_Write(device, 28, 0);
    CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 31, 131072);
    CSB_Write(device, 32, 131072);
    CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("start: step383!\n");
#endif
    while(CSB_Read(device, 1) != 1) {}
  }
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step384 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_afterF2W accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 59705344);
  CSB_Write(device, 195, 137824256);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 81725440);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 524288);
  CSB_Write(device, 202, 131072);
  CSB_Write(device, 203, (((token + 32) - 1) / 32));
  CSB_Write(device, 204, token);
  CSB_Write(device, 205, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 206, 4);
  CSB_Write(device, 207, 991234);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 1);
#ifdef PRINT_STEP
printf("start: step384!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterF2W run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step385 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  for (int for_k = 0; for_k < (kvcache ? 1 : ((((token - last_token) + 16) - 1) / 16)); for_k++) {
    CSB_Write(device, 2, 4096);
    CSB_Write(device, 3, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 4, 1);
    CSB_Write(device, 5, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 6, 1);
    CSB_Write(device, 7, 1024);
    CSB_Write(device, 8, 1024);
    CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
    CSB_Write(device, 10, (81725440 + ((for_k * 16) * 64)));
    CSB_Write(device, 11, 82492928);
    CSB_Write(device, 12, 16896);
    CSB_Write(device, 13, (137824256 + ((for_k * 16) * 64)));
    CSB_Write(device, 14, 3);
    CSB_Write(device, 15, 28);
    CSB_Write(device, 16, 0);
    CSB_Write(device, 17, 0);
    CSB_Write(device, 18, 0);
    CSB_Write(device, 19, 0);
    CSB_Write(device, 20, 0);
    CSB_Write(device, 21, 1);
    CSB_Write(device, 22, 1);
    CSB_Write(device, 23, 1);
    CSB_Write(device, 24, 1);
    CSB_Write(device, 25, 0);
    CSB_Write(device, 26, 5405696);
    CSB_Write(device, 27, (64948224 + ((for_k * 16) * 64)));
    CSB_Write(device, 28, 0);
    CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("start: step385!\n");
#endif
    while(CSB_Read(device, 1) != 1) {}
  }
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step386 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 5422080);
  CSB_Write(device, 195, 137824256);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 64948224);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_STEP
printf("start: step386!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step387 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  for (int for_k = 0; for_k < (kvcache ? 1 : ((((token - last_token) + 16) - 1) / 16)); for_k++) {
    CSB_Write(device, 2, 4096);
    CSB_Write(device, 3, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 4, 1);
    CSB_Write(device, 5, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 6, 1);
    CSB_Write(device, 7, 1024);
    CSB_Write(device, 8, 384);
    CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
    CSB_Write(device, 10, (64948224 + ((for_k * 16) * 64)));
    CSB_Write(device, 11, 83667200);
    CSB_Write(device, 12, 16896);
    CSB_Write(device, 13, (81725440 + ((for_k * 16) * 64)));
    CSB_Write(device, 14, 13);
    CSB_Write(device, 15, 28);
    CSB_Write(device, 16, 0);
    CSB_Write(device, 17, 0);
    CSB_Write(device, 18, 0);
    CSB_Write(device, 19, 0);
    CSB_Write(device, 20, 0);
    CSB_Write(device, 21, 1);
    CSB_Write(device, 22, 1);
    CSB_Write(device, 23, 1);
    CSB_Write(device, 24, 1);
    CSB_Write(device, 25, 0);
    CSB_Write(device, 26, 5493248);
    CSB_Write(device, 27, 0);
    CSB_Write(device, 28, 0);
    CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("start: step387!\n");
#endif
    while(CSB_Read(device, 1) != 1) {}
  }
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step388 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.activate accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 524288);
  CSB_Write(device, 195, 81725440);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 406259712);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 428);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 428);
  CSB_Write(device, 206, 13696);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 16);
#ifdef PRINT_STEP
printf("start: step388!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.activate run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step389 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  for (int for_k = 0; for_k < (kvcache ? 1 : ((((token - last_token) + 16) - 1) / 16)); for_k++) {
    CSB_Write(device, 2, 4096);
    CSB_Write(device, 3, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 4, 1);
    CSB_Write(device, 5, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 6, 1);
    CSB_Write(device, 7, 1024);
    CSB_Write(device, 8, 384);
    CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
    CSB_Write(device, 10, (64948224 + ((for_k * 16) * 64)));
    CSB_Write(device, 11, 82763264);
    CSB_Write(device, 12, 16896);
    CSB_Write(device, 13, (81725440 + ((for_k * 16) * 64)));
    CSB_Write(device, 14, 13);
    CSB_Write(device, 15, 28);
    CSB_Write(device, 16, 2);
    CSB_Write(device, 17, 0);
    CSB_Write(device, 18, 0);
    CSB_Write(device, 19, 0);
    CSB_Write(device, 20, 0);
    CSB_Write(device, 21, 1);
    CSB_Write(device, 22, 1);
    CSB_Write(device, 23, 1);
    CSB_Write(device, 24, 1);
    CSB_Write(device, 25, 0);
    CSB_Write(device, 26, 5438464);
    CSB_Write(device, 27, (406259712 + ((for_k * 16) * 64)));
    CSB_Write(device, 28, 0);
    CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("start: step389!\n");
#endif
    while(CSB_Read(device, 1) != 1) {}
  }
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step390 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  for (int for_k = 0; for_k < (kvcache ? 1 : ((((token - last_token) + 16) - 1) / 16)); for_k++) {
    CSB_Write(device, 2, 13696);
    CSB_Write(device, 3, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 4, 1);
    CSB_Write(device, 5, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 6, 1);
    CSB_Write(device, 7, 288);
    CSB_Write(device, 8, 64);
    CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
    CSB_Write(device, 10, (81725440 + ((for_k * 16) * 64)));
    CSB_Write(device, 11, 84571136);
    CSB_Write(device, 12, 56576);
    CSB_Write(device, 13, (64948224 + ((for_k * 16) * 64)));
    CSB_Write(device, 14, 14);
    CSB_Write(device, 15, 28);
    CSB_Write(device, 16, 0);
    CSB_Write(device, 17, 0);
    CSB_Write(device, 18, 0);
    CSB_Write(device, 19, 0);
    CSB_Write(device, 20, 0);
    CSB_Write(device, 21, 1);
    CSB_Write(device, 22, 1);
    CSB_Write(device, 23, 1);
    CSB_Write(device, 24, 1);
    CSB_Write(device, 25, 0);
    CSB_Write(device, 26, 5548032);
    CSB_Write(device, 27, (137824256 + ((for_k * 16) * 64)));
    CSB_Write(device, 28, 0);
    CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("start: step390!\n");
#endif
    while(CSB_Read(device, 1) != 1) {}
  }
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step391 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 5564416);
  CSB_Write(device, 195, 64948224);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 81725440);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_STEP
printf("start: step391!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step392 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  for (int for_k = 0; for_k < (kvcache ? 1 : ((((token - last_token) + 16) - 1) / 16)); for_k++) {
    CSB_Write(device, 2, 4096);
    CSB_Write(device, 3, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 4, 1);
    CSB_Write(device, 5, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 6, 1);
    CSB_Write(device, 7, 1024);
    CSB_Write(device, 8, 1024);
    CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
    CSB_Write(device, 10, (81725440 + ((for_k * 16) * 64)));
    CSB_Write(device, 11, 85476352);
    CSB_Write(device, 12, 16896);
    CSB_Write(device, 13, (137824256 + ((for_k * 16) * 64)));
    CSB_Write(device, 14, 3);
    CSB_Write(device, 15, 28);
    CSB_Write(device, 16, 0);
    CSB_Write(device, 17, 0);
    CSB_Write(device, 18, 0);
    CSB_Write(device, 19, 0);
    CSB_Write(device, 20, 0);
    CSB_Write(device, 21, 1);
    CSB_Write(device, 22, 1);
    CSB_Write(device, 23, 1);
    CSB_Write(device, 24, 1);
    CSB_Write(device, 25, 0);
    CSB_Write(device, 26, 5580800);
    CSB_Write(device, 27, 0);
    CSB_Write(device, 28, 0);
    CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("start: step392!\n");
#endif
    while(CSB_Read(device, 1) != 1) {}
  }
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step393 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.pos_emb accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (kvcache ? (0 + ((token - 1) * 64)) : (0 + (last_token * 64))));
  CSB_Write(device, 195, 137824256);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 406259712);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 203, last_token);
  CSB_Write(device, 204, 32);
  CSB_Write(device, 205, 262144);
  CSB_Write(device, 206, 131072);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
#ifdef PRINT_STEP
printf("start: step393!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step394 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  for (int for_k = 0; for_k < (kvcache ? 1 : ((((token - last_token) + 16) - 1) / 16)); for_k++) {
    CSB_Write(device, 2, 4096);
    CSB_Write(device, 3, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 4, 1);
    CSB_Write(device, 5, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 6, 1);
    CSB_Write(device, 7, 256);
    CSB_Write(device, 8, 256);
    CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
    CSB_Write(device, 10, (81725440 + ((for_k * 16) * 64)));
    CSB_Write(device, 11, 85746688);
    CSB_Write(device, 12, 16896);
    CSB_Write(device, 13, (137824256 + ((for_k * 16) * 64)));
    CSB_Write(device, 14, 0);
    CSB_Write(device, 15, 28);
    CSB_Write(device, 16, 0);
    CSB_Write(device, 17, 0);
    CSB_Write(device, 18, 0);
    CSB_Write(device, 19, 0);
    CSB_Write(device, 20, 0);
    CSB_Write(device, 21, 1);
    CSB_Write(device, 22, 1);
    CSB_Write(device, 23, 1);
    CSB_Write(device, 24, 1);
    CSB_Write(device, 25, 0);
    CSB_Write(device, 26, 5597184);
    CSB_Write(device, 27, 0);
    CSB_Write(device, 28, 0);
    CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("start: step394!\n");
#endif
    while(CSB_Read(device, 1) != 1) {}
  }
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step395 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.pos_emb accel operator node, storage data in cache52 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (kvcache ? (0 + ((token - 1) * 64)) : (0 + (last_token * 64))));
  CSB_Write(device, 195, 137824256);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, (kvcache ? (60753920 + ((token - 1) * 64)) : (60753920 + (last_token * 64))));
  CSB_Write(device, 199, 524288);
  CSB_Write(device, 200, 131072);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 203, last_token);
  CSB_Write(device, 204, 2);
  CSB_Write(device, 205, 262144);
  CSB_Write(device, 206, 131072);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
#ifdef PRINT_STEP
printf("start: step395!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step396 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_afterTRP accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 60753920);
  CSB_Write(device, 195, 406259712);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 137824256);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 524288);
  CSB_Write(device, 202, 131072);
  CSB_Write(device, 203, 4);
  CSB_Write(device, 204, token);
  CSB_Write(device, 205, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 206, 11688);
  CSB_Write(device, 207, 991234);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 2);
#ifdef PRINT_STEP
printf("start: step396!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterTRP run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step397 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.softmax accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (1 - kvcache));
  CSB_Write(device, 195, 137824256);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 406259712);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, (((token + 32) - 1) / 32));
  CSB_Write(device, 202, 32);
  CSB_Write(device, 203, token);
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, (token - last_token));
  CSB_Write(device, 206, last_token);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 8);
#ifdef PRINT_STEP
printf("start: step397!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.softmax run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step398 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in cache53 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  for (int for_k = 0; for_k < (kvcache ? 1 : ((((token - last_token) + 16) - 1) / 16)); for_k++) {
    CSB_Write(device, 2, 4096);
    CSB_Write(device, 3, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 4, 1);
    CSB_Write(device, 5, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 6, 1);
    CSB_Write(device, 7, 256);
    CSB_Write(device, 8, 256);
    CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
    CSB_Write(device, 10, (81725440 + ((for_k * 16) * 64)));
    CSB_Write(device, 11, 85763584);
    CSB_Write(device, 12, 16896);
    CSB_Write(device, 13, ((kvcache ? (61802496 + ((token - 1) * 64)) : (61802496 + (last_token * 64))) + ((for_k * 16) * 64)));
    CSB_Write(device, 14, 0);
    CSB_Write(device, 15, 28);
    CSB_Write(device, 16, 0);
    CSB_Write(device, 17, 0);
    CSB_Write(device, 18, 0);
    CSB_Write(device, 19, 0);
    CSB_Write(device, 20, 0);
    CSB_Write(device, 21, 1);
    CSB_Write(device, 22, 1);
    CSB_Write(device, 23, 1);
    CSB_Write(device, 24, 1);
    CSB_Write(device, 25, 0);
    CSB_Write(device, 26, 5598208);
    CSB_Write(device, 27, 0);
    CSB_Write(device, 28, 0);
    CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 31, 131072);
    CSB_Write(device, 32, 131072);
    CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("start: step398!\n");
#endif
    while(CSB_Read(device, 1) != 1) {}
  }
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step399 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_afterF2W accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 61802496);
  CSB_Write(device, 195, 406259712);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 81725440);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 524288);
  CSB_Write(device, 202, 131072);
  CSB_Write(device, 203, (((token + 32) - 1) / 32));
  CSB_Write(device, 204, token);
  CSB_Write(device, 205, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 206, 4);
  CSB_Write(device, 207, 991234);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 1);
#ifdef PRINT_STEP
printf("start: step399!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterF2W run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step400 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  for (int for_k = 0; for_k < (kvcache ? 1 : ((((token - last_token) + 16) - 1) / 16)); for_k++) {
    CSB_Write(device, 2, 4096);
    CSB_Write(device, 3, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 4, 1);
    CSB_Write(device, 5, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 6, 1);
    CSB_Write(device, 7, 1024);
    CSB_Write(device, 8, 1024);
    CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
    CSB_Write(device, 10, (81725440 + ((for_k * 16) * 64)));
    CSB_Write(device, 11, 85780480);
    CSB_Write(device, 12, 16896);
    CSB_Write(device, 13, (406259712 + ((for_k * 16) * 64)));
    CSB_Write(device, 14, 3);
    CSB_Write(device, 15, 28);
    CSB_Write(device, 16, 0);
    CSB_Write(device, 17, 0);
    CSB_Write(device, 18, 0);
    CSB_Write(device, 19, 0);
    CSB_Write(device, 20, 0);
    CSB_Write(device, 21, 1);
    CSB_Write(device, 22, 1);
    CSB_Write(device, 23, 1);
    CSB_Write(device, 24, 1);
    CSB_Write(device, 25, 0);
    CSB_Write(device, 26, 5599232);
    CSB_Write(device, 27, (64948224 + ((for_k * 16) * 64)));
    CSB_Write(device, 28, 0);
    CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("start: step400!\n");
#endif
    while(CSB_Read(device, 1) != 1) {}
  }
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step401 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 5615616);
  CSB_Write(device, 195, 406259712);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 64948224);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_STEP
printf("start: step401!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step402 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  for (int for_k = 0; for_k < (kvcache ? 1 : ((((token - last_token) + 16) - 1) / 16)); for_k++) {
    CSB_Write(device, 2, 4096);
    CSB_Write(device, 3, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 4, 1);
    CSB_Write(device, 5, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 6, 1);
    CSB_Write(device, 7, 1024);
    CSB_Write(device, 8, 384);
    CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
    CSB_Write(device, 10, (64948224 + ((for_k * 16) * 64)));
    CSB_Write(device, 11, 86954752);
    CSB_Write(device, 12, 16896);
    CSB_Write(device, 13, (81725440 + ((for_k * 16) * 64)));
    CSB_Write(device, 14, 13);
    CSB_Write(device, 15, 28);
    CSB_Write(device, 16, 0);
    CSB_Write(device, 17, 0);
    CSB_Write(device, 18, 0);
    CSB_Write(device, 19, 0);
    CSB_Write(device, 20, 0);
    CSB_Write(device, 21, 1);
    CSB_Write(device, 22, 1);
    CSB_Write(device, 23, 1);
    CSB_Write(device, 24, 1);
    CSB_Write(device, 25, 0);
    CSB_Write(device, 26, 5686784);
    CSB_Write(device, 27, 0);
    CSB_Write(device, 28, 0);
    CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("start: step402!\n");
#endif
    while(CSB_Read(device, 1) != 1) {}
  }
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step403 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.activate accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 524288);
  CSB_Write(device, 195, 81725440);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 137824256);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 428);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 428);
  CSB_Write(device, 206, 13696);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 16);
#ifdef PRINT_STEP
printf("start: step403!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.activate run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step404 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  for (int for_k = 0; for_k < (kvcache ? 1 : ((((token - last_token) + 16) - 1) / 16)); for_k++) {
    CSB_Write(device, 2, 4096);
    CSB_Write(device, 3, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 4, 1);
    CSB_Write(device, 5, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 6, 1);
    CSB_Write(device, 7, 1024);
    CSB_Write(device, 8, 384);
    CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
    CSB_Write(device, 10, (64948224 + ((for_k * 16) * 64)));
    CSB_Write(device, 11, 86050816);
    CSB_Write(device, 12, 16896);
    CSB_Write(device, 13, (81725440 + ((for_k * 16) * 64)));
    CSB_Write(device, 14, 13);
    CSB_Write(device, 15, 28);
    CSB_Write(device, 16, 2);
    CSB_Write(device, 17, 0);
    CSB_Write(device, 18, 0);
    CSB_Write(device, 19, 0);
    CSB_Write(device, 20, 0);
    CSB_Write(device, 21, 1);
    CSB_Write(device, 22, 1);
    CSB_Write(device, 23, 1);
    CSB_Write(device, 24, 1);
    CSB_Write(device, 25, 0);
    CSB_Write(device, 26, 5632000);
    CSB_Write(device, 27, (137824256 + ((for_k * 16) * 64)));
    CSB_Write(device, 28, 0);
    CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("start: step404!\n");
#endif
    while(CSB_Read(device, 1) != 1) {}
  }
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step405 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  for (int for_k = 0; for_k < (kvcache ? 1 : ((((token - last_token) + 16) - 1) / 16)); for_k++) {
    CSB_Write(device, 2, 13696);
    CSB_Write(device, 3, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 4, 1);
    CSB_Write(device, 5, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 6, 1);
    CSB_Write(device, 7, 288);
    CSB_Write(device, 8, 64);
    CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
    CSB_Write(device, 10, (81725440 + ((for_k * 16) * 64)));
    CSB_Write(device, 11, 87858688);
    CSB_Write(device, 12, 56576);
    CSB_Write(device, 13, (64948224 + ((for_k * 16) * 64)));
    CSB_Write(device, 14, 14);
    CSB_Write(device, 15, 28);
    CSB_Write(device, 16, 0);
    CSB_Write(device, 17, 0);
    CSB_Write(device, 18, 0);
    CSB_Write(device, 19, 0);
    CSB_Write(device, 20, 0);
    CSB_Write(device, 21, 1);
    CSB_Write(device, 22, 1);
    CSB_Write(device, 23, 1);
    CSB_Write(device, 24, 1);
    CSB_Write(device, 25, 0);
    CSB_Write(device, 26, 5741568);
    CSB_Write(device, 27, (406259712 + ((for_k * 16) * 64)));
    CSB_Write(device, 28, 0);
    CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("start: step405!\n");
#endif
    while(CSB_Read(device, 1) != 1) {}
  }
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step406 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 5757952);
  CSB_Write(device, 195, 64948224);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 81725440);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_STEP
printf("start: step406!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step407 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  for (int for_k = 0; for_k < (kvcache ? 1 : ((((token - last_token) + 16) - 1) / 16)); for_k++) {
    CSB_Write(device, 2, 4096);
    CSB_Write(device, 3, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 4, 1);
    CSB_Write(device, 5, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 6, 1);
    CSB_Write(device, 7, 1024);
    CSB_Write(device, 8, 1024);
    CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
    CSB_Write(device, 10, (81725440 + ((for_k * 16) * 64)));
    CSB_Write(device, 11, 88763904);
    CSB_Write(device, 12, 16896);
    CSB_Write(device, 13, (406259712 + ((for_k * 16) * 64)));
    CSB_Write(device, 14, 3);
    CSB_Write(device, 15, 28);
    CSB_Write(device, 16, 0);
    CSB_Write(device, 17, 0);
    CSB_Write(device, 18, 0);
    CSB_Write(device, 19, 0);
    CSB_Write(device, 20, 0);
    CSB_Write(device, 21, 1);
    CSB_Write(device, 22, 1);
    CSB_Write(device, 23, 1);
    CSB_Write(device, 24, 1);
    CSB_Write(device, 25, 0);
    CSB_Write(device, 26, 5774336);
    CSB_Write(device, 27, 0);
    CSB_Write(device, 28, 0);
    CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("start: step407!\n");
#endif
    while(CSB_Read(device, 1) != 1) {}
  }
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step408 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.pos_emb accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (kvcache ? (0 + ((token - 1) * 64)) : (0 + (last_token * 64))));
  CSB_Write(device, 195, 406259712);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 137824256);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 203, last_token);
  CSB_Write(device, 204, 32);
  CSB_Write(device, 205, 262144);
  CSB_Write(device, 206, 131072);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
#ifdef PRINT_STEP
printf("start: step408!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step409 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  for (int for_k = 0; for_k < (kvcache ? 1 : ((((token - last_token) + 16) - 1) / 16)); for_k++) {
    CSB_Write(device, 2, 4096);
    CSB_Write(device, 3, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 4, 1);
    CSB_Write(device, 5, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 6, 1);
    CSB_Write(device, 7, 256);
    CSB_Write(device, 8, 256);
    CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
    CSB_Write(device, 10, (81725440 + ((for_k * 16) * 64)));
    CSB_Write(device, 11, 89034240);
    CSB_Write(device, 12, 16896);
    CSB_Write(device, 13, (406259712 + ((for_k * 16) * 64)));
    CSB_Write(device, 14, 0);
    CSB_Write(device, 15, 28);
    CSB_Write(device, 16, 0);
    CSB_Write(device, 17, 0);
    CSB_Write(device, 18, 0);
    CSB_Write(device, 19, 0);
    CSB_Write(device, 20, 0);
    CSB_Write(device, 21, 1);
    CSB_Write(device, 22, 1);
    CSB_Write(device, 23, 1);
    CSB_Write(device, 24, 1);
    CSB_Write(device, 25, 0);
    CSB_Write(device, 26, 5790720);
    CSB_Write(device, 27, 0);
    CSB_Write(device, 28, 0);
    CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("start: step409!\n");
#endif
    while(CSB_Read(device, 1) != 1) {}
  }
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step410 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.pos_emb accel operator node, storage data in cache54 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (kvcache ? (0 + ((token - 1) * 64)) : (0 + (last_token * 64))));
  CSB_Write(device, 195, 406259712);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, (kvcache ? (62851072 + ((token - 1) * 64)) : (62851072 + (last_token * 64))));
  CSB_Write(device, 199, 524288);
  CSB_Write(device, 200, 131072);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 203, last_token);
  CSB_Write(device, 204, 2);
  CSB_Write(device, 205, 262144);
  CSB_Write(device, 206, 131072);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
#ifdef PRINT_STEP
printf("start: step410!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step411 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_afterTRP accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 62851072);
  CSB_Write(device, 195, 137824256);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 406259712);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 524288);
  CSB_Write(device, 202, 131072);
  CSB_Write(device, 203, 4);
  CSB_Write(device, 204, token);
  CSB_Write(device, 205, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 206, 11688);
  CSB_Write(device, 207, 991234);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 2);
#ifdef PRINT_STEP
printf("start: step411!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterTRP run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step412 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.softmax accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (1 - kvcache));
  CSB_Write(device, 195, 406259712);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 137824256);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, (((token + 32) - 1) / 32));
  CSB_Write(device, 202, 32);
  CSB_Write(device, 203, token);
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, (token - last_token));
  CSB_Write(device, 206, last_token);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 8);
#ifdef PRINT_STEP
printf("start: step412!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.softmax run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step413 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in cache55 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  for (int for_k = 0; for_k < (kvcache ? 1 : ((((token - last_token) + 16) - 1) / 16)); for_k++) {
    CSB_Write(device, 2, 4096);
    CSB_Write(device, 3, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 4, 1);
    CSB_Write(device, 5, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 6, 1);
    CSB_Write(device, 7, 256);
    CSB_Write(device, 8, 256);
    CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
    CSB_Write(device, 10, (81725440 + ((for_k * 16) * 64)));
    CSB_Write(device, 11, 89051136);
    CSB_Write(device, 12, 16896);
    CSB_Write(device, 13, ((kvcache ? (63899648 + ((token - 1) * 64)) : (63899648 + (last_token * 64))) + ((for_k * 16) * 64)));
    CSB_Write(device, 14, 0);
    CSB_Write(device, 15, 28);
    CSB_Write(device, 16, 0);
    CSB_Write(device, 17, 0);
    CSB_Write(device, 18, 0);
    CSB_Write(device, 19, 0);
    CSB_Write(device, 20, 0);
    CSB_Write(device, 21, 1);
    CSB_Write(device, 22, 1);
    CSB_Write(device, 23, 1);
    CSB_Write(device, 24, 1);
    CSB_Write(device, 25, 0);
    CSB_Write(device, 26, 5791744);
    CSB_Write(device, 27, 0);
    CSB_Write(device, 28, 0);
    CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 31, 131072);
    CSB_Write(device, 32, 131072);
    CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("start: step413!\n");
#endif
    while(CSB_Read(device, 1) != 1) {}
  }
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step414 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_afterF2W accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 63899648);
  CSB_Write(device, 195, 137824256);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 81725440);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 524288);
  CSB_Write(device, 202, 131072);
  CSB_Write(device, 203, (((token + 32) - 1) / 32));
  CSB_Write(device, 204, token);
  CSB_Write(device, 205, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 206, 4);
  CSB_Write(device, 207, 991234);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 1);
#ifdef PRINT_STEP
printf("start: step414!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterF2W run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step415 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  for (int for_k = 0; for_k < (kvcache ? 1 : ((((token - last_token) + 16) - 1) / 16)); for_k++) {
    CSB_Write(device, 2, 4096);
    CSB_Write(device, 3, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 4, 1);
    CSB_Write(device, 5, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 6, 1);
    CSB_Write(device, 7, 1024);
    CSB_Write(device, 8, 1024);
    CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
    CSB_Write(device, 10, (81725440 + ((for_k * 16) * 64)));
    CSB_Write(device, 11, 89068032);
    CSB_Write(device, 12, 16896);
    CSB_Write(device, 13, (137824256 + ((for_k * 16) * 64)));
    CSB_Write(device, 14, 3);
    CSB_Write(device, 15, 28);
    CSB_Write(device, 16, 0);
    CSB_Write(device, 17, 0);
    CSB_Write(device, 18, 0);
    CSB_Write(device, 19, 0);
    CSB_Write(device, 20, 0);
    CSB_Write(device, 21, 1);
    CSB_Write(device, 22, 1);
    CSB_Write(device, 23, 1);
    CSB_Write(device, 24, 1);
    CSB_Write(device, 25, 0);
    CSB_Write(device, 26, 5792768);
    CSB_Write(device, 27, (64948224 + ((for_k * 16) * 64)));
    CSB_Write(device, 28, 0);
    CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("start: step415!\n");
#endif
    while(CSB_Read(device, 1) != 1) {}
  }
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step416 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 5809152);
  CSB_Write(device, 195, 137824256);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 64948224);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_STEP
printf("start: step416!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step417 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  for (int for_k = 0; for_k < (kvcache ? 1 : ((((token - last_token) + 16) - 1) / 16)); for_k++) {
    CSB_Write(device, 2, 4096);
    CSB_Write(device, 3, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 4, 1);
    CSB_Write(device, 5, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 6, 1);
    CSB_Write(device, 7, 1024);
    CSB_Write(device, 8, 384);
    CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
    CSB_Write(device, 10, (64948224 + ((for_k * 16) * 64)));
    CSB_Write(device, 11, 90242304);
    CSB_Write(device, 12, 16896);
    CSB_Write(device, 13, (81725440 + ((for_k * 16) * 64)));
    CSB_Write(device, 14, 13);
    CSB_Write(device, 15, 28);
    CSB_Write(device, 16, 0);
    CSB_Write(device, 17, 0);
    CSB_Write(device, 18, 0);
    CSB_Write(device, 19, 0);
    CSB_Write(device, 20, 0);
    CSB_Write(device, 21, 1);
    CSB_Write(device, 22, 1);
    CSB_Write(device, 23, 1);
    CSB_Write(device, 24, 1);
    CSB_Write(device, 25, 0);
    CSB_Write(device, 26, 5880320);
    CSB_Write(device, 27, 0);
    CSB_Write(device, 28, 0);
    CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 33, 799);
#ifdef PRINT_STEP
printf("start: step417!\n");
#endif
    while(CSB_Read(device, 1) != 1) {}
  }
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step418 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.activate accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 524288);
  CSB_Write(device, 195, 81725440);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 406259712);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 428);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 428);
  CSB_Write(device, 206, 13696);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 16);
#ifdef PRINT_STEP
printf("start: step418!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.activate run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step419 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  for (int for_k = 0; for_k < (kvcache ? 1 : ((((token - last_token) + 16) - 1) / 16)); for_k++) {
    CSB_Write(device, 2, 4096);
    CSB_Write(device, 3, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 4, 1);
    CSB_Write(device, 5, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 6, 1);
    CSB_Write(device, 7, 1024);
    CSB_Write(device, 8, 384);
    CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
    CSB_Write(device, 10, (64948224 + ((for_k * 16) * 64)));
    CSB_Write(device, 11, 89338368);
    CSB_Write(device, 12, 16896);
    CSB_Write(device, 13, (81725440 + ((for_k * 16) * 64)));
    CSB_Write(device, 14, 13);
    CSB_Write(device, 15, 28);
    CSB_Write(device, 16, 2);
    CSB_Write(device, 17, 0);
    CSB_Write(device, 18, 0);
    CSB_Write(device, 19, 0);
    CSB_Write(device, 20, 0);
    CSB_Write(device, 21, 1);
    CSB_Write(device, 22, 1);
    CSB_Write(device, 23, 1);
    CSB_Write(device, 24, 1);
    CSB_Write(device, 25, 0);
    CSB_Write(device, 26, 5825536);
    CSB_Write(device, 27, (406259712 + ((for_k * 16) * 64)));
    CSB_Write(device, 28, 0);
    CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("start: step419!\n");
#endif
    while(CSB_Read(device, 1) != 1) {}
  }
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step420 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  for (int for_k = 0; for_k < (kvcache ? 1 : ((((token - last_token) + 16) - 1) / 16)); for_k++) {
    CSB_Write(device, 2, 13696);
    CSB_Write(device, 3, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 4, 1);
    CSB_Write(device, 5, (kvcache ? 1 : (((token - last_token) > 16) ? ((for_k < (((((token - last_token) + 16) - 1) / 16) - 1)) ? 16 : ((token - last_token) % 16)) : (token - last_token))));
    CSB_Write(device, 6, 1);
    CSB_Write(device, 7, 288);
    CSB_Write(device, 8, 64);
    CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
    CSB_Write(device, 10, (81725440 + ((for_k * 16) * 64)));
    CSB_Write(device, 11, 91146240);
    CSB_Write(device, 12, 56576);
    CSB_Write(device, 13, (64948224 + ((for_k * 16) * 64)));
    CSB_Write(device, 14, 14);
    CSB_Write(device, 15, 28);
    CSB_Write(device, 16, 0);
    CSB_Write(device, 17, 0);
    CSB_Write(device, 18, 0);
    CSB_Write(device, 19, 0);
    CSB_Write(device, 20, 0);
    CSB_Write(device, 21, 1);
    CSB_Write(device, 22, 1);
    CSB_Write(device, 23, 1);
    CSB_Write(device, 24, 1);
    CSB_Write(device, 25, 0);
    CSB_Write(device, 26, 5935104);
    CSB_Write(device, 27, (137824256 + ((for_k * 16) * 64)));
    CSB_Write(device, 28, 0);
    CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
    CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
    CSB_Write(device, 33, 1823);
#ifdef PRINT_STEP
printf("start: step420!\n");
#endif
    while(CSB_Read(device, 1) != 1) {}
  }
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step421 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 5951488);
  CSB_Write(device, 195, ((kvcache ? 0 : 1) ? (64948224 + (((token - last_token) - 1) * 64)) : 64948224));
  CSB_Write(device, 196, ((kvcache ? 0 : 1) ? ((64 * (token - last_token)) * 1) : 64));
  CSB_Write(device, 197, ((kvcache ? 0 : 1) ? (64 * (token - last_token)) : 64));
  CSB_Write(device, 198, 81725440);
  CSB_Write(device, 199, 64);
  CSB_Write(device, 200, 64);
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, 1);
  CSB_Write(device, 204, 1);
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_STEP
printf("start: step421!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void step422 (HANDLE& device) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 1);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 1);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 1024);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, 1);
  CSB_Write(device, 10, 81725440);
  CSB_Write(device, 11, 92051456);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 137824256);
  CSB_Write(device, 14, 63);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 64948224);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 5967872);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 64);
  CSB_Write(device, 30, 64);
  CSB_Write(device, 31, 64);
  CSB_Write(device, 32, 64);
  CSB_Write(device, 33, 2847);
#ifdef PRINT_STEP
printf("start: step422!\n");
#endif
  while(CSB_Read(device, 40) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}


void chatglm2_2048_0719_2217(HANDLE& device, int token, int kvcache, int last_token) {
  step1(device, kvcache, token, last_token);
  step2(device, kvcache, token, last_token);
  step3(device, kvcache, token, last_token);
  step4(device, kvcache, token, last_token);
  step5(device, kvcache, token, last_token);
  step6(device, kvcache, token, last_token);
  step7(device, kvcache, token, last_token);
  step8(device, kvcache, token, last_token);
  step9(device, kvcache, token, last_token);
  step10(device, kvcache, token, last_token);
  step11(device, kvcache, token, last_token);
  step12(device, kvcache, token, last_token);
  step13(device, kvcache, token, last_token);
  step14(device, kvcache, token, last_token);
  step15(device, kvcache, token, last_token);
  step16(device, kvcache, token, last_token);
  step17(device, kvcache, token, last_token);
  step18(device, kvcache, token, last_token);
  step19(device, kvcache, token, last_token);
  step20(device, kvcache, token, last_token);
  step21(device, kvcache, token, last_token);
  step22(device, kvcache, token, last_token);
  step23(device, kvcache, token, last_token);
  step24(device, kvcache, token, last_token);
  step25(device, kvcache, token, last_token);
  step26(device, kvcache, token, last_token);
  step27(device, kvcache, token, last_token);
  step28(device, kvcache, token, last_token);
  step29(device, kvcache, token, last_token);
  step30(device, kvcache, token, last_token);
  step31(device, kvcache, token, last_token);
  step32(device, kvcache, token, last_token);
  step33(device, kvcache, token, last_token);
  step34(device, kvcache, token, last_token);
  step35(device, kvcache, token, last_token);
  step36(device, kvcache, token, last_token);
  step37(device, kvcache, token, last_token);
  step38(device, kvcache, token, last_token);
  step39(device, kvcache, token, last_token);
  step40(device, kvcache, token, last_token);
  step41(device, kvcache, token, last_token);
  step42(device, kvcache, token, last_token);
  step43(device, kvcache, token, last_token);
  step44(device, kvcache, token, last_token);
  step45(device, kvcache, token, last_token);
  step46(device, kvcache, token, last_token);
  step47(device, kvcache, token, last_token);
  step48(device, kvcache, token, last_token);
  step49(device, kvcache, token, last_token);
  step50(device, kvcache, token, last_token);
  step51(device, kvcache, token, last_token);
  step52(device, kvcache, token, last_token);
  step53(device, kvcache, token, last_token);
  step54(device, kvcache, token, last_token);
  step55(device, kvcache, token, last_token);
  step56(device, kvcache, token, last_token);
  step57(device, kvcache, token, last_token);
  step58(device, kvcache, token, last_token);
  step59(device, kvcache, token, last_token);
  step60(device, kvcache, token, last_token);
  step61(device, kvcache, token, last_token);
  step62(device, kvcache, token, last_token);
  step63(device, kvcache, token, last_token);
  step64(device, kvcache, token, last_token);
  step65(device, kvcache, token, last_token);
  step66(device, kvcache, token, last_token);
  step67(device, kvcache, token, last_token);
  step68(device, kvcache, token, last_token);
  step69(device, kvcache, token, last_token);
  step70(device, kvcache, token, last_token);
  step71(device, kvcache, token, last_token);
  step72(device, kvcache, token, last_token);
  step73(device, kvcache, token, last_token);
  step74(device, kvcache, token, last_token);
  step75(device, kvcache, token, last_token);
  step76(device, kvcache, token, last_token);
  step77(device, kvcache, token, last_token);
  step78(device, kvcache, token, last_token);
  step79(device, kvcache, token, last_token);
  step80(device, kvcache, token, last_token);
  step81(device, kvcache, token, last_token);
  step82(device, kvcache, token, last_token);
  step83(device, kvcache, token, last_token);
  step84(device, kvcache, token, last_token);
  step85(device, kvcache, token, last_token);
  step86(device, kvcache, token, last_token);
  step87(device, kvcache, token, last_token);
  step88(device, kvcache, token, last_token);
  step89(device, kvcache, token, last_token);
  step90(device, kvcache, token, last_token);
  step91(device, kvcache, token, last_token);
  step92(device, kvcache, token, last_token);
  step93(device, kvcache, token, last_token);
  step94(device, kvcache, token, last_token);
  step95(device, kvcache, token, last_token);
  step96(device, kvcache, token, last_token);
  step97(device, kvcache, token, last_token);
  step98(device, kvcache, token, last_token);
  step99(device, kvcache, token, last_token);
  step100(device, kvcache, token, last_token);
  step101(device, kvcache, token, last_token);
  step102(device, kvcache, token, last_token);
  step103(device, kvcache, token, last_token);
  step104(device, kvcache, token, last_token);
  step105(device, kvcache, token, last_token);
  step106(device, kvcache, token, last_token);
  step107(device, kvcache, token, last_token);
  step108(device, kvcache, token, last_token);
  step109(device, kvcache, token, last_token);
  step110(device, kvcache, token, last_token);
  step111(device, kvcache, token, last_token);
  step112(device, kvcache, token, last_token);
  step113(device, kvcache, token, last_token);
  step114(device, kvcache, token, last_token);
  step115(device, kvcache, token, last_token);
  step116(device, kvcache, token, last_token);
  step117(device, kvcache, token, last_token);
  step118(device, kvcache, token, last_token);
  step119(device, kvcache, token, last_token);
  step120(device, kvcache, token, last_token);
  step121(device, kvcache, token, last_token);
  step122(device, kvcache, token, last_token);
  step123(device, kvcache, token, last_token);
  step124(device, kvcache, token, last_token);
  step125(device, kvcache, token, last_token);
  step126(device, kvcache, token, last_token);
  step127(device, kvcache, token, last_token);
  step128(device, kvcache, token, last_token);
  step129(device, kvcache, token, last_token);
  step130(device, kvcache, token, last_token);
  step131(device, kvcache, token, last_token);
  step132(device, kvcache, token, last_token);
  step133(device, kvcache, token, last_token);
  step134(device, kvcache, token, last_token);
  step135(device, kvcache, token, last_token);
  step136(device, kvcache, token, last_token);
  step137(device, kvcache, token, last_token);
  step138(device, kvcache, token, last_token);
  step139(device, kvcache, token, last_token);
  step140(device, kvcache, token, last_token);
  step141(device, kvcache, token, last_token);
  step142(device, kvcache, token, last_token);
  step143(device, kvcache, token, last_token);
  step144(device, kvcache, token, last_token);
  step145(device, kvcache, token, last_token);
  step146(device, kvcache, token, last_token);
  step147(device, kvcache, token, last_token);
  step148(device, kvcache, token, last_token);
  step149(device, kvcache, token, last_token);
  step150(device, kvcache, token, last_token);
  step151(device, kvcache, token, last_token);
  step152(device, kvcache, token, last_token);
  step153(device, kvcache, token, last_token);
  step154(device, kvcache, token, last_token);
  step155(device, kvcache, token, last_token);
  step156(device, kvcache, token, last_token);
  step157(device, kvcache, token, last_token);
  step158(device, kvcache, token, last_token);
  step159(device, kvcache, token, last_token);
  step160(device, kvcache, token, last_token);
  step161(device, kvcache, token, last_token);
  step162(device, kvcache, token, last_token);
  step163(device, kvcache, token, last_token);
  step164(device, kvcache, token, last_token);
  step165(device, kvcache, token, last_token);
  step166(device, kvcache, token, last_token);
  step167(device, kvcache, token, last_token);
  step168(device, kvcache, token, last_token);
  step169(device, kvcache, token, last_token);
  step170(device, kvcache, token, last_token);
  step171(device, kvcache, token, last_token);
  step172(device, kvcache, token, last_token);
  step173(device, kvcache, token, last_token);
  step174(device, kvcache, token, last_token);
  step175(device, kvcache, token, last_token);
  step176(device, kvcache, token, last_token);
  step177(device, kvcache, token, last_token);
  step178(device, kvcache, token, last_token);
  step179(device, kvcache, token, last_token);
  step180(device, kvcache, token, last_token);
  step181(device, kvcache, token, last_token);
  step182(device, kvcache, token, last_token);
  step183(device, kvcache, token, last_token);
  step184(device, kvcache, token, last_token);
  step185(device, kvcache, token, last_token);
  step186(device, kvcache, token, last_token);
  step187(device, kvcache, token, last_token);
  step188(device, kvcache, token, last_token);
  step189(device, kvcache, token, last_token);
  step190(device, kvcache, token, last_token);
  step191(device, kvcache, token, last_token);
  step192(device, kvcache, token, last_token);
  step193(device, kvcache, token, last_token);
  step194(device, kvcache, token, last_token);
  step195(device, kvcache, token, last_token);
  step196(device, kvcache, token, last_token);
  step197(device, kvcache, token, last_token);
  step198(device, kvcache, token, last_token);
  step199(device, kvcache, token, last_token);
  step200(device, kvcache, token, last_token);
  step201(device, kvcache, token, last_token);
  step202(device, kvcache, token, last_token);
  step203(device, kvcache, token, last_token);
  step204(device, kvcache, token, last_token);
  step205(device, kvcache, token, last_token);
  step206(device, kvcache, token, last_token);
  step207(device, kvcache, token, last_token);
  step208(device, kvcache, token, last_token);
  step209(device, kvcache, token, last_token);
  step210(device, kvcache, token, last_token);
  step211(device, kvcache, token, last_token);
  step212(device, kvcache, token, last_token);
  step213(device, kvcache, token, last_token);
  step214(device, kvcache, token, last_token);
  step215(device, kvcache, token, last_token);
  step216(device, kvcache, token, last_token);
  step217(device, kvcache, token, last_token);
  step218(device, kvcache, token, last_token);
  step219(device, kvcache, token, last_token);
  step220(device, kvcache, token, last_token);
  step221(device, kvcache, token, last_token);
  step222(device, kvcache, token, last_token);
  step223(device, kvcache, token, last_token);
  step224(device, kvcache, token, last_token);
  step225(device, kvcache, token, last_token);
  step226(device, kvcache, token, last_token);
  step227(device, kvcache, token, last_token);
  step228(device, kvcache, token, last_token);
  step229(device, kvcache, token, last_token);
  step230(device, kvcache, token, last_token);
  step231(device, kvcache, token, last_token);
  step232(device, kvcache, token, last_token);
  step233(device, kvcache, token, last_token);
  step234(device, kvcache, token, last_token);
  step235(device, kvcache, token, last_token);
  step236(device, kvcache, token, last_token);
  step237(device, kvcache, token, last_token);
  step238(device, kvcache, token, last_token);
  step239(device, kvcache, token, last_token);
  step240(device, kvcache, token, last_token);
  step241(device, kvcache, token, last_token);
  step242(device, kvcache, token, last_token);
  step243(device, kvcache, token, last_token);
  step244(device, kvcache, token, last_token);
  step245(device, kvcache, token, last_token);
  step246(device, kvcache, token, last_token);
  step247(device, kvcache, token, last_token);
  step248(device, kvcache, token, last_token);
  step249(device, kvcache, token, last_token);
  step250(device, kvcache, token, last_token);
  step251(device, kvcache, token, last_token);
  step252(device, kvcache, token, last_token);
  step253(device, kvcache, token, last_token);
  step254(device, kvcache, token, last_token);
  step255(device, kvcache, token, last_token);
  step256(device, kvcache, token, last_token);
  step257(device, kvcache, token, last_token);
  step258(device, kvcache, token, last_token);
  step259(device, kvcache, token, last_token);
  step260(device, kvcache, token, last_token);
  step261(device, kvcache, token, last_token);
  step262(device, kvcache, token, last_token);
  step263(device, kvcache, token, last_token);
  step264(device, kvcache, token, last_token);
  step265(device, kvcache, token, last_token);
  step266(device, kvcache, token, last_token);
  step267(device, kvcache, token, last_token);
  step268(device, kvcache, token, last_token);
  step269(device, kvcache, token, last_token);
  step270(device, kvcache, token, last_token);
  step271(device, kvcache, token, last_token);
  step272(device, kvcache, token, last_token);
  step273(device, kvcache, token, last_token);
  step274(device, kvcache, token, last_token);
  step275(device, kvcache, token, last_token);
  step276(device, kvcache, token, last_token);
  step277(device, kvcache, token, last_token);
  step278(device, kvcache, token, last_token);
  step279(device, kvcache, token, last_token);
  step280(device, kvcache, token, last_token);
  step281(device, kvcache, token, last_token);
  step282(device, kvcache, token, last_token);
  step283(device, kvcache, token, last_token);
  step284(device, kvcache, token, last_token);
  step285(device, kvcache, token, last_token);
  step286(device, kvcache, token, last_token);
  step287(device, kvcache, token, last_token);
  step288(device, kvcache, token, last_token);
  step289(device, kvcache, token, last_token);
  step290(device, kvcache, token, last_token);
  step291(device, kvcache, token, last_token);
  step292(device, kvcache, token, last_token);
  step293(device, kvcache, token, last_token);
  step294(device, kvcache, token, last_token);
  step295(device, kvcache, token, last_token);
  step296(device, kvcache, token, last_token);
  step297(device, kvcache, token, last_token);
  step298(device, kvcache, token, last_token);
  step299(device, kvcache, token, last_token);
  step300(device, kvcache, token, last_token);
  step301(device, kvcache, token, last_token);
  step302(device, kvcache, token, last_token);
  step303(device, kvcache, token, last_token);
  step304(device, kvcache, token, last_token);
  step305(device, kvcache, token, last_token);
  step306(device, kvcache, token, last_token);
  step307(device, kvcache, token, last_token);
  step308(device, kvcache, token, last_token);
  step309(device, kvcache, token, last_token);
  step310(device, kvcache, token, last_token);
  step311(device, kvcache, token, last_token);
  step312(device, kvcache, token, last_token);
  step313(device, kvcache, token, last_token);
  step314(device, kvcache, token, last_token);
  step315(device, kvcache, token, last_token);
  step316(device, kvcache, token, last_token);
  step317(device, kvcache, token, last_token);
  step318(device, kvcache, token, last_token);
  step319(device, kvcache, token, last_token);
  step320(device, kvcache, token, last_token);
  step321(device, kvcache, token, last_token);
  step322(device, kvcache, token, last_token);
  step323(device, kvcache, token, last_token);
  step324(device, kvcache, token, last_token);
  step325(device, kvcache, token, last_token);
  step326(device, kvcache, token, last_token);
  step327(device, kvcache, token, last_token);
  step328(device, kvcache, token, last_token);
  step329(device, kvcache, token, last_token);
  step330(device, kvcache, token, last_token);
  step331(device, kvcache, token, last_token);
  step332(device, kvcache, token, last_token);
  step333(device, kvcache, token, last_token);
  step334(device, kvcache, token, last_token);
  step335(device, kvcache, token, last_token);
  step336(device, kvcache, token, last_token);
  step337(device, kvcache, token, last_token);
  step338(device, kvcache, token, last_token);
  step339(device, kvcache, token, last_token);
  step340(device, kvcache, token, last_token);
  step341(device, kvcache, token, last_token);
  step342(device, kvcache, token, last_token);
  step343(device, kvcache, token, last_token);
  step344(device, kvcache, token, last_token);
  step345(device, kvcache, token, last_token);
  step346(device, kvcache, token, last_token);
  step347(device, kvcache, token, last_token);
  step348(device, kvcache, token, last_token);
  step349(device, kvcache, token, last_token);
  step350(device, kvcache, token, last_token);
  step351(device, kvcache, token, last_token);
  step352(device, kvcache, token, last_token);
  step353(device, kvcache, token, last_token);
  step354(device, kvcache, token, last_token);
  step355(device, kvcache, token, last_token);
  step356(device, kvcache, token, last_token);
  step357(device, kvcache, token, last_token);
  step358(device, kvcache, token, last_token);
  step359(device, kvcache, token, last_token);
  step360(device, kvcache, token, last_token);
  step361(device, kvcache, token, last_token);
  step362(device, kvcache, token, last_token);
  step363(device, kvcache, token, last_token);
  step364(device, kvcache, token, last_token);
  step365(device, kvcache, token, last_token);
  step366(device, kvcache, token, last_token);
  step367(device, kvcache, token, last_token);
  step368(device, kvcache, token, last_token);
  step369(device, kvcache, token, last_token);
  step370(device, kvcache, token, last_token);
  step371(device, kvcache, token, last_token);
  step372(device, kvcache, token, last_token);
  step373(device, kvcache, token, last_token);
  step374(device, kvcache, token, last_token);
  step375(device, kvcache, token, last_token);
  step376(device, kvcache, token, last_token);
  step377(device, kvcache, token, last_token);
  step378(device, kvcache, token, last_token);
  step379(device, kvcache, token, last_token);
  step380(device, kvcache, token, last_token);
  step381(device, kvcache, token, last_token);
  step382(device, kvcache, token, last_token);
  step383(device, kvcache, token, last_token);
  step384(device, kvcache, token, last_token);
  step385(device, kvcache, token, last_token);
  step386(device, kvcache, token, last_token);
  step387(device, kvcache, token, last_token);
  step388(device, kvcache, token, last_token);
  step389(device, kvcache, token, last_token);
  step390(device, kvcache, token, last_token);
  step391(device, kvcache, token, last_token);
  step392(device, kvcache, token, last_token);
  step393(device, kvcache, token, last_token);
  step394(device, kvcache, token, last_token);
  step395(device, kvcache, token, last_token);
  step396(device, kvcache, token, last_token);
  step397(device, kvcache, token, last_token);
  step398(device, kvcache, token, last_token);
  step399(device, kvcache, token, last_token);
  step400(device, kvcache, token, last_token);
  step401(device, kvcache, token, last_token);
  step402(device, kvcache, token, last_token);
  step403(device, kvcache, token, last_token);
  step404(device, kvcache, token, last_token);
  step405(device, kvcache, token, last_token);
  step406(device, kvcache, token, last_token);
  step407(device, kvcache, token, last_token);
  step408(device, kvcache, token, last_token);
  step409(device, kvcache, token, last_token);
  step410(device, kvcache, token, last_token);
  step411(device, kvcache, token, last_token);
  step412(device, kvcache, token, last_token);
  step413(device, kvcache, token, last_token);
  step414(device, kvcache, token, last_token);
  step415(device, kvcache, token, last_token);
  step416(device, kvcache, token, last_token);
  step417(device, kvcache, token, last_token);
  step418(device, kvcache, token, last_token);
  step419(device, kvcache, token, last_token);
  step420(device, kvcache, token, last_token);
  step421(device, kvcache, token, last_token);
  step422(device);
}
