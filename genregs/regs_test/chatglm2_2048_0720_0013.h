// generated by codegen c++ test ops head at 2024-07-20 00:13:54
// global storage define

void target1 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 532480);
  CSB_Write(device, 195, 64948224);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 81725440);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_target
printf("start: target1!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target2 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 1024);
  CSB_Write(device, 8, 1024);
  CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 10, 81725440);
  CSB_Write(device, 11, 0);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 137824256);
  CSB_Write(device, 14, 3);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 548864);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 33, 799);
#ifdef PRINT_target
printf("start: target2!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target3 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.pos_emb accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (kvcache ? (0 + ((token - 1) * 64)) : (0 + (last_token * 64))));
  CSB_Write(device, 195, 137824256);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 406259712);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 203, last_token);
  CSB_Write(device, 204, 32);
  CSB_Write(device, 205, 262144);
  CSB_Write(device, 206, 131072);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
#ifdef PRINT_target
printf("start: target3!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target4 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 256);
  CSB_Write(device, 8, 256);
  CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 10, 81725440);
  CSB_Write(device, 11, 270336);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 137824256);
  CSB_Write(device, 14, 0);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 565248);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 33, 799);
#ifdef PRINT_target
printf("start: target4!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target5 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.pos_emb accel operator node, storage data in cache0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (kvcache ? (0 + ((token - 1) * 64)) : (0 + (last_token * 64))));
  CSB_Write(device, 195, 137824256);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, (kvcache ? (6227968 + ((token - 1) * 64)) : (6227968 + (last_token * 64))));
  CSB_Write(device, 199, 524288);
  CSB_Write(device, 200, 131072);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 203, last_token);
  CSB_Write(device, 204, 2);
  CSB_Write(device, 205, 262144);
  CSB_Write(device, 206, 131072);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
#ifdef PRINT_target
printf("start: target5!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target6 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_afterTRP accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 6227968);
  CSB_Write(device, 195, 406259712);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 137824256);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 524288);
  CSB_Write(device, 202, 131072);
  CSB_Write(device, 203, 4);
  CSB_Write(device, 204, token);
  CSB_Write(device, 205, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 206, 11688);
  CSB_Write(device, 207, 991234);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 2);
#ifdef PRINT_target
printf("start: target6!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterTRP run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target7 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.softmax accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (1 - kvcache));
  CSB_Write(device, 195, 137824256);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 406259712);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, (((token + 32) - 1) / 32));
  CSB_Write(device, 202, 32);
  CSB_Write(device, 203, token);
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, (token - last_token));
  CSB_Write(device, 206, last_token);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 8);
#ifdef PRINT_target
printf("start: target7!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.softmax run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target8 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in cache1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 256);
  CSB_Write(device, 8, 256);
  CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 10, 81725440);
  CSB_Write(device, 11, 287232);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, (kvcache ? (7276544 + ((token - 1) * 64)) : (7276544 + (last_token * 64))));
  CSB_Write(device, 14, 0);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 566272);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, 131072);
  CSB_Write(device, 32, 131072);
  CSB_Write(device, 33, 799);
#ifdef PRINT_target
printf("start: target8!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target9 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_afterF2W accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 7276544);
  CSB_Write(device, 195, 406259712);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 81725440);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 524288);
  CSB_Write(device, 202, 131072);
  CSB_Write(device, 203, (((token + 32) - 1) / 32));
  CSB_Write(device, 204, token);
  CSB_Write(device, 205, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 206, 4);
  CSB_Write(device, 207, 991234);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 1);
#ifdef PRINT_target
printf("start: target9!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterF2W run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target10 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 1024);
  CSB_Write(device, 8, 1024);
  CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 10, 81725440);
  CSB_Write(device, 11, 304128);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 406259712);
  CSB_Write(device, 14, 3);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 567296);
  CSB_Write(device, 27, 64948224);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_target
printf("start: target10!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target11 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 583680);
  CSB_Write(device, 195, 406259712);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 64948224);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_target
printf("start: target11!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target12 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 1024);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 10, 64948224);
  CSB_Write(device, 11, 1478400);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 137824256);
  CSB_Write(device, 14, 13);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 654848);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 33, 799);
#ifdef PRINT_target
printf("start: target12!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target13 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.activate accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 524288);
  CSB_Write(device, 195, 137824256);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 81725440);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 428);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 428);
  CSB_Write(device, 206, 13696);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 16);
#ifdef PRINT_target
printf("start: target13!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.activate run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target14 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 1024);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 10, 64948224);
  CSB_Write(device, 11, 574464);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 137824256);
  CSB_Write(device, 14, 13);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 2);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 600064);
  CSB_Write(device, 27, 81725440);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_target
printf("start: target14!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target15 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 13696);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 288);
  CSB_Write(device, 8, 64);
  CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 10, 137824256);
  CSB_Write(device, 11, 2382336);
  CSB_Write(device, 12, 56576);
  CSB_Write(device, 13, 64948224);
  CSB_Write(device, 14, 14);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 709632);
  CSB_Write(device, 27, 406259712);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_target
printf("start: target15!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target16 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 726016);
  CSB_Write(device, 195, 64948224);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 81725440);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_target
printf("start: target16!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target17 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 1024);
  CSB_Write(device, 8, 1024);
  CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 10, 81725440);
  CSB_Write(device, 11, 3287552);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 406259712);
  CSB_Write(device, 14, 3);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 742400);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 33, 799);
#ifdef PRINT_target
printf("start: target17!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target18 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.pos_emb accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (kvcache ? (0 + ((token - 1) * 64)) : (0 + (last_token * 64))));
  CSB_Write(device, 195, 406259712);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 137824256);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 203, last_token);
  CSB_Write(device, 204, 32);
  CSB_Write(device, 205, 262144);
  CSB_Write(device, 206, 131072);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
#ifdef PRINT_target
printf("start: target18!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target19 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 256);
  CSB_Write(device, 8, 256);
  CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 10, 81725440);
  CSB_Write(device, 11, 3557888);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 406259712);
  CSB_Write(device, 14, 0);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 758784);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 33, 799);
#ifdef PRINT_target
printf("start: target19!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target20 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.pos_emb accel operator node, storage data in cache2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (kvcache ? (0 + ((token - 1) * 64)) : (0 + (last_token * 64))));
  CSB_Write(device, 195, 406259712);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, (kvcache ? (8325120 + ((token - 1) * 64)) : (8325120 + (last_token * 64))));
  CSB_Write(device, 199, 524288);
  CSB_Write(device, 200, 131072);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 203, last_token);
  CSB_Write(device, 204, 2);
  CSB_Write(device, 205, 262144);
  CSB_Write(device, 206, 131072);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
#ifdef PRINT_target
printf("start: target20!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target21 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_afterTRP accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 8325120);
  CSB_Write(device, 195, 137824256);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 406259712);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 524288);
  CSB_Write(device, 202, 131072);
  CSB_Write(device, 203, 4);
  CSB_Write(device, 204, token);
  CSB_Write(device, 205, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 206, 11688);
  CSB_Write(device, 207, 991234);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 2);
#ifdef PRINT_target
printf("start: target21!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterTRP run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target22 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.softmax accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (1 - kvcache));
  CSB_Write(device, 195, 406259712);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 137824256);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, (((token + 32) - 1) / 32));
  CSB_Write(device, 202, 32);
  CSB_Write(device, 203, token);
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, (token - last_token));
  CSB_Write(device, 206, last_token);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 8);
#ifdef PRINT_target
printf("start: target22!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.softmax run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target23 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in cache3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 256);
  CSB_Write(device, 8, 256);
  CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 10, 81725440);
  CSB_Write(device, 11, 3574784);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, (kvcache ? (9373696 + ((token - 1) * 64)) : (9373696 + (last_token * 64))));
  CSB_Write(device, 14, 0);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 759808);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, 131072);
  CSB_Write(device, 32, 131072);
  CSB_Write(device, 33, 799);
#ifdef PRINT_target
printf("start: target23!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target24 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_afterF2W accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 9373696);
  CSB_Write(device, 195, 137824256);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 81725440);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 524288);
  CSB_Write(device, 202, 131072);
  CSB_Write(device, 203, (((token + 32) - 1) / 32));
  CSB_Write(device, 204, token);
  CSB_Write(device, 205, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 206, 4);
  CSB_Write(device, 207, 991234);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 1);
#ifdef PRINT_target
printf("start: target24!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterF2W run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target25 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 1024);
  CSB_Write(device, 8, 1024);
  CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 10, 81725440);
  CSB_Write(device, 11, 3591680);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 137824256);
  CSB_Write(device, 14, 3);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 760832);
  CSB_Write(device, 27, 64948224);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_target
printf("start: target25!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target26 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 777216);
  CSB_Write(device, 195, 137824256);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 64948224);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_target
printf("start: target26!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target27 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 1024);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 10, 64948224);
  CSB_Write(device, 11, 4765952);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 81725440);
  CSB_Write(device, 14, 13);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 848384);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 33, 799);
#ifdef PRINT_target
printf("start: target27!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target28 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.activate accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 524288);
  CSB_Write(device, 195, 81725440);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 406259712);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 428);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 428);
  CSB_Write(device, 206, 13696);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 16);
#ifdef PRINT_target
printf("start: target28!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.activate run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target29 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 1024);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 10, 64948224);
  CSB_Write(device, 11, 3862016);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 81725440);
  CSB_Write(device, 14, 13);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 2);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 793600);
  CSB_Write(device, 27, 406259712);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_target
printf("start: target29!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target30 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 13696);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 288);
  CSB_Write(device, 8, 64);
  CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 10, 81725440);
  CSB_Write(device, 11, 5669888);
  CSB_Write(device, 12, 56576);
  CSB_Write(device, 13, 64948224);
  CSB_Write(device, 14, 14);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 903168);
  CSB_Write(device, 27, 137824256);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_target
printf("start: target30!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target31 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 919552);
  CSB_Write(device, 195, 64948224);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 81725440);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_target
printf("start: target31!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target32 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 1024);
  CSB_Write(device, 8, 1024);
  CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 10, 81725440);
  CSB_Write(device, 11, 6575104);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 137824256);
  CSB_Write(device, 14, 3);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 935936);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 33, 799);
#ifdef PRINT_target
printf("start: target32!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target33 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.pos_emb accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (kvcache ? (0 + ((token - 1) * 64)) : (0 + (last_token * 64))));
  CSB_Write(device, 195, 137824256);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 406259712);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 203, last_token);
  CSB_Write(device, 204, 32);
  CSB_Write(device, 205, 262144);
  CSB_Write(device, 206, 131072);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
#ifdef PRINT_target
printf("start: target33!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target34 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 256);
  CSB_Write(device, 8, 256);
  CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 10, 81725440);
  CSB_Write(device, 11, 6845440);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 137824256);
  CSB_Write(device, 14, 0);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 952320);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 33, 799);
#ifdef PRINT_target
printf("start: target34!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target35 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.pos_emb accel operator node, storage data in cache4 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (kvcache ? (0 + ((token - 1) * 64)) : (0 + (last_token * 64))));
  CSB_Write(device, 195, 137824256);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, (kvcache ? (10422272 + ((token - 1) * 64)) : (10422272 + (last_token * 64))));
  CSB_Write(device, 199, 524288);
  CSB_Write(device, 200, 131072);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 203, last_token);
  CSB_Write(device, 204, 2);
  CSB_Write(device, 205, 262144);
  CSB_Write(device, 206, 131072);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
#ifdef PRINT_target
printf("start: target35!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target36 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_afterTRP accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 10422272);
  CSB_Write(device, 195, 406259712);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 137824256);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 524288);
  CSB_Write(device, 202, 131072);
  CSB_Write(device, 203, 4);
  CSB_Write(device, 204, token);
  CSB_Write(device, 205, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 206, 11688);
  CSB_Write(device, 207, 991234);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 2);
#ifdef PRINT_target
printf("start: target36!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterTRP run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target37 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.softmax accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (1 - kvcache));
  CSB_Write(device, 195, 137824256);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 406259712);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, (((token + 32) - 1) / 32));
  CSB_Write(device, 202, 32);
  CSB_Write(device, 203, token);
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, (token - last_token));
  CSB_Write(device, 206, last_token);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 8);
#ifdef PRINT_target
printf("start: target37!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.softmax run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target38 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in cache5 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 256);
  CSB_Write(device, 8, 256);
  CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 10, 81725440);
  CSB_Write(device, 11, 6862336);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, (kvcache ? (11470848 + ((token - 1) * 64)) : (11470848 + (last_token * 64))));
  CSB_Write(device, 14, 0);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 953344);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, 131072);
  CSB_Write(device, 32, 131072);
  CSB_Write(device, 33, 799);
#ifdef PRINT_target
printf("start: target38!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target39 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_afterF2W accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 11470848);
  CSB_Write(device, 195, 406259712);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 81725440);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 524288);
  CSB_Write(device, 202, 131072);
  CSB_Write(device, 203, (((token + 32) - 1) / 32));
  CSB_Write(device, 204, token);
  CSB_Write(device, 205, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 206, 4);
  CSB_Write(device, 207, 991234);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 1);
#ifdef PRINT_target
printf("start: target39!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterF2W run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target40 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 1024);
  CSB_Write(device, 8, 1024);
  CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 10, 81725440);
  CSB_Write(device, 11, 6879232);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 406259712);
  CSB_Write(device, 14, 3);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 954368);
  CSB_Write(device, 27, 64948224);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_target
printf("start: target40!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target41 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 970752);
  CSB_Write(device, 195, 406259712);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 64948224);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_target
printf("start: target41!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target42 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 1024);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 10, 64948224);
  CSB_Write(device, 11, 8053504);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 81725440);
  CSB_Write(device, 14, 13);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 1041920);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 33, 799);
#ifdef PRINT_target
printf("start: target42!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target43 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.activate accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 524288);
  CSB_Write(device, 195, 81725440);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 137824256);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 428);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 428);
  CSB_Write(device, 206, 13696);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 16);
#ifdef PRINT_target
printf("start: target43!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.activate run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target44 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 1024);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 10, 64948224);
  CSB_Write(device, 11, 7149568);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 81725440);
  CSB_Write(device, 14, 13);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 2);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 987136);
  CSB_Write(device, 27, 137824256);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_target
printf("start: target44!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target45 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 13696);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 288);
  CSB_Write(device, 8, 64);
  CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 10, 81725440);
  CSB_Write(device, 11, 8957440);
  CSB_Write(device, 12, 56576);
  CSB_Write(device, 13, 64948224);
  CSB_Write(device, 14, 14);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 1096704);
  CSB_Write(device, 27, 406259712);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_target
printf("start: target45!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target46 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 1113088);
  CSB_Write(device, 195, 64948224);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 81725440);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_target
printf("start: target46!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target47 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 1024);
  CSB_Write(device, 8, 1024);
  CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 10, 81725440);
  CSB_Write(device, 11, 9862656);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 406259712);
  CSB_Write(device, 14, 3);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 1129472);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 33, 799);
#ifdef PRINT_target
printf("start: target47!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target48 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.pos_emb accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (kvcache ? (0 + ((token - 1) * 64)) : (0 + (last_token * 64))));
  CSB_Write(device, 195, 406259712);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 137824256);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 203, last_token);
  CSB_Write(device, 204, 32);
  CSB_Write(device, 205, 262144);
  CSB_Write(device, 206, 131072);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
#ifdef PRINT_target
printf("start: target48!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target49 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 256);
  CSB_Write(device, 8, 256);
  CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 10, 81725440);
  CSB_Write(device, 11, 10132992);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 406259712);
  CSB_Write(device, 14, 0);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 1145856);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 33, 799);
#ifdef PRINT_target
printf("start: target49!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target50 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.pos_emb accel operator node, storage data in cache6 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (kvcache ? (0 + ((token - 1) * 64)) : (0 + (last_token * 64))));
  CSB_Write(device, 195, 406259712);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, (kvcache ? (12519424 + ((token - 1) * 64)) : (12519424 + (last_token * 64))));
  CSB_Write(device, 199, 524288);
  CSB_Write(device, 200, 131072);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 203, last_token);
  CSB_Write(device, 204, 2);
  CSB_Write(device, 205, 262144);
  CSB_Write(device, 206, 131072);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
#ifdef PRINT_target
printf("start: target50!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target51 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_afterTRP accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 12519424);
  CSB_Write(device, 195, 137824256);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 406259712);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 524288);
  CSB_Write(device, 202, 131072);
  CSB_Write(device, 203, 4);
  CSB_Write(device, 204, token);
  CSB_Write(device, 205, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 206, 11688);
  CSB_Write(device, 207, 991234);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 2);
#ifdef PRINT_target
printf("start: target51!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterTRP run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target52 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.softmax accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (1 - kvcache));
  CSB_Write(device, 195, 406259712);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 137824256);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, (((token + 32) - 1) / 32));
  CSB_Write(device, 202, 32);
  CSB_Write(device, 203, token);
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, (token - last_token));
  CSB_Write(device, 206, last_token);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 8);
#ifdef PRINT_target
printf("start: target52!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.softmax run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target53 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in cache7 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 256);
  CSB_Write(device, 8, 256);
  CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 10, 81725440);
  CSB_Write(device, 11, 10149888);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, (kvcache ? (13568000 + ((token - 1) * 64)) : (13568000 + (last_token * 64))));
  CSB_Write(device, 14, 0);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 1146880);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, 131072);
  CSB_Write(device, 32, 131072);
  CSB_Write(device, 33, 799);
#ifdef PRINT_target
printf("start: target53!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target54 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_afterF2W accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 13568000);
  CSB_Write(device, 195, 137824256);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 81725440);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 524288);
  CSB_Write(device, 202, 131072);
  CSB_Write(device, 203, (((token + 32) - 1) / 32));
  CSB_Write(device, 204, token);
  CSB_Write(device, 205, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 206, 4);
  CSB_Write(device, 207, 991234);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 1);
#ifdef PRINT_target
printf("start: target54!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterF2W run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target55 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 1024);
  CSB_Write(device, 8, 1024);
  CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 10, 81725440);
  CSB_Write(device, 11, 10166784);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 137824256);
  CSB_Write(device, 14, 3);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 1147904);
  CSB_Write(device, 27, 64948224);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_target
printf("start: target55!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target56 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 1164288);
  CSB_Write(device, 195, 137824256);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 64948224);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_target
printf("start: target56!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target57 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 1024);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 10, 64948224);
  CSB_Write(device, 11, 11341056);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 81725440);
  CSB_Write(device, 14, 13);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 1235456);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 33, 799);
#ifdef PRINT_target
printf("start: target57!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target58 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.activate accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 524288);
  CSB_Write(device, 195, 81725440);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 406259712);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 428);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 428);
  CSB_Write(device, 206, 13696);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 16);
#ifdef PRINT_target
printf("start: target58!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.activate run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target59 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 1024);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 10, 64948224);
  CSB_Write(device, 11, 10437120);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 81725440);
  CSB_Write(device, 14, 13);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 2);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 1180672);
  CSB_Write(device, 27, 406259712);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_target
printf("start: target59!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target60 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 13696);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 288);
  CSB_Write(device, 8, 64);
  CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 10, 81725440);
  CSB_Write(device, 11, 12244992);
  CSB_Write(device, 12, 56576);
  CSB_Write(device, 13, 64948224);
  CSB_Write(device, 14, 14);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 1290240);
  CSB_Write(device, 27, 137824256);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_target
printf("start: target60!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target61 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 1306624);
  CSB_Write(device, 195, 64948224);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 81725440);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_target
printf("start: target61!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target62 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 1024);
  CSB_Write(device, 8, 1024);
  CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 10, 81725440);
  CSB_Write(device, 11, 13150208);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 137824256);
  CSB_Write(device, 14, 3);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 1323008);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 33, 799);
#ifdef PRINT_target
printf("start: target62!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target63 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.pos_emb accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (kvcache ? (0 + ((token - 1) * 64)) : (0 + (last_token * 64))));
  CSB_Write(device, 195, 137824256);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 406259712);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 203, last_token);
  CSB_Write(device, 204, 32);
  CSB_Write(device, 205, 262144);
  CSB_Write(device, 206, 131072);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
#ifdef PRINT_target
printf("start: target63!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target64 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 256);
  CSB_Write(device, 8, 256);
  CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 10, 81725440);
  CSB_Write(device, 11, 13420544);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 137824256);
  CSB_Write(device, 14, 0);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 1339392);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 33, 799);
#ifdef PRINT_target
printf("start: target64!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target65 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.pos_emb accel operator node, storage data in cache8 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (kvcache ? (0 + ((token - 1) * 64)) : (0 + (last_token * 64))));
  CSB_Write(device, 195, 137824256);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, (kvcache ? (14616576 + ((token - 1) * 64)) : (14616576 + (last_token * 64))));
  CSB_Write(device, 199, 524288);
  CSB_Write(device, 200, 131072);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 203, last_token);
  CSB_Write(device, 204, 2);
  CSB_Write(device, 205, 262144);
  CSB_Write(device, 206, 131072);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
#ifdef PRINT_target
printf("start: target65!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target66 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_afterTRP accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 14616576);
  CSB_Write(device, 195, 406259712);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 137824256);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 524288);
  CSB_Write(device, 202, 131072);
  CSB_Write(device, 203, 4);
  CSB_Write(device, 204, token);
  CSB_Write(device, 205, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 206, 11688);
  CSB_Write(device, 207, 991234);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 2);
#ifdef PRINT_target
printf("start: target66!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterTRP run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target67 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.softmax accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (1 - kvcache));
  CSB_Write(device, 195, 137824256);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 406259712);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, (((token + 32) - 1) / 32));
  CSB_Write(device, 202, 32);
  CSB_Write(device, 203, token);
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, (token - last_token));
  CSB_Write(device, 206, last_token);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 8);
#ifdef PRINT_target
printf("start: target67!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.softmax run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target68 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in cache9 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 256);
  CSB_Write(device, 8, 256);
  CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 10, 81725440);
  CSB_Write(device, 11, 13437440);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, (kvcache ? (15665152 + ((token - 1) * 64)) : (15665152 + (last_token * 64))));
  CSB_Write(device, 14, 0);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 1340416);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, 131072);
  CSB_Write(device, 32, 131072);
  CSB_Write(device, 33, 799);
#ifdef PRINT_target
printf("start: target68!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target69 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_afterF2W accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 15665152);
  CSB_Write(device, 195, 406259712);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 81725440);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 524288);
  CSB_Write(device, 202, 131072);
  CSB_Write(device, 203, (((token + 32) - 1) / 32));
  CSB_Write(device, 204, token);
  CSB_Write(device, 205, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 206, 4);
  CSB_Write(device, 207, 991234);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 1);
#ifdef PRINT_target
printf("start: target69!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterF2W run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target70 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 1024);
  CSB_Write(device, 8, 1024);
  CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 10, 81725440);
  CSB_Write(device, 11, 13454336);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 406259712);
  CSB_Write(device, 14, 3);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 1341440);
  CSB_Write(device, 27, 64948224);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_target
printf("start: target70!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target71 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 1357824);
  CSB_Write(device, 195, 406259712);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 64948224);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_target
printf("start: target71!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target72 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 1024);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 10, 64948224);
  CSB_Write(device, 11, 14628608);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 81725440);
  CSB_Write(device, 14, 13);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 1428992);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 33, 799);
#ifdef PRINT_target
printf("start: target72!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target73 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.activate accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 524288);
  CSB_Write(device, 195, 81725440);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 137824256);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 428);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 428);
  CSB_Write(device, 206, 13696);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 16);
#ifdef PRINT_target
printf("start: target73!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.activate run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target74 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 1024);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 10, 64948224);
  CSB_Write(device, 11, 13724672);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 81725440);
  CSB_Write(device, 14, 13);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 2);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 1374208);
  CSB_Write(device, 27, 137824256);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_target
printf("start: target74!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target75 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 13696);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 288);
  CSB_Write(device, 8, 64);
  CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 10, 81725440);
  CSB_Write(device, 11, 15532544);
  CSB_Write(device, 12, 56576);
  CSB_Write(device, 13, 64948224);
  CSB_Write(device, 14, 14);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 1483776);
  CSB_Write(device, 27, 406259712);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_target
printf("start: target75!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target76 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 1500160);
  CSB_Write(device, 195, 64948224);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 81725440);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_target
printf("start: target76!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target77 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 1024);
  CSB_Write(device, 8, 1024);
  CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 10, 81725440);
  CSB_Write(device, 11, 16437760);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 406259712);
  CSB_Write(device, 14, 3);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 1516544);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 33, 799);
#ifdef PRINT_target
printf("start: target77!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target78 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.pos_emb accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (kvcache ? (0 + ((token - 1) * 64)) : (0 + (last_token * 64))));
  CSB_Write(device, 195, 406259712);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 137824256);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 203, last_token);
  CSB_Write(device, 204, 32);
  CSB_Write(device, 205, 262144);
  CSB_Write(device, 206, 131072);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
#ifdef PRINT_target
printf("start: target78!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target79 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 256);
  CSB_Write(device, 8, 256);
  CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 10, 81725440);
  CSB_Write(device, 11, 16708096);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 406259712);
  CSB_Write(device, 14, 0);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 1532928);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 33, 799);
#ifdef PRINT_target
printf("start: target79!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target80 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.pos_emb accel operator node, storage data in cache10 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (kvcache ? (0 + ((token - 1) * 64)) : (0 + (last_token * 64))));
  CSB_Write(device, 195, 406259712);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, (kvcache ? (16713728 + ((token - 1) * 64)) : (16713728 + (last_token * 64))));
  CSB_Write(device, 199, 524288);
  CSB_Write(device, 200, 131072);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 203, last_token);
  CSB_Write(device, 204, 2);
  CSB_Write(device, 205, 262144);
  CSB_Write(device, 206, 131072);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
#ifdef PRINT_target
printf("start: target80!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target81 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_afterTRP accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 16713728);
  CSB_Write(device, 195, 137824256);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 406259712);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 524288);
  CSB_Write(device, 202, 131072);
  CSB_Write(device, 203, 4);
  CSB_Write(device, 204, token);
  CSB_Write(device, 205, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 206, 11688);
  CSB_Write(device, 207, 991234);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 2);
#ifdef PRINT_target
printf("start: target81!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterTRP run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target82 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.softmax accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (1 - kvcache));
  CSB_Write(device, 195, 406259712);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 137824256);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, (((token + 32) - 1) / 32));
  CSB_Write(device, 202, 32);
  CSB_Write(device, 203, token);
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, (token - last_token));
  CSB_Write(device, 206, last_token);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 8);
#ifdef PRINT_target
printf("start: target82!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.softmax run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target83 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in cache11 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 256);
  CSB_Write(device, 8, 256);
  CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 10, 81725440);
  CSB_Write(device, 11, 16724992);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, (kvcache ? (17762304 + ((token - 1) * 64)) : (17762304 + (last_token * 64))));
  CSB_Write(device, 14, 0);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 1533952);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, 131072);
  CSB_Write(device, 32, 131072);
  CSB_Write(device, 33, 799);
#ifdef PRINT_target
printf("start: target83!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target84 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_afterF2W accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 17762304);
  CSB_Write(device, 195, 137824256);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 81725440);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 524288);
  CSB_Write(device, 202, 131072);
  CSB_Write(device, 203, (((token + 32) - 1) / 32));
  CSB_Write(device, 204, token);
  CSB_Write(device, 205, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 206, 4);
  CSB_Write(device, 207, 991234);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 1);
#ifdef PRINT_target
printf("start: target84!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterF2W run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target85 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 1024);
  CSB_Write(device, 8, 1024);
  CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 10, 81725440);
  CSB_Write(device, 11, 16741888);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 137824256);
  CSB_Write(device, 14, 3);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 1534976);
  CSB_Write(device, 27, 64948224);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_target
printf("start: target85!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target86 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 1551360);
  CSB_Write(device, 195, 137824256);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 64948224);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_target
printf("start: target86!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target87 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 1024);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 10, 64948224);
  CSB_Write(device, 11, 17916160);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 81725440);
  CSB_Write(device, 14, 13);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 1622528);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 33, 799);
#ifdef PRINT_target
printf("start: target87!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target88 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.activate accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 524288);
  CSB_Write(device, 195, 81725440);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 406259712);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 428);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 428);
  CSB_Write(device, 206, 13696);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 16);
#ifdef PRINT_target
printf("start: target88!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.activate run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target89 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 1024);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 10, 64948224);
  CSB_Write(device, 11, 17012224);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 81725440);
  CSB_Write(device, 14, 13);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 2);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 1567744);
  CSB_Write(device, 27, 406259712);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_target
printf("start: target89!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target90 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 13696);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 288);
  CSB_Write(device, 8, 64);
  CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 10, 81725440);
  CSB_Write(device, 11, 18820096);
  CSB_Write(device, 12, 56576);
  CSB_Write(device, 13, 64948224);
  CSB_Write(device, 14, 14);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 1677312);
  CSB_Write(device, 27, 137824256);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_target
printf("start: target90!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target91 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 1693696);
  CSB_Write(device, 195, 64948224);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 81725440);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_target
printf("start: target91!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target92 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 1024);
  CSB_Write(device, 8, 1024);
  CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 10, 81725440);
  CSB_Write(device, 11, 19725312);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 137824256);
  CSB_Write(device, 14, 3);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 1710080);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 33, 799);
#ifdef PRINT_target
printf("start: target92!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target93 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.pos_emb accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (kvcache ? (0 + ((token - 1) * 64)) : (0 + (last_token * 64))));
  CSB_Write(device, 195, 137824256);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 406259712);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 203, last_token);
  CSB_Write(device, 204, 32);
  CSB_Write(device, 205, 262144);
  CSB_Write(device, 206, 131072);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
#ifdef PRINT_target
printf("start: target93!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target94 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 256);
  CSB_Write(device, 8, 256);
  CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 10, 81725440);
  CSB_Write(device, 11, 19995648);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 137824256);
  CSB_Write(device, 14, 0);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 1726464);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 33, 799);
#ifdef PRINT_target
printf("start: target94!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target95 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.pos_emb accel operator node, storage data in cache12 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (kvcache ? (0 + ((token - 1) * 64)) : (0 + (last_token * 64))));
  CSB_Write(device, 195, 137824256);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, (kvcache ? (18810880 + ((token - 1) * 64)) : (18810880 + (last_token * 64))));
  CSB_Write(device, 199, 524288);
  CSB_Write(device, 200, 131072);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 203, last_token);
  CSB_Write(device, 204, 2);
  CSB_Write(device, 205, 262144);
  CSB_Write(device, 206, 131072);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
#ifdef PRINT_target
printf("start: target95!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target96 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_afterTRP accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 18810880);
  CSB_Write(device, 195, 406259712);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 137824256);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 524288);
  CSB_Write(device, 202, 131072);
  CSB_Write(device, 203, 4);
  CSB_Write(device, 204, token);
  CSB_Write(device, 205, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 206, 11688);
  CSB_Write(device, 207, 991234);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 2);
#ifdef PRINT_target
printf("start: target96!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterTRP run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target97 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.softmax accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (1 - kvcache));
  CSB_Write(device, 195, 137824256);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 406259712);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, (((token + 32) - 1) / 32));
  CSB_Write(device, 202, 32);
  CSB_Write(device, 203, token);
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, (token - last_token));
  CSB_Write(device, 206, last_token);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 8);
#ifdef PRINT_target
printf("start: target97!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.softmax run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target98 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in cache13 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 256);
  CSB_Write(device, 8, 256);
  CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 10, 81725440);
  CSB_Write(device, 11, 20012544);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, (kvcache ? (19859456 + ((token - 1) * 64)) : (19859456 + (last_token * 64))));
  CSB_Write(device, 14, 0);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 1727488);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, 131072);
  CSB_Write(device, 32, 131072);
  CSB_Write(device, 33, 799);
#ifdef PRINT_target
printf("start: target98!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target99 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_afterF2W accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 19859456);
  CSB_Write(device, 195, 406259712);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 81725440);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 524288);
  CSB_Write(device, 202, 131072);
  CSB_Write(device, 203, (((token + 32) - 1) / 32));
  CSB_Write(device, 204, token);
  CSB_Write(device, 205, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 206, 4);
  CSB_Write(device, 207, 991234);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 1);
#ifdef PRINT_target
printf("start: target99!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterF2W run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target100 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 1024);
  CSB_Write(device, 8, 1024);
  CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 10, 81725440);
  CSB_Write(device, 11, 20029440);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 406259712);
  CSB_Write(device, 14, 3);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 1728512);
  CSB_Write(device, 27, 64948224);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_target
printf("start: target100!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target101 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 1744896);
  CSB_Write(device, 195, 406259712);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 64948224);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_target
printf("start: target101!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target102 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 1024);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 10, 64948224);
  CSB_Write(device, 11, 21203712);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 81725440);
  CSB_Write(device, 14, 13);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 1816064);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 33, 799);
#ifdef PRINT_target
printf("start: target102!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target103 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.activate accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 524288);
  CSB_Write(device, 195, 81725440);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 137824256);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 428);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 428);
  CSB_Write(device, 206, 13696);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 16);
#ifdef PRINT_target
printf("start: target103!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.activate run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target104 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 1024);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 10, 64948224);
  CSB_Write(device, 11, 20299776);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 81725440);
  CSB_Write(device, 14, 13);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 2);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 1761280);
  CSB_Write(device, 27, 137824256);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_target
printf("start: target104!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target105 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 13696);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 288);
  CSB_Write(device, 8, 64);
  CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 10, 81725440);
  CSB_Write(device, 11, 22107648);
  CSB_Write(device, 12, 56576);
  CSB_Write(device, 13, 64948224);
  CSB_Write(device, 14, 14);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 1870848);
  CSB_Write(device, 27, 406259712);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_target
printf("start: target105!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target106 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 1887232);
  CSB_Write(device, 195, 64948224);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 81725440);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_target
printf("start: target106!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target107 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 1024);
  CSB_Write(device, 8, 1024);
  CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 10, 81725440);
  CSB_Write(device, 11, 23012864);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 406259712);
  CSB_Write(device, 14, 3);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 1903616);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 33, 799);
#ifdef PRINT_target
printf("start: target107!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target108 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.pos_emb accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (kvcache ? (0 + ((token - 1) * 64)) : (0 + (last_token * 64))));
  CSB_Write(device, 195, 406259712);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 137824256);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 203, last_token);
  CSB_Write(device, 204, 32);
  CSB_Write(device, 205, 262144);
  CSB_Write(device, 206, 131072);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
#ifdef PRINT_target
printf("start: target108!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target109 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 256);
  CSB_Write(device, 8, 256);
  CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 10, 81725440);
  CSB_Write(device, 11, 23283200);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 406259712);
  CSB_Write(device, 14, 0);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 1920000);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 33, 799);
#ifdef PRINT_target
printf("start: target109!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target110 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.pos_emb accel operator node, storage data in cache14 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (kvcache ? (0 + ((token - 1) * 64)) : (0 + (last_token * 64))));
  CSB_Write(device, 195, 406259712);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, (kvcache ? (20908032 + ((token - 1) * 64)) : (20908032 + (last_token * 64))));
  CSB_Write(device, 199, 524288);
  CSB_Write(device, 200, 131072);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 203, last_token);
  CSB_Write(device, 204, 2);
  CSB_Write(device, 205, 262144);
  CSB_Write(device, 206, 131072);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
#ifdef PRINT_target
printf("start: target110!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target111 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_afterTRP accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 20908032);
  CSB_Write(device, 195, 137824256);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 406259712);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 524288);
  CSB_Write(device, 202, 131072);
  CSB_Write(device, 203, 4);
  CSB_Write(device, 204, token);
  CSB_Write(device, 205, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 206, 11688);
  CSB_Write(device, 207, 991234);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 2);
#ifdef PRINT_target
printf("start: target111!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterTRP run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target112 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.softmax accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (1 - kvcache));
  CSB_Write(device, 195, 406259712);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 137824256);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, (((token + 32) - 1) / 32));
  CSB_Write(device, 202, 32);
  CSB_Write(device, 203, token);
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, (token - last_token));
  CSB_Write(device, 206, last_token);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 8);
#ifdef PRINT_target
printf("start: target112!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.softmax run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target113 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in cache15 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 256);
  CSB_Write(device, 8, 256);
  CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 10, 81725440);
  CSB_Write(device, 11, 23300096);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, (kvcache ? (21956608 + ((token - 1) * 64)) : (21956608 + (last_token * 64))));
  CSB_Write(device, 14, 0);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 1921024);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, 131072);
  CSB_Write(device, 32, 131072);
  CSB_Write(device, 33, 799);
#ifdef PRINT_target
printf("start: target113!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target114 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_afterF2W accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 21956608);
  CSB_Write(device, 195, 137824256);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 81725440);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 524288);
  CSB_Write(device, 202, 131072);
  CSB_Write(device, 203, (((token + 32) - 1) / 32));
  CSB_Write(device, 204, token);
  CSB_Write(device, 205, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 206, 4);
  CSB_Write(device, 207, 991234);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 1);
#ifdef PRINT_target
printf("start: target114!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterF2W run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target115 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 1024);
  CSB_Write(device, 8, 1024);
  CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 10, 81725440);
  CSB_Write(device, 11, 23316992);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 137824256);
  CSB_Write(device, 14, 3);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 1922048);
  CSB_Write(device, 27, 64948224);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_target
printf("start: target115!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target116 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 1938432);
  CSB_Write(device, 195, 137824256);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 64948224);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_target
printf("start: target116!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target117 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 1024);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 10, 64948224);
  CSB_Write(device, 11, 24491264);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 81725440);
  CSB_Write(device, 14, 13);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 2009600);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 33, 799);
#ifdef PRINT_target
printf("start: target117!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target118 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.activate accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 524288);
  CSB_Write(device, 195, 81725440);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 406259712);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 428);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 428);
  CSB_Write(device, 206, 13696);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 16);
#ifdef PRINT_target
printf("start: target118!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.activate run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target119 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 1024);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 10, 64948224);
  CSB_Write(device, 11, 23587328);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 81725440);
  CSB_Write(device, 14, 13);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 2);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 1954816);
  CSB_Write(device, 27, 406259712);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_target
printf("start: target119!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target120 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 13696);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 288);
  CSB_Write(device, 8, 64);
  CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 10, 81725440);
  CSB_Write(device, 11, 25395200);
  CSB_Write(device, 12, 56576);
  CSB_Write(device, 13, 64948224);
  CSB_Write(device, 14, 14);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 2064384);
  CSB_Write(device, 27, 137824256);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_target
printf("start: target120!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target121 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 2080768);
  CSB_Write(device, 195, 64948224);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 81725440);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_target
printf("start: target121!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target122 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 1024);
  CSB_Write(device, 8, 1024);
  CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 10, 81725440);
  CSB_Write(device, 11, 26300416);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 137824256);
  CSB_Write(device, 14, 3);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 2097152);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 33, 799);
#ifdef PRINT_target
printf("start: target122!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target123 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.pos_emb accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (kvcache ? (0 + ((token - 1) * 64)) : (0 + (last_token * 64))));
  CSB_Write(device, 195, 137824256);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 406259712);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 203, last_token);
  CSB_Write(device, 204, 32);
  CSB_Write(device, 205, 262144);
  CSB_Write(device, 206, 131072);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
#ifdef PRINT_target
printf("start: target123!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target124 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 256);
  CSB_Write(device, 8, 256);
  CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 10, 81725440);
  CSB_Write(device, 11, 26570752);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 137824256);
  CSB_Write(device, 14, 0);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 2113536);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 33, 799);
#ifdef PRINT_target
printf("start: target124!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target125 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.pos_emb accel operator node, storage data in cache16 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (kvcache ? (0 + ((token - 1) * 64)) : (0 + (last_token * 64))));
  CSB_Write(device, 195, 137824256);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, (kvcache ? (23005184 + ((token - 1) * 64)) : (23005184 + (last_token * 64))));
  CSB_Write(device, 199, 524288);
  CSB_Write(device, 200, 131072);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 203, last_token);
  CSB_Write(device, 204, 2);
  CSB_Write(device, 205, 262144);
  CSB_Write(device, 206, 131072);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
#ifdef PRINT_target
printf("start: target125!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target126 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_afterTRP accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 23005184);
  CSB_Write(device, 195, 406259712);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 137824256);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 524288);
  CSB_Write(device, 202, 131072);
  CSB_Write(device, 203, 4);
  CSB_Write(device, 204, token);
  CSB_Write(device, 205, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 206, 11688);
  CSB_Write(device, 207, 991234);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 2);
#ifdef PRINT_target
printf("start: target126!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterTRP run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target127 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.softmax accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (1 - kvcache));
  CSB_Write(device, 195, 137824256);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 406259712);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, (((token + 32) - 1) / 32));
  CSB_Write(device, 202, 32);
  CSB_Write(device, 203, token);
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, (token - last_token));
  CSB_Write(device, 206, last_token);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 8);
#ifdef PRINT_target
printf("start: target127!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.softmax run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target128 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in cache17 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 256);
  CSB_Write(device, 8, 256);
  CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 10, 81725440);
  CSB_Write(device, 11, 26587648);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, (kvcache ? (24053760 + ((token - 1) * 64)) : (24053760 + (last_token * 64))));
  CSB_Write(device, 14, 0);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 2114560);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, 131072);
  CSB_Write(device, 32, 131072);
  CSB_Write(device, 33, 799);
#ifdef PRINT_target
printf("start: target128!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target129 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_afterF2W accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 24053760);
  CSB_Write(device, 195, 406259712);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 81725440);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 524288);
  CSB_Write(device, 202, 131072);
  CSB_Write(device, 203, (((token + 32) - 1) / 32));
  CSB_Write(device, 204, token);
  CSB_Write(device, 205, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 206, 4);
  CSB_Write(device, 207, 991234);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 1);
#ifdef PRINT_target
printf("start: target129!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterF2W run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target130 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 1024);
  CSB_Write(device, 8, 1024);
  CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 10, 81725440);
  CSB_Write(device, 11, 26604544);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 406259712);
  CSB_Write(device, 14, 3);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 2115584);
  CSB_Write(device, 27, 64948224);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_target
printf("start: target130!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target131 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 2131968);
  CSB_Write(device, 195, 406259712);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 64948224);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_target
printf("start: target131!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target132 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 1024);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 10, 64948224);
  CSB_Write(device, 11, 27778816);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 81725440);
  CSB_Write(device, 14, 13);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 2203136);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 33, 799);
#ifdef PRINT_target
printf("start: target132!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target133 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.activate accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 524288);
  CSB_Write(device, 195, 81725440);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 137824256);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 428);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 428);
  CSB_Write(device, 206, 13696);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 16);
#ifdef PRINT_target
printf("start: target133!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.activate run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target134 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 1024);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 10, 64948224);
  CSB_Write(device, 11, 26874880);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 81725440);
  CSB_Write(device, 14, 13);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 2);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 2148352);
  CSB_Write(device, 27, 137824256);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_target
printf("start: target134!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target135 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 13696);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 288);
  CSB_Write(device, 8, 64);
  CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 10, 81725440);
  CSB_Write(device, 11, 28682752);
  CSB_Write(device, 12, 56576);
  CSB_Write(device, 13, 64948224);
  CSB_Write(device, 14, 14);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 2257920);
  CSB_Write(device, 27, 406259712);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_target
printf("start: target135!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target136 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 2274304);
  CSB_Write(device, 195, 64948224);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 81725440);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_target
printf("start: target136!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target137 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 1024);
  CSB_Write(device, 8, 1024);
  CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 10, 81725440);
  CSB_Write(device, 11, 29587968);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 406259712);
  CSB_Write(device, 14, 3);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 2290688);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 33, 799);
#ifdef PRINT_target
printf("start: target137!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target138 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.pos_emb accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (kvcache ? (0 + ((token - 1) * 64)) : (0 + (last_token * 64))));
  CSB_Write(device, 195, 406259712);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 137824256);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 203, last_token);
  CSB_Write(device, 204, 32);
  CSB_Write(device, 205, 262144);
  CSB_Write(device, 206, 131072);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
#ifdef PRINT_target
printf("start: target138!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target139 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 256);
  CSB_Write(device, 8, 256);
  CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 10, 81725440);
  CSB_Write(device, 11, 29858304);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 406259712);
  CSB_Write(device, 14, 0);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 2307072);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 33, 799);
#ifdef PRINT_target
printf("start: target139!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target140 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.pos_emb accel operator node, storage data in cache18 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (kvcache ? (0 + ((token - 1) * 64)) : (0 + (last_token * 64))));
  CSB_Write(device, 195, 406259712);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, (kvcache ? (25102336 + ((token - 1) * 64)) : (25102336 + (last_token * 64))));
  CSB_Write(device, 199, 524288);
  CSB_Write(device, 200, 131072);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 203, last_token);
  CSB_Write(device, 204, 2);
  CSB_Write(device, 205, 262144);
  CSB_Write(device, 206, 131072);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
#ifdef PRINT_target
printf("start: target140!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target141 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_afterTRP accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 25102336);
  CSB_Write(device, 195, 137824256);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 406259712);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 524288);
  CSB_Write(device, 202, 131072);
  CSB_Write(device, 203, 4);
  CSB_Write(device, 204, token);
  CSB_Write(device, 205, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 206, 11688);
  CSB_Write(device, 207, 991234);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 2);
#ifdef PRINT_target
printf("start: target141!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterTRP run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target142 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.softmax accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (1 - kvcache));
  CSB_Write(device, 195, 406259712);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 137824256);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, (((token + 32) - 1) / 32));
  CSB_Write(device, 202, 32);
  CSB_Write(device, 203, token);
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, (token - last_token));
  CSB_Write(device, 206, last_token);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 8);
#ifdef PRINT_target
printf("start: target142!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.softmax run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target143 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in cache19 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 256);
  CSB_Write(device, 8, 256);
  CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 10, 81725440);
  CSB_Write(device, 11, 29875200);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, (kvcache ? (26150912 + ((token - 1) * 64)) : (26150912 + (last_token * 64))));
  CSB_Write(device, 14, 0);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 2308096);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, 131072);
  CSB_Write(device, 32, 131072);
  CSB_Write(device, 33, 799);
#ifdef PRINT_target
printf("start: target143!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target144 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_afterF2W accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 26150912);
  CSB_Write(device, 195, 137824256);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 81725440);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 524288);
  CSB_Write(device, 202, 131072);
  CSB_Write(device, 203, (((token + 32) - 1) / 32));
  CSB_Write(device, 204, token);
  CSB_Write(device, 205, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 206, 4);
  CSB_Write(device, 207, 991234);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 1);
#ifdef PRINT_target
printf("start: target144!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterF2W run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target145 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 1024);
  CSB_Write(device, 8, 1024);
  CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 10, 81725440);
  CSB_Write(device, 11, 29892096);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 137824256);
  CSB_Write(device, 14, 3);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 2309120);
  CSB_Write(device, 27, 64948224);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_target
printf("start: target145!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target146 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 2325504);
  CSB_Write(device, 195, 137824256);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 64948224);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_target
printf("start: target146!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target147 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 1024);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 10, 64948224);
  CSB_Write(device, 11, 31066368);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 81725440);
  CSB_Write(device, 14, 13);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 2396672);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 33, 799);
#ifdef PRINT_target
printf("start: target147!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target148 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.activate accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 524288);
  CSB_Write(device, 195, 81725440);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 406259712);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 428);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 428);
  CSB_Write(device, 206, 13696);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 16);
#ifdef PRINT_target
printf("start: target148!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.activate run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target149 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 1024);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 10, 64948224);
  CSB_Write(device, 11, 30162432);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 81725440);
  CSB_Write(device, 14, 13);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 2);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 2341888);
  CSB_Write(device, 27, 406259712);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_target
printf("start: target149!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target150 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 13696);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 288);
  CSB_Write(device, 8, 64);
  CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 10, 81725440);
  CSB_Write(device, 11, 31970304);
  CSB_Write(device, 12, 56576);
  CSB_Write(device, 13, 64948224);
  CSB_Write(device, 14, 14);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 2451456);
  CSB_Write(device, 27, 137824256);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_target
printf("start: target150!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target151 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 2467840);
  CSB_Write(device, 195, 64948224);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 81725440);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_target
printf("start: target151!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target152 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 1024);
  CSB_Write(device, 8, 1024);
  CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 10, 81725440);
  CSB_Write(device, 11, 32875520);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 137824256);
  CSB_Write(device, 14, 3);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 2484224);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 33, 799);
#ifdef PRINT_target
printf("start: target152!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target153 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.pos_emb accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (kvcache ? (0 + ((token - 1) * 64)) : (0 + (last_token * 64))));
  CSB_Write(device, 195, 137824256);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 406259712);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 203, last_token);
  CSB_Write(device, 204, 32);
  CSB_Write(device, 205, 262144);
  CSB_Write(device, 206, 131072);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
#ifdef PRINT_target
printf("start: target153!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target154 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 256);
  CSB_Write(device, 8, 256);
  CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 10, 81725440);
  CSB_Write(device, 11, 33145856);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 137824256);
  CSB_Write(device, 14, 0);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 2500608);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 33, 799);
#ifdef PRINT_target
printf("start: target154!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target155 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.pos_emb accel operator node, storage data in cache20 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (kvcache ? (0 + ((token - 1) * 64)) : (0 + (last_token * 64))));
  CSB_Write(device, 195, 137824256);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, (kvcache ? (27199488 + ((token - 1) * 64)) : (27199488 + (last_token * 64))));
  CSB_Write(device, 199, 524288);
  CSB_Write(device, 200, 131072);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 203, last_token);
  CSB_Write(device, 204, 2);
  CSB_Write(device, 205, 262144);
  CSB_Write(device, 206, 131072);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
#ifdef PRINT_target
printf("start: target155!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target156 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_afterTRP accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 27199488);
  CSB_Write(device, 195, 406259712);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 137824256);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 524288);
  CSB_Write(device, 202, 131072);
  CSB_Write(device, 203, 4);
  CSB_Write(device, 204, token);
  CSB_Write(device, 205, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 206, 11688);
  CSB_Write(device, 207, 991234);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 2);
#ifdef PRINT_target
printf("start: target156!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterTRP run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target157 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.softmax accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (1 - kvcache));
  CSB_Write(device, 195, 137824256);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 406259712);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, (((token + 32) - 1) / 32));
  CSB_Write(device, 202, 32);
  CSB_Write(device, 203, token);
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, (token - last_token));
  CSB_Write(device, 206, last_token);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 8);
#ifdef PRINT_target
printf("start: target157!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.softmax run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target158 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in cache21 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 256);
  CSB_Write(device, 8, 256);
  CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 10, 81725440);
  CSB_Write(device, 11, 33162752);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, (kvcache ? (28248064 + ((token - 1) * 64)) : (28248064 + (last_token * 64))));
  CSB_Write(device, 14, 0);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 2501632);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, 131072);
  CSB_Write(device, 32, 131072);
  CSB_Write(device, 33, 799);
#ifdef PRINT_target
printf("start: target158!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target159 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_afterF2W accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 28248064);
  CSB_Write(device, 195, 406259712);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 81725440);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 524288);
  CSB_Write(device, 202, 131072);
  CSB_Write(device, 203, (((token + 32) - 1) / 32));
  CSB_Write(device, 204, token);
  CSB_Write(device, 205, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 206, 4);
  CSB_Write(device, 207, 991234);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 1);
#ifdef PRINT_target
printf("start: target159!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterF2W run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target160 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 1024);
  CSB_Write(device, 8, 1024);
  CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 10, 81725440);
  CSB_Write(device, 11, 33179648);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 406259712);
  CSB_Write(device, 14, 3);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 2502656);
  CSB_Write(device, 27, 64948224);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_target
printf("start: target160!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target161 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 2519040);
  CSB_Write(device, 195, 406259712);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 64948224);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_target
printf("start: target161!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target162 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 1024);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 10, 64948224);
  CSB_Write(device, 11, 34353920);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 81725440);
  CSB_Write(device, 14, 13);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 2590208);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 33, 799);
#ifdef PRINT_target
printf("start: target162!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target163 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.activate accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 524288);
  CSB_Write(device, 195, 81725440);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 137824256);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 428);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 428);
  CSB_Write(device, 206, 13696);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 16);
#ifdef PRINT_target
printf("start: target163!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.activate run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target164 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 1024);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 10, 64948224);
  CSB_Write(device, 11, 33449984);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 81725440);
  CSB_Write(device, 14, 13);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 2);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 2535424);
  CSB_Write(device, 27, 137824256);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_target
printf("start: target164!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target165 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 13696);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 288);
  CSB_Write(device, 8, 64);
  CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 10, 81725440);
  CSB_Write(device, 11, 35257856);
  CSB_Write(device, 12, 56576);
  CSB_Write(device, 13, 64948224);
  CSB_Write(device, 14, 14);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 2644992);
  CSB_Write(device, 27, 406259712);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_target
printf("start: target165!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target166 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 2661376);
  CSB_Write(device, 195, 64948224);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 81725440);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_target
printf("start: target166!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target167 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 1024);
  CSB_Write(device, 8, 1024);
  CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 10, 81725440);
  CSB_Write(device, 11, 36163072);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 406259712);
  CSB_Write(device, 14, 3);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 2677760);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 33, 799);
#ifdef PRINT_target
printf("start: target167!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target168 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.pos_emb accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (kvcache ? (0 + ((token - 1) * 64)) : (0 + (last_token * 64))));
  CSB_Write(device, 195, 406259712);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 137824256);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 203, last_token);
  CSB_Write(device, 204, 32);
  CSB_Write(device, 205, 262144);
  CSB_Write(device, 206, 131072);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
#ifdef PRINT_target
printf("start: target168!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target169 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 256);
  CSB_Write(device, 8, 256);
  CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 10, 81725440);
  CSB_Write(device, 11, 36433408);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 406259712);
  CSB_Write(device, 14, 0);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 2694144);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 33, 799);
#ifdef PRINT_target
printf("start: target169!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target170 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.pos_emb accel operator node, storage data in cache22 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (kvcache ? (0 + ((token - 1) * 64)) : (0 + (last_token * 64))));
  CSB_Write(device, 195, 406259712);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, (kvcache ? (29296640 + ((token - 1) * 64)) : (29296640 + (last_token * 64))));
  CSB_Write(device, 199, 524288);
  CSB_Write(device, 200, 131072);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 203, last_token);
  CSB_Write(device, 204, 2);
  CSB_Write(device, 205, 262144);
  CSB_Write(device, 206, 131072);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
#ifdef PRINT_target
printf("start: target170!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target171 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_afterTRP accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 29296640);
  CSB_Write(device, 195, 137824256);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 406259712);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 524288);
  CSB_Write(device, 202, 131072);
  CSB_Write(device, 203, 4);
  CSB_Write(device, 204, token);
  CSB_Write(device, 205, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 206, 11688);
  CSB_Write(device, 207, 991234);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 2);
#ifdef PRINT_target
printf("start: target171!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterTRP run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target172 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.softmax accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (1 - kvcache));
  CSB_Write(device, 195, 406259712);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 137824256);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, (((token + 32) - 1) / 32));
  CSB_Write(device, 202, 32);
  CSB_Write(device, 203, token);
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, (token - last_token));
  CSB_Write(device, 206, last_token);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 8);
#ifdef PRINT_target
printf("start: target172!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.softmax run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target173 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in cache23 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 256);
  CSB_Write(device, 8, 256);
  CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 10, 81725440);
  CSB_Write(device, 11, 36450304);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, (kvcache ? (30345216 + ((token - 1) * 64)) : (30345216 + (last_token * 64))));
  CSB_Write(device, 14, 0);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 2695168);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, 131072);
  CSB_Write(device, 32, 131072);
  CSB_Write(device, 33, 799);
#ifdef PRINT_target
printf("start: target173!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target174 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_afterF2W accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 30345216);
  CSB_Write(device, 195, 137824256);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 81725440);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 524288);
  CSB_Write(device, 202, 131072);
  CSB_Write(device, 203, (((token + 32) - 1) / 32));
  CSB_Write(device, 204, token);
  CSB_Write(device, 205, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 206, 4);
  CSB_Write(device, 207, 991234);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 1);
#ifdef PRINT_target
printf("start: target174!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterF2W run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target175 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 1024);
  CSB_Write(device, 8, 1024);
  CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 10, 81725440);
  CSB_Write(device, 11, 36467200);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 137824256);
  CSB_Write(device, 14, 3);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 2696192);
  CSB_Write(device, 27, 64948224);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_target
printf("start: target175!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target176 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 2712576);
  CSB_Write(device, 195, 137824256);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 64948224);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_target
printf("start: target176!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target177 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 1024);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 10, 64948224);
  CSB_Write(device, 11, 37641472);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 81725440);
  CSB_Write(device, 14, 13);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 2783744);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 33, 799);
#ifdef PRINT_target
printf("start: target177!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target178 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.activate accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 524288);
  CSB_Write(device, 195, 81725440);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 406259712);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 428);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 428);
  CSB_Write(device, 206, 13696);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 16);
#ifdef PRINT_target
printf("start: target178!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.activate run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target179 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 1024);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 10, 64948224);
  CSB_Write(device, 11, 36737536);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 81725440);
  CSB_Write(device, 14, 13);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 2);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 2728960);
  CSB_Write(device, 27, 406259712);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_target
printf("start: target179!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target180 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 13696);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 288);
  CSB_Write(device, 8, 64);
  CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 10, 81725440);
  CSB_Write(device, 11, 38545408);
  CSB_Write(device, 12, 56576);
  CSB_Write(device, 13, 64948224);
  CSB_Write(device, 14, 14);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 2838528);
  CSB_Write(device, 27, 137824256);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_target
printf("start: target180!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target181 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 2854912);
  CSB_Write(device, 195, 64948224);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 81725440);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_target
printf("start: target181!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target182 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 1024);
  CSB_Write(device, 8, 1024);
  CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 10, 81725440);
  CSB_Write(device, 11, 39450624);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 137824256);
  CSB_Write(device, 14, 3);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 2871296);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 33, 799);
#ifdef PRINT_target
printf("start: target182!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target183 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.pos_emb accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (kvcache ? (0 + ((token - 1) * 64)) : (0 + (last_token * 64))));
  CSB_Write(device, 195, 137824256);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 406259712);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 203, last_token);
  CSB_Write(device, 204, 32);
  CSB_Write(device, 205, 262144);
  CSB_Write(device, 206, 131072);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
#ifdef PRINT_target
printf("start: target183!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target184 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 256);
  CSB_Write(device, 8, 256);
  CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 10, 81725440);
  CSB_Write(device, 11, 39720960);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 137824256);
  CSB_Write(device, 14, 0);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 2887680);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 33, 799);
#ifdef PRINT_target
printf("start: target184!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target185 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.pos_emb accel operator node, storage data in cache24 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (kvcache ? (0 + ((token - 1) * 64)) : (0 + (last_token * 64))));
  CSB_Write(device, 195, 137824256);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, (kvcache ? (31393792 + ((token - 1) * 64)) : (31393792 + (last_token * 64))));
  CSB_Write(device, 199, 524288);
  CSB_Write(device, 200, 131072);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 203, last_token);
  CSB_Write(device, 204, 2);
  CSB_Write(device, 205, 262144);
  CSB_Write(device, 206, 131072);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
#ifdef PRINT_target
printf("start: target185!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target186 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_afterTRP accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 31393792);
  CSB_Write(device, 195, 406259712);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 137824256);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 524288);
  CSB_Write(device, 202, 131072);
  CSB_Write(device, 203, 4);
  CSB_Write(device, 204, token);
  CSB_Write(device, 205, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 206, 11688);
  CSB_Write(device, 207, 991234);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 2);
#ifdef PRINT_target
printf("start: target186!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterTRP run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target187 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.softmax accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (1 - kvcache));
  CSB_Write(device, 195, 137824256);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 406259712);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, (((token + 32) - 1) / 32));
  CSB_Write(device, 202, 32);
  CSB_Write(device, 203, token);
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, (token - last_token));
  CSB_Write(device, 206, last_token);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 8);
#ifdef PRINT_target
printf("start: target187!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.softmax run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target188 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in cache25 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 256);
  CSB_Write(device, 8, 256);
  CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 10, 81725440);
  CSB_Write(device, 11, 39737856);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, (kvcache ? (32442368 + ((token - 1) * 64)) : (32442368 + (last_token * 64))));
  CSB_Write(device, 14, 0);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 2888704);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, 131072);
  CSB_Write(device, 32, 131072);
  CSB_Write(device, 33, 799);
#ifdef PRINT_target
printf("start: target188!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target189 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_afterF2W accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 32442368);
  CSB_Write(device, 195, 406259712);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 81725440);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 524288);
  CSB_Write(device, 202, 131072);
  CSB_Write(device, 203, (((token + 32) - 1) / 32));
  CSB_Write(device, 204, token);
  CSB_Write(device, 205, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 206, 4);
  CSB_Write(device, 207, 991234);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 1);
#ifdef PRINT_target
printf("start: target189!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterF2W run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target190 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 1024);
  CSB_Write(device, 8, 1024);
  CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 10, 81725440);
  CSB_Write(device, 11, 39754752);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 406259712);
  CSB_Write(device, 14, 3);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 2889728);
  CSB_Write(device, 27, 64948224);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_target
printf("start: target190!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target191 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 2906112);
  CSB_Write(device, 195, 406259712);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 64948224);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_target
printf("start: target191!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target192 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 1024);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 10, 64948224);
  CSB_Write(device, 11, 40929024);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 81725440);
  CSB_Write(device, 14, 13);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 2977280);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 33, 799);
#ifdef PRINT_target
printf("start: target192!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target193 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.activate accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 524288);
  CSB_Write(device, 195, 81725440);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 137824256);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 428);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 428);
  CSB_Write(device, 206, 13696);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 16);
#ifdef PRINT_target
printf("start: target193!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.activate run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target194 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 1024);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 10, 64948224);
  CSB_Write(device, 11, 40025088);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 81725440);
  CSB_Write(device, 14, 13);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 2);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 2922496);
  CSB_Write(device, 27, 137824256);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_target
printf("start: target194!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target195 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 13696);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 288);
  CSB_Write(device, 8, 64);
  CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 10, 81725440);
  CSB_Write(device, 11, 41832960);
  CSB_Write(device, 12, 56576);
  CSB_Write(device, 13, 64948224);
  CSB_Write(device, 14, 14);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 3032064);
  CSB_Write(device, 27, 406259712);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_target
printf("start: target195!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target196 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 3048448);
  CSB_Write(device, 195, 64948224);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 81725440);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_target
printf("start: target196!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target197 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 1024);
  CSB_Write(device, 8, 1024);
  CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 10, 81725440);
  CSB_Write(device, 11, 42738176);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 406259712);
  CSB_Write(device, 14, 3);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 3064832);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 33, 799);
#ifdef PRINT_target
printf("start: target197!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target198 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.pos_emb accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (kvcache ? (0 + ((token - 1) * 64)) : (0 + (last_token * 64))));
  CSB_Write(device, 195, 406259712);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 137824256);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 203, last_token);
  CSB_Write(device, 204, 32);
  CSB_Write(device, 205, 262144);
  CSB_Write(device, 206, 131072);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
#ifdef PRINT_target
printf("start: target198!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target199 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 256);
  CSB_Write(device, 8, 256);
  CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 10, 81725440);
  CSB_Write(device, 11, 43008512);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 406259712);
  CSB_Write(device, 14, 0);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 3081216);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 33, 799);
#ifdef PRINT_target
printf("start: target199!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target200 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.pos_emb accel operator node, storage data in cache26 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (kvcache ? (0 + ((token - 1) * 64)) : (0 + (last_token * 64))));
  CSB_Write(device, 195, 406259712);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, (kvcache ? (33490944 + ((token - 1) * 64)) : (33490944 + (last_token * 64))));
  CSB_Write(device, 199, 524288);
  CSB_Write(device, 200, 131072);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 203, last_token);
  CSB_Write(device, 204, 2);
  CSB_Write(device, 205, 262144);
  CSB_Write(device, 206, 131072);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
#ifdef PRINT_target
printf("start: target200!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target201 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_afterTRP accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 33490944);
  CSB_Write(device, 195, 137824256);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 406259712);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 524288);
  CSB_Write(device, 202, 131072);
  CSB_Write(device, 203, 4);
  CSB_Write(device, 204, token);
  CSB_Write(device, 205, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 206, 11688);
  CSB_Write(device, 207, 991234);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 2);
#ifdef PRINT_target
printf("start: target201!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterTRP run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target202 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.softmax accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (1 - kvcache));
  CSB_Write(device, 195, 406259712);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 137824256);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, (((token + 32) - 1) / 32));
  CSB_Write(device, 202, 32);
  CSB_Write(device, 203, token);
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, (token - last_token));
  CSB_Write(device, 206, last_token);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 8);
#ifdef PRINT_target
printf("start: target202!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.softmax run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target203 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in cache27 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 256);
  CSB_Write(device, 8, 256);
  CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 10, 81725440);
  CSB_Write(device, 11, 43025408);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, (kvcache ? (34539520 + ((token - 1) * 64)) : (34539520 + (last_token * 64))));
  CSB_Write(device, 14, 0);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 3082240);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, 131072);
  CSB_Write(device, 32, 131072);
  CSB_Write(device, 33, 799);
#ifdef PRINT_target
printf("start: target203!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target204 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_afterF2W accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 34539520);
  CSB_Write(device, 195, 137824256);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 81725440);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 524288);
  CSB_Write(device, 202, 131072);
  CSB_Write(device, 203, (((token + 32) - 1) / 32));
  CSB_Write(device, 204, token);
  CSB_Write(device, 205, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 206, 4);
  CSB_Write(device, 207, 991234);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 1);
#ifdef PRINT_target
printf("start: target204!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterF2W run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target205 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 1024);
  CSB_Write(device, 8, 1024);
  CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 10, 81725440);
  CSB_Write(device, 11, 43042304);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 137824256);
  CSB_Write(device, 14, 3);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 3083264);
  CSB_Write(device, 27, 64948224);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_target
printf("start: target205!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target206 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 3099648);
  CSB_Write(device, 195, 137824256);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 64948224);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_target
printf("start: target206!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target207 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 1024);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 10, 64948224);
  CSB_Write(device, 11, 44216576);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 81725440);
  CSB_Write(device, 14, 13);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 3170816);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 33, 799);
#ifdef PRINT_target
printf("start: target207!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target208 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.activate accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 524288);
  CSB_Write(device, 195, 81725440);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 406259712);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 428);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 428);
  CSB_Write(device, 206, 13696);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 16);
#ifdef PRINT_target
printf("start: target208!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.activate run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target209 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 1024);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 10, 64948224);
  CSB_Write(device, 11, 43312640);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 81725440);
  CSB_Write(device, 14, 13);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 2);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 3116032);
  CSB_Write(device, 27, 406259712);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_target
printf("start: target209!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target210 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 13696);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 288);
  CSB_Write(device, 8, 64);
  CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 10, 81725440);
  CSB_Write(device, 11, 45120512);
  CSB_Write(device, 12, 56576);
  CSB_Write(device, 13, 64948224);
  CSB_Write(device, 14, 14);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 3225600);
  CSB_Write(device, 27, 137824256);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_target
printf("start: target210!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target211 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 3241984);
  CSB_Write(device, 195, 64948224);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 81725440);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_target
printf("start: target211!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target212 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 1024);
  CSB_Write(device, 8, 1024);
  CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 10, 81725440);
  CSB_Write(device, 11, 46025728);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 137824256);
  CSB_Write(device, 14, 3);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 3258368);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 33, 799);
#ifdef PRINT_target
printf("start: target212!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target213 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.pos_emb accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (kvcache ? (0 + ((token - 1) * 64)) : (0 + (last_token * 64))));
  CSB_Write(device, 195, 137824256);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 406259712);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 203, last_token);
  CSB_Write(device, 204, 32);
  CSB_Write(device, 205, 262144);
  CSB_Write(device, 206, 131072);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
#ifdef PRINT_target
printf("start: target213!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target214 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 256);
  CSB_Write(device, 8, 256);
  CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 10, 81725440);
  CSB_Write(device, 11, 46296064);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 137824256);
  CSB_Write(device, 14, 0);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 3274752);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 33, 799);
#ifdef PRINT_target
printf("start: target214!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target215 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.pos_emb accel operator node, storage data in cache28 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (kvcache ? (0 + ((token - 1) * 64)) : (0 + (last_token * 64))));
  CSB_Write(device, 195, 137824256);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, (kvcache ? (35588096 + ((token - 1) * 64)) : (35588096 + (last_token * 64))));
  CSB_Write(device, 199, 524288);
  CSB_Write(device, 200, 131072);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 203, last_token);
  CSB_Write(device, 204, 2);
  CSB_Write(device, 205, 262144);
  CSB_Write(device, 206, 131072);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
#ifdef PRINT_target
printf("start: target215!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target216 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_afterTRP accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 35588096);
  CSB_Write(device, 195, 406259712);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 137824256);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 524288);
  CSB_Write(device, 202, 131072);
  CSB_Write(device, 203, 4);
  CSB_Write(device, 204, token);
  CSB_Write(device, 205, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 206, 11688);
  CSB_Write(device, 207, 991234);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 2);
#ifdef PRINT_target
printf("start: target216!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterTRP run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target217 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.softmax accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (1 - kvcache));
  CSB_Write(device, 195, 137824256);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 406259712);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, (((token + 32) - 1) / 32));
  CSB_Write(device, 202, 32);
  CSB_Write(device, 203, token);
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, (token - last_token));
  CSB_Write(device, 206, last_token);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 8);
#ifdef PRINT_target
printf("start: target217!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.softmax run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target218 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in cache29 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 256);
  CSB_Write(device, 8, 256);
  CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 10, 81725440);
  CSB_Write(device, 11, 46312960);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, (kvcache ? (36636672 + ((token - 1) * 64)) : (36636672 + (last_token * 64))));
  CSB_Write(device, 14, 0);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 3275776);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, 131072);
  CSB_Write(device, 32, 131072);
  CSB_Write(device, 33, 799);
#ifdef PRINT_target
printf("start: target218!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target219 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_afterF2W accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 36636672);
  CSB_Write(device, 195, 406259712);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 81725440);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 524288);
  CSB_Write(device, 202, 131072);
  CSB_Write(device, 203, (((token + 32) - 1) / 32));
  CSB_Write(device, 204, token);
  CSB_Write(device, 205, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 206, 4);
  CSB_Write(device, 207, 991234);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 1);
#ifdef PRINT_target
printf("start: target219!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterF2W run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target220 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 1024);
  CSB_Write(device, 8, 1024);
  CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 10, 81725440);
  CSB_Write(device, 11, 46329856);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 406259712);
  CSB_Write(device, 14, 3);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 3276800);
  CSB_Write(device, 27, 64948224);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_target
printf("start: target220!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target221 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 3293184);
  CSB_Write(device, 195, 406259712);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 64948224);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_target
printf("start: target221!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target222 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 1024);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 10, 64948224);
  CSB_Write(device, 11, 47504128);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 81725440);
  CSB_Write(device, 14, 13);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 3364352);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 33, 799);
#ifdef PRINT_target
printf("start: target222!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target223 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.activate accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 524288);
  CSB_Write(device, 195, 81725440);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 137824256);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 428);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 428);
  CSB_Write(device, 206, 13696);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 16);
#ifdef PRINT_target
printf("start: target223!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.activate run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target224 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 1024);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 10, 64948224);
  CSB_Write(device, 11, 46600192);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 81725440);
  CSB_Write(device, 14, 13);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 2);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 3309568);
  CSB_Write(device, 27, 137824256);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_target
printf("start: target224!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target225 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 13696);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 288);
  CSB_Write(device, 8, 64);
  CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 10, 81725440);
  CSB_Write(device, 11, 48408064);
  CSB_Write(device, 12, 56576);
  CSB_Write(device, 13, 64948224);
  CSB_Write(device, 14, 14);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 3419136);
  CSB_Write(device, 27, 406259712);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_target
printf("start: target225!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target226 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 3435520);
  CSB_Write(device, 195, 64948224);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 81725440);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_target
printf("start: target226!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target227 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 1024);
  CSB_Write(device, 8, 1024);
  CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 10, 81725440);
  CSB_Write(device, 11, 49313280);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 406259712);
  CSB_Write(device, 14, 3);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 3451904);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 33, 799);
#ifdef PRINT_target
printf("start: target227!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target228 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.pos_emb accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (kvcache ? (0 + ((token - 1) * 64)) : (0 + (last_token * 64))));
  CSB_Write(device, 195, 406259712);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 137824256);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 203, last_token);
  CSB_Write(device, 204, 32);
  CSB_Write(device, 205, 262144);
  CSB_Write(device, 206, 131072);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
#ifdef PRINT_target
printf("start: target228!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target229 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 256);
  CSB_Write(device, 8, 256);
  CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 10, 81725440);
  CSB_Write(device, 11, 49583616);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 406259712);
  CSB_Write(device, 14, 0);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 3468288);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 33, 799);
#ifdef PRINT_target
printf("start: target229!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target230 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.pos_emb accel operator node, storage data in cache30 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (kvcache ? (0 + ((token - 1) * 64)) : (0 + (last_token * 64))));
  CSB_Write(device, 195, 406259712);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, (kvcache ? (37685248 + ((token - 1) * 64)) : (37685248 + (last_token * 64))));
  CSB_Write(device, 199, 524288);
  CSB_Write(device, 200, 131072);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 203, last_token);
  CSB_Write(device, 204, 2);
  CSB_Write(device, 205, 262144);
  CSB_Write(device, 206, 131072);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
#ifdef PRINT_target
printf("start: target230!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target231 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_afterTRP accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 37685248);
  CSB_Write(device, 195, 137824256);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 406259712);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 524288);
  CSB_Write(device, 202, 131072);
  CSB_Write(device, 203, 4);
  CSB_Write(device, 204, token);
  CSB_Write(device, 205, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 206, 11688);
  CSB_Write(device, 207, 991234);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 2);
#ifdef PRINT_target
printf("start: target231!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterTRP run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target232 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.softmax accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (1 - kvcache));
  CSB_Write(device, 195, 406259712);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 137824256);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, (((token + 32) - 1) / 32));
  CSB_Write(device, 202, 32);
  CSB_Write(device, 203, token);
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, (token - last_token));
  CSB_Write(device, 206, last_token);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 8);
#ifdef PRINT_target
printf("start: target232!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.softmax run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target233 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in cache31 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 256);
  CSB_Write(device, 8, 256);
  CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 10, 81725440);
  CSB_Write(device, 11, 49600512);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, (kvcache ? (38733824 + ((token - 1) * 64)) : (38733824 + (last_token * 64))));
  CSB_Write(device, 14, 0);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 3469312);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, 131072);
  CSB_Write(device, 32, 131072);
  CSB_Write(device, 33, 799);
#ifdef PRINT_target
printf("start: target233!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target234 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_afterF2W accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 38733824);
  CSB_Write(device, 195, 137824256);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 81725440);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 524288);
  CSB_Write(device, 202, 131072);
  CSB_Write(device, 203, (((token + 32) - 1) / 32));
  CSB_Write(device, 204, token);
  CSB_Write(device, 205, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 206, 4);
  CSB_Write(device, 207, 991234);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 1);
#ifdef PRINT_target
printf("start: target234!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterF2W run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target235 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 1024);
  CSB_Write(device, 8, 1024);
  CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 10, 81725440);
  CSB_Write(device, 11, 49617408);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 137824256);
  CSB_Write(device, 14, 3);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 3470336);
  CSB_Write(device, 27, 64948224);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_target
printf("start: target235!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target236 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 3486720);
  CSB_Write(device, 195, 137824256);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 64948224);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_target
printf("start: target236!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target237 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 1024);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 10, 64948224);
  CSB_Write(device, 11, 50791680);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 81725440);
  CSB_Write(device, 14, 13);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 3557888);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 33, 799);
#ifdef PRINT_target
printf("start: target237!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target238 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.activate accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 524288);
  CSB_Write(device, 195, 81725440);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 406259712);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 428);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 428);
  CSB_Write(device, 206, 13696);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 16);
#ifdef PRINT_target
printf("start: target238!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.activate run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target239 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 1024);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 10, 64948224);
  CSB_Write(device, 11, 49887744);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 81725440);
  CSB_Write(device, 14, 13);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 2);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 3503104);
  CSB_Write(device, 27, 406259712);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_target
printf("start: target239!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target240 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 13696);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 288);
  CSB_Write(device, 8, 64);
  CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 10, 81725440);
  CSB_Write(device, 11, 51695616);
  CSB_Write(device, 12, 56576);
  CSB_Write(device, 13, 64948224);
  CSB_Write(device, 14, 14);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 3612672);
  CSB_Write(device, 27, 137824256);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_target
printf("start: target240!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target241 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 3629056);
  CSB_Write(device, 195, 64948224);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 81725440);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_target
printf("start: target241!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target242 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 1024);
  CSB_Write(device, 8, 1024);
  CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 10, 81725440);
  CSB_Write(device, 11, 52600832);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 137824256);
  CSB_Write(device, 14, 3);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 3645440);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 33, 799);
#ifdef PRINT_target
printf("start: target242!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target243 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.pos_emb accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (kvcache ? (0 + ((token - 1) * 64)) : (0 + (last_token * 64))));
  CSB_Write(device, 195, 137824256);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 406259712);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 203, last_token);
  CSB_Write(device, 204, 32);
  CSB_Write(device, 205, 262144);
  CSB_Write(device, 206, 131072);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
#ifdef PRINT_target
printf("start: target243!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target244 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 256);
  CSB_Write(device, 8, 256);
  CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 10, 81725440);
  CSB_Write(device, 11, 52871168);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 137824256);
  CSB_Write(device, 14, 0);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 3661824);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 33, 799);
#ifdef PRINT_target
printf("start: target244!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target245 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.pos_emb accel operator node, storage data in cache32 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (kvcache ? (0 + ((token - 1) * 64)) : (0 + (last_token * 64))));
  CSB_Write(device, 195, 137824256);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, (kvcache ? (39782400 + ((token - 1) * 64)) : (39782400 + (last_token * 64))));
  CSB_Write(device, 199, 524288);
  CSB_Write(device, 200, 131072);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 203, last_token);
  CSB_Write(device, 204, 2);
  CSB_Write(device, 205, 262144);
  CSB_Write(device, 206, 131072);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
#ifdef PRINT_target
printf("start: target245!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target246 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_afterTRP accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 39782400);
  CSB_Write(device, 195, 406259712);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 137824256);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 524288);
  CSB_Write(device, 202, 131072);
  CSB_Write(device, 203, 4);
  CSB_Write(device, 204, token);
  CSB_Write(device, 205, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 206, 11688);
  CSB_Write(device, 207, 991234);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 2);
#ifdef PRINT_target
printf("start: target246!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterTRP run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target247 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.softmax accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (1 - kvcache));
  CSB_Write(device, 195, 137824256);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 406259712);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, (((token + 32) - 1) / 32));
  CSB_Write(device, 202, 32);
  CSB_Write(device, 203, token);
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, (token - last_token));
  CSB_Write(device, 206, last_token);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 8);
#ifdef PRINT_target
printf("start: target247!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.softmax run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target248 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in cache33 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 256);
  CSB_Write(device, 8, 256);
  CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 10, 81725440);
  CSB_Write(device, 11, 52888064);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, (kvcache ? (40830976 + ((token - 1) * 64)) : (40830976 + (last_token * 64))));
  CSB_Write(device, 14, 0);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 3662848);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, 131072);
  CSB_Write(device, 32, 131072);
  CSB_Write(device, 33, 799);
#ifdef PRINT_target
printf("start: target248!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target249 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_afterF2W accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 40830976);
  CSB_Write(device, 195, 406259712);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 81725440);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 524288);
  CSB_Write(device, 202, 131072);
  CSB_Write(device, 203, (((token + 32) - 1) / 32));
  CSB_Write(device, 204, token);
  CSB_Write(device, 205, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 206, 4);
  CSB_Write(device, 207, 991234);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 1);
#ifdef PRINT_target
printf("start: target249!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterF2W run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target250 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 1024);
  CSB_Write(device, 8, 1024);
  CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 10, 81725440);
  CSB_Write(device, 11, 52904960);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 406259712);
  CSB_Write(device, 14, 3);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 3663872);
  CSB_Write(device, 27, 64948224);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_target
printf("start: target250!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target251 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 3680256);
  CSB_Write(device, 195, 406259712);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 64948224);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_target
printf("start: target251!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target252 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 1024);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 10, 64948224);
  CSB_Write(device, 11, 54079232);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 81725440);
  CSB_Write(device, 14, 13);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 3751424);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 33, 799);
#ifdef PRINT_target
printf("start: target252!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target253 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.activate accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 524288);
  CSB_Write(device, 195, 81725440);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 137824256);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 428);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 428);
  CSB_Write(device, 206, 13696);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 16);
#ifdef PRINT_target
printf("start: target253!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.activate run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target254 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 1024);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 10, 64948224);
  CSB_Write(device, 11, 53175296);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 81725440);
  CSB_Write(device, 14, 13);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 2);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 3696640);
  CSB_Write(device, 27, 137824256);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_target
printf("start: target254!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target255 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 13696);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 288);
  CSB_Write(device, 8, 64);
  CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 10, 81725440);
  CSB_Write(device, 11, 54983168);
  CSB_Write(device, 12, 56576);
  CSB_Write(device, 13, 64948224);
  CSB_Write(device, 14, 14);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 3806208);
  CSB_Write(device, 27, 406259712);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_target
printf("start: target255!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target256 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 3822592);
  CSB_Write(device, 195, 64948224);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 81725440);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_target
printf("start: target256!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target257 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 1024);
  CSB_Write(device, 8, 1024);
  CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 10, 81725440);
  CSB_Write(device, 11, 55888384);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 406259712);
  CSB_Write(device, 14, 3);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 3838976);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 33, 799);
#ifdef PRINT_target
printf("start: target257!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target258 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.pos_emb accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (kvcache ? (0 + ((token - 1) * 64)) : (0 + (last_token * 64))));
  CSB_Write(device, 195, 406259712);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 137824256);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 203, last_token);
  CSB_Write(device, 204, 32);
  CSB_Write(device, 205, 262144);
  CSB_Write(device, 206, 131072);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
#ifdef PRINT_target
printf("start: target258!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target259 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 256);
  CSB_Write(device, 8, 256);
  CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 10, 81725440);
  CSB_Write(device, 11, 56158720);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 406259712);
  CSB_Write(device, 14, 0);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 3855360);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 33, 799);
#ifdef PRINT_target
printf("start: target259!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target260 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.pos_emb accel operator node, storage data in cache34 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (kvcache ? (0 + ((token - 1) * 64)) : (0 + (last_token * 64))));
  CSB_Write(device, 195, 406259712);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, (kvcache ? (41879552 + ((token - 1) * 64)) : (41879552 + (last_token * 64))));
  CSB_Write(device, 199, 524288);
  CSB_Write(device, 200, 131072);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 203, last_token);
  CSB_Write(device, 204, 2);
  CSB_Write(device, 205, 262144);
  CSB_Write(device, 206, 131072);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
#ifdef PRINT_target
printf("start: target260!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target261 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_afterTRP accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 41879552);
  CSB_Write(device, 195, 137824256);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 406259712);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 524288);
  CSB_Write(device, 202, 131072);
  CSB_Write(device, 203, 4);
  CSB_Write(device, 204, token);
  CSB_Write(device, 205, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 206, 11688);
  CSB_Write(device, 207, 991234);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 2);
#ifdef PRINT_target
printf("start: target261!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterTRP run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target262 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.softmax accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (1 - kvcache));
  CSB_Write(device, 195, 406259712);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 137824256);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, (((token + 32) - 1) / 32));
  CSB_Write(device, 202, 32);
  CSB_Write(device, 203, token);
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, (token - last_token));
  CSB_Write(device, 206, last_token);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 8);
#ifdef PRINT_target
printf("start: target262!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.softmax run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target263 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in cache35 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 256);
  CSB_Write(device, 8, 256);
  CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 10, 81725440);
  CSB_Write(device, 11, 56175616);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, (kvcache ? (42928128 + ((token - 1) * 64)) : (42928128 + (last_token * 64))));
  CSB_Write(device, 14, 0);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 3856384);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, 131072);
  CSB_Write(device, 32, 131072);
  CSB_Write(device, 33, 799);
#ifdef PRINT_target
printf("start: target263!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target264 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_afterF2W accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 42928128);
  CSB_Write(device, 195, 137824256);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 81725440);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 524288);
  CSB_Write(device, 202, 131072);
  CSB_Write(device, 203, (((token + 32) - 1) / 32));
  CSB_Write(device, 204, token);
  CSB_Write(device, 205, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 206, 4);
  CSB_Write(device, 207, 991234);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 1);
#ifdef PRINT_target
printf("start: target264!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterF2W run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target265 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 1024);
  CSB_Write(device, 8, 1024);
  CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 10, 81725440);
  CSB_Write(device, 11, 56192512);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 137824256);
  CSB_Write(device, 14, 3);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 3857408);
  CSB_Write(device, 27, 64948224);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_target
printf("start: target265!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target266 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 3873792);
  CSB_Write(device, 195, 137824256);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 64948224);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_target
printf("start: target266!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target267 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 1024);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 10, 64948224);
  CSB_Write(device, 11, 57366784);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 81725440);
  CSB_Write(device, 14, 13);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 3944960);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 33, 799);
#ifdef PRINT_target
printf("start: target267!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target268 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.activate accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 524288);
  CSB_Write(device, 195, 81725440);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 406259712);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 428);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 428);
  CSB_Write(device, 206, 13696);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 16);
#ifdef PRINT_target
printf("start: target268!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.activate run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target269 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 1024);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 10, 64948224);
  CSB_Write(device, 11, 56462848);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 81725440);
  CSB_Write(device, 14, 13);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 2);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 3890176);
  CSB_Write(device, 27, 406259712);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_target
printf("start: target269!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target270 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 13696);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 288);
  CSB_Write(device, 8, 64);
  CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 10, 81725440);
  CSB_Write(device, 11, 58270720);
  CSB_Write(device, 12, 56576);
  CSB_Write(device, 13, 64948224);
  CSB_Write(device, 14, 14);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 3999744);
  CSB_Write(device, 27, 137824256);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_target
printf("start: target270!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target271 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 4016128);
  CSB_Write(device, 195, 64948224);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 81725440);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_target
printf("start: target271!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target272 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 1024);
  CSB_Write(device, 8, 1024);
  CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 10, 81725440);
  CSB_Write(device, 11, 59175936);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 137824256);
  CSB_Write(device, 14, 3);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 4032512);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 33, 799);
#ifdef PRINT_target
printf("start: target272!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target273 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.pos_emb accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (kvcache ? (0 + ((token - 1) * 64)) : (0 + (last_token * 64))));
  CSB_Write(device, 195, 137824256);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 406259712);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 203, last_token);
  CSB_Write(device, 204, 32);
  CSB_Write(device, 205, 262144);
  CSB_Write(device, 206, 131072);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
#ifdef PRINT_target
printf("start: target273!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target274 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 256);
  CSB_Write(device, 8, 256);
  CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 10, 81725440);
  CSB_Write(device, 11, 59446272);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 137824256);
  CSB_Write(device, 14, 0);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 4048896);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 33, 799);
#ifdef PRINT_target
printf("start: target274!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target275 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.pos_emb accel operator node, storage data in cache36 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (kvcache ? (0 + ((token - 1) * 64)) : (0 + (last_token * 64))));
  CSB_Write(device, 195, 137824256);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, (kvcache ? (43976704 + ((token - 1) * 64)) : (43976704 + (last_token * 64))));
  CSB_Write(device, 199, 524288);
  CSB_Write(device, 200, 131072);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 203, last_token);
  CSB_Write(device, 204, 2);
  CSB_Write(device, 205, 262144);
  CSB_Write(device, 206, 131072);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
#ifdef PRINT_target
printf("start: target275!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target276 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_afterTRP accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 43976704);
  CSB_Write(device, 195, 406259712);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 137824256);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 524288);
  CSB_Write(device, 202, 131072);
  CSB_Write(device, 203, 4);
  CSB_Write(device, 204, token);
  CSB_Write(device, 205, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 206, 11688);
  CSB_Write(device, 207, 991234);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 2);
#ifdef PRINT_target
printf("start: target276!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterTRP run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target277 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.softmax accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (1 - kvcache));
  CSB_Write(device, 195, 137824256);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 406259712);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, (((token + 32) - 1) / 32));
  CSB_Write(device, 202, 32);
  CSB_Write(device, 203, token);
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, (token - last_token));
  CSB_Write(device, 206, last_token);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 8);
#ifdef PRINT_target
printf("start: target277!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.softmax run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target278 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in cache37 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 256);
  CSB_Write(device, 8, 256);
  CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 10, 81725440);
  CSB_Write(device, 11, 59463168);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, (kvcache ? (45025280 + ((token - 1) * 64)) : (45025280 + (last_token * 64))));
  CSB_Write(device, 14, 0);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 4049920);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, 131072);
  CSB_Write(device, 32, 131072);
  CSB_Write(device, 33, 799);
#ifdef PRINT_target
printf("start: target278!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target279 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_afterF2W accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 45025280);
  CSB_Write(device, 195, 406259712);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 81725440);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 524288);
  CSB_Write(device, 202, 131072);
  CSB_Write(device, 203, (((token + 32) - 1) / 32));
  CSB_Write(device, 204, token);
  CSB_Write(device, 205, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 206, 4);
  CSB_Write(device, 207, 991234);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 1);
#ifdef PRINT_target
printf("start: target279!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterF2W run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target280 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 1024);
  CSB_Write(device, 8, 1024);
  CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 10, 81725440);
  CSB_Write(device, 11, 59480064);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 406259712);
  CSB_Write(device, 14, 3);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 4050944);
  CSB_Write(device, 27, 64948224);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_target
printf("start: target280!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target281 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 4067328);
  CSB_Write(device, 195, 406259712);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 64948224);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_target
printf("start: target281!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target282 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 1024);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 10, 64948224);
  CSB_Write(device, 11, 60654336);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 81725440);
  CSB_Write(device, 14, 13);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 4138496);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 33, 799);
#ifdef PRINT_target
printf("start: target282!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target283 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.activate accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 524288);
  CSB_Write(device, 195, 81725440);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 137824256);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 428);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 428);
  CSB_Write(device, 206, 13696);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 16);
#ifdef PRINT_target
printf("start: target283!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.activate run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target284 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 1024);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 10, 64948224);
  CSB_Write(device, 11, 59750400);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 81725440);
  CSB_Write(device, 14, 13);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 2);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 4083712);
  CSB_Write(device, 27, 137824256);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_target
printf("start: target284!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target285 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 13696);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 288);
  CSB_Write(device, 8, 64);
  CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 10, 81725440);
  CSB_Write(device, 11, 61558272);
  CSB_Write(device, 12, 56576);
  CSB_Write(device, 13, 64948224);
  CSB_Write(device, 14, 14);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 4193280);
  CSB_Write(device, 27, 406259712);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_target
printf("start: target285!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target286 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 4209664);
  CSB_Write(device, 195, 64948224);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 81725440);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_target
printf("start: target286!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target287 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 1024);
  CSB_Write(device, 8, 1024);
  CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 10, 81725440);
  CSB_Write(device, 11, 62463488);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 406259712);
  CSB_Write(device, 14, 3);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 4226048);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 33, 799);
#ifdef PRINT_target
printf("start: target287!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target288 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.pos_emb accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (kvcache ? (0 + ((token - 1) * 64)) : (0 + (last_token * 64))));
  CSB_Write(device, 195, 406259712);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 137824256);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 203, last_token);
  CSB_Write(device, 204, 32);
  CSB_Write(device, 205, 262144);
  CSB_Write(device, 206, 131072);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
#ifdef PRINT_target
printf("start: target288!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target289 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 256);
  CSB_Write(device, 8, 256);
  CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 10, 81725440);
  CSB_Write(device, 11, 62733824);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 406259712);
  CSB_Write(device, 14, 0);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 4242432);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 33, 799);
#ifdef PRINT_target
printf("start: target289!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target290 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.pos_emb accel operator node, storage data in cache38 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (kvcache ? (0 + ((token - 1) * 64)) : (0 + (last_token * 64))));
  CSB_Write(device, 195, 406259712);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, (kvcache ? (46073856 + ((token - 1) * 64)) : (46073856 + (last_token * 64))));
  CSB_Write(device, 199, 524288);
  CSB_Write(device, 200, 131072);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 203, last_token);
  CSB_Write(device, 204, 2);
  CSB_Write(device, 205, 262144);
  CSB_Write(device, 206, 131072);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
#ifdef PRINT_target
printf("start: target290!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target291 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_afterTRP accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 46073856);
  CSB_Write(device, 195, 137824256);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 406259712);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 524288);
  CSB_Write(device, 202, 131072);
  CSB_Write(device, 203, 4);
  CSB_Write(device, 204, token);
  CSB_Write(device, 205, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 206, 11688);
  CSB_Write(device, 207, 991234);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 2);
#ifdef PRINT_target
printf("start: target291!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterTRP run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target292 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.softmax accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (1 - kvcache));
  CSB_Write(device, 195, 406259712);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 137824256);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, (((token + 32) - 1) / 32));
  CSB_Write(device, 202, 32);
  CSB_Write(device, 203, token);
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, (token - last_token));
  CSB_Write(device, 206, last_token);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 8);
#ifdef PRINT_target
printf("start: target292!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.softmax run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target293 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in cache39 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 256);
  CSB_Write(device, 8, 256);
  CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 10, 81725440);
  CSB_Write(device, 11, 62750720);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, (kvcache ? (47122432 + ((token - 1) * 64)) : (47122432 + (last_token * 64))));
  CSB_Write(device, 14, 0);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 4243456);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, 131072);
  CSB_Write(device, 32, 131072);
  CSB_Write(device, 33, 799);
#ifdef PRINT_target
printf("start: target293!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target294 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_afterF2W accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 47122432);
  CSB_Write(device, 195, 137824256);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 81725440);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 524288);
  CSB_Write(device, 202, 131072);
  CSB_Write(device, 203, (((token + 32) - 1) / 32));
  CSB_Write(device, 204, token);
  CSB_Write(device, 205, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 206, 4);
  CSB_Write(device, 207, 991234);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 1);
#ifdef PRINT_target
printf("start: target294!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterF2W run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target295 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 1024);
  CSB_Write(device, 8, 1024);
  CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 10, 81725440);
  CSB_Write(device, 11, 62767616);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 137824256);
  CSB_Write(device, 14, 3);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 4244480);
  CSB_Write(device, 27, 64948224);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_target
printf("start: target295!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target296 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 4260864);
  CSB_Write(device, 195, 137824256);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 64948224);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_target
printf("start: target296!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target297 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 1024);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 10, 64948224);
  CSB_Write(device, 11, 63941888);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 81725440);
  CSB_Write(device, 14, 13);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 4332032);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 33, 799);
#ifdef PRINT_target
printf("start: target297!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target298 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.activate accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 524288);
  CSB_Write(device, 195, 81725440);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 406259712);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 428);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 428);
  CSB_Write(device, 206, 13696);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 16);
#ifdef PRINT_target
printf("start: target298!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.activate run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target299 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 1024);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 10, 64948224);
  CSB_Write(device, 11, 63037952);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 81725440);
  CSB_Write(device, 14, 13);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 2);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 4277248);
  CSB_Write(device, 27, 406259712);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_target
printf("start: target299!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target300 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 13696);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 288);
  CSB_Write(device, 8, 64);
  CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 10, 81725440);
  CSB_Write(device, 11, 64845824);
  CSB_Write(device, 12, 56576);
  CSB_Write(device, 13, 64948224);
  CSB_Write(device, 14, 14);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 4386816);
  CSB_Write(device, 27, 137824256);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_target
printf("start: target300!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target301 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 4403200);
  CSB_Write(device, 195, 64948224);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 81725440);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_target
printf("start: target301!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target302 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 1024);
  CSB_Write(device, 8, 1024);
  CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 10, 81725440);
  CSB_Write(device, 11, 65751040);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 137824256);
  CSB_Write(device, 14, 3);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 4419584);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 33, 799);
#ifdef PRINT_target
printf("start: target302!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target303 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.pos_emb accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (kvcache ? (0 + ((token - 1) * 64)) : (0 + (last_token * 64))));
  CSB_Write(device, 195, 137824256);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 406259712);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 203, last_token);
  CSB_Write(device, 204, 32);
  CSB_Write(device, 205, 262144);
  CSB_Write(device, 206, 131072);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
#ifdef PRINT_target
printf("start: target303!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target304 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 256);
  CSB_Write(device, 8, 256);
  CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 10, 81725440);
  CSB_Write(device, 11, 66021376);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 137824256);
  CSB_Write(device, 14, 0);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 4435968);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 33, 799);
#ifdef PRINT_target
printf("start: target304!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target305 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.pos_emb accel operator node, storage data in cache40 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (kvcache ? (0 + ((token - 1) * 64)) : (0 + (last_token * 64))));
  CSB_Write(device, 195, 137824256);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, (kvcache ? (48171008 + ((token - 1) * 64)) : (48171008 + (last_token * 64))));
  CSB_Write(device, 199, 524288);
  CSB_Write(device, 200, 131072);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 203, last_token);
  CSB_Write(device, 204, 2);
  CSB_Write(device, 205, 262144);
  CSB_Write(device, 206, 131072);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
#ifdef PRINT_target
printf("start: target305!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target306 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_afterTRP accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 48171008);
  CSB_Write(device, 195, 406259712);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 137824256);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 524288);
  CSB_Write(device, 202, 131072);
  CSB_Write(device, 203, 4);
  CSB_Write(device, 204, token);
  CSB_Write(device, 205, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 206, 11688);
  CSB_Write(device, 207, 991234);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 2);
#ifdef PRINT_target
printf("start: target306!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterTRP run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target307 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.softmax accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (1 - kvcache));
  CSB_Write(device, 195, 137824256);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 406259712);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, (((token + 32) - 1) / 32));
  CSB_Write(device, 202, 32);
  CSB_Write(device, 203, token);
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, (token - last_token));
  CSB_Write(device, 206, last_token);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 8);
#ifdef PRINT_target
printf("start: target307!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.softmax run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target308 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in cache41 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 256);
  CSB_Write(device, 8, 256);
  CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 10, 81725440);
  CSB_Write(device, 11, 66038272);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, (kvcache ? (49219584 + ((token - 1) * 64)) : (49219584 + (last_token * 64))));
  CSB_Write(device, 14, 0);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 4436992);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, 131072);
  CSB_Write(device, 32, 131072);
  CSB_Write(device, 33, 799);
#ifdef PRINT_target
printf("start: target308!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target309 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_afterF2W accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 49219584);
  CSB_Write(device, 195, 406259712);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 81725440);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 524288);
  CSB_Write(device, 202, 131072);
  CSB_Write(device, 203, (((token + 32) - 1) / 32));
  CSB_Write(device, 204, token);
  CSB_Write(device, 205, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 206, 4);
  CSB_Write(device, 207, 991234);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 1);
#ifdef PRINT_target
printf("start: target309!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterF2W run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target310 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 1024);
  CSB_Write(device, 8, 1024);
  CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 10, 81725440);
  CSB_Write(device, 11, 66055168);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 406259712);
  CSB_Write(device, 14, 3);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 4438016);
  CSB_Write(device, 27, 64948224);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_target
printf("start: target310!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target311 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 4454400);
  CSB_Write(device, 195, 406259712);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 64948224);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_target
printf("start: target311!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target312 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 1024);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 10, 64948224);
  CSB_Write(device, 11, 67229440);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 81725440);
  CSB_Write(device, 14, 13);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 4525568);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 33, 799);
#ifdef PRINT_target
printf("start: target312!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target313 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.activate accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 524288);
  CSB_Write(device, 195, 81725440);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 137824256);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 428);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 428);
  CSB_Write(device, 206, 13696);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 16);
#ifdef PRINT_target
printf("start: target313!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.activate run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target314 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 1024);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 10, 64948224);
  CSB_Write(device, 11, 66325504);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 81725440);
  CSB_Write(device, 14, 13);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 2);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 4470784);
  CSB_Write(device, 27, 137824256);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_target
printf("start: target314!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target315 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 13696);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 288);
  CSB_Write(device, 8, 64);
  CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 10, 81725440);
  CSB_Write(device, 11, 68133376);
  CSB_Write(device, 12, 56576);
  CSB_Write(device, 13, 64948224);
  CSB_Write(device, 14, 14);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 4580352);
  CSB_Write(device, 27, 406259712);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_target
printf("start: target315!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target316 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 4596736);
  CSB_Write(device, 195, 64948224);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 81725440);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_target
printf("start: target316!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target317 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 1024);
  CSB_Write(device, 8, 1024);
  CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 10, 81725440);
  CSB_Write(device, 11, 69038592);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 406259712);
  CSB_Write(device, 14, 3);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 4613120);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 33, 799);
#ifdef PRINT_target
printf("start: target317!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target318 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.pos_emb accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (kvcache ? (0 + ((token - 1) * 64)) : (0 + (last_token * 64))));
  CSB_Write(device, 195, 406259712);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 137824256);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 203, last_token);
  CSB_Write(device, 204, 32);
  CSB_Write(device, 205, 262144);
  CSB_Write(device, 206, 131072);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
#ifdef PRINT_target
printf("start: target318!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target319 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 256);
  CSB_Write(device, 8, 256);
  CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 10, 81725440);
  CSB_Write(device, 11, 69308928);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 406259712);
  CSB_Write(device, 14, 0);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 4629504);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 33, 799);
#ifdef PRINT_target
printf("start: target319!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target320 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.pos_emb accel operator node, storage data in cache42 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (kvcache ? (0 + ((token - 1) * 64)) : (0 + (last_token * 64))));
  CSB_Write(device, 195, 406259712);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, (kvcache ? (50268160 + ((token - 1) * 64)) : (50268160 + (last_token * 64))));
  CSB_Write(device, 199, 524288);
  CSB_Write(device, 200, 131072);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 203, last_token);
  CSB_Write(device, 204, 2);
  CSB_Write(device, 205, 262144);
  CSB_Write(device, 206, 131072);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
#ifdef PRINT_target
printf("start: target320!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target321 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_afterTRP accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 50268160);
  CSB_Write(device, 195, 137824256);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 406259712);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 524288);
  CSB_Write(device, 202, 131072);
  CSB_Write(device, 203, 4);
  CSB_Write(device, 204, token);
  CSB_Write(device, 205, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 206, 11688);
  CSB_Write(device, 207, 991234);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 2);
#ifdef PRINT_target
printf("start: target321!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterTRP run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target322 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.softmax accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (1 - kvcache));
  CSB_Write(device, 195, 406259712);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 137824256);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, (((token + 32) - 1) / 32));
  CSB_Write(device, 202, 32);
  CSB_Write(device, 203, token);
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, (token - last_token));
  CSB_Write(device, 206, last_token);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 8);
#ifdef PRINT_target
printf("start: target322!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.softmax run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target323 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in cache43 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 256);
  CSB_Write(device, 8, 256);
  CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 10, 81725440);
  CSB_Write(device, 11, 69325824);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, (kvcache ? (51316736 + ((token - 1) * 64)) : (51316736 + (last_token * 64))));
  CSB_Write(device, 14, 0);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 4630528);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, 131072);
  CSB_Write(device, 32, 131072);
  CSB_Write(device, 33, 799);
#ifdef PRINT_target
printf("start: target323!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target324 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_afterF2W accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 51316736);
  CSB_Write(device, 195, 137824256);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 81725440);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 524288);
  CSB_Write(device, 202, 131072);
  CSB_Write(device, 203, (((token + 32) - 1) / 32));
  CSB_Write(device, 204, token);
  CSB_Write(device, 205, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 206, 4);
  CSB_Write(device, 207, 991234);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 1);
#ifdef PRINT_target
printf("start: target324!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterF2W run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target325 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 1024);
  CSB_Write(device, 8, 1024);
  CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 10, 81725440);
  CSB_Write(device, 11, 69342720);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 137824256);
  CSB_Write(device, 14, 3);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 4631552);
  CSB_Write(device, 27, 64948224);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_target
printf("start: target325!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target326 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 4647936);
  CSB_Write(device, 195, 137824256);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 64948224);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_target
printf("start: target326!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target327 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 1024);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 10, 64948224);
  CSB_Write(device, 11, 70516992);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 81725440);
  CSB_Write(device, 14, 13);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 4719104);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 33, 799);
#ifdef PRINT_target
printf("start: target327!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target328 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.activate accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 524288);
  CSB_Write(device, 195, 81725440);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 406259712);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 428);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 428);
  CSB_Write(device, 206, 13696);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 16);
#ifdef PRINT_target
printf("start: target328!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.activate run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target329 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 1024);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 10, 64948224);
  CSB_Write(device, 11, 69613056);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 81725440);
  CSB_Write(device, 14, 13);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 2);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 4664320);
  CSB_Write(device, 27, 406259712);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_target
printf("start: target329!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target330 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 13696);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 288);
  CSB_Write(device, 8, 64);
  CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 10, 81725440);
  CSB_Write(device, 11, 71420928);
  CSB_Write(device, 12, 56576);
  CSB_Write(device, 13, 64948224);
  CSB_Write(device, 14, 14);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 4773888);
  CSB_Write(device, 27, 137824256);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_target
printf("start: target330!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target331 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 4790272);
  CSB_Write(device, 195, 64948224);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 81725440);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_target
printf("start: target331!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target332 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 1024);
  CSB_Write(device, 8, 1024);
  CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 10, 81725440);
  CSB_Write(device, 11, 72326144);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 137824256);
  CSB_Write(device, 14, 3);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 4806656);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 33, 799);
#ifdef PRINT_target
printf("start: target332!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target333 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.pos_emb accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (kvcache ? (0 + ((token - 1) * 64)) : (0 + (last_token * 64))));
  CSB_Write(device, 195, 137824256);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 406259712);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 203, last_token);
  CSB_Write(device, 204, 32);
  CSB_Write(device, 205, 262144);
  CSB_Write(device, 206, 131072);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
#ifdef PRINT_target
printf("start: target333!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target334 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 256);
  CSB_Write(device, 8, 256);
  CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 10, 81725440);
  CSB_Write(device, 11, 72596480);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 137824256);
  CSB_Write(device, 14, 0);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 4823040);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 33, 799);
#ifdef PRINT_target
printf("start: target334!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target335 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.pos_emb accel operator node, storage data in cache44 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (kvcache ? (0 + ((token - 1) * 64)) : (0 + (last_token * 64))));
  CSB_Write(device, 195, 137824256);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, (kvcache ? (52365312 + ((token - 1) * 64)) : (52365312 + (last_token * 64))));
  CSB_Write(device, 199, 524288);
  CSB_Write(device, 200, 131072);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 203, last_token);
  CSB_Write(device, 204, 2);
  CSB_Write(device, 205, 262144);
  CSB_Write(device, 206, 131072);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
#ifdef PRINT_target
printf("start: target335!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target336 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_afterTRP accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 52365312);
  CSB_Write(device, 195, 406259712);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 137824256);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 524288);
  CSB_Write(device, 202, 131072);
  CSB_Write(device, 203, 4);
  CSB_Write(device, 204, token);
  CSB_Write(device, 205, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 206, 11688);
  CSB_Write(device, 207, 991234);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 2);
#ifdef PRINT_target
printf("start: target336!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterTRP run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target337 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.softmax accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (1 - kvcache));
  CSB_Write(device, 195, 137824256);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 406259712);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, (((token + 32) - 1) / 32));
  CSB_Write(device, 202, 32);
  CSB_Write(device, 203, token);
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, (token - last_token));
  CSB_Write(device, 206, last_token);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 8);
#ifdef PRINT_target
printf("start: target337!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.softmax run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target338 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in cache45 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 256);
  CSB_Write(device, 8, 256);
  CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 10, 81725440);
  CSB_Write(device, 11, 72613376);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, (kvcache ? (53413888 + ((token - 1) * 64)) : (53413888 + (last_token * 64))));
  CSB_Write(device, 14, 0);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 4824064);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, 131072);
  CSB_Write(device, 32, 131072);
  CSB_Write(device, 33, 799);
#ifdef PRINT_target
printf("start: target338!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target339 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_afterF2W accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 53413888);
  CSB_Write(device, 195, 406259712);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 81725440);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 524288);
  CSB_Write(device, 202, 131072);
  CSB_Write(device, 203, (((token + 32) - 1) / 32));
  CSB_Write(device, 204, token);
  CSB_Write(device, 205, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 206, 4);
  CSB_Write(device, 207, 991234);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 1);
#ifdef PRINT_target
printf("start: target339!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterF2W run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target340 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 1024);
  CSB_Write(device, 8, 1024);
  CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 10, 81725440);
  CSB_Write(device, 11, 72630272);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 406259712);
  CSB_Write(device, 14, 3);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 4825088);
  CSB_Write(device, 27, 64948224);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_target
printf("start: target340!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target341 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 4841472);
  CSB_Write(device, 195, 406259712);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 64948224);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_target
printf("start: target341!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target342 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 1024);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 10, 64948224);
  CSB_Write(device, 11, 73804544);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 81725440);
  CSB_Write(device, 14, 13);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 4912640);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 33, 799);
#ifdef PRINT_target
printf("start: target342!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target343 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.activate accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 524288);
  CSB_Write(device, 195, 81725440);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 137824256);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 428);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 428);
  CSB_Write(device, 206, 13696);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 16);
#ifdef PRINT_target
printf("start: target343!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.activate run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target344 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 1024);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 10, 64948224);
  CSB_Write(device, 11, 72900608);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 81725440);
  CSB_Write(device, 14, 13);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 2);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 4857856);
  CSB_Write(device, 27, 137824256);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_target
printf("start: target344!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target345 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 13696);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 288);
  CSB_Write(device, 8, 64);
  CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 10, 81725440);
  CSB_Write(device, 11, 74708480);
  CSB_Write(device, 12, 56576);
  CSB_Write(device, 13, 64948224);
  CSB_Write(device, 14, 14);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 4967424);
  CSB_Write(device, 27, 406259712);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_target
printf("start: target345!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target346 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 4983808);
  CSB_Write(device, 195, 64948224);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 81725440);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_target
printf("start: target346!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target347 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 1024);
  CSB_Write(device, 8, 1024);
  CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 10, 81725440);
  CSB_Write(device, 11, 75613696);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 406259712);
  CSB_Write(device, 14, 3);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 5000192);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 33, 799);
#ifdef PRINT_target
printf("start: target347!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target348 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.pos_emb accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (kvcache ? (0 + ((token - 1) * 64)) : (0 + (last_token * 64))));
  CSB_Write(device, 195, 406259712);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 137824256);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 203, last_token);
  CSB_Write(device, 204, 32);
  CSB_Write(device, 205, 262144);
  CSB_Write(device, 206, 131072);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
#ifdef PRINT_target
printf("start: target348!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target349 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 256);
  CSB_Write(device, 8, 256);
  CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 10, 81725440);
  CSB_Write(device, 11, 75884032);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 406259712);
  CSB_Write(device, 14, 0);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 5016576);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 33, 799);
#ifdef PRINT_target
printf("start: target349!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target350 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.pos_emb accel operator node, storage data in cache46 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (kvcache ? (0 + ((token - 1) * 64)) : (0 + (last_token * 64))));
  CSB_Write(device, 195, 406259712);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, (kvcache ? (54462464 + ((token - 1) * 64)) : (54462464 + (last_token * 64))));
  CSB_Write(device, 199, 524288);
  CSB_Write(device, 200, 131072);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 203, last_token);
  CSB_Write(device, 204, 2);
  CSB_Write(device, 205, 262144);
  CSB_Write(device, 206, 131072);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
#ifdef PRINT_target
printf("start: target350!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target351 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_afterTRP accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 54462464);
  CSB_Write(device, 195, 137824256);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 406259712);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 524288);
  CSB_Write(device, 202, 131072);
  CSB_Write(device, 203, 4);
  CSB_Write(device, 204, token);
  CSB_Write(device, 205, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 206, 11688);
  CSB_Write(device, 207, 991234);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 2);
#ifdef PRINT_target
printf("start: target351!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterTRP run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target352 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.softmax accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (1 - kvcache));
  CSB_Write(device, 195, 406259712);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 137824256);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, (((token + 32) - 1) / 32));
  CSB_Write(device, 202, 32);
  CSB_Write(device, 203, token);
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, (token - last_token));
  CSB_Write(device, 206, last_token);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 8);
#ifdef PRINT_target
printf("start: target352!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.softmax run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target353 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in cache47 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 256);
  CSB_Write(device, 8, 256);
  CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 10, 81725440);
  CSB_Write(device, 11, 75900928);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, (kvcache ? (55511040 + ((token - 1) * 64)) : (55511040 + (last_token * 64))));
  CSB_Write(device, 14, 0);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 5017600);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, 131072);
  CSB_Write(device, 32, 131072);
  CSB_Write(device, 33, 799);
#ifdef PRINT_target
printf("start: target353!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target354 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_afterF2W accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 55511040);
  CSB_Write(device, 195, 137824256);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 81725440);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 524288);
  CSB_Write(device, 202, 131072);
  CSB_Write(device, 203, (((token + 32) - 1) / 32));
  CSB_Write(device, 204, token);
  CSB_Write(device, 205, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 206, 4);
  CSB_Write(device, 207, 991234);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 1);
#ifdef PRINT_target
printf("start: target354!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterF2W run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target355 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 1024);
  CSB_Write(device, 8, 1024);
  CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 10, 81725440);
  CSB_Write(device, 11, 75917824);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 137824256);
  CSB_Write(device, 14, 3);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 5018624);
  CSB_Write(device, 27, 64948224);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_target
printf("start: target355!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target356 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 5035008);
  CSB_Write(device, 195, 137824256);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 64948224);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_target
printf("start: target356!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target357 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 1024);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 10, 64948224);
  CSB_Write(device, 11, 77092096);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 81725440);
  CSB_Write(device, 14, 13);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 5106176);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 33, 799);
#ifdef PRINT_target
printf("start: target357!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target358 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.activate accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 524288);
  CSB_Write(device, 195, 81725440);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 406259712);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 428);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 428);
  CSB_Write(device, 206, 13696);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 16);
#ifdef PRINT_target
printf("start: target358!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.activate run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target359 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 1024);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 10, 64948224);
  CSB_Write(device, 11, 76188160);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 81725440);
  CSB_Write(device, 14, 13);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 2);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 5051392);
  CSB_Write(device, 27, 406259712);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_target
printf("start: target359!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target360 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 13696);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 288);
  CSB_Write(device, 8, 64);
  CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 10, 81725440);
  CSB_Write(device, 11, 77996032);
  CSB_Write(device, 12, 56576);
  CSB_Write(device, 13, 64948224);
  CSB_Write(device, 14, 14);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 5160960);
  CSB_Write(device, 27, 137824256);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_target
printf("start: target360!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target361 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 5177344);
  CSB_Write(device, 195, 64948224);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 81725440);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_target
printf("start: target361!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target362 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 1024);
  CSB_Write(device, 8, 1024);
  CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 10, 81725440);
  CSB_Write(device, 11, 78901248);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 137824256);
  CSB_Write(device, 14, 3);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 5193728);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 33, 799);
#ifdef PRINT_target
printf("start: target362!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target363 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.pos_emb accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (kvcache ? (0 + ((token - 1) * 64)) : (0 + (last_token * 64))));
  CSB_Write(device, 195, 137824256);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 406259712);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 203, last_token);
  CSB_Write(device, 204, 32);
  CSB_Write(device, 205, 262144);
  CSB_Write(device, 206, 131072);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
#ifdef PRINT_target
printf("start: target363!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target364 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 256);
  CSB_Write(device, 8, 256);
  CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 10, 81725440);
  CSB_Write(device, 11, 79171584);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 137824256);
  CSB_Write(device, 14, 0);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 5210112);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 33, 799);
#ifdef PRINT_target
printf("start: target364!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target365 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.pos_emb accel operator node, storage data in cache48 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (kvcache ? (0 + ((token - 1) * 64)) : (0 + (last_token * 64))));
  CSB_Write(device, 195, 137824256);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, (kvcache ? (56559616 + ((token - 1) * 64)) : (56559616 + (last_token * 64))));
  CSB_Write(device, 199, 524288);
  CSB_Write(device, 200, 131072);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 203, last_token);
  CSB_Write(device, 204, 2);
  CSB_Write(device, 205, 262144);
  CSB_Write(device, 206, 131072);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
#ifdef PRINT_target
printf("start: target365!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target366 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_afterTRP accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 56559616);
  CSB_Write(device, 195, 406259712);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 137824256);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 524288);
  CSB_Write(device, 202, 131072);
  CSB_Write(device, 203, 4);
  CSB_Write(device, 204, token);
  CSB_Write(device, 205, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 206, 11688);
  CSB_Write(device, 207, 991234);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 2);
#ifdef PRINT_target
printf("start: target366!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterTRP run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target367 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.softmax accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (1 - kvcache));
  CSB_Write(device, 195, 137824256);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 406259712);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, (((token + 32) - 1) / 32));
  CSB_Write(device, 202, 32);
  CSB_Write(device, 203, token);
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, (token - last_token));
  CSB_Write(device, 206, last_token);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 8);
#ifdef PRINT_target
printf("start: target367!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.softmax run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target368 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in cache49 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 256);
  CSB_Write(device, 8, 256);
  CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 10, 81725440);
  CSB_Write(device, 11, 79188480);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, (kvcache ? (57608192 + ((token - 1) * 64)) : (57608192 + (last_token * 64))));
  CSB_Write(device, 14, 0);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 5211136);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, 131072);
  CSB_Write(device, 32, 131072);
  CSB_Write(device, 33, 799);
#ifdef PRINT_target
printf("start: target368!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target369 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_afterF2W accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 57608192);
  CSB_Write(device, 195, 406259712);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 81725440);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 524288);
  CSB_Write(device, 202, 131072);
  CSB_Write(device, 203, (((token + 32) - 1) / 32));
  CSB_Write(device, 204, token);
  CSB_Write(device, 205, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 206, 4);
  CSB_Write(device, 207, 991234);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 1);
#ifdef PRINT_target
printf("start: target369!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterF2W run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target370 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 1024);
  CSB_Write(device, 8, 1024);
  CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 10, 81725440);
  CSB_Write(device, 11, 79205376);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 406259712);
  CSB_Write(device, 14, 3);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 5212160);
  CSB_Write(device, 27, 64948224);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_target
printf("start: target370!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target371 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 5228544);
  CSB_Write(device, 195, 406259712);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 64948224);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_target
printf("start: target371!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target372 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 1024);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 10, 64948224);
  CSB_Write(device, 11, 80379648);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 81725440);
  CSB_Write(device, 14, 13);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 5299712);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 33, 799);
#ifdef PRINT_target
printf("start: target372!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target373 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.activate accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 524288);
  CSB_Write(device, 195, 81725440);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 137824256);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 428);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 428);
  CSB_Write(device, 206, 13696);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 16);
#ifdef PRINT_target
printf("start: target373!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.activate run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target374 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 1024);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 10, 64948224);
  CSB_Write(device, 11, 79475712);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 81725440);
  CSB_Write(device, 14, 13);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 2);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 5244928);
  CSB_Write(device, 27, 137824256);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_target
printf("start: target374!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target375 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 13696);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 288);
  CSB_Write(device, 8, 64);
  CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 10, 81725440);
  CSB_Write(device, 11, 81283584);
  CSB_Write(device, 12, 56576);
  CSB_Write(device, 13, 64948224);
  CSB_Write(device, 14, 14);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 5354496);
  CSB_Write(device, 27, 406259712);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_target
printf("start: target375!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target376 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 5370880);
  CSB_Write(device, 195, 64948224);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 81725440);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_target
printf("start: target376!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target377 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 1024);
  CSB_Write(device, 8, 1024);
  CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 10, 81725440);
  CSB_Write(device, 11, 82188800);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 406259712);
  CSB_Write(device, 14, 3);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 5387264);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 33, 799);
#ifdef PRINT_target
printf("start: target377!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target378 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.pos_emb accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (kvcache ? (0 + ((token - 1) * 64)) : (0 + (last_token * 64))));
  CSB_Write(device, 195, 406259712);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 137824256);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 203, last_token);
  CSB_Write(device, 204, 32);
  CSB_Write(device, 205, 262144);
  CSB_Write(device, 206, 131072);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
#ifdef PRINT_target
printf("start: target378!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target379 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 256);
  CSB_Write(device, 8, 256);
  CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 10, 81725440);
  CSB_Write(device, 11, 82459136);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 406259712);
  CSB_Write(device, 14, 0);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 5403648);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 33, 799);
#ifdef PRINT_target
printf("start: target379!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target380 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.pos_emb accel operator node, storage data in cache50 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (kvcache ? (0 + ((token - 1) * 64)) : (0 + (last_token * 64))));
  CSB_Write(device, 195, 406259712);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, (kvcache ? (58656768 + ((token - 1) * 64)) : (58656768 + (last_token * 64))));
  CSB_Write(device, 199, 524288);
  CSB_Write(device, 200, 131072);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 203, last_token);
  CSB_Write(device, 204, 2);
  CSB_Write(device, 205, 262144);
  CSB_Write(device, 206, 131072);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
#ifdef PRINT_target
printf("start: target380!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target381 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_afterTRP accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 58656768);
  CSB_Write(device, 195, 137824256);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 406259712);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 524288);
  CSB_Write(device, 202, 131072);
  CSB_Write(device, 203, 4);
  CSB_Write(device, 204, token);
  CSB_Write(device, 205, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 206, 11688);
  CSB_Write(device, 207, 991234);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 2);
#ifdef PRINT_target
printf("start: target381!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterTRP run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target382 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.softmax accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (1 - kvcache));
  CSB_Write(device, 195, 406259712);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 137824256);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, (((token + 32) - 1) / 32));
  CSB_Write(device, 202, 32);
  CSB_Write(device, 203, token);
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, (token - last_token));
  CSB_Write(device, 206, last_token);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 8);
#ifdef PRINT_target
printf("start: target382!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.softmax run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target383 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in cache51 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 256);
  CSB_Write(device, 8, 256);
  CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 10, 81725440);
  CSB_Write(device, 11, 82476032);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, (kvcache ? (59705344 + ((token - 1) * 64)) : (59705344 + (last_token * 64))));
  CSB_Write(device, 14, 0);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 5404672);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, 131072);
  CSB_Write(device, 32, 131072);
  CSB_Write(device, 33, 799);
#ifdef PRINT_target
printf("start: target383!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target384 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_afterF2W accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 59705344);
  CSB_Write(device, 195, 137824256);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 81725440);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 524288);
  CSB_Write(device, 202, 131072);
  CSB_Write(device, 203, (((token + 32) - 1) / 32));
  CSB_Write(device, 204, token);
  CSB_Write(device, 205, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 206, 4);
  CSB_Write(device, 207, 991234);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 1);
#ifdef PRINT_target
printf("start: target384!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterF2W run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target385 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 1024);
  CSB_Write(device, 8, 1024);
  CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 10, 81725440);
  CSB_Write(device, 11, 82492928);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 137824256);
  CSB_Write(device, 14, 3);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 5405696);
  CSB_Write(device, 27, 64948224);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_target
printf("start: target385!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target386 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 5422080);
  CSB_Write(device, 195, 137824256);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 64948224);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_target
printf("start: target386!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target387 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 1024);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 10, 64948224);
  CSB_Write(device, 11, 83667200);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 81725440);
  CSB_Write(device, 14, 13);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 5493248);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 33, 799);
#ifdef PRINT_target
printf("start: target387!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target388 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.activate accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 524288);
  CSB_Write(device, 195, 81725440);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 406259712);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 428);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 428);
  CSB_Write(device, 206, 13696);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 16);
#ifdef PRINT_target
printf("start: target388!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.activate run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target389 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 1024);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 10, 64948224);
  CSB_Write(device, 11, 82763264);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 81725440);
  CSB_Write(device, 14, 13);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 2);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 5438464);
  CSB_Write(device, 27, 406259712);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_target
printf("start: target389!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target390 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 13696);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 288);
  CSB_Write(device, 8, 64);
  CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 10, 81725440);
  CSB_Write(device, 11, 84571136);
  CSB_Write(device, 12, 56576);
  CSB_Write(device, 13, 64948224);
  CSB_Write(device, 14, 14);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 5548032);
  CSB_Write(device, 27, 137824256);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_target
printf("start: target390!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target391 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 5564416);
  CSB_Write(device, 195, 64948224);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 81725440);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_target
printf("start: target391!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target392 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 1024);
  CSB_Write(device, 8, 1024);
  CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 10, 81725440);
  CSB_Write(device, 11, 85476352);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 137824256);
  CSB_Write(device, 14, 3);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 5580800);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 33, 799);
#ifdef PRINT_target
printf("start: target392!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target393 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.pos_emb accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (kvcache ? (0 + ((token - 1) * 64)) : (0 + (last_token * 64))));
  CSB_Write(device, 195, 137824256);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 406259712);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 203, last_token);
  CSB_Write(device, 204, 32);
  CSB_Write(device, 205, 262144);
  CSB_Write(device, 206, 131072);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
#ifdef PRINT_target
printf("start: target393!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target394 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 256);
  CSB_Write(device, 8, 256);
  CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 10, 81725440);
  CSB_Write(device, 11, 85746688);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 137824256);
  CSB_Write(device, 14, 0);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 5597184);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 33, 799);
#ifdef PRINT_target
printf("start: target394!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target395 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.pos_emb accel operator node, storage data in cache52 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (kvcache ? (0 + ((token - 1) * 64)) : (0 + (last_token * 64))));
  CSB_Write(device, 195, 137824256);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, (kvcache ? (60753920 + ((token - 1) * 64)) : (60753920 + (last_token * 64))));
  CSB_Write(device, 199, 524288);
  CSB_Write(device, 200, 131072);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 203, last_token);
  CSB_Write(device, 204, 2);
  CSB_Write(device, 205, 262144);
  CSB_Write(device, 206, 131072);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
#ifdef PRINT_target
printf("start: target395!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target396 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_afterTRP accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 60753920);
  CSB_Write(device, 195, 406259712);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 137824256);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 524288);
  CSB_Write(device, 202, 131072);
  CSB_Write(device, 203, 4);
  CSB_Write(device, 204, token);
  CSB_Write(device, 205, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 206, 11688);
  CSB_Write(device, 207, 991234);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 2);
#ifdef PRINT_target
printf("start: target396!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterTRP run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target397 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.softmax accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (1 - kvcache));
  CSB_Write(device, 195, 137824256);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 406259712);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, (((token + 32) - 1) / 32));
  CSB_Write(device, 202, 32);
  CSB_Write(device, 203, token);
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, (token - last_token));
  CSB_Write(device, 206, last_token);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 8);
#ifdef PRINT_target
printf("start: target397!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.softmax run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target398 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in cache53 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 256);
  CSB_Write(device, 8, 256);
  CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 10, 81725440);
  CSB_Write(device, 11, 85763584);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, (kvcache ? (61802496 + ((token - 1) * 64)) : (61802496 + (last_token * 64))));
  CSB_Write(device, 14, 0);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 5598208);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, 131072);
  CSB_Write(device, 32, 131072);
  CSB_Write(device, 33, 799);
#ifdef PRINT_target
printf("start: target398!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target399 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_afterF2W accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 61802496);
  CSB_Write(device, 195, 406259712);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 81725440);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 524288);
  CSB_Write(device, 202, 131072);
  CSB_Write(device, 203, (((token + 32) - 1) / 32));
  CSB_Write(device, 204, token);
  CSB_Write(device, 205, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 206, 4);
  CSB_Write(device, 207, 991234);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 1);
#ifdef PRINT_target
printf("start: target399!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterF2W run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target400 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 1024);
  CSB_Write(device, 8, 1024);
  CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 10, 81725440);
  CSB_Write(device, 11, 85780480);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 406259712);
  CSB_Write(device, 14, 3);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 5599232);
  CSB_Write(device, 27, 64948224);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_target
printf("start: target400!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target401 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 5615616);
  CSB_Write(device, 195, 406259712);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 64948224);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_target
printf("start: target401!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target402 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 1024);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 10, 64948224);
  CSB_Write(device, 11, 86954752);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 81725440);
  CSB_Write(device, 14, 13);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 5686784);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 33, 799);
#ifdef PRINT_target
printf("start: target402!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target403 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.activate accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 524288);
  CSB_Write(device, 195, 81725440);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 137824256);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 428);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 428);
  CSB_Write(device, 206, 13696);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 16);
#ifdef PRINT_target
printf("start: target403!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.activate run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target404 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 1024);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 10, 64948224);
  CSB_Write(device, 11, 86050816);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 81725440);
  CSB_Write(device, 14, 13);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 2);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 5632000);
  CSB_Write(device, 27, 137824256);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_target
printf("start: target404!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target405 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 13696);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 288);
  CSB_Write(device, 8, 64);
  CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 10, 81725440);
  CSB_Write(device, 11, 87858688);
  CSB_Write(device, 12, 56576);
  CSB_Write(device, 13, 64948224);
  CSB_Write(device, 14, 14);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 5741568);
  CSB_Write(device, 27, 406259712);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_target
printf("start: target405!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target406 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 5757952);
  CSB_Write(device, 195, 64948224);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 81725440);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_target
printf("start: target406!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target407 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 1024);
  CSB_Write(device, 8, 1024);
  CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 10, 81725440);
  CSB_Write(device, 11, 88763904);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 406259712);
  CSB_Write(device, 14, 3);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 5774336);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 33, 799);
#ifdef PRINT_target
printf("start: target407!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target408 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.pos_emb accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (kvcache ? (0 + ((token - 1) * 64)) : (0 + (last_token * 64))));
  CSB_Write(device, 195, 406259712);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 137824256);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 203, last_token);
  CSB_Write(device, 204, 32);
  CSB_Write(device, 205, 262144);
  CSB_Write(device, 206, 131072);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
#ifdef PRINT_target
printf("start: target408!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target409 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 256);
  CSB_Write(device, 8, 256);
  CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 10, 81725440);
  CSB_Write(device, 11, 89034240);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 406259712);
  CSB_Write(device, 14, 0);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 5790720);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 33, 799);
#ifdef PRINT_target
printf("start: target409!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target410 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.pos_emb accel operator node, storage data in cache54 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (kvcache ? (0 + ((token - 1) * 64)) : (0 + (last_token * 64))));
  CSB_Write(device, 195, 406259712);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, (kvcache ? (62851072 + ((token - 1) * 64)) : (62851072 + (last_token * 64))));
  CSB_Write(device, 199, 524288);
  CSB_Write(device, 200, 131072);
  CSB_Write(device, 201, 4);
  CSB_Write(device, 202, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 203, last_token);
  CSB_Write(device, 204, 2);
  CSB_Write(device, 205, 262144);
  CSB_Write(device, 206, 131072);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 4);
#ifdef PRINT_target
printf("start: target410!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.pos_emb run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target411 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_afterTRP accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 62851072);
  CSB_Write(device, 195, 137824256);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 406259712);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 524288);
  CSB_Write(device, 202, 131072);
  CSB_Write(device, 203, 4);
  CSB_Write(device, 204, token);
  CSB_Write(device, 205, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 206, 11688);
  CSB_Write(device, 207, 991234);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 2);
#ifdef PRINT_target
printf("start: target411!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterTRP run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target412 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.softmax accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, (1 - kvcache));
  CSB_Write(device, 195, 406259712);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 137824256);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, (((token + 32) - 1) / 32));
  CSB_Write(device, 202, 32);
  CSB_Write(device, 203, token);
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, (token - last_token));
  CSB_Write(device, 206, last_token);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 8);
#ifdef PRINT_target
printf("start: target412!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.softmax run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target413 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in cache55 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 256);
  CSB_Write(device, 8, 256);
  CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 10, 81725440);
  CSB_Write(device, 11, 89051136);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, (kvcache ? (63899648 + ((token - 1) * 64)) : (63899648 + (last_token * 64))));
  CSB_Write(device, 14, 0);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 5791744);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, 131072);
  CSB_Write(device, 32, 131072);
  CSB_Write(device, 33, 799);
#ifdef PRINT_target
printf("start: target413!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target414 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_afterF2W accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 63899648);
  CSB_Write(device, 195, 137824256);
  CSB_Write(device, 196, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * (((token + 32) - 1) / 32)));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 81725440);
  CSB_Write(device, 199, (((64 * (kvcache ? 1 : (token - last_token))) * 1) * 4));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 524288);
  CSB_Write(device, 202, 131072);
  CSB_Write(device, 203, (((token + 32) - 1) / 32));
  CSB_Write(device, 204, token);
  CSB_Write(device, 205, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 206, 4);
  CSB_Write(device, 207, 991234);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 1);
#ifdef PRINT_target
printf("start: target414!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_afterF2W run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target415 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 1024);
  CSB_Write(device, 8, 1024);
  CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 10, 81725440);
  CSB_Write(device, 11, 89068032);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 137824256);
  CSB_Write(device, 14, 3);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 5792768);
  CSB_Write(device, 27, 64948224);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_target
printf("start: target415!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target416 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 5809152);
  CSB_Write(device, 195, 137824256);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 64948224);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_target
printf("start: target416!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target417 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 1024);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 10, 64948224);
  CSB_Write(device, 11, 90242304);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 81725440);
  CSB_Write(device, 14, 13);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 5880320);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 33, 799);
#ifdef PRINT_target
printf("start: target417!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target418 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.activate accel operator node, storage data in runtime3 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 524288);
  CSB_Write(device, 195, 81725440);
  CSB_Write(device, 196, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 197, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 198, 406259712);
  CSB_Write(device, 199, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 200, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 201, 428);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 204, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 205, 428);
  CSB_Write(device, 206, 13696);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 16);
#ifdef PRINT_target
printf("start: target418!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.activate run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target419 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 1024);
  CSB_Write(device, 8, 384);
  CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 10, 64948224);
  CSB_Write(device, 11, 89338368);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 81725440);
  CSB_Write(device, 14, 13);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 2);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 5825536);
  CSB_Write(device, 27, 406259712);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_target
printf("start: target419!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target420 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.mvm_bn_res accel operator node, storage data in runtime0 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 13696);
  CSB_Write(device, 3, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 288);
  CSB_Write(device, 8, 64);
  CSB_Write(device, 9, (kvcache ? 1 : (token - last_token)));
  CSB_Write(device, 10, 81725440);
  CSB_Write(device, 11, 91146240);
  CSB_Write(device, 12, 56576);
  CSB_Write(device, 13, 64948224);
  CSB_Write(device, 14, 14);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 0);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 5935104);
  CSB_Write(device, 27, 137824256);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 30, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 31, ((64 * (kvcache ? 1 : (token - last_token))) * 1));
  CSB_Write(device, 32, (64 * (kvcache ? 1 : (token - last_token))));
  CSB_Write(device, 33, 1823);
#ifdef PRINT_target
printf("start: target420!\n");
#endif
  while(CSB_Read(device, 1) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn_res run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target421 (HANDLE& device, int kvcache, int token, int last_token) {
// accel.hbm.layer_norm accel operator node, storage data in runtime1 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 194, 5951488);
  CSB_Write(device, 195, ((kvcache ? 0 : 1) ? (64948224 + (((token - last_token) - 1) * 64)) : 64948224));
  CSB_Write(device, 196, ((kvcache ? 0 : 1) ? ((64 * (token - last_token)) * 1) : 64));
  CSB_Write(device, 197, ((kvcache ? 0 : 1) ? (64 * (token - last_token)) : 64));
  CSB_Write(device, 198, 81725440);
  CSB_Write(device, 199, 64);
  CSB_Write(device, 200, 64);
  CSB_Write(device, 201, 128);
  CSB_Write(device, 202, 1);
  CSB_Write(device, 203, 1);
  CSB_Write(device, 204, 1);
  CSB_Write(device, 205, 155648);
  CSB_Write(device, 206, 8);
  CSB_Write(device, 207, 0);
  CSB_Write(device, 208, 0);
  CSB_Write(device, 209, 32);
#ifdef PRINT_target
printf("start: target421!\n");
#endif
  while(CSB_Read(device, 193) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.layer_norm run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}

void target422 (HANDLE& device) {
// accel.hbm.mvm_bn accel operator node, storage data in runtime2 with 0 offset
#ifdef REGS_DEBUG
LARGE_INTEGER start_run;
LARGE_INTEGER stop_run;
LARGE_INTEGER freq;
double time_sec0;
QueryPerformanceFrequency(&freq);
QueryPerformanceCounter(&start_run);
for (int i = 0; i < 1000; i=i+1) {
#endif
  CSB_Write(device, 2, 4096);
  CSB_Write(device, 3, 1);
  CSB_Write(device, 4, 1);
  CSB_Write(device, 5, 1);
  CSB_Write(device, 6, 1);
  CSB_Write(device, 7, 1024);
  CSB_Write(device, 8, 512);
  CSB_Write(device, 9, 1);
  CSB_Write(device, 10, 81725440);
  CSB_Write(device, 11, 92051456);
  CSB_Write(device, 12, 16896);
  CSB_Write(device, 13, 137824256);
  CSB_Write(device, 14, 63);
  CSB_Write(device, 15, 28);
  CSB_Write(device, 16, 0);
  CSB_Write(device, 17, 64948224);
  CSB_Write(device, 18, 0);
  CSB_Write(device, 19, 0);
  CSB_Write(device, 20, 0);
  CSB_Write(device, 21, 1);
  CSB_Write(device, 22, 1);
  CSB_Write(device, 23, 1);
  CSB_Write(device, 24, 1);
  CSB_Write(device, 25, 0);
  CSB_Write(device, 26, 5967872);
  CSB_Write(device, 27, 0);
  CSB_Write(device, 28, 0);
  CSB_Write(device, 29, 64);
  CSB_Write(device, 30, 64);
  CSB_Write(device, 31, 64);
  CSB_Write(device, 32, 64);
  CSB_Write(device, 33, 2847);
#ifdef PRINT_target
printf("start: target422!\n");
#endif
  while(CSB_Read(device, 40) != 1) {}
#ifdef REGS_DEBUG
}
QueryPerformanceCounter(&stop_run);
time_sec0 = (unsigned long long)(stop_run.QuadPart - start_run.QuadPart) / (double)freq.QuadPart;
printf("accel.hbm.mvm_bn run time     = %fs(1000 times), %fs(1 times) \n",time_sec0, time_sec0/1000);
#endif
}


void chatglm2_2048_0720_0013(HANDLE& device, int token, int kvcache, int last_token) {
  target1(device, kvcache, token, last_token);
  target2(device, kvcache, token, last_token);
  target3(device, kvcache, token, last_token);
  target4(device, kvcache, token, last_token);
  target5(device, kvcache, token, last_token);
  target6(device, kvcache, token, last_token);
  target7(device, kvcache, token, last_token);
  target8(device, kvcache, token, last_token);
  target9(device, kvcache, token, last_token);
  target10(device, kvcache, token, last_token);
  target11(device, kvcache, token, last_token);
  target12(device, kvcache, token, last_token);
  target13(device, kvcache, token, last_token);
  target14(device, kvcache, token, last_token);
  target15(device, kvcache, token, last_token);
  target16(device, kvcache, token, last_token);
  target17(device, kvcache, token, last_token);
  target18(device, kvcache, token, last_token);
  target19(device, kvcache, token, last_token);
  target20(device, kvcache, token, last_token);
  target21(device, kvcache, token, last_token);
  target22(device, kvcache, token, last_token);
  target23(device, kvcache, token, last_token);
  target24(device, kvcache, token, last_token);
  target25(device, kvcache, token, last_token);
  target26(device, kvcache, token, last_token);
  target27(device, kvcache, token, last_token);
  target28(device, kvcache, token, last_token);
  target29(device, kvcache, token, last_token);
  target30(device, kvcache, token, last_token);
  target31(device, kvcache, token, last_token);
  target32(device, kvcache, token, last_token);
  target33(device, kvcache, token, last_token);
  target34(device, kvcache, token, last_token);
  target35(device, kvcache, token, last_token);
  target36(device, kvcache, token, last_token);
  target37(device, kvcache, token, last_token);
  target38(device, kvcache, token, last_token);
  target39(device, kvcache, token, last_token);
  target40(device, kvcache, token, last_token);
  target41(device, kvcache, token, last_token);
  target42(device, kvcache, token, last_token);
  target43(device, kvcache, token, last_token);
  target44(device, kvcache, token, last_token);
  target45(device, kvcache, token, last_token);
  target46(device, kvcache, token, last_token);
  target47(device, kvcache, token, last_token);
  target48(device, kvcache, token, last_token);
  target49(device, kvcache, token, last_token);
  target50(device, kvcache, token, last_token);
  target51(device, kvcache, token, last_token);
  target52(device, kvcache, token, last_token);
  target53(device, kvcache, token, last_token);
  target54(device, kvcache, token, last_token);
  target55(device, kvcache, token, last_token);
  target56(device, kvcache, token, last_token);
  target57(device, kvcache, token, last_token);
  target58(device, kvcache, token, last_token);
  target59(device, kvcache, token, last_token);
  target60(device, kvcache, token, last_token);
  target61(device, kvcache, token, last_token);
  target62(device, kvcache, token, last_token);
  target63(device, kvcache, token, last_token);
  target64(device, kvcache, token, last_token);
  target65(device, kvcache, token, last_token);
  target66(device, kvcache, token, last_token);
  target67(device, kvcache, token, last_token);
  target68(device, kvcache, token, last_token);
  target69(device, kvcache, token, last_token);
  target70(device, kvcache, token, last_token);
  target71(device, kvcache, token, last_token);
  target72(device, kvcache, token, last_token);
  target73(device, kvcache, token, last_token);
  target74(device, kvcache, token, last_token);
  target75(device, kvcache, token, last_token);
  target76(device, kvcache, token, last_token);
  target77(device, kvcache, token, last_token);
  target78(device, kvcache, token, last_token);
  target79(device, kvcache, token, last_token);
  target80(device, kvcache, token, last_token);
  target81(device, kvcache, token, last_token);
  target82(device, kvcache, token, last_token);
  target83(device, kvcache, token, last_token);
  target84(device, kvcache, token, last_token);
  target85(device, kvcache, token, last_token);
  target86(device, kvcache, token, last_token);
  target87(device, kvcache, token, last_token);
  target88(device, kvcache, token, last_token);
  target89(device, kvcache, token, last_token);
  target90(device, kvcache, token, last_token);
  target91(device, kvcache, token, last_token);
  target92(device, kvcache, token, last_token);
  target93(device, kvcache, token, last_token);
  target94(device, kvcache, token, last_token);
  target95(device, kvcache, token, last_token);
  target96(device, kvcache, token, last_token);
  target97(device, kvcache, token, last_token);
  target98(device, kvcache, token, last_token);
  target99(device, kvcache, token, last_token);
  target100(device, kvcache, token, last_token);
  target101(device, kvcache, token, last_token);
  target102(device, kvcache, token, last_token);
  target103(device, kvcache, token, last_token);
  target104(device, kvcache, token, last_token);
  target105(device, kvcache, token, last_token);
  target106(device, kvcache, token, last_token);
  target107(device, kvcache, token, last_token);
  target108(device, kvcache, token, last_token);
  target109(device, kvcache, token, last_token);
  target110(device, kvcache, token, last_token);
  target111(device, kvcache, token, last_token);
  target112(device, kvcache, token, last_token);
  target113(device, kvcache, token, last_token);
  target114(device, kvcache, token, last_token);
  target115(device, kvcache, token, last_token);
  target116(device, kvcache, token, last_token);
  target117(device, kvcache, token, last_token);
  target118(device, kvcache, token, last_token);
  target119(device, kvcache, token, last_token);
  target120(device, kvcache, token, last_token);
  target121(device, kvcache, token, last_token);
  target122(device, kvcache, token, last_token);
  target123(device, kvcache, token, last_token);
  target124(device, kvcache, token, last_token);
  target125(device, kvcache, token, last_token);
  target126(device, kvcache, token, last_token);
  target127(device, kvcache, token, last_token);
  target128(device, kvcache, token, last_token);
  target129(device, kvcache, token, last_token);
  target130(device, kvcache, token, last_token);
  target131(device, kvcache, token, last_token);
  target132(device, kvcache, token, last_token);
  target133(device, kvcache, token, last_token);
  target134(device, kvcache, token, last_token);
  target135(device, kvcache, token, last_token);
  target136(device, kvcache, token, last_token);
  target137(device, kvcache, token, last_token);
  target138(device, kvcache, token, last_token);
  target139(device, kvcache, token, last_token);
  target140(device, kvcache, token, last_token);
  target141(device, kvcache, token, last_token);
  target142(device, kvcache, token, last_token);
  target143(device, kvcache, token, last_token);
  target144(device, kvcache, token, last_token);
  target145(device, kvcache, token, last_token);
  target146(device, kvcache, token, last_token);
  target147(device, kvcache, token, last_token);
  target148(device, kvcache, token, last_token);
  target149(device, kvcache, token, last_token);
  target150(device, kvcache, token, last_token);
  target151(device, kvcache, token, last_token);
  target152(device, kvcache, token, last_token);
  target153(device, kvcache, token, last_token);
  target154(device, kvcache, token, last_token);
  target155(device, kvcache, token, last_token);
  target156(device, kvcache, token, last_token);
  target157(device, kvcache, token, last_token);
  target158(device, kvcache, token, last_token);
  target159(device, kvcache, token, last_token);
  target160(device, kvcache, token, last_token);
  target161(device, kvcache, token, last_token);
  target162(device, kvcache, token, last_token);
  target163(device, kvcache, token, last_token);
  target164(device, kvcache, token, last_token);
  target165(device, kvcache, token, last_token);
  target166(device, kvcache, token, last_token);
  target167(device, kvcache, token, last_token);
  target168(device, kvcache, token, last_token);
  target169(device, kvcache, token, last_token);
  target170(device, kvcache, token, last_token);
  target171(device, kvcache, token, last_token);
  target172(device, kvcache, token, last_token);
  target173(device, kvcache, token, last_token);
  target174(device, kvcache, token, last_token);
  target175(device, kvcache, token, last_token);
  target176(device, kvcache, token, last_token);
  target177(device, kvcache, token, last_token);
  target178(device, kvcache, token, last_token);
  target179(device, kvcache, token, last_token);
  target180(device, kvcache, token, last_token);
  target181(device, kvcache, token, last_token);
  target182(device, kvcache, token, last_token);
  target183(device, kvcache, token, last_token);
  target184(device, kvcache, token, last_token);
  target185(device, kvcache, token, last_token);
  target186(device, kvcache, token, last_token);
  target187(device, kvcache, token, last_token);
  target188(device, kvcache, token, last_token);
  target189(device, kvcache, token, last_token);
  target190(device, kvcache, token, last_token);
  target191(device, kvcache, token, last_token);
  target192(device, kvcache, token, last_token);
  target193(device, kvcache, token, last_token);
  target194(device, kvcache, token, last_token);
  target195(device, kvcache, token, last_token);
  target196(device, kvcache, token, last_token);
  target197(device, kvcache, token, last_token);
  target198(device, kvcache, token, last_token);
  target199(device, kvcache, token, last_token);
  target200(device, kvcache, token, last_token);
  target201(device, kvcache, token, last_token);
  target202(device, kvcache, token, last_token);
  target203(device, kvcache, token, last_token);
  target204(device, kvcache, token, last_token);
  target205(device, kvcache, token, last_token);
  target206(device, kvcache, token, last_token);
  target207(device, kvcache, token, last_token);
  target208(device, kvcache, token, last_token);
  target209(device, kvcache, token, last_token);
  target210(device, kvcache, token, last_token);
  target211(device, kvcache, token, last_token);
  target212(device, kvcache, token, last_token);
  target213(device, kvcache, token, last_token);
  target214(device, kvcache, token, last_token);
  target215(device, kvcache, token, last_token);
  target216(device, kvcache, token, last_token);
  target217(device, kvcache, token, last_token);
  target218(device, kvcache, token, last_token);
  target219(device, kvcache, token, last_token);
  target220(device, kvcache, token, last_token);
  target221(device, kvcache, token, last_token);
  target222(device, kvcache, token, last_token);
  target223(device, kvcache, token, last_token);
  target224(device, kvcache, token, last_token);
  target225(device, kvcache, token, last_token);
  target226(device, kvcache, token, last_token);
  target227(device, kvcache, token, last_token);
  target228(device, kvcache, token, last_token);
  target229(device, kvcache, token, last_token);
  target230(device, kvcache, token, last_token);
  target231(device, kvcache, token, last_token);
  target232(device, kvcache, token, last_token);
  target233(device, kvcache, token, last_token);
  target234(device, kvcache, token, last_token);
  target235(device, kvcache, token, last_token);
  target236(device, kvcache, token, last_token);
  target237(device, kvcache, token, last_token);
  target238(device, kvcache, token, last_token);
  target239(device, kvcache, token, last_token);
  target240(device, kvcache, token, last_token);
  target241(device, kvcache, token, last_token);
  target242(device, kvcache, token, last_token);
  target243(device, kvcache, token, last_token);
  target244(device, kvcache, token, last_token);
  target245(device, kvcache, token, last_token);
  target246(device, kvcache, token, last_token);
  target247(device, kvcache, token, last_token);
  target248(device, kvcache, token, last_token);
  target249(device, kvcache, token, last_token);
  target250(device, kvcache, token, last_token);
  target251(device, kvcache, token, last_token);
  target252(device, kvcache, token, last_token);
  target253(device, kvcache, token, last_token);
  target254(device, kvcache, token, last_token);
  target255(device, kvcache, token, last_token);
  target256(device, kvcache, token, last_token);
  target257(device, kvcache, token, last_token);
  target258(device, kvcache, token, last_token);
  target259(device, kvcache, token, last_token);
  target260(device, kvcache, token, last_token);
  target261(device, kvcache, token, last_token);
  target262(device, kvcache, token, last_token);
  target263(device, kvcache, token, last_token);
  target264(device, kvcache, token, last_token);
  target265(device, kvcache, token, last_token);
  target266(device, kvcache, token, last_token);
  target267(device, kvcache, token, last_token);
  target268(device, kvcache, token, last_token);
  target269(device, kvcache, token, last_token);
  target270(device, kvcache, token, last_token);
  target271(device, kvcache, token, last_token);
  target272(device, kvcache, token, last_token);
  target273(device, kvcache, token, last_token);
  target274(device, kvcache, token, last_token);
  target275(device, kvcache, token, last_token);
  target276(device, kvcache, token, last_token);
  target277(device, kvcache, token, last_token);
  target278(device, kvcache, token, last_token);
  target279(device, kvcache, token, last_token);
  target280(device, kvcache, token, last_token);
  target281(device, kvcache, token, last_token);
  target282(device, kvcache, token, last_token);
  target283(device, kvcache, token, last_token);
  target284(device, kvcache, token, last_token);
  target285(device, kvcache, token, last_token);
  target286(device, kvcache, token, last_token);
  target287(device, kvcache, token, last_token);
  target288(device, kvcache, token, last_token);
  target289(device, kvcache, token, last_token);
  target290(device, kvcache, token, last_token);
  target291(device, kvcache, token, last_token);
  target292(device, kvcache, token, last_token);
  target293(device, kvcache, token, last_token);
  target294(device, kvcache, token, last_token);
  target295(device, kvcache, token, last_token);
  target296(device, kvcache, token, last_token);
  target297(device, kvcache, token, last_token);
  target298(device, kvcache, token, last_token);
  target299(device, kvcache, token, last_token);
  target300(device, kvcache, token, last_token);
  target301(device, kvcache, token, last_token);
  target302(device, kvcache, token, last_token);
  target303(device, kvcache, token, last_token);
  target304(device, kvcache, token, last_token);
  target305(device, kvcache, token, last_token);
  target306(device, kvcache, token, last_token);
  target307(device, kvcache, token, last_token);
  target308(device, kvcache, token, last_token);
  target309(device, kvcache, token, last_token);
  target310(device, kvcache, token, last_token);
  target311(device, kvcache, token, last_token);
  target312(device, kvcache, token, last_token);
  target313(device, kvcache, token, last_token);
  target314(device, kvcache, token, last_token);
  target315(device, kvcache, token, last_token);
  target316(device, kvcache, token, last_token);
  target317(device, kvcache, token, last_token);
  target318(device, kvcache, token, last_token);
  target319(device, kvcache, token, last_token);
  target320(device, kvcache, token, last_token);
  target321(device, kvcache, token, last_token);
  target322(device, kvcache, token, last_token);
  target323(device, kvcache, token, last_token);
  target324(device, kvcache, token, last_token);
  target325(device, kvcache, token, last_token);
  target326(device, kvcache, token, last_token);
  target327(device, kvcache, token, last_token);
  target328(device, kvcache, token, last_token);
  target329(device, kvcache, token, last_token);
  target330(device, kvcache, token, last_token);
  target331(device, kvcache, token, last_token);
  target332(device, kvcache, token, last_token);
  target333(device, kvcache, token, last_token);
  target334(device, kvcache, token, last_token);
  target335(device, kvcache, token, last_token);
  target336(device, kvcache, token, last_token);
  target337(device, kvcache, token, last_token);
  target338(device, kvcache, token, last_token);
  target339(device, kvcache, token, last_token);
  target340(device, kvcache, token, last_token);
  target341(device, kvcache, token, last_token);
  target342(device, kvcache, token, last_token);
  target343(device, kvcache, token, last_token);
  target344(device, kvcache, token, last_token);
  target345(device, kvcache, token, last_token);
  target346(device, kvcache, token, last_token);
  target347(device, kvcache, token, last_token);
  target348(device, kvcache, token, last_token);
  target349(device, kvcache, token, last_token);
  target350(device, kvcache, token, last_token);
  target351(device, kvcache, token, last_token);
  target352(device, kvcache, token, last_token);
  target353(device, kvcache, token, last_token);
  target354(device, kvcache, token, last_token);
  target355(device, kvcache, token, last_token);
  target356(device, kvcache, token, last_token);
  target357(device, kvcache, token, last_token);
  target358(device, kvcache, token, last_token);
  target359(device, kvcache, token, last_token);
  target360(device, kvcache, token, last_token);
  target361(device, kvcache, token, last_token);
  target362(device, kvcache, token, last_token);
  target363(device, kvcache, token, last_token);
  target364(device, kvcache, token, last_token);
  target365(device, kvcache, token, last_token);
  target366(device, kvcache, token, last_token);
  target367(device, kvcache, token, last_token);
  target368(device, kvcache, token, last_token);
  target369(device, kvcache, token, last_token);
  target370(device, kvcache, token, last_token);
  target371(device, kvcache, token, last_token);
  target372(device, kvcache, token, last_token);
  target373(device, kvcache, token, last_token);
  target374(device, kvcache, token, last_token);
  target375(device, kvcache, token, last_token);
  target376(device, kvcache, token, last_token);
  target377(device, kvcache, token, last_token);
  target378(device, kvcache, token, last_token);
  target379(device, kvcache, token, last_token);
  target380(device, kvcache, token, last_token);
  target381(device, kvcache, token, last_token);
  target382(device, kvcache, token, last_token);
  target383(device, kvcache, token, last_token);
  target384(device, kvcache, token, last_token);
  target385(device, kvcache, token, last_token);
  target386(device, kvcache, token, last_token);
  target387(device, kvcache, token, last_token);
  target388(device, kvcache, token, last_token);
  target389(device, kvcache, token, last_token);
  target390(device, kvcache, token, last_token);
  target391(device, kvcache, token, last_token);
  target392(device, kvcache, token, last_token);
  target393(device, kvcache, token, last_token);
  target394(device, kvcache, token, last_token);
  target395(device, kvcache, token, last_token);
  target396(device, kvcache, token, last_token);
  target397(device, kvcache, token, last_token);
  target398(device, kvcache, token, last_token);
  target399(device, kvcache, token, last_token);
  target400(device, kvcache, token, last_token);
  target401(device, kvcache, token, last_token);
  target402(device, kvcache, token, last_token);
  target403(device, kvcache, token, last_token);
  target404(device, kvcache, token, last_token);
  target405(device, kvcache, token, last_token);
  target406(device, kvcache, token, last_token);
  target407(device, kvcache, token, last_token);
  target408(device, kvcache, token, last_token);
  target409(device, kvcache, token, last_token);
  target410(device, kvcache, token, last_token);
  target411(device, kvcache, token, last_token);
  target412(device, kvcache, token, last_token);
  target413(device, kvcache, token, last_token);
  target414(device, kvcache, token, last_token);
  target415(device, kvcache, token, last_token);
  target416(device, kvcache, token, last_token);
  target417(device, kvcache, token, last_token);
  target418(device, kvcache, token, last_token);
  target419(device, kvcache, token, last_token);
  target420(device, kvcache, token, last_token);
  target421(device, kvcache, token, last_token);
  target422(device);
}
