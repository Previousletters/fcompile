from .. import cir
from ..utils import list2str
from .base import np2bytes
from .function import *
from time import strftime, localtime


def gen_static(name, byte, const=1, ctype="uint8_t"):
    if const:
        return f"static const {ctype}* {name};"
    else:
        return f"static {ctype} {name}[{byte}];"


class CCodeGen:

    tab = "  "

    def build(self, mod, prefix="TVMWrap", debug=True):
        self.debug = debug
        self.prefix = prefix
        self.analysis(mod)
        self.get_source(prefix)
        return self.runtime, self.params, self.source

    def analysis(self, mod):
        self.glb_vars = []
        self.glb_defs = []
        self.inits = []
        self.rtrun = []
        self.addrs = []
        self.params = b""
        self.source = []
        self.inputs = []
        self.outputs = []
        self.dynamic = []

        func_map = {
            "var": self.node_var,
            "cir": self.node_cir,
            "cvar": self.node_cvar,
            "demap": self.node_demap,
        }
        for node in mod:
            func_map[node["node"]](node)

    def node_var(self, var):
        self.glb_vars.append(gen_static(var["name"], var["args"][0], const=0))
        self.addrs.append(var["name"])
        if var["attrs"][0] == "input":
            self.inputs.append(var["name"])
        elif var["attrs"][0] == "output":
            self.outputs.append(var["name"])

    def node_cvar(self, cvar):
        self.glb_vars.append(gen_static(cvar["name"], None, const=1))
        self.addrs.append(cvar["name"])
        self.params += np2bytes(cvar["data"])

    def node_demap(self, demap):
        func_args, func_attrs = demap["args"], demap["attrs"]
        shape_attr = list2str(func_attrs[1])
        func = f"demap_{func_attrs[0]}((void*){self.addrs[func_args[0]][0]}, {self.addrs[func_args[1]]}, {self.addrs[func_args[0]][1]}, {shape_attr});"
        self.rtrun.append(func)
        self.addrs.append(self.addrs[func_args[1]])

    def node_cir(self, ncir):
        mod = cir.Dynamic.JIT(ncir["source"])
        self.source.append(cir.CodeGen(mod).gen_head(ncir["name"]))
        for name, in_node in mod["inputs"].items():
            shape_attr = list2str(in_node[4])
            func = f"map_{in_node[3]}({self.addrs[in_node[2]]}, (void*){in_node[0]}, {in_node[1]}, {shape_attr});"
            self.rtrun.append(func)
        self.dynamic += mod["attrs"]
        name = ncir["name"]
        if len(mod["attrs"]):
            attrs = ", ".join(mod["attrs"])
            func = f"{name}(device, {attrs});"
            attrs_def = ", ".join(["int " + i for i in mod["attrs"]])
            func_def = f"void {name}(HANDLE device, {attrs_def});"
        else:
            func = f"{name}(device);"
            func_def = f"void {name}(HANDLE device);"
        self.rtrun.append(func)
        self.glb_defs.append(func_def)
        self.addrs.append(list(mod["output"].values())[0])

    def get_source(self, prefix):
        local_time = strftime('%Y-%m-%d %H:%M:%S', localtime())
        glb_vars = "\n".join(self.glb_vars)
        glb_defs = "\n".join(self.glb_defs)
        inits = "\n".join([self.tab + s for s in self.inits])
        input_len = len(self.inputs)
        input_ptr = ", ".join(["(uintptr_t)" + i for i in self.inputs])
        output_len = len(self.outputs)
        output_ptr = ", ".join(["(uintptr_t)" + i for i in self.outputs])
        rtrun = "\n".join([self.tab + s for s in self.rtrun])
        rtargs = "HANDLE device"
        if len(self.dynamic):
            rtargs += ", ".join(["int " + i for i in self.dynamic])

        source_map = {
            "local_time": local_time, "prefix": prefix,
            "glb_vars": glb_vars, "glb_defs": glb_defs,
            "input_len": input_len, "input_ptr": input_ptr,
            "output_len": output_len, "output_ptr": output_ptr,
            "rtrun": rtrun, "rtargs": rtargs, "inits": inits,
        }

        self.runtime = """// generated by fcompile.codegen.CIRCodeGen at %(local_time)s
#include <time.h>
#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>
#include <string.h>

#include "faccel.h"

%(glb_vars)s
%(glb_defs)s

void %(prefix)sInit() {
%(inits)s
}

void* %(prefix)sGetInputPtr(int index) {
  uintptr_t array_ptr[%(input_len)d] = { %(input_ptr)s };
  return (void*)array_ptr[index];
}

void* %(prefix)sGetOutputPtr(int index) {
  uintptr_t array_ptr[%(output_len)s] = { %(output_ptr)s };
  return (void*)array_ptr[index];
}

void %(prefix)sRun(%(rtargs)s) {
%(rtrun)s
}""" % source_map
