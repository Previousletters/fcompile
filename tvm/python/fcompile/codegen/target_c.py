from .base import BaseCodeGen, OpType, np2bytes
from .function import *
from time import strftime, localtime


class Malloc:

    def static(self, name, dtype, attrs):
        self.var = "static " + dtype + " " + name + ";"
        if dtype == OpType.f_ddr:
            return self.f_ddr(name, attrs)
        elif dtype == OpType.w_ddr:
            return self.w_ddr(name, attrs)
        elif dtype == OpType.const:
            return self.const(name, attrs)
        elif dtype == OpType.c_ptr:
            return self.c_ptr(name, attrs)

    def f_ddr(self, name, attrs):
        init = MallocFeature(name, attrs, prefix=0)
        return self.var, init

    def w_ddr(self, name, attrs):
        init = MallocWeight(name, attrs, prefix=0)
        return self.var, init

    def const(self, name, attrs):
        params = f"{name} = ({OpType.c_ptr})params; params += {attrs[0]};"
        return self.var, params

    def c_ptr(self, name, attrs):
        init = f"{name} = ({OpType.c_ptr})malloc({attrs[0]});"
        return self.var, init


class CCodeGen(BaseCodeGen):

    def build(self, jit, prefix="TVMWrap"):
        self.analysis(jit)
        params = b"".join([np2bytes(data) for data in self.datas])
        return self.get_source(prefix), params

    def analysis(self, jit):
        self.static = []
        self.inits  = []
        self.params = []
        self.inputs = []
        self.outputs = []
        self.funcops = []
        self.datas = []

        for node in jit:
            self.node_type = node["node_type"]
            if self.node_type == "var":
                self.inputs.append(node["return"])
            elif self.node_type == "output":
                self.outputs.append(node["return"])
            for key, value in node.items():
                self.gen(key, value)

    def gen_static(self, value):
        name, dtype, attrs = value["name"], value["type"], value["attrs"]
        var, init = Malloc().static(name, dtype, attrs)
        self.static.append(var)
        if self.node_type == "const":
            self.params.append(init)
        else:
            self.inits.append(init)

    def gen_params(self, value):
        self.params += value

    def gen_callop(self, value):
        self.funcops += value

    def gen_data(self, value):
        self.datas.append(value[1])

    def get_source(self, prefix):
        local_time = strftime('%Y-%m-%d %H:%M:%S',localtime())
        static = "\n".join(self.static)
        init = "\n".join(["  " + s for s in self.inits])
        params = "\n".join(["  " + s for s in self.params])
        input_cmt = "\n".join([f"// input {n}: " + shape2str(i["shape"])
                               for n, i in enumerate(self.inputs)])
        input_len = len(self.inputs)
        input_ptr = ", ".join(["(uintptr_t)" + i["name"] for i in self.inputs])
        output_cmt = "\n".join([f"// output {n}: " + shape2str(i["shape"])
                               for n, i in enumerate(self.outputs)])
        output_len = len(self.outputs)
        output_ptr = ", ".join(["(uintptr_t)" + i["name"] for i in self.outputs])
        funcops = "\n".join(["  " + s for s in self.funcops])

        source_map = {
            "local_time" : local_time, "prefix" : prefix, "static" : static, 
            "params" : params, "input_cmt" : input_cmt, "input_len" : input_len,
            "input_ptr" : input_ptr, "output_cmt" : output_cmt, "output_len" : output_len,
            "output_ptr" : output_ptr, "funcops" : funcops, "init" : init,
        } 

        source = """ // generated by fcompile.codegen.CCodeGen at %(local_time)s
#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>
#include <string.h>

#include <faccel.h>

%(static)s

void %(prefix)sInit() {
%(init)s
}

void %(prefix)sSetParams(char* params) {
%(params)s
}

%(input_cmt)s
void* %(prefix)sGetInputPtr(int index) {
  uintptr_t array_ptr[%(input_len)d] = { %(input_ptr)s };
  return (void*)array_ptr[index];
}

%(output_cmt)s
void* %(prefix)sGetOutputPtr(int index) {
  uintptr_t array_ptr[%(output_len)s] = { %(output_ptr)s };
  return (void*)array_ptr[index];
}

void %(prefix)sRun() {
%(funcops)s
}""" % source_map
        return source